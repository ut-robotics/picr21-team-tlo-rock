
TLO_Rock_PCB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005214  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053fc  080053fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053fc  080053fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000010  08005410  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08005410  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152f9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002752  00000000  00000000  00035335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00038cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e181  00000000  00000000  00039dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c10  00000000  00000000  00057f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3bf9  00000000  00000000  0006bb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f74a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e8c  00000000  00000000  0012f7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080053d4 	.word	0x080053d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080053d4 	.word	0x080053d4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f001 fab5 	bl	8001f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f88a 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 fd2a 	bl	8001468 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000a14:	f000 f8d2 	bl	8000bbc <MX_I2C3_Init>
  MX_TIM2_Init();
 8000a18:	f000 f99c 	bl	8000d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a1c:	f000 fa28 	bl	8000e70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a20:	f000 fa7c 	bl	8000f1c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000a24:	f000 fb06 	bl	8001034 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000a28:	f000 fb5e 	bl	80010e8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000a2c:	f000 fc00 	bl	8001230 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a30:	f000 fc78 	bl	8001324 <MX_TIM17_Init>
  MX_USB_PCD_Init();
 8000a34:	f000 fcf0 	bl	8001418 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000a38:	f000 f900 	bl	8000c3c <MX_TIM1_Init>
  MX_TIM6_Init();
 8000a3c:	f000 fac4 	bl	8000fc8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	482b      	ldr	r0, [pc, #172]	; (8000af4 <main+0xf0>)
 8000a46:	f001 fdbb 	bl	80025c0 <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 8000a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a4e:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a54:	2104      	movs	r1, #4
 8000a56:	4828      	ldr	r0, [pc, #160]	; (8000af8 <main+0xf4>)
 8000a58:	f003 f8ba 	bl	8003bd0 <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f001 fafb 	bl	8002058 <HAL_Delay>
  TIM2->CCR2 = 65536;
 8000a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38

  //motorspeeds to zero
  TIM2->CCR1 = 0;
 8000a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a70:	2200      	movs	r2, #0
 8000a72:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <main+0xf8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 8000a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7e:	2200      	movs	r2, #0
 8000a80:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a82:	2100      	movs	r1, #0
 8000a84:	481c      	ldr	r0, [pc, #112]	; (8000af8 <main+0xf4>)
 8000a86:	f003 f8a3 	bl	8003bd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	481a      	ldr	r0, [pc, #104]	; (8000af8 <main+0xf4>)
 8000a8e:	f003 f89f 	bl	8003bd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a92:	2100      	movs	r1, #0
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <main+0xfc>)
 8000a96:	f003 f89b 	bl	8003bd0 <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4819      	ldr	r0, [pc, #100]	; (8000b04 <main+0x100>)
 8000a9e:	f003 f897 	bl	8003bd0 <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <main+0x104>)
 8000aa4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 8000aaa:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000aae:	f001 fad3 	bl	8002058 <HAL_Delay>

  //enable graber and swt its speed to zero
  TIM17->CCR1 = 0;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <main+0x108>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <main+0x10c>)
 8000abc:	f003 f888 	bl	8003bd0 <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	4814      	ldr	r0, [pc, #80]	; (8000b14 <main+0x110>)
 8000ac4:	f003 fa2a 	bl	8003f1c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4813      	ldr	r0, [pc, #76]	; (8000b18 <main+0x114>)
 8000acc:	f003 fa26 	bl	8003f1c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4812      	ldr	r0, [pc, #72]	; (8000b1c <main+0x118>)
 8000ad4:	f003 fa22 	bl	8003f1c <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <main+0x11c>)
 8000ada:	f002 ffb7 	bl	8003a4c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <main+0xf0>)
 8000ae4:	f001 fd6c 	bl	80025c0 <HAL_GPIO_WritePin>
	  TIM2->CCR1 = 1000;
 8000ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af0:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 8000af2:	e7f4      	b.n	8000ade <main+0xda>
 8000af4:	48000400 	.word	0x48000400
 8000af8:	200002b8 	.word	0x200002b8
 8000afc:	40014000 	.word	0x40014000
 8000b00:	2000013c 	.word	0x2000013c
 8000b04:	200005f8 	.word	0x200005f8
 8000b08:	40014400 	.word	0x40014400
 8000b0c:	40014800 	.word	0x40014800
 8000b10:	20000188 	.word	0x20000188
 8000b14:	200001d4 	.word	0x200001d4
 8000b18:	200000f0 	.word	0x200000f0
 8000b1c:	200000a4 	.word	0x200000a4
 8000b20:	20000220 	.word	0x20000220

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2238      	movs	r2, #56	; 0x38
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 fc46 	bl	80053c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b4a:	f001 ff87 	bl	8002a5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f821 	bl	8002bc4 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b88:	f000 fe86 	bl	8001898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b90:	2301      	movs	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fb25 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000bb0:	f000 fe72 	bl	8001898 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3750      	adds	r7, #80	; 0x50
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_I2C3_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <MX_I2C3_Init+0x7c>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bf6:	480e      	ldr	r0, [pc, #56]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000bf8:	f001 fcfa 	bl	80025f0 <HAL_I2C_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c02:	f000 fe49 	bl	8001898 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000c0a:	f001 fd80 	bl	800270e <HAL_I2CEx_ConfigAnalogFilter>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c14:	f000 fe40 	bl	8001898 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_I2C3_Init+0x74>)
 8000c1c:	f001 fdc2 	bl	80027a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c26:	f000 fe37 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000058 	.word	0x20000058
 8000c34:	40007800 	.word	0x40007800
 8000c38:	00303d5b 	.word	0x00303d5b

08000c3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b098      	sub	sp, #96	; 0x60
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2234      	movs	r2, #52	; 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 fbab 	bl	80053c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c70:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <MX_TIM1_Init+0x114>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c74:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c80:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c9a:	482c      	ldr	r0, [pc, #176]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000c9c:	f002 ff40 	bl	8003b20 <HAL_TIM_PWM_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 fdf7 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4823      	ldr	r0, [pc, #140]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000cbe:	f004 f9b9 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cc8:	f000 fde6 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ccc:	2360      	movs	r3, #96	; 0x60
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000ce0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000cea:	f003 fb25 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000cf4:	f000 fdd0 	bl	8001898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_TIM1_Init+0x110>)
 8000d36:	f004 f9ff 	bl	8005138 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000d40:	f000 fdaa 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3760      	adds	r7, #96	; 0x60
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000026c 	.word	0x2000026c
 8000d50:	40012c00 	.word	0x40012c00

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dae:	482f      	ldr	r0, [pc, #188]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000db0:	f002 fdf4 	bl	800399c <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dba:	f000 fd6d 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4828      	ldr	r0, [pc, #160]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000dcc:	f003 fbc8 	bl	8004560 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dd6:	f000 fd5f 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dda:	4824      	ldr	r0, [pc, #144]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000ddc:	f002 fea0 	bl	8003b20 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000de6:	f000 fd57 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	481c      	ldr	r0, [pc, #112]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000dfa:	f004 f91b 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e04:	f000 fd48 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2360      	movs	r3, #96	; 0x60
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 31250;
 8000e0c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000e10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000e22:	f003 fa89 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e2c:	f000 fd34 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	2204      	movs	r2, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000e38:	f003 fa7e 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e42:	f000 fd29 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	2208      	movs	r2, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000e4e:	f003 fa73 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000e58:	f000 fd1e 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000e5e:	f000 ff15 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3738      	adds	r7, #56	; 0x38
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200002b8 	.word	0x200002b8

08000e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2224      	movs	r2, #36	; 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 faa0 	bl	80053c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <MX_TIM3_Init+0xa8>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000ee0:	f002 ff76 	bl	8003dd0 <HAL_TIM_Encoder_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000eea:	f000 fcd5 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000efc:	f004 f89a 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f06:	f000 fcc7 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001d4 	.word	0x200001d4
 8000f18:	40000400 	.word	0x40000400

08000f1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2224      	movs	r2, #36	; 0x24
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fa4a 	bl	80053c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f3c:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <MX_TIM4_Init+0xa8>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f8c:	f002 ff20 	bl	8003dd0 <HAL_TIM_Encoder_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f96:	f000 fc7f 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000fa8:	f004 f844 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000fb2:	f000 fc71 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000f0 	.word	0x200000f0
 8000fc4:	40000800 	.word	0x40000800

08000fc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_TIM6_Init+0x64>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_TIM6_Init+0x64>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_TIM6_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_TIM6_Init+0x64>)
 8000fec:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ff0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_TIM6_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_TIM6_Init+0x64>)
 8000ffa:	f002 fccf 	bl	800399c <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001004:	f000 fc48 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM6_Init+0x64>)
 8001016:	f004 f80d 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 fc3a 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000220 	.word	0x20000220
 8001030:	40001000 	.word	0x40001000

08001034 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f9be 	bl	80053c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_TIM8_Init+0xac>)
 8001054:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <MX_TIM8_Init+0xb0>)
 8001056:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_TIM8_Init+0xac>)
 800105a:	2205      	movs	r2, #5
 800105c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_TIM8_Init+0xac>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64000;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_TIM8_Init+0xac>)
 8001066:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800106a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_TIM8_Init+0xac>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_TIM8_Init+0xac>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_TIM8_Init+0xac>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800107e:	2301      	movs	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_TIM8_Init+0xac>)
 80010aa:	f002 fe91 	bl	8003dd0 <HAL_TIM_Encoder_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80010b4:	f000 fbf0 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM8_Init+0xac>)
 80010ca:	f003 ffb3 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80010d4:	f000 fbe0 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	; 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000a4 	.word	0x200000a4
 80010e4:	40013400 	.word	0x40013400

080010e8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09c      	sub	sp, #112	; 0x70
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2234      	movs	r2, #52	; 0x34
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f004 f94e 	bl	80053c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <MX_TIM15_Init+0x140>)
 800112a:	4a40      	ldr	r2, [pc, #256]	; (800122c <MX_TIM15_Init+0x144>)
 800112c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <MX_TIM15_Init+0x140>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <MX_TIM15_Init+0x140>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <MX_TIM15_Init+0x140>)
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <MX_TIM15_Init+0x140>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <MX_TIM15_Init+0x140>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <MX_TIM15_Init+0x140>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001154:	4834      	ldr	r0, [pc, #208]	; (8001228 <MX_TIM15_Init+0x140>)
 8001156:	f002 fc21 	bl	800399c <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001160:	f000 fb9a 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800116e:	4619      	mov	r1, r3
 8001170:	482d      	ldr	r0, [pc, #180]	; (8001228 <MX_TIM15_Init+0x140>)
 8001172:	f003 f9f5 	bl	8004560 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800117c:	f000 fb8c 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001180:	4829      	ldr	r0, [pc, #164]	; (8001228 <MX_TIM15_Init+0x140>)
 8001182:	f002 fccd 	bl	8003b20 <HAL_TIM_PWM_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800118c:	f000 fb84 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119c:	4619      	mov	r1, r3
 800119e:	4822      	ldr	r0, [pc, #136]	; (8001228 <MX_TIM15_Init+0x140>)
 80011a0:	f003 ff48 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80011aa:	f000 fb75 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ae:	2360      	movs	r3, #96	; 0x60
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 31250;
 80011b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011bc:	2300      	movs	r3, #0
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_TIM15_Init+0x140>)
 80011d6:	f003 f8af 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80011e0:	f000 fb5a 	bl	8001898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_TIM15_Init+0x140>)
 800120c:	f003 ff94 	bl	8005138 <HAL_TIMEx_ConfigBreakDeadTime>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001216:	f000 fb3f 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <MX_TIM15_Init+0x140>)
 800121c:	f000 fd36 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001220:	bf00      	nop
 8001222:	3770      	adds	r7, #112	; 0x70
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000013c 	.word	0x2000013c
 800122c:	40014000 	.word	0x40014000

08001230 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	; 0x50
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	615a      	str	r2, [r3, #20]
 8001248:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2234      	movs	r2, #52	; 0x34
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f004 f8b7 	bl	80053c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_TIM16_Init+0xec>)
 8001258:	4a31      	ldr	r2, [pc, #196]	; (8001320 <MX_TIM16_Init+0xf0>)
 800125a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <MX_TIM16_Init+0xec>)
 800125e:	2204      	movs	r2, #4
 8001260:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <MX_TIM16_Init+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_TIM16_Init+0xec>)
 800126a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800126e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_TIM16_Init+0xec>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <MX_TIM16_Init+0xec>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <MX_TIM16_Init+0xec>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <MX_TIM16_Init+0xec>)
 8001284:	f002 fb8a 	bl	800399c <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800128e:	f000 fb03 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001292:	4822      	ldr	r0, [pc, #136]	; (800131c <MX_TIM16_Init+0xec>)
 8001294:	f002 fc44 	bl	8003b20 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800129e:	f000 fafb 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ae:	2300      	movs	r3, #0
 80012b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	4815      	ldr	r0, [pc, #84]	; (800131c <MX_TIM16_Init+0xec>)
 80012c8:	f003 f836 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80012d2:	f000 fae1 	bl	8001898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM16_Init+0xec>)
 80012fe:	f003 ff1b 	bl	8005138 <HAL_TIMEx_ConfigBreakDeadTime>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001308:	f000 fac6 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM16_Init+0xec>)
 800130e:	f000 fcbd 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200005f8 	.word	0x200005f8
 8001320:	40014400 	.word	0x40014400

08001324 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	; 0x50
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2234      	movs	r2, #52	; 0x34
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 f83d 	bl	80053c4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <MX_TIM17_Init+0xec>)
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <MX_TIM17_Init+0xf0>)
 800134e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <MX_TIM17_Init+0xec>)
 8001352:	2204      	movs	r2, #4
 8001354:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <MX_TIM17_Init+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <MX_TIM17_Init+0xec>)
 800135e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001362:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_TIM17_Init+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <MX_TIM17_Init+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <MX_TIM17_Init+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001376:	4826      	ldr	r0, [pc, #152]	; (8001410 <MX_TIM17_Init+0xec>)
 8001378:	f002 fb10 	bl	800399c <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001382:	f000 fa89 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001386:	4822      	ldr	r0, [pc, #136]	; (8001410 <MX_TIM17_Init+0xec>)
 8001388:	f002 fbca 	bl	8003b20 <HAL_TIM_PWM_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001392:	f000 fa81 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013b6:	2200      	movs	r2, #0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4815      	ldr	r0, [pc, #84]	; (8001410 <MX_TIM17_Init+0xec>)
 80013bc:	f002 ffbc 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80013c6:	f000 fa67 	bl	8001898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM17_Init+0xec>)
 80013f2:	f003 fea1 	bl	8005138 <HAL_TIMEx_ConfigBreakDeadTime>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80013fc:	f000 fa4c 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM17_Init+0xec>)
 8001402:	f000 fc43 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3750      	adds	r7, #80	; 0x50
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000188 	.word	0x20000188
 8001414:	40014800 	.word	0x40014800

08001418 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USB_PCD_Init+0x48>)
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <MX_USB_PCD_Init+0x4c>)
 8001420:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_USB_PCD_Init+0x48>)
 8001424:	2208      	movs	r2, #8
 8001426:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <MX_USB_PCD_Init+0x48>)
 800142a:	2202      	movs	r2, #2
 800142c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USB_PCD_Init+0x48>)
 8001430:	2202      	movs	r2, #2
 8001432:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <MX_USB_PCD_Init+0x48>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USB_PCD_Init+0x48>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <MX_USB_PCD_Init+0x48>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USB_PCD_Init+0x48>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_USB_PCD_Init+0x48>)
 800144e:	f001 f9f5 	bl	800283c <HAL_PCD_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001458:	f000 fa1e 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000304 	.word	0x20000304
 8001464:	40005c00 	.word	0x40005c00

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_GPIO_Init+0xbc>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <MX_GPIO_Init+0xbc>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_GPIO_Init+0xbc>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <MX_GPIO_Init+0xbc>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <MX_GPIO_Init+0xbc>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <MX_GPIO_Init+0xbc>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f240 410a 	movw	r1, #1034	; 0x40a
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b8:	f001 f882 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	4819      	ldr	r0, [pc, #100]	; (8001528 <MX_GPIO_Init+0xc0>)
 80014c2:	f001 f87d 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 80014c6:	f240 430a 	movw	r3, #1034	; 0x40a
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f000 feeb 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 80014e6:	2320      	movs	r3, #32
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f000 fede 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8001500:	2301      	movs	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_GPIO_Init+0xc0>)
 8001518:	f000 fed0 	bl	80022bc <HAL_GPIO_Init>

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	48000400 	.word	0x48000400
 800152c:	00000000 	.word	0x00000000

08001530 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b096      	sub	sp, #88	; 0x58
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	int16_t Cpos_M1 = (int16_t)TIM3->CNT;
 8001538:	4bc5      	ldr	r3, [pc, #788]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t dif_M1 = Cpos_M1 - Lpos_M1;
 8001540:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001544:	4bc3      	ldr	r3, [pc, #780]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	Lpos_M1 = Cpos_M1;
 8001554:	4abf      	ldr	r2, [pc, #764]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001556:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800155a:	8013      	strh	r3, [r2, #0]

	int16_t Cpos_M2 = (int16_t)TIM4->CNT;
 800155c:	4bbe      	ldr	r3, [pc, #760]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t dif_M2 = Cpos_M2 - Lpos_M2;
 8001564:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001568:	4bbc      	ldr	r3, [pc, #752]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	b29b      	uxth	r3, r3
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	Lpos_M2 = Cpos_M2;
 8001578:	4ab8      	ldr	r2, [pc, #736]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800157a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800157e:	8013      	strh	r3, [r2, #0]

	int16_t Cpos_M3 = (int16_t)TIM8->CNT;
 8001580:	4bb7      	ldr	r3, [pc, #732]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t dif_M3 = Cpos_M3 - Lpos_M3;
 8001588:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800158c:	4bb5      	ldr	r3, [pc, #724]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800158e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001592:	b29b      	uxth	r3, r3
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	b29b      	uxth	r3, r3
 8001598:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	Lpos_M3 = Cpos_M3;
 800159c:	4ab1      	ldr	r2, [pc, #708]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800159e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015a2:	8013      	strh	r3, [r2, #0]

	int16_t Err1 = tgt_M1 - dif_M1;
 80015a4:	4bb0      	ldr	r3, [pc, #704]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t Err2 = tgt_M2 - dif_M2;
 80015b8:	4bac      	ldr	r3, [pc, #688]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t Err3 = tgt_M3 - dif_M3;
 80015cc:	4ba8      	ldr	r3, [pc, #672]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80015ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	double pk = 1;
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4ba3      	ldr	r3, [pc, #652]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80015e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double pi = 0;
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double pd = 0;
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	integral_M1 += Err1*0.01;
 8001602:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff58 	bl	80004bc <__aeabi_i2d>
 800160c:	a38e      	add	r3, pc, #568	; (adr r3, 8001848 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe ffbd 	bl	8000590 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	4b96      	ldr	r3, [pc, #600]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fdfe 	bl	8000224 <__adddf3>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4992      	ldr	r1, [pc, #584]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800162e:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M2 += Err2*0.01;
 8001632:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff40 	bl	80004bc <__aeabi_i2d>
 800163c:	a382      	add	r3, pc, #520	; (adr r3, 8001848 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffa5 	bl	8000590 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	4b8b      	ldr	r3, [pc, #556]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe fde6 	bl	8000224 <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4987      	ldr	r1, [pc, #540]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800165e:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M3 += Err3*0.01;
 8001662:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff28 	bl	80004bc <__aeabi_i2d>
 800166c:	a376      	add	r3, pc, #472	; (adr r3, 8001848 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ff8d 	bl	8000590 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	4b80      	ldr	r3, [pc, #512]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fdce 	bl	8000224 <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	497c      	ldr	r1, [pc, #496]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800168e:	e9c1 2300 	strd	r2, r3, [r1]

	double derivative_M1 = (Err1 - last_err_M1) / 0.01;
 8001692:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001696:	4a7b      	ldr	r2, [pc, #492]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001698:	f9b2 2000 	ldrsh.w	r2, [r2]
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff0c 	bl	80004bc <__aeabi_i2d>
 80016a4:	a368      	add	r3, pc, #416	; (adr r3, 8001848 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7ff f89b 	bl	80007e4 <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double derivative_M2 = (Err2 - last_err_M2) / 0.01;
 80016b6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80016ba:	4a73      	ldr	r2, [pc, #460]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fefa 	bl	80004bc <__aeabi_i2d>
 80016c8:	a35f      	add	r3, pc, #380	; (adr r3, 8001848 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7ff f889 	bl	80007e4 <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double derivative_M3 = (Err3 - last_err_M3) / 0.01;
 80016da:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80016de:	4a6b      	ldr	r2, [pc, #428]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80016e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fee8 	bl	80004bc <__aeabi_i2d>
 80016ec:	a356      	add	r3, pc, #344	; (adr r3, 8001848 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7ff f877 	bl	80007e4 <__aeabi_ddiv>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	e9c7 2304 	strd	r2, r3, [r7, #16]

	last_err_M1 = Err1;
 80016fe:	4a61      	ldr	r2, [pc, #388]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001700:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001704:	8013      	strh	r3, [r2, #0]
	last_err_M2 = Err2;
 8001706:	4a60      	ldr	r2, [pc, #384]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001708:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800170c:	8013      	strh	r3, [r2, #0]
	last_err_M3 = Err3;
 800170e:	4a5f      	ldr	r2, [pc, #380]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001710:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001714:	8013      	strh	r3, [r2, #0]

	int16_t Speed_M1 = (int16_t) Err1 * pk + integral_M1 * pi + derivative_M1 * pd;
 8001716:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fece 	bl	80004bc <__aeabi_i2d>
 8001720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001724:	f7fe ff34 	bl	8000590 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4614      	mov	r4, r2
 800172e:	461d      	mov	r5, r3
 8001730:	4b51      	ldr	r3, [pc, #324]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800173a:	f7fe ff29 	bl	8000590 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fd6d 	bl	8000224 <__adddf3>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001756:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800175a:	f7fe ff19 	bl	8000590 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd5d 	bl	8000224 <__adddf3>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f91f 	bl	80009b4 <__aeabi_d2iz>
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
	int16_t Speed_M2 = (int16_t) Err2 * pk + integral_M2 * pi + derivative_M2 * pd;
 800177a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fe9c 	bl	80004bc <__aeabi_i2d>
 8001784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001788:	f7fe ff02 	bl	8000590 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4614      	mov	r4, r2
 8001792:	461d      	mov	r5, r3
 8001794:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800179e:	f7fe fef7 	bl	8000590 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe fd3b 	bl	8000224 <__adddf3>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4614      	mov	r4, r2
 80017b4:	461d      	mov	r5, r3
 80017b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017be:	f7fe fee7 	bl	8000590 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe fd2b 	bl	8000224 <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f8ed 	bl	80009b4 <__aeabi_d2iz>
 80017da:	4603      	mov	r3, r0
 80017dc:	81bb      	strh	r3, [r7, #12]
	int16_t Speed_M3 = (int16_t) Err3 * pk + integral_M3 * pi + derivative_M3 * pd;
 80017de:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe6a 	bl	80004bc <__aeabi_i2d>
 80017e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017ec:	f7fe fed0 	bl	8000590 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	461d      	mov	r5, r3
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001802:	f7fe fec5 	bl	8000590 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe fd09 	bl	8000224 <__adddf3>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	461d      	mov	r5, r3
 800181a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800181e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001822:	f7fe feb5 	bl	8000590 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fcf9 	bl	8000224 <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f8bb 	bl	80009b4 <__aeabi_d2iz>
 800183e:	4603      	mov	r3, r0
 8001840:	817b      	strh	r3, [r7, #10]



}
 8001842:	bf00      	nop
 8001844:	e024      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x360>
 8001846:	bf00      	nop
 8001848:	47ae147b 	.word	0x47ae147b
 800184c:	3f847ae1 	.word	0x3f847ae1
 8001850:	40000400 	.word	0x40000400
 8001854:	2000002c 	.word	0x2000002c
 8001858:	40000800 	.word	0x40000800
 800185c:	2000002e 	.word	0x2000002e
 8001860:	40013400 	.word	0x40013400
 8001864:	20000030 	.word	0x20000030
 8001868:	20000032 	.word	0x20000032
 800186c:	20000034 	.word	0x20000034
 8001870:	20000036 	.word	0x20000036
 8001874:	3ff00000 	.word	0x3ff00000
 8001878:	20000038 	.word	0x20000038
 800187c:	20000040 	.word	0x20000040
 8001880:	20000048 	.word	0x20000048
 8001884:	20000050 	.word	0x20000050
 8001888:	20000052 	.word	0x20000052
 800188c:	20000054 	.word	0x20000054
 8001890:	3758      	adds	r7, #88	; 0x58
 8001892:	46bd      	mov	sp, r7
 8001894:	bdb0      	pop	{r4, r5, r7, pc}
 8001896:	bf00      	nop

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>
	...

080018a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_MspInit+0x44>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_MspInit+0x44>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6613      	str	r3, [r2, #96]	; 0x60
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_MspInit+0x44>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_MspInit+0x44>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_MspInit+0x44>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_MspInit+0x44>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018da:	f001 f963 	bl	8002ba4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09c      	sub	sp, #112	; 0x70
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	2244      	movs	r2, #68	; 0x44
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fd59 	bl	80053c4 <memset>
  if(hi2c->Instance==I2C3)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <HAL_I2C_MspInit+0xe4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d154      	bne.n	80019c6 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800191c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001920:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fe46 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001936:	f7ff ffaf 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800196a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800197c:	2302      	movs	r3, #2
 800197e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f000 fc97 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800198e:	2320      	movs	r3, #32
 8001990:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001992:	2312      	movs	r3, #18
 8001994:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800199e:	2308      	movs	r3, #8
 80019a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019a6:	4619      	mov	r1, r3
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <HAL_I2C_MspInit+0xec>)
 80019aa:	f000 fc87 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 80019b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019b8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_I2C_MspInit+0xe8>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3770      	adds	r7, #112	; 0x70
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40007800 	.word	0x40007800
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000400 	.word	0x48000400

080019dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_TIM_PWM_MspInit+0x38>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f8:	6613      	str	r3, [r2, #96]	; 0x60
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001a46:	e04e      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <HAL_TIM_Base_MspInit+0xd8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d114      	bne.n	8001a7c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2036      	movs	r0, #54	; 0x36
 8001a70:	f000 fbef 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a74:	2036      	movs	r0, #54	; 0x36
 8001a76:	f000 fc06 	bl	8002286 <HAL_NVIC_EnableIRQ>
}
 8001a7a:	e034      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <HAL_TIM_Base_MspInit+0xdc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10c      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6613      	str	r3, [r2, #96]	; 0x60
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
}
 8001a9e:	e022      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_TIM_Base_MspInit+0xe0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
}
 8001ac2:	e010      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_TIM_Base_MspInit+0xe4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10b      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_TIM_Base_MspInit+0xd4>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40001000 	.word	0x40001000
 8001af8:	40014000 	.word	0x40014000
 8001afc:	40014400 	.word	0x40014400
 8001b00:	40014800 	.word	0x40014800

08001b04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	; 0x38
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d129      	bne.n	8001b7a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b26:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	4a54      	ldr	r2, [pc, #336]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6593      	str	r3, [r2, #88]	; 0x58
 8001b32:	4b52      	ldr	r3, [pc, #328]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a4e      	ldr	r2, [pc, #312]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 8001b56:	2350      	movs	r3, #80	; 0x50
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b66:	2302      	movs	r3, #2
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f000 fba2 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b78:	e079      	b.n	8001c6e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a40      	ldr	r2, [pc, #256]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d128      	bne.n	8001bd6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a3c      	ldr	r2, [pc, #240]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b90:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 8001bb4:	23c0      	movs	r3, #192	; 0xc0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	482d      	ldr	r0, [pc, #180]	; (8001c84 <HAL_TIM_Encoder_MspInit+0x180>)
 8001bd0:	f000 fb74 	bl	80022bc <HAL_GPIO_Init>
}
 8001bd4:	e04b      	b.n	8001c6e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HAL_TIM_Encoder_MspInit+0x184>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d146      	bne.n	8001c6e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be4:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001be6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bea:	6613      	str	r3, [r2, #96]	; 0x60
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x178>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCA_Pin;
 8001c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_ENCA_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c48:	f000 fb38 	bl	80022bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8_CH2_ENCB_Pin;
 8001c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH2_ENCB_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4806      	ldr	r0, [pc, #24]	; (8001c84 <HAL_TIM_Encoder_MspInit+0x180>)
 8001c6a:	f000 fb27 	bl	80022bc <HAL_GPIO_Init>
}
 8001c6e:	bf00      	nop
 8001c70:	3738      	adds	r7, #56	; 0x38
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40000800 	.word	0x40000800
 8001c84:	48000400 	.word	0x48000400
 8001c88:	40013400 	.word	0x40013400

08001c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d14b      	bne.n	8001d46 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a5a      	ldr	r2, [pc, #360]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a54      	ldr	r2, [pc, #336]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b52      	ldr	r3, [pc, #328]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH1_M1_PWM_Pin;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfc:	f000 fade 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 8001d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001d12:	230a      	movs	r3, #10
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d20:	f000 facc 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 8001d24:	2308      	movs	r3, #8
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d34:	2301      	movs	r3, #1
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4838      	ldr	r0, [pc, #224]	; (8001e20 <HAL_TIM_MspPostInit+0x194>)
 8001d40:	f000 fabc 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001d44:	e066      	b.n	8001e14 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a36      	ldr	r2, [pc, #216]	; (8001e24 <HAL_TIM_MspPostInit+0x198>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d11d      	bne.n	8001d8c <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001d78:	2309      	movs	r3, #9
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f000 fa99 	bl	80022bc <HAL_GPIO_Init>
}
 8001d8a:	e043      	b.n	8001e14 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_TIM_MspPostInit+0x19c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11c      	bne.n	8001dd0 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 8001dae:	2310      	movs	r3, #16
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4815      	ldr	r0, [pc, #84]	; (8001e20 <HAL_TIM_MspPostInit+0x194>)
 8001dca:	f000 fa77 	bl	80022bc <HAL_GPIO_Init>
}
 8001dce:	e021      	b.n	8001e14 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_TIM_MspPostInit+0x1a0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11c      	bne.n	8001e14 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_TIM_MspPostInit+0x190>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001e02:	2301      	movs	r3, #1
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f000 fa54 	bl	80022bc <HAL_GPIO_Init>
}
 8001e14:	bf00      	nop
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	40014000 	.word	0x40014000
 8001e28:	40014400 	.word	0x40014400
 8001e2c:	40014800 	.word	0x40014800

08001e30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b094      	sub	sp, #80	; 0x50
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2244      	movs	r2, #68	; 0x44
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fabf 	bl	80053c4 <memset>
  if(hpcd->Instance==USB)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_PCD_MspInit+0x60>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d11b      	bne.n	8001e88 <HAL_PCD_MspInit+0x58>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001e56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fbab 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8001e6c:	f7ff fd14 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_PCD_MspInit+0x64>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_PCD_MspInit+0x64>)
 8001e76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_PCD_MspInit+0x64>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e88:	bf00      	nop
 8001e8a:	3750      	adds	r7, #80	; 0x50
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40005c00 	.word	0x40005c00
 8001e94:	40021000 	.word	0x40021000

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler+0x4>

08001e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee4:	f000 f89a 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <TIM6_DAC_IRQHandler+0x10>)
 8001ef2:	f002 f8a1 	bl	8004038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000220 	.word	0x20000220

08001f00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <LoopForever+0xe>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f40:	4c0b      	ldr	r4, [pc, #44]	; (8001f70 <LoopForever+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f4e:	f7ff ffd7 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f003 fa13 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f56:	f7fe fd55 	bl	8000a04 <main>

08001f5a <LoopForever>:

LoopForever:
    b LoopForever
 8001f5a:	e7fe      	b.n	8001f5a <LoopForever>
  ldr   r0, =_estack
 8001f5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f68:	08005404 	.word	0x08005404
  ldr r2, =_sbss
 8001f6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f70:	20000648 	.word	0x20000648

08001f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC1_2_IRQHandler>

08001f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f000 f95b 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f86:	200f      	movs	r0, #15
 8001f88:	f000 f80e 	bl	8001fa8 <HAL_InitTick>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	e001      	b.n	8001f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f98:	f7ff fc84 	bl	80018a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_InitTick+0x68>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d022      	beq.n	8002002 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_InitTick+0x6c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_InitTick+0x68>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f966 	bl	80022a2 <HAL_SYSTICK_Config>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10f      	bne.n	8001ffc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	d809      	bhi.n	8001ff6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fea:	f000 f932 	bl	8002252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_InitTick+0x70>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e007      	b.n	8002006 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e004      	b.n	8002006 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e001      	b.n	8002006 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000008 	.word	0x20000008
 8002014:	20000000 	.word	0x20000000
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_IncTick+0x1c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_IncTick+0x20>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4413      	add	r3, r2
 800202a:	4a03      	ldr	r2, [pc, #12]	; (8002038 <HAL_IncTick+0x1c>)
 800202c:	6013      	str	r3, [r2, #0]
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000644 	.word	0x20000644
 800203c:	20000008 	.word	0x20000008

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000644 	.word	0x20000644

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff ffee 	bl	8002040 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002070:	d004      	beq.n	800207c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_Delay+0x40>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207c:	bf00      	nop
 800207e:	f7ff ffdf 	bl	8002040 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	429a      	cmp	r2, r3
 800208c:	d8f7      	bhi.n	800207e <HAL_Delay+0x26>
  {
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000008 	.word	0x20000008

0800209c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff40 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff90 	bl	8002190 <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5f 	bl	800213c <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff33 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa4 	bl	80021f8 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022ca:	e15a      	b.n	8002582 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 814c 	beq.w	800257c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d005      	beq.n	80022fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d130      	bne.n	800235e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002332:	2201      	movs	r2, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0201 	and.w	r2, r3, #1
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b03      	cmp	r3, #3
 8002368:	d017      	beq.n	800239a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d123      	bne.n	80023ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	08da      	lsrs	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3208      	adds	r2, #8
 80023ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	6939      	ldr	r1, [r7, #16]
 80023ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0203 	and.w	r2, r3, #3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80a6 	beq.w	800257c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_GPIO_Init+0x2e4>)
 8002432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002434:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <HAL_GPIO_Init+0x2e4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6613      	str	r3, [r2, #96]	; 0x60
 800243c:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_GPIO_Init+0x2e4>)
 800243e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002448:	4a56      	ldr	r2, [pc, #344]	; (80025a4 <HAL_GPIO_Init+0x2e8>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002472:	d01f      	beq.n	80024b4 <HAL_GPIO_Init+0x1f8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x2ec>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d019      	beq.n	80024b0 <HAL_GPIO_Init+0x1f4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4b      	ldr	r2, [pc, #300]	; (80025ac <HAL_GPIO_Init+0x2f0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1f0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <HAL_GPIO_Init+0x2f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1ec>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a49      	ldr	r2, [pc, #292]	; (80025b4 <HAL_GPIO_Init+0x2f8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e4>
 800249c:	2305      	movs	r3, #5
 800249e:	e00a      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024a0:	2306      	movs	r3, #6
 80024a2:	e008      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e004      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_GPIO_Init+0x1fa>
 80024b4:	2300      	movs	r3, #0
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	f002 0203 	and.w	r2, r2, #3
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	4093      	lsls	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_GPIO_Init+0x2e8>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d4:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_GPIO_Init+0x300>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f8:	4a30      	ldr	r2, [pc, #192]	; (80025bc <HAL_GPIO_Init+0x300>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_GPIO_Init+0x300>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002522:	4a26      	ldr	r2, [pc, #152]	; (80025bc <HAL_GPIO_Init+0x300>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_GPIO_Init+0x300>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800254c:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_GPIO_Init+0x300>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_GPIO_Init+0x300>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002576:	4a11      	ldr	r2, [pc, #68]	; (80025bc <HAL_GPIO_Init+0x300>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f ae9d 	bne.w	80022cc <HAL_GPIO_Init+0x10>
  }
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	48000c00 	.word	0x48000c00
 80025b4:	48001000 	.word	0x48001000
 80025b8:	48001400 	.word	0x48001400
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e081      	b.n	8002706 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff f968 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	; 0x24
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	e006      	b.n	8002678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d104      	bne.n	800268a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69d9      	ldr	r1, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b20      	cmp	r3, #32
 8002722:	d138      	bne.n	8002796 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800272e:	2302      	movs	r3, #2
 8002730:	e032      	b.n	8002798 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2224      	movs	r2, #36	; 0x24
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002760:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d139      	bne.n	800282e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e033      	b.n	8002830 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	b08b      	sub	sp, #44	; 0x2c
 8002840:	af06      	add	r7, sp, #24
 8002842:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0d7      	b.n	80029fe <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fae4 	bl	8001e30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fd45 	bl	8005304 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e04c      	b.n	800291a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	3301      	adds	r3, #1
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	b298      	uxth	r0, r3
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	3336      	adds	r3, #54	; 0x36
 80028be:	4602      	mov	r2, r0
 80028c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	3303      	adds	r3, #3
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3338      	adds	r3, #56	; 0x38
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	333c      	adds	r3, #60	; 0x3c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3340      	adds	r3, #64	; 0x40
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	3301      	adds	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d3ad      	bcc.n	8002880 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e044      	b.n	80029b4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	f203 1369 	addw	r3, r3, #361	; 0x169
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	3301      	adds	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3b5      	bcc.n	800292a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	687e      	ldr	r6, [r7, #4]
 80029c6:	466d      	mov	r5, sp
 80029c8:	f106 0410 	add.w	r4, r6, #16
 80029cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	602b      	str	r3, [r5, #0]
 80029d4:	1d33      	adds	r3, r6, #4
 80029d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d8:	6838      	ldr	r0, [r7, #0]
 80029da:	f002 fcae 	bl	800533a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f805 	bl	8002a06 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a06 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d141      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a76:	d131      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a78:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a7e:	4a46      	ldr	r2, [pc, #280]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a90:	4a41      	ldr	r2, [pc, #260]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a98:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2232      	movs	r2, #50	; 0x32
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aae:	e002      	b.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d102      	bne.n	8002aca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f2      	bne.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aca:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad6:	d158      	bne.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e057      	b.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002adc:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae2:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002aec:	e04d      	b.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af4:	d141      	bne.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b02:	d131      	bne.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b0a:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b1c:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2232      	movs	r2, #50	; 0x32
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	0c9b      	lsrs	r3, r3, #18
 8002b36:	3301      	adds	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3a:	e002      	b.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d102      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f2      	bne.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d112      	bne.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e011      	b.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b78:	e007      	b.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b82:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	431bde83 	.word	0x431bde83

08002ba4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb2:	6093      	str	r3, [r2, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40007000 	.word	0x40007000

08002bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e308      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d075      	beq.n	8002cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be2:	4ba3      	ldr	r3, [pc, #652]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bec:	4ba0      	ldr	r3, [pc, #640]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3e>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d002      	beq.n	8002c08 <HAL_RCC_OscConfig+0x44>
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d10b      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	4b99      	ldr	r3, [pc, #612]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05b      	beq.n	8002ccc <HAL_RCC_OscConfig+0x108>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d157      	bne.n	8002ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e2e3      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x74>
 8002c2a:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a90      	ldr	r2, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x98>
 8002c42:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a8a      	ldr	r2, [pc, #552]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a87      	ldr	r2, [pc, #540]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a83      	ldr	r2, [pc, #524]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7ff f9e0 	bl	8002040 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7ff f9dc 	bl	8002040 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e2a8      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xc0>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7ff f9cc 	bl	8002040 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7ff f9c8 	bl	8002040 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e294      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0xe8>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce4:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d102      	bne.n	8002cfa <HAL_RCC_OscConfig+0x136>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_OscConfig+0x13c>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11f      	bne.n	8002d40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x154>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e267      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	4952      	ldr	r1, [pc, #328]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d2c:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <HAL_RCC_OscConfig+0x2b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f939 	bl	8001fa8 <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d043      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e253      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a48      	ldr	r2, [pc, #288]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7ff f974 	bl	8002040 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7ff f970 	bl	8002040 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e23c      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	4939      	ldr	r1, [pc, #228]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
 8002d8e:	e01a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a36      	ldr	r2, [pc, #216]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f950 	bl	8002040 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da4:	f7ff f94c 	bl	8002040 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e218      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1e0>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d03c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de0:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7ff f929 	bl	8002040 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7ff f925 	bl	8002040 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1f1      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0ef      	beq.n	8002df2 <HAL_RCC_OscConfig+0x22e>
 8002e12:	e01b      	b.n	8002e4c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e14:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7ff f90c 	bl	8002040 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7ff f908 	bl	8002040 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1d4      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ef      	bne.n	8002e2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80ab 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2b4>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e005      	b.n	8002e7a <HAL_RCC_OscConfig+0x2b6>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	20000004 	.word	0x20000004
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4baf      	ldr	r3, [pc, #700]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	4aae      	ldr	r2, [pc, #696]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8a:	4bac      	ldr	r3, [pc, #688]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	4ba9      	ldr	r3, [pc, #676]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea6:	4ba6      	ldr	r3, [pc, #664]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4aa5      	ldr	r2, [pc, #660]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7ff f8c5 	bl	8002040 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7ff f8c1 	bl	8002040 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e18d      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ecc:	4b9c      	ldr	r3, [pc, #624]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d108      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x32e>
 8002ee0:	4b96      	ldr	r3, [pc, #600]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a95      	ldr	r2, [pc, #596]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	e024      	b.n	8002f3c <HAL_RCC_OscConfig+0x378>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d110      	bne.n	8002f1c <HAL_RCC_OscConfig+0x358>
 8002efa:	4b90      	ldr	r3, [pc, #576]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	4a8e      	ldr	r2, [pc, #568]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0a:	4b8c      	ldr	r3, [pc, #560]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	4a8a      	ldr	r2, [pc, #552]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1a:	e00f      	b.n	8002f3c <HAL_RCC_OscConfig+0x378>
 8002f1c:	4b87      	ldr	r3, [pc, #540]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a86      	ldr	r2, [pc, #536]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2c:	4b83      	ldr	r3, [pc, #524]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a82      	ldr	r2, [pc, #520]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d016      	beq.n	8002f72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7ff f87c 	bl	8002040 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7ff f878 	bl	8002040 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e142      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ed      	beq.n	8002f4c <HAL_RCC_OscConfig+0x388>
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7ff f865 	bl	8002040 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7ff f861 	bl	8002040 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e12b      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	4b6a      	ldr	r3, [pc, #424]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ed      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a64      	ldr	r2, [pc, #400]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d03c      	beq.n	8003036 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fc4:	4b5d      	ldr	r3, [pc, #372]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fca:	4a5c      	ldr	r2, [pc, #368]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7ff f834 	bl	8002040 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fdc:	f7ff f830 	bl	8002040 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0fc      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCC_OscConfig+0x418>
 8002ffc:	e01b      	b.n	8003036 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ffe:	4b4f      	ldr	r3, [pc, #316]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7ff f817 	bl	8002040 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003016:	f7ff f813 	bl	8002040 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0df      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003028:	4b44      	ldr	r3, [pc, #272]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800302a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ef      	bne.n	8003016 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80d3 	beq.w	80031e6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003040:	4b3e      	ldr	r3, [pc, #248]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b0c      	cmp	r3, #12
 800304a:	f000 808d 	beq.w	8003168 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d15a      	bne.n	800310c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a38      	ldr	r2, [pc, #224]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800305c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fe ffed 	bl	8002040 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe ffe9 	bl	8002040 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0b5      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003088:	4b2c      	ldr	r3, [pc, #176]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_OscConfig+0x580>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6a11      	ldr	r1, [r2, #32]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003098:	3a01      	subs	r2, #1
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80030a2:	0212      	lsls	r2, r2, #8
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030aa:	0852      	lsrs	r2, r2, #1
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0552      	lsls	r2, r2, #21
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b6:	0852      	lsrs	r2, r2, #1
 80030b8:	3a01      	subs	r2, #1
 80030ba:	0652      	lsls	r2, r2, #25
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030c2:	06d2      	lsls	r2, r2, #27
 80030c4:	430a      	orrs	r2, r1
 80030c6:	491d      	ldr	r1, [pc, #116]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1a      	ldr	r2, [pc, #104]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030d8:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe ffac 	bl	8002040 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe ffa8 	bl	8002040 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e074      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x528>
 800310a:	e06c      	b.n	80031e6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a07      	ldr	r2, [pc, #28]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800312a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800312e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003132:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe ff84 	bl	8002040 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313a:	e00e      	b.n	800315a <HAL_RCC_OscConfig+0x596>
 800313c:	40021000 	.word	0x40021000
 8003140:	40007000 	.word	0x40007000
 8003144:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe ff7a 	bl	8002040 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e046      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <HAL_RCC_OscConfig+0x62c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x584>
 8003166:	e03e      	b.n	80031e6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e039      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <HAL_RCC_OscConfig+0x62c>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 0203 	and.w	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	429a      	cmp	r2, r3
 8003186:	d12c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	3b01      	subs	r3, #1
 8003194:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d123      	bne.n	80031e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d11b      	bne.n	80031e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d113      	bne.n	80031e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	3b01      	subs	r3, #1
 80031dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e11e      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b91      	ldr	r3, [pc, #580]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d910      	bls.n	800323c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b8e      	ldr	r3, [pc, #568]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 020f 	bic.w	r2, r3, #15
 8003222:	498c      	ldr	r1, [pc, #560]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b8a      	ldr	r3, [pc, #552]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e106      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d073      	beq.n	8003330 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d129      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0f4      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003260:	f000 f966 	bl	8003530 <RCC_GetSysClockFreqFromPLLSource>
 8003264:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_RCC_ClockConfig+0x268>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d93f      	bls.n	80032ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800326e:	4b7a      	ldr	r3, [pc, #488]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	d033      	beq.n	80032ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d12f      	bne.n	80032ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003296:	4a70      	ldr	r2, [pc, #448]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e024      	b.n	80032ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ac:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0c6      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0be      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032cc:	f000 f8ce 	bl	800346c <HAL_RCC_GetSysClockFreq>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_RCC_ClockConfig+0x268>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d909      	bls.n	80032ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032da:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e2:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b5a      	ldr	r3, [pc, #360]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4957      	ldr	r1, [pc, #348]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fe fe9e 	bl	8002040 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fe fe9a 	bl	8002040 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e095      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d023      	beq.n	8003384 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a42      	ldr	r2, [pc, #264]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003368:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800336a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800336e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4936      	ldr	r1, [pc, #216]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
 8003382:	e008      	b.n	8003396 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d105      	bne.n	8003396 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4a32      	ldr	r2, [pc, #200]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003394:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d21d      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 020f 	bic.w	r2, r3, #15
 80033ac:	4929      	ldr	r1, [pc, #164]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fe44 	bl	8002040 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe fe40 	bl	8002040 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e03b      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d1ed      	bne.n	80033bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4917      	ldr	r1, [pc, #92]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490f      	ldr	r1, [pc, #60]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800341e:	f000 f825 	bl	800346c <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490c      	ldr	r1, [pc, #48]	; (8003460 <HAL_RCC_ClockConfig+0x26c>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_RCC_ClockConfig+0x270>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x274>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fdb0 	bl	8001fa8 <HAL_InitTick>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40022000 	.word	0x40022000
 8003458:	40021000 	.word	0x40021000
 800345c:	04c4b400 	.word	0x04c4b400
 8003460:	080053ec 	.word	0x080053ec
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d102      	bne.n	8003484 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e047      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d102      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e03e      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d136      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3301      	adds	r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d10c      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034c0:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	0a12      	lsrs	r2, r2, #8
 80034ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	617b      	str	r3, [r7, #20]
      break;
 80034d8:	e00c      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e4:	68d2      	ldr	r2, [r2, #12]
 80034e6:	0a12      	lsrs	r2, r2, #8
 80034e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
      break;
 80034f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0e5b      	lsrs	r3, r3, #25
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	e001      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003514:	693b      	ldr	r3, [r7, #16]
}
 8003516:	4618      	mov	r0, r3
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003536:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d10c      	bne.n	800356e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800355e:	68d2      	ldr	r2, [r2, #12]
 8003560:	0a12      	lsrs	r2, r2, #8
 8003562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	617b      	str	r3, [r7, #20]
    break;
 800356c:	e00c      	b.n	8003588 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	0a12      	lsrs	r2, r2, #8
 800357c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
    break;
 8003586:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	0e5b      	lsrs	r3, r3, #25
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035a2:	687b      	ldr	r3, [r7, #4]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40021000 	.word	0x40021000
 80035b4:	007a1200 	.word	0x007a1200
 80035b8:	00f42400 	.word	0x00f42400

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c4:	2300      	movs	r3, #0
 80035c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8098 	beq.w	800370a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b43      	ldr	r3, [pc, #268]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	4a3f      	ldr	r2, [pc, #252]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6593      	str	r3, [r2, #88]	; 0x58
 80035f6:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003606:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003612:	f7fe fd15 	bl	8002040 <HAL_GetTick>
 8003616:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003618:	e009      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe fd11 	bl	8002040 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d902      	bls.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	74fb      	strb	r3, [r7, #19]
        break;
 800362c:	e005      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800362e:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ef      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d159      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01e      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d019      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800365c:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003678:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe fcd1 	bl	8002040 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e00b      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe fccd 	bl	8002040 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d902      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	74fb      	strb	r3, [r7, #19]
            break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ec      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036e4:	e008      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	74bb      	strb	r3, [r7, #18]
 80036ea:	e005      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f8:	7c7b      	ldrb	r3, [r7, #17]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4ba6      	ldr	r3, [pc, #664]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4aa5      	ldr	r2, [pc, #660]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003716:	4ba0      	ldr	r3, [pc, #640]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f023 0203 	bic.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	499c      	ldr	r1, [pc, #624]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003738:	4b97      	ldr	r3, [pc, #604]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f023 020c 	bic.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4994      	ldr	r1, [pc, #592]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375a:	4b8f      	ldr	r3, [pc, #572]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	498b      	ldr	r1, [pc, #556]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800377c:	4b86      	ldr	r3, [pc, #536]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	4983      	ldr	r1, [pc, #524]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800379e:	4b7e      	ldr	r3, [pc, #504]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	497a      	ldr	r1, [pc, #488]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c0:	4b75      	ldr	r3, [pc, #468]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	4972      	ldr	r1, [pc, #456]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037e2:	4b6d      	ldr	r3, [pc, #436]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4969      	ldr	r1, [pc, #420]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003804:	4b64      	ldr	r3, [pc, #400]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4961      	ldr	r1, [pc, #388]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003826:	4b5c      	ldr	r3, [pc, #368]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	4958      	ldr	r1, [pc, #352]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003848:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	4950      	ldr	r1, [pc, #320]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003866:	d105      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003872:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003880:	4b45      	ldr	r3, [pc, #276]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	4942      	ldr	r1, [pc, #264]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389e:	d105      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a0:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a3c      	ldr	r2, [pc, #240]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4934      	ldr	r1, [pc, #208]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a2e      	ldr	r2, [pc, #184]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	4926      	ldr	r1, [pc, #152]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390e:	d105      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003928:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	4918      	ldr	r1, [pc, #96]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a12      	ldr	r2, [pc, #72]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003952:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	490a      	ldr	r1, [pc, #40]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397e:	d105      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800398c:	7cbb      	ldrb	r3, [r7, #18]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e049      	b.n	8003a42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe f82a 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 fee2 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d001      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e04a      	b.n	8003afa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d018      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8e:	d013      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_TIM_Base_Start_IT+0xc0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_TIM_Base_Start_IT+0xc4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d009      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_TIM_Base_Start_IT+0xc8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d115      	bne.n	8003ae4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d015      	beq.n	8003af6 <HAL_TIM_Base_Start_IT+0xaa>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad0:	d011      	beq.n	8003af6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae2:	e008      	b.n	8003af6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e000      	b.n	8003af8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40013400 	.word	0x40013400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	00010007 	.word	0x00010007

08003b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e049      	b.n	8003bc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd ff48 	bl	80019dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f000 fe20 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_TIM_PWM_Start+0x24>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e03c      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d109      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x3e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e02f      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start+0x58>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e022      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b0c      	cmp	r3, #12
 8003c2c:	d109      	bne.n	8003c42 <HAL_TIM_PWM_Start+0x72>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e015      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d109      	bne.n	8003c5c <HAL_TIM_PWM_Start+0x8c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e008      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e097      	b.n	8003da6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_PWM_Start+0xb6>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c84:	e023      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Start+0xc6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c94:	e01b      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0xd6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca4:	e013      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0xe6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb4:	e00b      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0xf6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc4:	e003      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 f986 	bl	8004fe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a33      	ldr	r2, [pc, #204]	; (8003db0 <HAL_TIM_PWM_Start+0x1e0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a32      	ldr	r2, [pc, #200]	; (8003db4 <HAL_TIM_PWM_Start+0x1e4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a30      	ldr	r2, [pc, #192]	; (8003db8 <HAL_TIM_PWM_Start+0x1e8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2f      	ldr	r2, [pc, #188]	; (8003dbc <HAL_TIM_PWM_Start+0x1ec>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2d      	ldr	r2, [pc, #180]	; (8003dc0 <HAL_TIM_PWM_Start+0x1f0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x142>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_TIM_PWM_Start+0x144>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <HAL_TIM_PWM_Start+0x1e0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d018      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d013      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <HAL_TIM_PWM_Start+0x1f4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00e      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_TIM_PWM_Start+0x1f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_TIM_PWM_Start+0x1e4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <HAL_TIM_PWM_Start+0x1e8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d115      	bne.n	8003d90 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_TIM_PWM_Start+0x1fc>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d015      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x1d2>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d011      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	e008      	b.n	8003da2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e000      	b.n	8003da4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40013400 	.word	0x40013400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	00010007 	.word	0x00010007

08003dd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e097      	b.n	8003f14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fd fe83 	bl	8001b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003e14:	f023 0307 	bic.w	r3, r3, #7
 8003e18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f000 fcbd 	bl	80047a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	4313      	orrs	r3, r2
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e70:	f023 030c 	bic.w	r3, r3, #12
 8003e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	011a      	lsls	r2, r3, #4
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	031b      	lsls	r3, r3, #12
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d110      	bne.n	8003f6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d102      	bne.n	8003f58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f52:	7b7b      	ldrb	r3, [r7, #13]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d001      	beq.n	8003f5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e069      	b.n	8004030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	e031      	b.n	8003fd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d110      	bne.n	8003f96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f74:	7bbb      	ldrb	r3, [r7, #14]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f7a:	7b3b      	ldrb	r3, [r7, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e055      	b.n	8004030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f94:	e01d      	b.n	8003fd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d108      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	7b7b      	ldrb	r3, [r7, #13]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d102      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa8:	7b3b      	ldrb	r3, [r7, #12]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e03e      	b.n	8004030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_TIM_Encoder_Start+0xc4>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d008      	beq.n	8003ff0 <HAL_TIM_Encoder_Start+0xd4>
 8003fde:	e00f      	b.n	8004000 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fffd 	bl	8004fe8 <TIM_CCxChannelCmd>
      break;
 8003fee:	e016      	b.n	800401e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fff5 	bl	8004fe8 <TIM_CCxChannelCmd>
      break;
 8003ffe:	e00e      	b.n	800401e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2201      	movs	r2, #1
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ffed 	bl	8004fe8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2201      	movs	r2, #1
 8004014:	2104      	movs	r1, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f000 ffe6 	bl	8004fe8 <TIM_CCxChannelCmd>
      break;
 800401c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0202 	mvn.w	r2, #2
 8004064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fb74 	bl	8004768 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fb66 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb77 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0204 	mvn.w	r2, #4
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fb4a 	bl	8004768 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb3c 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb4d 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d122      	bne.n	800413c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d11b      	bne.n	800413c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0208 	mvn.w	r2, #8
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2204      	movs	r2, #4
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fb20 	bl	8004768 <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fb12 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb23 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b10      	cmp	r3, #16
 8004148:	d122      	bne.n	8004190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b10      	cmp	r3, #16
 8004156:	d11b      	bne.n	8004190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0210 	mvn.w	r2, #16
 8004160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2208      	movs	r2, #8
 8004166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 faf6 	bl	8004768 <HAL_TIM_IC_CaptureCallback>
 800417c:	e005      	b.n	800418a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fae8 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 faf9 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0201 	mvn.w	r2, #1
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd f9ba 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 f852 	bl	800528c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d10e      	bne.n	8004216 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d107      	bne.n	8004216 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 f845 	bl	80052a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d10e      	bne.n	8004242 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d107      	bne.n	8004242 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 faa7 	bl	8004790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b20      	cmp	r3, #32
 800424e:	d10e      	bne.n	800426e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b20      	cmp	r3, #32
 800425c:	d107      	bne.n	800426e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f06f 0220 	mvn.w	r2, #32
 8004266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f001 f805 	bl	8005278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427c:	d10f      	bne.n	800429e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800428c:	d107      	bne.n	800429e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f001 f80b 	bl	80052b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ac:	d10f      	bne.n	80042ce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042bc:	d107      	bne.n	80042ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80042c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fffd 	bl	80052c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042dc:	d10f      	bne.n	80042fe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 ffef 	bl	80052dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800430c:	d10f      	bne.n	800432e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800431c:	d107      	bne.n	800432e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 ffe1 	bl	80052f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004352:	2302      	movs	r3, #2
 8004354:	e0ff      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b14      	cmp	r3, #20
 8004362:	f200 80f0 	bhi.w	8004546 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	080043c1 	.word	0x080043c1
 8004370:	08004547 	.word	0x08004547
 8004374:	08004547 	.word	0x08004547
 8004378:	08004547 	.word	0x08004547
 800437c:	08004401 	.word	0x08004401
 8004380:	08004547 	.word	0x08004547
 8004384:	08004547 	.word	0x08004547
 8004388:	08004547 	.word	0x08004547
 800438c:	08004443 	.word	0x08004443
 8004390:	08004547 	.word	0x08004547
 8004394:	08004547 	.word	0x08004547
 8004398:	08004547 	.word	0x08004547
 800439c:	08004483 	.word	0x08004483
 80043a0:	08004547 	.word	0x08004547
 80043a4:	08004547 	.word	0x08004547
 80043a8:	08004547 	.word	0x08004547
 80043ac:	080044c5 	.word	0x080044c5
 80043b0:	08004547 	.word	0x08004547
 80043b4:	08004547 	.word	0x08004547
 80043b8:	08004547 	.word	0x08004547
 80043bc:	08004505 	.word	0x08004505
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fa7c 	bl	80048c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	619a      	str	r2, [r3, #24]
      break;
 80043fe:	e0a5      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 faec 	bl	80049e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	619a      	str	r2, [r3, #24]
      break;
 8004440:	e084      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fb55 	bl	8004af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0208 	orr.w	r2, r2, #8
 800445c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0204 	bic.w	r2, r2, #4
 800446c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69d9      	ldr	r1, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
      break;
 8004480:	e064      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fbbd 	bl	8004c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800449c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	61da      	str	r2, [r3, #28]
      break;
 80044c2:	e043      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fc26 	bl	8004d1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0208 	orr.w	r2, r2, #8
 80044de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004502:	e023      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fc6a 	bl	8004de4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	021a      	lsls	r2, r3, #8
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004544:	e002      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
      break;
 800454a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop

08004560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIM_ConfigClockSource+0x1c>
 8004578:	2302      	movs	r3, #2
 800457a:	e0de      	b.n	800473a <HAL_TIM_ConfigClockSource+0x1da>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800459a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800459e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a63      	ldr	r2, [pc, #396]	; (8004744 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	f000 80a9 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 80045bc:	4a61      	ldr	r2, [pc, #388]	; (8004744 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	f200 80ae 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 80045c4:	4a60      	ldr	r2, [pc, #384]	; (8004748 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f000 80a1 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 80045cc:	4a5e      	ldr	r2, [pc, #376]	; (8004748 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f200 80a6 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 80045d4:	4a5d      	ldr	r2, [pc, #372]	; (800474c <HAL_TIM_ConfigClockSource+0x1ec>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	f000 8099 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 80045dc:	4a5b      	ldr	r2, [pc, #364]	; (800474c <HAL_TIM_ConfigClockSource+0x1ec>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	f200 809e 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 80045e4:	4a5a      	ldr	r2, [pc, #360]	; (8004750 <HAL_TIM_ConfigClockSource+0x1f0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f000 8091 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_TIM_ConfigClockSource+0x1f0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	f200 8096 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 80045f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045f8:	f000 8089 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 80045fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004600:	f200 808e 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	d03e      	beq.n	8004688 <HAL_TIM_ConfigClockSource+0x128>
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460e:	f200 8087 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004616:	f000 8086 	beq.w	8004726 <HAL_TIM_ConfigClockSource+0x1c6>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d87f      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d01a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0xfa>
 8004624:	2b70      	cmp	r3, #112	; 0x70
 8004626:	d87b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d050      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x16e>
 800462c:	2b60      	cmp	r3, #96	; 0x60
 800462e:	d877      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004630:	2b50      	cmp	r3, #80	; 0x50
 8004632:	d03c      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x14e>
 8004634:	2b50      	cmp	r3, #80	; 0x50
 8004636:	d873      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d058      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x18e>
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d86f      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004640:	2b30      	cmp	r3, #48	; 0x30
 8004642:	d064      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 8004644:	2b30      	cmp	r3, #48	; 0x30
 8004646:	d86b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004648:	2b20      	cmp	r3, #32
 800464a:	d060      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 800464c:	2b20      	cmp	r3, #32
 800464e:	d867      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05c      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 8004654:	2b10      	cmp	r3, #16
 8004656:	d05a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x1ae>
 8004658:	e062      	b.n	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f000 fc9d 	bl	8004fa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800467c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	609a      	str	r2, [r3, #8]
      break;
 8004686:	e04f      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f000 fc86 	bl	8004fa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046aa:	609a      	str	r2, [r3, #8]
      break;
 80046ac:	e03c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 fbf8 	bl	8004eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2150      	movs	r1, #80	; 0x50
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fc51 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 80046cc:	e02c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 fc17 	bl	8004f0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2160      	movs	r1, #96	; 0x60
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fc41 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 80046ec:	e01c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 fbd8 	bl	8004eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2140      	movs	r1, #64	; 0x40
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fc31 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 800470c:	e00c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 fc28 	bl	8004f6e <TIM_ITRx_SetConfig>
      break;
 800471e:	e003      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e000      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	00100070 	.word	0x00100070
 8004748:	00100040 	.word	0x00100040
 800474c:	00100030 	.word	0x00100030
 8004750:	00100020 	.word	0x00100020

08004754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <TIM_Base_SetConfig+0x104>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00f      	beq.n	80047dc <TIM_Base_SetConfig+0x38>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c2:	d00b      	beq.n	80047dc <TIM_Base_SetConfig+0x38>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a39      	ldr	r2, [pc, #228]	; (80048ac <TIM_Base_SetConfig+0x108>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_Base_SetConfig+0x38>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a38      	ldr	r2, [pc, #224]	; (80048b0 <TIM_Base_SetConfig+0x10c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0x38>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <TIM_Base_SetConfig+0x110>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d108      	bne.n	80047ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <TIM_Base_SetConfig+0x104>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01b      	beq.n	800482e <TIM_Base_SetConfig+0x8a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fc:	d017      	beq.n	800482e <TIM_Base_SetConfig+0x8a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <TIM_Base_SetConfig+0x108>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_Base_SetConfig+0x8a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <TIM_Base_SetConfig+0x10c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00f      	beq.n	800482e <TIM_Base_SetConfig+0x8a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <TIM_Base_SetConfig+0x110>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0x8a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0x8a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a26      	ldr	r2, [pc, #152]	; (80048bc <TIM_Base_SetConfig+0x118>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0x8a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a25      	ldr	r2, [pc, #148]	; (80048c0 <TIM_Base_SetConfig+0x11c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <TIM_Base_SetConfig+0x104>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0xe8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <TIM_Base_SetConfig+0x110>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0xe8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0xe8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <TIM_Base_SetConfig+0x118>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xe8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0e      	ldr	r2, [pc, #56]	; (80048c0 <TIM_Base_SetConfig+0x11c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40013400 	.word	0x40013400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800

080048c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0303 	bic.w	r3, r3, #3
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0302 	bic.w	r3, r3, #2
 8004910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <TIM_OC1_SetConfig+0x10c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00f      	beq.n	8004944 <TIM_OC1_SetConfig+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2b      	ldr	r2, [pc, #172]	; (80049d4 <TIM_OC1_SetConfig+0x110>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00b      	beq.n	8004944 <TIM_OC1_SetConfig+0x80>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <TIM_OC1_SetConfig+0x114>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_OC1_SetConfig+0x80>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <TIM_OC1_SetConfig+0x118>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_OC1_SetConfig+0x80>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <TIM_OC1_SetConfig+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10c      	bne.n	800495e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0308 	bic.w	r3, r3, #8
 800494a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 0304 	bic.w	r3, r3, #4
 800495c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <TIM_OC1_SetConfig+0x10c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00f      	beq.n	8004986 <TIM_OC1_SetConfig+0xc2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <TIM_OC1_SetConfig+0x110>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_OC1_SetConfig+0xc2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <TIM_OC1_SetConfig+0x114>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_OC1_SetConfig+0xc2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <TIM_OC1_SetConfig+0x118>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC1_SetConfig+0xc2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <TIM_OC1_SetConfig+0x11c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d111      	bne.n	80049aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	621a      	str	r2, [r3, #32]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800

080049e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0320 	bic.w	r3, r3, #32
 8004a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a28      	ldr	r2, [pc, #160]	; (8004ae4 <TIM_OC2_SetConfig+0x100>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC2_SetConfig+0x6c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a27      	ldr	r2, [pc, #156]	; (8004ae8 <TIM_OC2_SetConfig+0x104>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10d      	bne.n	8004a6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <TIM_OC2_SetConfig+0x100>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00f      	beq.n	8004a94 <TIM_OC2_SetConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <TIM_OC2_SetConfig+0x104>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_OC2_SetConfig+0xb0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <TIM_OC2_SetConfig+0x108>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <TIM_OC2_SetConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1a      	ldr	r2, [pc, #104]	; (8004af0 <TIM_OC2_SetConfig+0x10c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC2_SetConfig+0xb0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <TIM_OC2_SetConfig+0x110>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d113      	bne.n	8004abc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40013400 	.word	0x40013400
 8004aec:	40014000 	.word	0x40014000
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800

08004af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <TIM_OC3_SetConfig+0xfc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC3_SetConfig+0x6a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <TIM_OC3_SetConfig+0x100>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10d      	bne.n	8004b7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <TIM_OC3_SetConfig+0xfc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00f      	beq.n	8004ba6 <TIM_OC3_SetConfig+0xae>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <TIM_OC3_SetConfig+0x100>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_OC3_SetConfig+0xae>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <TIM_OC3_SetConfig+0x104>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <TIM_OC3_SetConfig+0xae>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <TIM_OC3_SetConfig+0x108>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_OC3_SetConfig+0xae>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <TIM_OC3_SetConfig+0x10c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d113      	bne.n	8004bce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	621a      	str	r2, [r3, #32]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800

08004c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a28      	ldr	r2, [pc, #160]	; (8004d08 <TIM_OC4_SetConfig+0x100>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_OC4_SetConfig+0x6c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <TIM_OC4_SetConfig+0x104>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10d      	bne.n	8004c90 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	031b      	lsls	r3, r3, #12
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <TIM_OC4_SetConfig+0x100>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00f      	beq.n	8004cb8 <TIM_OC4_SetConfig+0xb0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <TIM_OC4_SetConfig+0x104>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00b      	beq.n	8004cb8 <TIM_OC4_SetConfig+0xb0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <TIM_OC4_SetConfig+0x108>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <TIM_OC4_SetConfig+0xb0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <TIM_OC4_SetConfig+0x10c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC4_SetConfig+0xb0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <TIM_OC4_SetConfig+0x110>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d113      	bne.n	8004ce0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cc6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	019b      	lsls	r3, r3, #6
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40013400 	.word	0x40013400
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <TIM_OC5_SetConfig+0xb4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_OC5_SetConfig+0x7a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <TIM_OC5_SetConfig+0xb8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_OC5_SetConfig+0x7a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <TIM_OC5_SetConfig+0xbc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_OC5_SetConfig+0x7a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <TIM_OC5_SetConfig+0xc0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_OC5_SetConfig+0x7a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <TIM_OC5_SetConfig+0xc4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d109      	bne.n	8004daa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40013400 	.word	0x40013400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800

08004de4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	051b      	lsls	r3, r3, #20
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <TIM_OC6_SetConfig+0xb8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <TIM_OC6_SetConfig+0x7c>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <TIM_OC6_SetConfig+0xbc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_OC6_SetConfig+0x7c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <TIM_OC6_SetConfig+0xc0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_OC6_SetConfig+0x7c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <TIM_OC6_SetConfig+0xc4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_OC6_SetConfig+0x7c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a14      	ldr	r2, [pc, #80]	; (8004eac <TIM_OC6_SetConfig+0xc8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d109      	bne.n	8004e74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800

08004eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 030a 	bic.w	r3, r3, #10
 8004eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b087      	sub	sp, #28
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0210 	bic.w	r2, r3, #16
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	031b      	lsls	r3, r3, #12
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f043 0307 	orr.w	r3, r3, #7
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	021a      	lsls	r2, r3, #8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	43db      	mvns	r3, r3
 800500a:	401a      	ands	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1a      	ldr	r2, [r3, #32]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e065      	b.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2b      	ldr	r2, [pc, #172]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005086:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d018      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c2:	d013      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a18      	ldr	r2, [pc, #96]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00e      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a17      	ldr	r2, [pc, #92]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d009      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a12      	ldr	r2, [pc, #72]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a13      	ldr	r2, [pc, #76]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10c      	bne.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40013400 	.word	0x40013400
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40014000 	.word	0x40014000

08005138 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005150:	2302      	movs	r3, #2
 8005152:	e087      	b.n	8005264 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a27      	ldr	r2, [pc, #156]	; (8005270 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a25      	ldr	r2, [pc, #148]	; (8005274 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d106      	bne.n	80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d126      	bne.n	8005252 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	051b      	lsls	r3, r3, #20
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a0e      	ldr	r2, [pc, #56]	; (8005270 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a0d      	ldr	r2, [pc, #52]	; (8005274 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d106      	bne.n	8005252 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40013400 	.word	0x40013400

08005278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800530c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005310:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	b29b      	uxth	r3, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	b29b      	uxth	r3, r3
 8005322:	4013      	ands	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800533a:	b084      	sub	sp, #16
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	f107 0014 	add.w	r0, r7, #20
 8005348:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	b004      	add	sp, #16
 800537a:	4770      	bx	lr

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4d0d      	ldr	r5, [pc, #52]	; (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	; (80053b8 <__libc_init_array+0x3c>)
 8005382:	1b64      	subs	r4, r4, r5
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2600      	movs	r6, #0
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4d0b      	ldr	r5, [pc, #44]	; (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	; (80053c0 <__libc_init_array+0x44>)
 8005390:	f000 f820 	bl	80053d4 <_init>
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2600      	movs	r6, #0
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	080053fc 	.word	0x080053fc
 80053b8:	080053fc 	.word	0x080053fc
 80053bc:	080053fc 	.word	0x080053fc
 80053c0:	08005400 	.word	0x08005400

080053c4 <memset>:
 80053c4:	4402      	add	r2, r0
 80053c6:	4603      	mov	r3, r0
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d100      	bne.n	80053ce <memset+0xa>
 80053cc:	4770      	bx	lr
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7f9      	b.n	80053c8 <memset+0x4>

080053d4 <_init>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr

080053e0 <_fini>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr
