
TLO_Rock_PCB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004044  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  2000000c  08004240  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08004240  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014647  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002670  00000000  00000000  00034683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00037ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e181  00000000  00000000  00038fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c3f  00000000  00000000  00057141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3b48  00000000  00000000  0006ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e8c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c74  00000000  00000000  0012e91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004204 	.word	0x08004204

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004204 	.word	0x08004204

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f001 f80c 	bl	800123a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f89d 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fc7b 	bl	8000b20 <MX_GPIO_Init>
  MX_I2C3_Init();
 800022a:	f000 f8e5 	bl	80003f8 <MX_I2C3_Init>
  MX_TIM2_Init();
 800022e:	f000 f923 	bl	8000478 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000232:	f000 f9af 	bl	8000594 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000236:	f000 fa03 	bl	8000640 <MX_TIM4_Init>
  MX_TIM8_Init();
 800023a:	f000 fa57 	bl	80006ec <MX_TIM8_Init>
  MX_TIM15_Init();
 800023e:	f000 faaf 	bl	80007a0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000242:	f000 fb51 	bl	80008e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000246:	f000 fbc9 	bl	80009dc <MX_TIM17_Init>
  MX_USB_PCD_Init();
 800024a:	f000 fc41 	bl	8000ad0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 800024e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000252:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 8000256:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000258:	2104      	movs	r1, #4
 800025a:	4838      	ldr	r0, [pc, #224]	; (800033c <main+0x124>)
 800025c:	f002 fdbe 	bl	8002ddc <HAL_TIM_PWM_Start>

  HAL_Delay(10);
 8000260:	200a      	movs	r0, #10
 8000262:	f001 f85b 	bl	800131c <HAL_Delay>
  TIM2->CCR2 = 65536;
 8000266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800026e:	639a      	str	r2, [r3, #56]	; 0x38




  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000270:	2100      	movs	r1, #0
 8000272:	4833      	ldr	r0, [pc, #204]	; (8000340 <main+0x128>)
 8000274:	f002 fdb2 	bl	8002ddc <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 8000278:	4b32      	ldr	r3, [pc, #200]	; (8000344 <main+0x12c>)
 800027a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800027e:	635a      	str	r2, [r3, #52]	; 0x34

  // thrower
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000280:	2100      	movs	r1, #0
 8000282:	4831      	ldr	r0, [pc, #196]	; (8000348 <main+0x130>)
 8000284:	f002 fdaa 	bl	8002ddc <HAL_TIM_PWM_Start>

  HAL_GPIO_TogglePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin);
 8000288:	2101      	movs	r1, #1
 800028a:	4830      	ldr	r0, [pc, #192]	; (800034c <main+0x134>)
 800028c:	f001 fafe 	bl	800188c <HAL_GPIO_TogglePin>
  HAL_Delay(10);
 8000290:	200a      	movs	r0, #10
 8000292:	f001 f843 	bl	800131c <HAL_Delay>
  HAL_GPIO_TogglePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin);
 8000296:	2101      	movs	r1, #1
 8000298:	482c      	ldr	r0, [pc, #176]	; (800034c <main+0x134>)
 800029a:	f001 faf7 	bl	800188c <HAL_GPIO_TogglePin>
  HAL_Delay(10);
 800029e:	200a      	movs	r0, #10
 80002a0:	f001 f83c 	bl	800131c <HAL_Delay>
  HAL_GPIO_TogglePin(M1_DIR_GPIO_Port, M2_DIR_Pin);
 80002a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ac:	f001 faee 	bl	800188c <HAL_GPIO_TogglePin>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b0:	2104      	movs	r1, #4
 80002b2:	4827      	ldr	r0, [pc, #156]	; (8000350 <main+0x138>)
 80002b4:	f002 ff38 	bl	8003128 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b8:	2104      	movs	r1, #4
 80002ba:	4826      	ldr	r0, [pc, #152]	; (8000354 <main+0x13c>)
 80002bc:	f002 ff34 	bl	8003128 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002c0:	2104      	movs	r1, #4
 80002c2:	4825      	ldr	r0, [pc, #148]	; (8000358 <main+0x140>)
 80002c4:	f002 ff30 	bl	8003128 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int n = 1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
  TIM17->CCR1 = 0;
 80002cc:	4b23      	ldr	r3, [pc, #140]	; (800035c <main+0x144>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 4000;
 80002d2:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <main+0x12c>)
 80002d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80002d8:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
	  n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80002da:	2120      	movs	r1, #32
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e0:	f001 faa4 	bl	800182c <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	607b      	str	r3, [r7, #4]
	  if (n == 1){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d121      	bne.n	8000332 <main+0x11a>
		  HAL_Delay(25);
 80002ee:	2019      	movs	r0, #25
 80002f0:	f001 f814 	bl	800131c <HAL_Delay>
		  TIM17->CCR1 = 0;
 80002f4:	4b19      	ldr	r3, [pc, #100]	; (800035c <main+0x144>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f001 f80d 	bl	800131c <HAL_Delay>
		  TIM16->CCR1 = 7000;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <main+0x12c>)
 8000304:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(2000);
 800030a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800030e:	f001 f805 	bl	800131c <HAL_Delay>
		  TIM17->CCR1 = 1000;
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <main+0x144>)
 8000314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(3000);
 800031a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800031e:	f000 fffd 	bl	800131c <HAL_Delay>
		  TIM17->CCR1 = 0;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <main+0x144>)
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM16->CCR1 = 4000;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <main+0x12c>)
 800032a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800032e:	635a      	str	r2, [r3, #52]	; 0x34
 8000330:	e7d3      	b.n	80002da <main+0xc2>
	  }
	  else {
		  TIM17->CCR1 = 4000;
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <main+0x144>)
 8000334:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
	  n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 800033a:	e7ce      	b.n	80002da <main+0xc2>
 800033c:	200001f0 	.word	0x200001f0
 8000340:	20000530 	.word	0x20000530
 8000344:	40014400 	.word	0x40014400
 8000348:	20000158 	.word	0x20000158
 800034c:	48000400 	.word	0x48000400
 8000350:	200001a4 	.word	0x200001a4
 8000354:	200000c0 	.word	0x200000c0
 8000358:	20000074 	.word	0x20000074
 800035c:	40014800 	.word	0x40014800

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b094      	sub	sp, #80	; 0x50
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	2238      	movs	r2, #56	; 0x38
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f003 ff40 	bl	80041f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000382:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000386:	f001 fcd1 	bl	8001d2c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000392:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000394:	2340      	movs	r3, #64	; 0x40
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000398:	2302      	movs	r3, #2
 800039a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039c:	2302      	movs	r3, #2
 800039e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003a0:	2301      	movs	r3, #1
 80003a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003a4:	230c      	movs	r3, #12
 80003a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003ac:	2304      	movs	r3, #4
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003b0:	2302      	movs	r3, #2
 80003b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fd6b 	bl	8001e94 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80003c4:	f000 fc0e 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003cc:	2301      	movs	r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 f86f 	bl	80024c4 <HAL_RCC_ClockConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003ec:	f000 fbfa 	bl	8000be4 <Error_Handler>
  }
}
 80003f0:	bf00      	nop
 80003f2:	3750      	adds	r7, #80	; 0x50
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_I2C3_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_I2C3_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_I2C3_Init+0x74>)
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <MX_I2C3_Init+0x7c>)
 8000406:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_I2C3_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_I2C3_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_I2C3_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_I2C3_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_I2C3_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_I2C3_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_I2C3_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000432:	480e      	ldr	r0, [pc, #56]	; (800046c <MX_I2C3_Init+0x74>)
 8000434:	f001 fa44 	bl	80018c0 <HAL_I2C_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800043e:	f000 fbd1 	bl	8000be4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000442:	2100      	movs	r1, #0
 8000444:	4809      	ldr	r0, [pc, #36]	; (800046c <MX_I2C3_Init+0x74>)
 8000446:	f001 faca 	bl	80019de <HAL_I2CEx_ConfigAnalogFilter>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000450:	f000 fbc8 	bl	8000be4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000454:	2100      	movs	r1, #0
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_I2C3_Init+0x74>)
 8000458:	f001 fb0c 	bl	8001a74 <HAL_I2CEx_ConfigDigitalFilter>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000462:	f000 fbbf 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000028 	.word	0x20000028
 8000470:	40007800 	.word	0x40007800
 8000474:	00303d5b 	.word	0x00303d5b

08000478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	; 0x38
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	f107 031c 	add.w	r3, r7, #28
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004aa:	4b39      	ldr	r3, [pc, #228]	; (8000590 <MX_TIM2_Init+0x118>)
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004b2:	4b37      	ldr	r3, [pc, #220]	; (8000590 <MX_TIM2_Init+0x118>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b35      	ldr	r3, [pc, #212]	; (8000590 <MX_TIM2_Init+0x118>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <MX_TIM2_Init+0x118>)
 80004c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <MX_TIM2_Init+0x118>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <MX_TIM2_Init+0x118>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004d2:	482f      	ldr	r0, [pc, #188]	; (8000590 <MX_TIM2_Init+0x118>)
 80004d4:	f002 fbca 	bl	8002c6c <HAL_TIM_Base_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004de:	f000 fb81 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ec:	4619      	mov	r1, r3
 80004ee:	4828      	ldr	r0, [pc, #160]	; (8000590 <MX_TIM2_Init+0x118>)
 80004f0:	f002 ffbc 	bl	800346c <HAL_TIM_ConfigClockSource>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80004fa:	f000 fb73 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004fe:	4824      	ldr	r0, [pc, #144]	; (8000590 <MX_TIM2_Init+0x118>)
 8000500:	f002 fc0b 	bl	8002d1a <HAL_TIM_PWM_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800050a:	f000 fb6b 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	4619      	mov	r1, r3
 800051c:	481c      	ldr	r0, [pc, #112]	; (8000590 <MX_TIM2_Init+0x118>)
 800051e:	f003 fce7 	bl	8003ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000528:	f000 fb5c 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800052c:	2360      	movs	r3, #96	; 0x60
 800052e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 31250;
 8000530:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000534:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	4812      	ldr	r0, [pc, #72]	; (8000590 <MX_TIM2_Init+0x118>)
 8000546:	f002 fe7d 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000550:	f000 fb48 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	2204      	movs	r2, #4
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	; (8000590 <MX_TIM2_Init+0x118>)
 800055c:	f002 fe72 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000566:	f000 fb3d 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	2208      	movs	r2, #8
 800056e:	4619      	mov	r1, r3
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <MX_TIM2_Init+0x118>)
 8000572:	f002 fe67 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 800057c:	f000 fb32 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <MX_TIM2_Init+0x118>)
 8000582:	f000 fcef 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000586:	bf00      	nop
 8000588:	3738      	adds	r7, #56	; 0x38
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200001f0 	.word	0x200001f0

08000594 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2224      	movs	r2, #36	; 0x24
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fe26 	bl	80041f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <MX_TIM3_Init+0xa4>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <MX_TIM3_Init+0xa8>)
 80005b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_TIM3_Init+0xa4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_TIM3_Init+0xa4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_TIM3_Init+0xa4>)
 80005c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_TIM3_Init+0xa4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_TIM3_Init+0xa4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005d8:	2301      	movs	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_TIM3_Init+0xa4>)
 8000604:	f002 fcea 	bl	8002fdc <HAL_TIM_Encoder_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800060e:	f000 fae9 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_TIM3_Init+0xa4>)
 8000620:	f003 fc66 	bl	8003ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800062a:	f000 fadb 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	; 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001a4 	.word	0x200001a4
 800063c:	40000400 	.word	0x40000400

08000640 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2224      	movs	r2, #36	; 0x24
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fdd0 	bl	80041f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_TIM4_Init+0xa4>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <MX_TIM4_Init+0xa8>)
 8000662:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_TIM4_Init+0xa4>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_TIM4_Init+0xa4>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_TIM4_Init+0xa4>)
 8000672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000676:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_TIM4_Init+0xa4>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_TIM4_Init+0xa4>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000684:	2301      	movs	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800068c:	2301      	movs	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800069c:	2301      	movs	r3, #1
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_TIM4_Init+0xa4>)
 80006b0:	f002 fc94 	bl	8002fdc <HAL_TIM_Encoder_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80006ba:	f000 fa93 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <MX_TIM4_Init+0xa4>)
 80006cc:	f003 fc10 	bl	8003ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80006d6:	f000 fa85 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3730      	adds	r7, #48	; 0x30
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000c0 	.word	0x200000c0
 80006e8:	40000800 	.word	0x40000800

080006ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2224      	movs	r2, #36	; 0x24
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fd7a 	bl	80041f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_TIM8_Init+0xac>)
 800070c:	4a23      	ldr	r2, [pc, #140]	; (800079c <MX_TIM8_Init+0xb0>)
 800070e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_TIM8_Init+0xac>)
 8000712:	2205      	movs	r2, #5
 8000714:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_TIM8_Init+0xac>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64000;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM8_Init+0xac>)
 800071e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000722:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM8_Init+0xac>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_TIM8_Init+0xac>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_TIM8_Init+0xac>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000736:	2301      	movs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800073e:	2301      	movs	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800074e:	2301      	movs	r3, #1
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	4619      	mov	r1, r3
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM8_Init+0xac>)
 8000762:	f002 fc3b 	bl	8002fdc <HAL_TIM_Encoder_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800076c:	f000 fa3a 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_TIM8_Init+0xac>)
 8000782:	f003 fbb5 	bl	8003ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800078c:	f000 fa2a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	; 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000074 	.word	0x20000074
 800079c:	40013400 	.word	0x40013400

080007a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2234      	movs	r2, #52	; 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fd0a 	bl	80041f4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80007e0:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <MX_TIM15_Init+0x140>)
 80007e2:	4a40      	ldr	r2, [pc, #256]	; (80008e4 <MX_TIM15_Init+0x144>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <MX_TIM15_Init+0x140>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <MX_TIM15_Init+0x140>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <MX_TIM15_Init+0x140>)
 80007f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <MX_TIM15_Init+0x140>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <MX_TIM15_Init+0x140>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <MX_TIM15_Init+0x140>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800080c:	4834      	ldr	r0, [pc, #208]	; (80008e0 <MX_TIM15_Init+0x140>)
 800080e:	f002 fa2d 	bl	8002c6c <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 f9e4 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000826:	4619      	mov	r1, r3
 8000828:	482d      	ldr	r0, [pc, #180]	; (80008e0 <MX_TIM15_Init+0x140>)
 800082a:	f002 fe1f 	bl	800346c <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 f9d6 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000838:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_TIM15_Init+0x140>)
 800083a:	f002 fa6e 	bl	8002d1a <HAL_TIM_PWM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000844:	f000 f9ce 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000850:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000854:	4619      	mov	r1, r3
 8000856:	4822      	ldr	r0, [pc, #136]	; (80008e0 <MX_TIM15_Init+0x140>)
 8000858:	f003 fb4a 	bl	8003ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000862:	f000 f9bf 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000866:	2360      	movs	r3, #96	; 0x60
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 31250;
 800086a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_TIM15_Init+0x140>)
 800088e:	f002 fcd9 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000898:	f000 f9a4 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM15_Init+0x140>)
 80008c4:	f003 fb96 	bl	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80008ce:	f000 f989 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM15_Init+0x140>)
 80008d4:	f000 fb46 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 80008d8:	bf00      	nop
 80008da:	3770      	adds	r7, #112	; 0x70
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000010c 	.word	0x2000010c
 80008e4:	40014000 	.word	0x40014000

080008e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2234      	movs	r2, #52	; 0x34
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f003 fc73 	bl	80041f4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_TIM16_Init+0xec>)
 8000910:	4a31      	ldr	r2, [pc, #196]	; (80009d8 <MX_TIM16_Init+0xf0>)
 8000912:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <MX_TIM16_Init+0xec>)
 8000916:	2204      	movs	r2, #4
 8000918:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <MX_TIM16_Init+0xec>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8000920:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_TIM16_Init+0xec>)
 8000922:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000926:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <MX_TIM16_Init+0xec>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <MX_TIM16_Init+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <MX_TIM16_Init+0xec>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800093a:	4826      	ldr	r0, [pc, #152]	; (80009d4 <MX_TIM16_Init+0xec>)
 800093c:	f002 f996 	bl	8002c6c <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000946:	f000 f94d 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <MX_TIM16_Init+0xec>)
 800094c:	f002 f9e5 	bl	8002d1a <HAL_TIM_PWM_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000956:	f000 f945 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 800095e:	2301      	movs	r3, #1
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000966:	2300      	movs	r3, #0
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000976:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_TIM16_Init+0xec>)
 8000980:	f002 fc60 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800098a:	f000 f92b 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <MX_TIM16_Init+0xec>)
 80009b6:	f003 fb1d 	bl	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80009c0:	f000 f910 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <MX_TIM16_Init+0xec>)
 80009c6:	f000 facd 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	; 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000530 	.word	0x20000530
 80009d8:	40014400 	.word	0x40014400

080009dc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2234      	movs	r2, #52	; 0x34
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fbf9 	bl	80041f4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a04:	4a31      	ldr	r2, [pc, #196]	; (8000acc <MX_TIM17_Init+0xf0>)
 8000a06:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8000a08:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a16:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000a1a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a2e:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a30:	f002 f91c 	bl	8002c6c <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000a3a:	f000 f8d3 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000a3e:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a40:	f002 f96b 	bl	8002d1a <HAL_TIM_PWM_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000a4a:	f000 f8cb 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4e:	2360      	movs	r3, #96	; 0x60
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a56:	2300      	movs	r3, #0
 8000a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000a74:	f002 fbe6 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000a7e:	f000 f8b1 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000aaa:	f003 faa3 	bl	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000ab4:	f000 f896 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM17_Init+0xec>)
 8000aba:	f000 fa53 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	; 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000158 	.word	0x20000158
 8000acc:	40014800 	.word	0x40014800

08000ad0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <MX_USB_PCD_Init+0x4c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000adc:	2208      	movs	r2, #8
 8000ade:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000b06:	f001 f801 	bl	8001b0c <HAL_PCD_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b10:	f000 f868 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000023c 	.word	0x2000023c
 8000b1c:	40005c00 	.word	0x40005c00

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f240 410a 	movw	r1, #1034	; 0x40a
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f000 fe74 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2101      	movs	r1, #1
 8000b78:	4819      	ldr	r0, [pc, #100]	; (8000be0 <MX_GPIO_Init+0xc0>)
 8000b7a:	f000 fe6f 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8000b7e:	f240 430a 	movw	r3, #1034	; 0x40a
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fcc5 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f000 fcb8 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_GPIO_Init+0xc0>)
 8000bd0:	f000 fcaa 	bl	8001528 <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000400 	.word	0x48000400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6613      	str	r3, [r2, #96]	; 0x60
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c26:	f001 f925 	bl	8001e74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09c      	sub	sp, #112	; 0x70
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	2244      	movs	r2, #68	; 0x44
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 facb 	bl	80041f4 <memset>
  if(hi2c->Instance==I2C3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d154      	bne.n	8000d12 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fe08 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c82:	f7ff ffaf 	bl	8000be4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fc27 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cda:	2320      	movs	r3, #32
 8000cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000cea:	2308      	movs	r3, #8
 8000cec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <HAL_I2C_MspInit+0xec>)
 8000cf6:	f000 fc17 	bl	8001528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000d00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3770      	adds	r7, #112	; 0x70
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40007800 	.word	0x40007800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000400 	.word	0x48000400

08000d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d38:	d10c      	bne.n	8000d54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d52:	e034      	b.n	8000dbe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_TIM_Base_MspInit+0xa8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10c      	bne.n	8000d78 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
}
 8000d76:	e022      	b.n	8000dbe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <HAL_TIM_Base_MspInit+0xac>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10c      	bne.n	8000d9c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	e010      	b.n	8000dbe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10b      	bne.n	8000dbe <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db0:	6613      	str	r3, [r2, #96]	; 0x60
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_TIM_Base_MspInit+0xa4>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
}
 8000dbe:	bf00      	nop
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40014000 	.word	0x40014000
 8000dd4:	40014400 	.word	0x40014400
 8000dd8:	40014800 	.word	0x40014800

08000ddc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a55      	ldr	r2, [pc, #340]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x174>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d129      	bne.n	8000e52 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfe:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b4f      	ldr	r3, [pc, #316]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a4e      	ldr	r2, [pc, #312]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 8000e2e:	2350      	movs	r3, #80	; 0x50
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f000 fb6c 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e50:	e079      	b.n	8000f46 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a40      	ldr	r2, [pc, #256]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d128      	bne.n	8000eae <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5c:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e60:	4a3c      	ldr	r2, [pc, #240]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6593      	str	r3, [r2, #88]	; 0x58
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	4a36      	ldr	r2, [pc, #216]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 8000e8c:	23c0      	movs	r3, #192	; 0xc0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	482d      	ldr	r0, [pc, #180]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x180>)
 8000ea8:	f000 fb3e 	bl	8001528 <HAL_GPIO_Init>
}
 8000eac:	e04b      	b.n	8000f46 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x184>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d146      	bne.n	8000f46 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebc:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000ebe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x178>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCA_Pin;
 8000f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000f12:	2302      	movs	r3, #2
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_ENCA_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f000 fb02 	bl	8001528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8_CH2_ENCB_Pin;
 8000f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8000f36:	230a      	movs	r3, #10
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH2_ENCB_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x180>)
 8000f42:	f000 faf1 	bl	8001528 <HAL_GPIO_Init>
}
 8000f46:	bf00      	nop
 8000f48:	3738      	adds	r7, #56	; 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	40013400 	.word	0x40013400

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f84:	d14b      	bne.n	800101e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b55      	ldr	r3, [pc, #340]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a54      	ldr	r2, [pc, #336]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH1_M1_PWM_Pin;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f000 faa8 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 8000fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8000fea:	230a      	movs	r3, #10
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f000 fa96 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100c:	2301      	movs	r3, #1
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4838      	ldr	r0, [pc, #224]	; (80010f8 <HAL_TIM_MspPostInit+0x194>)
 8001018:	f000 fa86 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800101c:	e066      	b.n	80010ec <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a36      	ldr	r2, [pc, #216]	; (80010fc <HAL_TIM_MspPostInit+0x198>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d11d      	bne.n	8001064 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 8001040:	2304      	movs	r3, #4
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001050:	2309      	movs	r3, #9
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f000 fa63 	bl	8001528 <HAL_GPIO_Init>
}
 8001062:	e043      	b.n	80010ec <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_TIM_MspPostInit+0x19c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d11c      	bne.n	80010a8 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 8001086:	2310      	movs	r3, #16
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001096:	2301      	movs	r3, #1
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <HAL_TIM_MspPostInit+0x194>)
 80010a2:	f000 fa41 	bl	8001528 <HAL_GPIO_Init>
}
 80010a6:	e021      	b.n	80010ec <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a15      	ldr	r2, [pc, #84]	; (8001104 <HAL_TIM_MspPostInit+0x1a0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d11c      	bne.n	80010ec <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_MspPostInit+0x190>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80010da:	2301      	movs	r3, #1
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fa1e 	bl	8001528 <HAL_GPIO_Init>
}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	; 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	40014000 	.word	0x40014000
 8001100:	40014400 	.word	0x40014400
 8001104:	40014800 	.word	0x40014800

08001108 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2244      	movs	r2, #68	; 0x44
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f003 f86b 	bl	80041f4 <memset>
  if(hpcd->Instance==USB)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <HAL_PCD_MspInit+0x60>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d11b      	bne.n	8001160 <HAL_PCD_MspInit+0x58>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800112e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fba7 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8001144:	f7ff fd4e 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_PCD_MspInit+0x64>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_PCD_MspInit+0x64>)
 800114e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001152:	6593      	str	r3, [r2, #88]	; 0x58
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_PCD_MspInit+0x64>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3750      	adds	r7, #80	; 0x50
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40005c00 	.word	0x40005c00
 800116c:	40021000 	.word	0x40021000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f890 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <LoopForever+0x2>)
 80011ea:	4685      	mov	sp, r0
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <LoopForever+0x6>)
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <LoopForever+0xa>)
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <LoopForever+0xe>)
 80011f2:	2300      	movs	r3, #0
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:
 80011f6:	58d4      	ldr	r4, [r2, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:
 80011fc:	18c4      	adds	r4, r0, r3
 80011fe:	428c      	cmp	r4, r1
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopForever+0x12>)
 8001204:	4c0b      	ldr	r4, [pc, #44]	; (8001234 <LoopForever+0x16>)
 8001206:	2300      	movs	r3, #0
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:
 800120e:	42a2      	cmp	r2, r4
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>
 8001212:	f7ff ffd7 	bl	80011c4 <SystemInit>
 8001216:	f002 ffc9 	bl	80041ac <__libc_init_array>
 800121a:	f7fe fffd 	bl	8000218 <main>

0800121e <LoopForever>:
 800121e:	e7fe      	b.n	800121e <LoopForever>
 8001220:	20008000 	.word	0x20008000
 8001224:	20000000 	.word	0x20000000
 8001228:	2000000c 	.word	0x2000000c
 800122c:	08004234 	.word	0x08004234
 8001230:	2000000c 	.word	0x2000000c
 8001234:	20000580 	.word	0x20000580

08001238 <ADC1_2_IRQHandler>:
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>

0800123a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f93d 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f80e 	bl	800126c <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	e001      	b.n	8001260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125c:	f7ff fcc8 	bl	8000bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001260:	79fb      	ldrb	r3, [r7, #7]

}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_InitTick+0x68>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d022      	beq.n	80012c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_InitTick+0x6c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_InitTick+0x68>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800128c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f93a 	bl	800150e <HAL_SYSTICK_Config>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10f      	bne.n	80012c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d809      	bhi.n	80012ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a6:	2200      	movs	r2, #0
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295
 80012ae:	f000 f914 	bl	80014da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_InitTick+0x70>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e007      	b.n	80012ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e004      	b.n	80012ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x1c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x1c>)
 80012f0:	6013      	str	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	2000057c 	.word	0x2000057c
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2000057c 	.word	0x2000057c

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d004      	beq.n	8001340 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_Delay+0x40>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001340:	bf00      	nop
 8001342:	f7ff ffdf 	bl	8001304 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	429a      	cmp	r2, r3
 8001350:	d8f7      	bhi.n	8001342 <HAL_Delay+0x26>
  {
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000008 	.word	0x20000008

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff47 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff5e 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff90 	bl	8001418 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5f 	bl	80013c4 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffb2 	bl	8001480 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001536:	e15a      	b.n	80017ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 814c 	beq.w	80017e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d005      	beq.n	8001568 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001564:	2b02      	cmp	r3, #2
 8001566:	d130      	bne.n	80015ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800159e:	2201      	movs	r2, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	f003 0201 	and.w	r2, r3, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d017      	beq.n	8001606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d123      	bne.n	800165a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	6939      	ldr	r1, [r7, #16]
 8001656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0203 	and.w	r2, r3, #3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a6 	beq.w	80017e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169c:	4b5b      	ldr	r3, [pc, #364]	; (800180c <HAL_GPIO_Init+0x2e4>)
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	4a5a      	ldr	r2, [pc, #360]	; (800180c <HAL_GPIO_Init+0x2e4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6613      	str	r3, [r2, #96]	; 0x60
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_GPIO_Init+0x2e4>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b4:	4a56      	ldr	r2, [pc, #344]	; (8001810 <HAL_GPIO_Init+0x2e8>)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016de:	d01f      	beq.n	8001720 <HAL_GPIO_Init+0x1f8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <HAL_GPIO_Init+0x2ec>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d019      	beq.n	800171c <HAL_GPIO_Init+0x1f4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d013      	beq.n	8001718 <HAL_GPIO_Init+0x1f0>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_GPIO_Init+0x2f4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00d      	beq.n	8001714 <HAL_GPIO_Init+0x1ec>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a49      	ldr	r2, [pc, #292]	; (8001820 <HAL_GPIO_Init+0x2f8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x1e8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a48      	ldr	r2, [pc, #288]	; (8001824 <HAL_GPIO_Init+0x2fc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_GPIO_Init+0x1e4>
 8001708:	2305      	movs	r3, #5
 800170a:	e00a      	b.n	8001722 <HAL_GPIO_Init+0x1fa>
 800170c:	2306      	movs	r3, #6
 800170e:	e008      	b.n	8001722 <HAL_GPIO_Init+0x1fa>
 8001710:	2304      	movs	r3, #4
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x1fa>
 8001714:	2303      	movs	r3, #3
 8001716:	e004      	b.n	8001722 <HAL_GPIO_Init+0x1fa>
 8001718:	2302      	movs	r3, #2
 800171a:	e002      	b.n	8001722 <HAL_GPIO_Init+0x1fa>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_GPIO_Init+0x1fa>
 8001720:	2300      	movs	r3, #0
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	f002 0203 	and.w	r2, r2, #3
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	4093      	lsls	r3, r2
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001732:	4937      	ldr	r1, [pc, #220]	; (8001810 <HAL_GPIO_Init+0x2e8>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001740:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_GPIO_Init+0x300>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001764:	4a30      	ldr	r2, [pc, #192]	; (8001828 <HAL_GPIO_Init+0x300>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_GPIO_Init+0x300>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800178e:	4a26      	ldr	r2, [pc, #152]	; (8001828 <HAL_GPIO_Init+0x300>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_GPIO_Init+0x300>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x300>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_GPIO_Init+0x300>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <HAL_GPIO_Init+0x300>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f47f ae9d 	bne.w	8001538 <HAL_GPIO_Init+0x10>
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	48000400 	.word	0x48000400
 8001818:	48000800 	.word	0x48000800
 800181c:	48000c00 	.word	0x48000c00
 8001820:	48001000 	.word	0x48001000
 8001824:	48001400 	.word	0x48001400
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e001      	b.n	800184e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001878:	e002      	b.n	8001880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43d9      	mvns	r1, r3
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	400b      	ands	r3, r1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e081      	b.n	80019d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff f9a6 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001910:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001920:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	e006      	b.n	8001948 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001946:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d104      	bne.n	800195a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800197c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69d9      	ldr	r1, [r3, #28]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1a      	ldr	r2, [r3, #32]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d138      	bne.n	8001a66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e032      	b.n	8001a68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2224      	movs	r2, #36	; 0x24
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d139      	bne.n	8001afe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e033      	b.n	8001b00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ac6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001afe:	2302      	movs	r3, #2
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b08b      	sub	sp, #44	; 0x2c
 8001b10:	af06      	add	r7, sp, #24
 8001b12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0d7      	b.n	8001cce <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fae8 	bl	8001108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 faf5 	bl	8004134 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e04c      	b.n	8001bea <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3301      	adds	r3, #1
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	b298      	uxth	r0, r3
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3336      	adds	r3, #54	; 0x36
 8001b8e:	4602      	mov	r2, r0
 8001b90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3303      	adds	r3, #3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3338      	adds	r3, #56	; 0x38
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	333c      	adds	r3, #60	; 0x3c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3340      	adds	r3, #64	; 0x40
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	3301      	adds	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d3ad      	bcc.n	8001b50 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e044      	b.n	8001c84 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	3301      	adds	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3b5      	bcc.n	8001bfa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	687e      	ldr	r6, [r7, #4]
 8001c96:	466d      	mov	r5, sp
 8001c98:	f106 0410 	add.w	r4, r6, #16
 8001c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	602b      	str	r3, [r5, #0]
 8001ca4:	1d33      	adds	r3, r6, #4
 8001ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f002 fa5e 	bl	800416a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f805 	bl	8001cd6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d141      	bne.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d46:	d131      	bne.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d48:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d4e:	4a46      	ldr	r2, [pc, #280]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d58:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d60:	4a41      	ldr	r2, [pc, #260]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2232      	movs	r2, #50	; 0x32
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a3f      	ldr	r2, [pc, #252]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7e:	e002      	b.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	d102      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f2      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d9a:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da6:	d158      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e057      	b.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dbc:	e04d      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc4:	d141      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d131      	bne.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dda:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dec:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2232      	movs	r2, #50	; 0x32
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0a:	e002      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1e:	d102      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f2      	bne.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e32:	d112      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e011      	b.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e48:	e007      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e82:	6093      	str	r3, [r2, #8]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40007000 	.word	0x40007000

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e308      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d075      	beq.n	8001f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb2:	4ba3      	ldr	r3, [pc, #652]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ebc:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3e>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x44>
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	4b99      	ldr	r3, [pc, #612]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d05b      	beq.n	8001f9c <HAL_RCC_OscConfig+0x108>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d157      	bne.n	8001f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e2e3      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x74>
 8001efa:	4b91      	ldr	r3, [pc, #580]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a90      	ldr	r2, [pc, #576]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a8a      	ldr	r2, [pc, #552]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a87      	ldr	r2, [pc, #540]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	4b84      	ldr	r3, [pc, #528]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a83      	ldr	r2, [pc, #524]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a80      	ldr	r2, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f9da 	bl	8001304 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff f9d6 	bl	8001304 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e2a8      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xc0>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f9c6 	bl	8001304 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f9c2 	bl	8001304 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e294      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8e:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0xe8>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d075      	beq.n	8002096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001faa:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb4:	4b62      	ldr	r3, [pc, #392]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b0c      	cmp	r3, #12
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_OscConfig+0x136>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x13c>
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d11f      	bne.n	8002010 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x154>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e267      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b55      	ldr	r3, [pc, #340]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	4952      	ldr	r1, [pc, #328]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ffc:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_RCC_OscConfig+0x2b0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f933 	bl	800126c <HAL_InitTick>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d043      	beq.n	8002094 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e253      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d023      	beq.n	8002060 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f96e 	bl	8001304 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7ff f96a 	bl	8001304 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e23c      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203e:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	4939      	ldr	r1, [pc, #228]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
 800205e:	e01a      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002060:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a36      	ldr	r2, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff f94a 	bl	8001304 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002074:	f7ff f946 	bl	8001304 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e218      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x1e0>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f923 	bl	8001304 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c2:	f7ff f91f 	bl	8001304 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1f1      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ef      	beq.n	80020c2 <HAL_RCC_OscConfig+0x22e>
 80020e2:	e01b      	b.n	800211c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff f906 	bl	8001304 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff f902 	bl	8001304 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1d4      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ef      	bne.n	80020fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80ab 	beq.w	8002280 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x2b4>
 800213a:	2301      	movs	r3, #1
 800213c:	e005      	b.n	800214a <HAL_RCC_OscConfig+0x2b6>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	20000004 	.word	0x20000004
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	4baf      	ldr	r3, [pc, #700]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4aae      	ldr	r2, [pc, #696]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
 800215a:	4bac      	ldr	r3, [pc, #688]	; (800240c <HAL_RCC_OscConfig+0x578>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216a:	4ba9      	ldr	r3, [pc, #676]	; (8002410 <HAL_RCC_OscConfig+0x57c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002176:	4ba6      	ldr	r3, [pc, #664]	; (8002410 <HAL_RCC_OscConfig+0x57c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4aa5      	ldr	r2, [pc, #660]	; (8002410 <HAL_RCC_OscConfig+0x57c>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7ff f8bf 	bl	8001304 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7ff f8bb 	bl	8001304 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e18d      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219c:	4b9c      	ldr	r3, [pc, #624]	; (8002410 <HAL_RCC_OscConfig+0x57c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d108      	bne.n	80021c2 <HAL_RCC_OscConfig+0x32e>
 80021b0:	4b96      	ldr	r3, [pc, #600]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	4a95      	ldr	r2, [pc, #596]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c0:	e024      	b.n	800220c <HAL_RCC_OscConfig+0x378>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d110      	bne.n	80021ec <HAL_RCC_OscConfig+0x358>
 80021ca:	4b90      	ldr	r3, [pc, #576]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	4a8e      	ldr	r2, [pc, #568]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021da:	4b8c      	ldr	r3, [pc, #560]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	4a8a      	ldr	r2, [pc, #552]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ea:	e00f      	b.n	800220c <HAL_RCC_OscConfig+0x378>
 80021ec:	4b87      	ldr	r3, [pc, #540]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	4a86      	ldr	r2, [pc, #536]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fc:	4b83      	ldr	r3, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	4a82      	ldr	r2, [pc, #520]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d016      	beq.n	8002242 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff f876 	bl	8001304 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7ff f872 	bl	8001304 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e142      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ed      	beq.n	800221c <HAL_RCC_OscConfig+0x388>
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff f85f 	bl	8001304 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7ff f85b 	bl	8001304 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e12b      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ed      	bne.n	800224a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	4a64      	ldr	r2, [pc, #400]	; (800240c <HAL_RCC_OscConfig+0x578>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002294:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800229a:	4a5c      	ldr	r2, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x578>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff f82e 	bl	8001304 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ac:	f7ff f82a 	bl	8001304 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0fc      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022be:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80022c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x418>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ce:	4b4f      	ldr	r3, [pc, #316]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80022d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d4:	4a4d      	ldr	r2, [pc, #308]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff f811 	bl	8001304 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022e6:	f7ff f80d 	bl	8001304 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0df      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80022fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80d3 	beq.w	80024b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002310:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b0c      	cmp	r3, #12
 800231a:	f000 808d 	beq.w	8002438 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d15a      	bne.n	80023dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_RCC_OscConfig+0x578>)
 800232c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe ffe7 	bl	8001304 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe ffe3 	bl	8001304 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0b5      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_RCC_OscConfig+0x578>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RCC_OscConfig+0x578>)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_OscConfig+0x580>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6a11      	ldr	r1, [r2, #32]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002368:	3a01      	subs	r2, #1
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800237a:	0852      	lsrs	r2, r2, #1
 800237c:	3a01      	subs	r2, #1
 800237e:	0552      	lsls	r2, r2, #21
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002386:	0852      	lsrs	r2, r2, #1
 8002388:	3a01      	subs	r2, #1
 800238a:	0652      	lsls	r2, r2, #25
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002392:	06d2      	lsls	r2, r2, #27
 8002394:	430a      	orrs	r2, r1
 8002396:	491d      	ldr	r1, [pc, #116]	; (800240c <HAL_RCC_OscConfig+0x578>)
 8002398:	4313      	orrs	r3, r2
 800239a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x578>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe ffa6 	bl	8001304 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe ffa2 	bl	8001304 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e074      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x528>
 80023da:	e06c      	b.n	80024b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a07      	ldr	r2, [pc, #28]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_RCC_OscConfig+0x578>)
 80023fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe ff7e 	bl	8001304 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240a:	e00e      	b.n	800242a <HAL_RCC_OscConfig+0x596>
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe ff74 	bl	8001304 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e046      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_RCC_OscConfig+0x62c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x584>
 8002436:	e03e      	b.n	80024b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e039      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCC_OscConfig+0x62c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d12c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d123      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d11b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d113      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e11e      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b91      	ldr	r3, [pc, #580]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 020f 	bic.w	r2, r3, #15
 80024f2:	498c      	ldr	r1, [pc, #560]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b8a      	ldr	r3, [pc, #552]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e106      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d073      	beq.n	8002600 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d129      	bne.n	8002574 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0f4      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002530:	f000 f966 	bl	8002800 <RCC_GetSysClockFreqFromPLLSource>
 8002534:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4a7c      	ldr	r2, [pc, #496]	; (800272c <HAL_RCC_ClockConfig+0x268>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d93f      	bls.n	80025be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800253e:	4b7a      	ldr	r3, [pc, #488]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002552:	2b00      	cmp	r3, #0
 8002554:	d033      	beq.n	80025be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d12f      	bne.n	80025be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800255e:	4b72      	ldr	r3, [pc, #456]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002566:	4a70      	ldr	r2, [pc, #448]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e024      	b.n	80025be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d107      	bne.n	800258c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0c6      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258c:	4b66      	ldr	r3, [pc, #408]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0be      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800259c:	f000 f8ce 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4a61      	ldr	r2, [pc, #388]	; (800272c <HAL_RCC_ClockConfig+0x268>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d909      	bls.n	80025be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025aa:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b2:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4957      	ldr	r1, [pc, #348]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d0:	f7fe fe98 	bl	8001304 <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fe94 	bl	8001304 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e095      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a42      	ldr	r2, [pc, #264]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 800261e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002622:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002630:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002638:	4a3b      	ldr	r2, [pc, #236]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 800263a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800263e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4936      	ldr	r1, [pc, #216]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
 8002652:	e008      	b.n	8002666 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d105      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800265a:	4b33      	ldr	r3, [pc, #204]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4a32      	ldr	r2, [pc, #200]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002664:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d21d      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 020f 	bic.w	r2, r3, #15
 800267c:	4929      	ldr	r1, [pc, #164]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002684:	f7fe fe3e 	bl	8001304 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fe3a 	bl	8001304 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e03b      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1ed      	bne.n	800268c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4917      	ldr	r1, [pc, #92]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490f      	ldr	r1, [pc, #60]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ee:	f000 f825 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490c      	ldr	r1, [pc, #48]	; (8002730 <HAL_RCC_ClockConfig+0x26c>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x270>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fdaa 	bl	800126c <HAL_InitTick>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40022000 	.word	0x40022000
 8002728:	40021000 	.word	0x40021000
 800272c:	04c4b400 	.word	0x04c4b400
 8002730:	0800421c 	.word	0x0800421c
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002742:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d102      	bne.n	8002754 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	e047      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d102      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e03e      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d136      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3301      	adds	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279a:	68d2      	ldr	r2, [r2, #12]
 800279c:	0a12      	lsrs	r2, r2, #8
 800279e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
      break;
 80027a8:	e00c      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	0a12      	lsrs	r2, r2, #8
 80027b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
      break;
 80027c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0e5b      	lsrs	r3, r3, #25
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e001      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027e4:	693b      	ldr	r3, [r7, #16]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200

08002800 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3301      	adds	r3, #1
 800281c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d10c      	bne.n	800283e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002824:	4a17      	ldr	r2, [pc, #92]	; (8002884 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800282e:	68d2      	ldr	r2, [r2, #12]
 8002830:	0a12      	lsrs	r2, r2, #8
 8002832:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	617b      	str	r3, [r7, #20]
    break;
 800283c:	e00c      	b.n	8002858 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	0a12      	lsrs	r2, r2, #8
 800284c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    break;
 8002856:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0e5b      	lsrs	r3, r3, #25
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	3301      	adds	r3, #1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002872:	687b      	ldr	r3, [r7, #4]
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000
 8002884:	007a1200 	.word	0x007a1200
 8002888:	00f42400 	.word	0x00f42400

0800288c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002894:	2300      	movs	r3, #0
 8002896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002898:	2300      	movs	r3, #0
 800289a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8098 	beq.w	80029da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	4a3f      	ldr	r2, [pc, #252]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a39      	ldr	r2, [pc, #228]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e2:	f7fe fd0f 	bl	8001304 <HAL_GetTick>
 80028e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e8:	e009      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7fe fd0b 	bl	8001304 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d902      	bls.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	74fb      	strb	r3, [r7, #19]
        break;
 80028fc:	e005      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fe:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ef      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d159      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01e      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	d019      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293e:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe fccb 	bl	8001304 <HAL_GetTick>
 800296e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002970:	e00b      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fcc7 	bl	8001304 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d902      	bls.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	74fb      	strb	r3, [r7, #19]
            break;
 8002988:	e006      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ec      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029b4:	e008      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	74bb      	strb	r3, [r7, #18]
 80029ba:	e005      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c8:	7c7b      	ldrb	r3, [r7, #17]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ce:	4ba6      	ldr	r3, [pc, #664]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	4aa5      	ldr	r2, [pc, #660]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e6:	4ba0      	ldr	r3, [pc, #640]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f023 0203 	bic.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	499c      	ldr	r1, [pc, #624]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a08:	4b97      	ldr	r3, [pc, #604]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 020c 	bic.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4994      	ldr	r1, [pc, #592]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a2a:	4b8f      	ldr	r3, [pc, #572]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	498b      	ldr	r1, [pc, #556]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a4c:	4b86      	ldr	r3, [pc, #536]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	4983      	ldr	r1, [pc, #524]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a6e:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	497a      	ldr	r1, [pc, #488]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a90:	4b75      	ldr	r3, [pc, #468]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4972      	ldr	r1, [pc, #456]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4969      	ldr	r1, [pc, #420]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad4:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4961      	ldr	r1, [pc, #388]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af6:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	4958      	ldr	r1, [pc, #352]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	4950      	ldr	r1, [pc, #320]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b38:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b50:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	4942      	ldr	r1, [pc, #264]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b70:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4934      	ldr	r1, [pc, #208]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	4926      	ldr	r1, [pc, #152]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bde:	d105      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	4918      	ldr	r1, [pc, #96]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c16:	d105      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	490a      	ldr	r1, [pc, #40]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e049      	b.n	8002d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe f848 	bl	8000d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 fcd8 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e049      	b.n	8002dc0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f841 	bl	8002dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 fc81 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x24>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e03c      	b.n	8002e7a <HAL_TIM_PWM_Start+0x9e>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d109      	bne.n	8002e1a <HAL_TIM_PWM_Start+0x3e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e02f      	b.n	8002e7a <HAL_TIM_PWM_Start+0x9e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d109      	bne.n	8002e34 <HAL_TIM_PWM_Start+0x58>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e022      	b.n	8002e7a <HAL_TIM_PWM_Start+0x9e>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d109      	bne.n	8002e4e <HAL_TIM_PWM_Start+0x72>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	e015      	b.n	8002e7a <HAL_TIM_PWM_Start+0x9e>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d109      	bne.n	8002e68 <HAL_TIM_PWM_Start+0x8c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e008      	b.n	8002e7a <HAL_TIM_PWM_Start+0x9e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e097      	b.n	8002fb2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <HAL_TIM_PWM_Start+0xb6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e90:	e023      	b.n	8002eda <HAL_TIM_PWM_Start+0xfe>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d104      	bne.n	8002ea2 <HAL_TIM_PWM_Start+0xc6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea0:	e01b      	b.n	8002eda <HAL_TIM_PWM_Start+0xfe>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d104      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0xd6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb0:	e013      	b.n	8002eda <HAL_TIM_PWM_Start+0xfe>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0xe6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ec0:	e00b      	b.n	8002eda <HAL_TIM_PWM_Start+0xfe>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0xf6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed0:	e003      	b.n	8002eda <HAL_TIM_PWM_Start+0xfe>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ffde 	bl	8003ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a33      	ldr	r2, [pc, #204]	; (8002fbc <HAL_TIM_PWM_Start+0x1e0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x13e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a32      	ldr	r2, [pc, #200]	; (8002fc0 <HAL_TIM_PWM_Start+0x1e4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x13e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <HAL_TIM_PWM_Start+0x1e8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x13e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <HAL_TIM_PWM_Start+0x1ec>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x13e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_TIM_PWM_Start+0x1f0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PWM_Start+0x142>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_TIM_PWM_Start+0x144>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <HAL_TIM_PWM_Start+0x1e0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d018      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x194>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d013      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x194>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <HAL_TIM_PWM_Start+0x1f4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00e      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x194>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <HAL_TIM_PWM_Start+0x1f8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x194>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_TIM_PWM_Start+0x1e4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_TIM_PWM_Start+0x194>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <HAL_TIM_PWM_Start+0x1e8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d115      	bne.n	8002f9c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_TIM_PWM_Start+0x1fc>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d015      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1d2>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d011      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e008      	b.n	8002fae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e000      	b.n	8002fb0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40013400 	.word	0x40013400
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	00010007 	.word	0x00010007

08002fdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e097      	b.n	8003120 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fd fee9 	bl	8000ddc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003020:	f023 0307 	bic.w	r3, r3, #7
 8003024:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f000 fb15 	bl	8003660 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	4313      	orrs	r3, r2
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800307c:	f023 030c 	bic.w	r3, r3, #12
 8003080:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	4313      	orrs	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	011a      	lsls	r2, r3, #4
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	031b      	lsls	r3, r3, #12
 80030ac:	4313      	orrs	r3, r2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80030ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4313      	orrs	r3, r2
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003138:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003140:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003148:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003150:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d110      	bne.n	800317a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800315e:	7b7b      	ldrb	r3, [r7, #13]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e069      	b.n	800323c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003178:	e031      	b.n	80031de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d110      	bne.n	80031a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003180:	7bbb      	ldrb	r3, [r7, #14]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003186:	7b3b      	ldrb	r3, [r7, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e055      	b.n	800323c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a0:	e01d      	b.n	80031de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d108      	bne.n	80031ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80031a8:	7bbb      	ldrb	r3, [r7, #14]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031ae:	7b7b      	ldrb	r3, [r7, #13]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d102      	bne.n	80031ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80031b4:	7b3b      	ldrb	r3, [r7, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e03e      	b.n	800323c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_TIM_Encoder_Start+0xc4>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d008      	beq.n	80031fc <HAL_TIM_Encoder_Start+0xd4>
 80031ea:	e00f      	b.n	800320c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fe55 	bl	8003ea4 <TIM_CCxChannelCmd>
      break;
 80031fa:	e016      	b.n	800322a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	2104      	movs	r1, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fe4d 	bl	8003ea4 <TIM_CCxChannelCmd>
      break;
 800320a:	e00e      	b.n	800322a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2201      	movs	r2, #1
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fe45 	bl	8003ea4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	2104      	movs	r1, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fe3e 	bl	8003ea4 <TIM_CCxChannelCmd>
      break;
 8003228:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800325e:	2302      	movs	r3, #2
 8003260:	e0ff      	b.n	8003462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b14      	cmp	r3, #20
 800326e:	f200 80f0 	bhi.w	8003452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	080032cd 	.word	0x080032cd
 800327c:	08003453 	.word	0x08003453
 8003280:	08003453 	.word	0x08003453
 8003284:	08003453 	.word	0x08003453
 8003288:	0800330d 	.word	0x0800330d
 800328c:	08003453 	.word	0x08003453
 8003290:	08003453 	.word	0x08003453
 8003294:	08003453 	.word	0x08003453
 8003298:	0800334f 	.word	0x0800334f
 800329c:	08003453 	.word	0x08003453
 80032a0:	08003453 	.word	0x08003453
 80032a4:	08003453 	.word	0x08003453
 80032a8:	0800338f 	.word	0x0800338f
 80032ac:	08003453 	.word	0x08003453
 80032b0:	08003453 	.word	0x08003453
 80032b4:	08003453 	.word	0x08003453
 80032b8:	080033d1 	.word	0x080033d1
 80032bc:	08003453 	.word	0x08003453
 80032c0:	08003453 	.word	0x08003453
 80032c4:	08003453 	.word	0x08003453
 80032c8:	08003411 	.word	0x08003411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fa54 	bl	8003780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0204 	bic.w	r2, r2, #4
 80032f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6999      	ldr	r1, [r3, #24]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	619a      	str	r2, [r3, #24]
      break;
 800330a:	e0a5      	b.n	8003458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fac4 	bl	80038a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6999      	ldr	r1, [r3, #24]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	619a      	str	r2, [r3, #24]
      break;
 800334c:	e084      	b.n	8003458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fb2d 	bl	80039b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0208 	orr.w	r2, r2, #8
 8003368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0204 	bic.w	r2, r2, #4
 8003378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69d9      	ldr	r1, [r3, #28]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	61da      	str	r2, [r3, #28]
      break;
 800338c:	e064      	b.n	8003458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fb95 	bl	8003ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	021a      	lsls	r2, r3, #8
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	61da      	str	r2, [r3, #28]
      break;
 80033ce:	e043      	b.n	8003458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fbfe 	bl	8003bd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0208 	orr.w	r2, r2, #8
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0204 	bic.w	r2, r2, #4
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800340e:	e023      	b.n	8003458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fc42 	bl	8003ca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	021a      	lsls	r2, r3, #8
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003450:	e002      	b.n	8003458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
      break;
 8003456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop

0800346c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIM_ConfigClockSource+0x1c>
 8003484:	2302      	movs	r3, #2
 8003486:	e0de      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x1da>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80034a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a63      	ldr	r2, [pc, #396]	; (8003650 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	f000 80a9 	beq.w	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 80034c8:	4a61      	ldr	r2, [pc, #388]	; (8003650 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f200 80ae 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 80034d0:	4a60      	ldr	r2, [pc, #384]	; (8003654 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f000 80a1 	beq.w	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 80034d8:	4a5e      	ldr	r2, [pc, #376]	; (8003654 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f200 80a6 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 80034e0:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <HAL_TIM_ConfigClockSource+0x1ec>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f000 8099 	beq.w	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 80034e8:	4a5b      	ldr	r2, [pc, #364]	; (8003658 <HAL_TIM_ConfigClockSource+0x1ec>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f200 809e 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 80034f0:	4a5a      	ldr	r2, [pc, #360]	; (800365c <HAL_TIM_ConfigClockSource+0x1f0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	f000 8091 	beq.w	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_TIM_ConfigClockSource+0x1f0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f200 8096 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 8003500:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003504:	f000 8089 	beq.w	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 8003508:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800350c:	f200 808e 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d03e      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0x128>
 8003516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351a:	f200 8087 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	f000 8086 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1c6>
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d87f      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 800352c:	2b70      	cmp	r3, #112	; 0x70
 800352e:	d01a      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0xfa>
 8003530:	2b70      	cmp	r3, #112	; 0x70
 8003532:	d87b      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 8003534:	2b60      	cmp	r3, #96	; 0x60
 8003536:	d050      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x16e>
 8003538:	2b60      	cmp	r3, #96	; 0x60
 800353a:	d877      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d03c      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x14e>
 8003540:	2b50      	cmp	r3, #80	; 0x50
 8003542:	d873      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d058      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x18e>
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d86f      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 800354c:	2b30      	cmp	r3, #48	; 0x30
 800354e:	d064      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 8003550:	2b30      	cmp	r3, #48	; 0x30
 8003552:	d86b      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d060      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 8003558:	2b20      	cmp	r3, #32
 800355a:	d867      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05c      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 8003560:	2b10      	cmp	r3, #16
 8003562:	d05a      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x1ae>
 8003564:	e062      	b.n	800362c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6899      	ldr	r1, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f000 fc75 	bl	8003e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	609a      	str	r2, [r3, #8]
      break;
 8003592:	e04f      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6899      	ldr	r1, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f000 fc5e 	bl	8003e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b6:	609a      	str	r2, [r3, #8]
      break;
 80035b8:	e03c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f000 fbd0 	bl	8003d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2150      	movs	r1, #80	; 0x50
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fc29 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 80035d8:	e02c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f000 fbef 	bl	8003dca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2160      	movs	r1, #96	; 0x60
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fc19 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 80035f8:	e01c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	461a      	mov	r2, r3
 8003608:	f000 fbb0 	bl	8003d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2140      	movs	r1, #64	; 0x40
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fc09 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003618:	e00c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f000 fc00 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 800362a:	e003      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e000      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	00100070 	.word	0x00100070
 8003654:	00100040 	.word	0x00100040
 8003658:	00100030 	.word	0x00100030
 800365c:	00100020 	.word	0x00100020

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <TIM_Base_SetConfig+0x104>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00f      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d00b      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a39      	ldr	r2, [pc, #228]	; (8003768 <TIM_Base_SetConfig+0x108>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a38      	ldr	r2, [pc, #224]	; (800376c <TIM_Base_SetConfig+0x10c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a37      	ldr	r2, [pc, #220]	; (8003770 <TIM_Base_SetConfig+0x110>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <TIM_Base_SetConfig+0x104>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01b      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d017      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <TIM_Base_SetConfig+0x108>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <TIM_Base_SetConfig+0x10c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a28      	ldr	r2, [pc, #160]	; (8003770 <TIM_Base_SetConfig+0x110>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <TIM_Base_SetConfig+0x114>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a26      	ldr	r2, [pc, #152]	; (8003778 <TIM_Base_SetConfig+0x118>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a25      	ldr	r2, [pc, #148]	; (800377c <TIM_Base_SetConfig+0x11c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d108      	bne.n	80036fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a10      	ldr	r2, [pc, #64]	; (8003764 <TIM_Base_SetConfig+0x104>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00f      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a11      	ldr	r2, [pc, #68]	; (8003770 <TIM_Base_SetConfig+0x110>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <TIM_Base_SetConfig+0x118>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <TIM_Base_SetConfig+0x11c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d103      	bne.n	8003750 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	615a      	str	r2, [r3, #20]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40013400 	.word	0x40013400
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800

08003780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f023 0201 	bic.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 0302 	bic.w	r3, r3, #2
 80037cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a2c      	ldr	r2, [pc, #176]	; (800388c <TIM_OC1_SetConfig+0x10c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00f      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <TIM_OC1_SetConfig+0x110>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <TIM_OC1_SetConfig+0x114>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a29      	ldr	r2, [pc, #164]	; (8003898 <TIM_OC1_SetConfig+0x118>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a28      	ldr	r2, [pc, #160]	; (800389c <TIM_OC1_SetConfig+0x11c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10c      	bne.n	800381a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0308 	bic.w	r3, r3, #8
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <TIM_OC1_SetConfig+0x10c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00f      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <TIM_OC1_SetConfig+0x110>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00b      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <TIM_OC1_SetConfig+0x114>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a18      	ldr	r2, [pc, #96]	; (8003898 <TIM_OC1_SetConfig+0x118>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a17      	ldr	r2, [pc, #92]	; (800389c <TIM_OC1_SetConfig+0x11c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d111      	bne.n	8003866 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0210 	bic.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0320 	bic.w	r3, r3, #32
 80038ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <TIM_OC2_SetConfig+0x100>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC2_SetConfig+0x6c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <TIM_OC2_SetConfig+0x104>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10d      	bne.n	8003928 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_OC2_SetConfig+0x100>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00f      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <TIM_OC2_SetConfig+0x104>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <TIM_OC2_SetConfig+0x108>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <TIM_OC2_SetConfig+0x10c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <TIM_OC2_SetConfig+0x110>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d113      	bne.n	8003978 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800395e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <TIM_OC3_SetConfig+0xfc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_OC3_SetConfig+0x6a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <TIM_OC3_SetConfig+0x100>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10d      	bne.n	8003a3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <TIM_OC3_SetConfig+0xfc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00f      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <TIM_OC3_SetConfig+0x100>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <TIM_OC3_SetConfig+0x104>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <TIM_OC3_SetConfig+0x108>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <TIM_OC3_SetConfig+0x10c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d113      	bne.n	8003a8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	031b      	lsls	r3, r3, #12
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_OC4_SetConfig+0x100>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC4_SetConfig+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <TIM_OC4_SetConfig+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10d      	bne.n	8003b4c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC4_SetConfig+0x100>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00f      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <TIM_OC4_SetConfig+0x104>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <TIM_OC4_SetConfig+0x108>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <TIM_OC4_SetConfig+0x10c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <TIM_OC4_SetConfig+0x110>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800

08003bd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <TIM_OC5_SetConfig+0xb4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <TIM_OC5_SetConfig+0xb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <TIM_OC5_SetConfig+0xbc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <TIM_OC5_SetConfig+0xc0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <TIM_OC5_SetConfig+0xc4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d109      	bne.n	8003c66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	051b      	lsls	r3, r3, #20
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <TIM_OC6_SetConfig+0xb8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00f      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <TIM_OC6_SetConfig+0xbc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <TIM_OC6_SetConfig+0xc0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <TIM_OC6_SetConfig+0xc4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <TIM_OC6_SetConfig+0xc8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d109      	bne.n	8003d30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 030a 	bic.w	r3, r3, #10
 8003da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b087      	sub	sp, #28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f023 0210 	bic.w	r2, r3, #16
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f043 0307 	orr.w	r3, r3, #7
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	609a      	str	r2, [r3, #8]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	021a      	lsls	r2, r3, #8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e065      	b.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d018      	beq.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d013      	beq.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00e      	beq.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a17      	ldr	r2, [pc, #92]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40013400 	.word	0x40013400
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40014000 	.word	0x40014000

08003ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800400c:	2302      	movs	r3, #2
 800400e:	e087      	b.n	8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	041b      	lsls	r3, r3, #16
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a27      	ldr	r2, [pc, #156]	; (800412c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d106      	bne.n	80040ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1e      	ldr	r2, [pc, #120]	; (800412c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d126      	bne.n	800410e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	051b      	lsls	r3, r3, #20
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0e      	ldr	r2, [pc, #56]	; (800412c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d106      	bne.n	800410e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40013400 	.word	0x40013400

08004134 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800413c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004140:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	b29b      	uxth	r3, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	b29b      	uxth	r3, r3
 8004152:	4013      	ands	r3, r2
 8004154:	b29a      	uxth	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800416a:	b084      	sub	sp, #16
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	f107 0014 	add.w	r0, r7, #20
 8004178:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	b004      	add	sp, #16
 80041aa:	4770      	bx	lr

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4d0d      	ldr	r5, [pc, #52]	; (80041e4 <__libc_init_array+0x38>)
 80041b0:	4c0d      	ldr	r4, [pc, #52]	; (80041e8 <__libc_init_array+0x3c>)
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	2600      	movs	r6, #0
 80041b8:	42a6      	cmp	r6, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	4d0b      	ldr	r5, [pc, #44]	; (80041ec <__libc_init_array+0x40>)
 80041be:	4c0c      	ldr	r4, [pc, #48]	; (80041f0 <__libc_init_array+0x44>)
 80041c0:	f000 f820 	bl	8004204 <_init>
 80041c4:	1b64      	subs	r4, r4, r5
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	2600      	movs	r6, #0
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d4:	4798      	blx	r3
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f855 3b04 	ldr.w	r3, [r5], #4
 80041de:	4798      	blx	r3
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	0800422c 	.word	0x0800422c
 80041e8:	0800422c 	.word	0x0800422c
 80041ec:	0800422c 	.word	0x0800422c
 80041f0:	08004230 	.word	0x08004230

080041f4 <memset>:
 80041f4:	4402      	add	r2, r0
 80041f6:	4603      	mov	r3, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d100      	bne.n	80041fe <memset+0xa>
 80041fc:	4770      	bx	lr
 80041fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004202:	e7f9      	b.n	80041f8 <memset+0x4>

08004204 <_init>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	bf00      	nop
 8004208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420a:	bc08      	pop	{r3}
 800420c:	469e      	mov	lr, r3
 800420e:	4770      	bx	lr

08004210 <_fini>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	bf00      	nop
 8004214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004216:	bc08      	pop	{r3}
 8004218:	469e      	mov	lr, r3
 800421a:	4770      	bx	lr
