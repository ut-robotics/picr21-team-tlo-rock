
TLO_Rock_PCB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a7c0  0800a7c0  0001a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a818  0800a818  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a818  0800a818  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a818  0800a818  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a818  0800a818  0001a818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a81c  0800a81c  0001a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800a820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  200001a0  0800a9c0  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016ac  0800a9c0  000216ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b15  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db9  00000000  00000000  00040ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00044aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  000460d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002177b  00000000  00000000  00047568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5f1  00000000  00000000  00068ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a2a  00000000  00000000  000832d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ccfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  0014cd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a7a8 	.word	0x0800a7a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0800a7a8 	.word	0x0800a7a8

08000218 <CDC_On_Receive>:
Feedback feedback = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .bools = 0, .deliminer = 0xAAAA};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) //uint8_t* Buf, uint32_t* Len
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)){
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b10      	cmp	r3, #16
 8000228:	d104      	bne.n	8000234 <CDC_On_Receive+0x1c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2210      	movs	r2, #16
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	480a      	ldr	r0, [pc, #40]	; (8000258 <CDC_On_Receive+0x40>)
 8000230:	f00a faa4 	bl	800a77c <memcpy>
	}
	if (command.delimiter == 0xAAAA){
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <CDC_On_Receive+0x40>)
 8000236:	89db      	ldrh	r3, [r3, #14]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
		isCommandReceived = 1;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <CDC_On_Receive+0x44>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
			  //feedback.speed2 = return_M2;
			  //feedback.speed3 = return_M3;
			  //feedback.bools = n;
			  //feedback.deliminer = 0xAAAA;

	CDC_Transmit_FS(&feedback, sizeof(feedback)); //uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
 8000246:	210a      	movs	r1, #10
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <CDC_On_Receive+0x48>)
 800024a:	f009 fe25 	bl	8009e98 <CDC_Transmit_FS>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000000 	.word	0x20000000
 800025c:	200001fa 	.word	0x200001fa
 8000260:	20000010 	.word	0x20000010

08000264 <throw>:

void throw(uint32_t speed)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	if (speed > 7500) speed = 7500;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000272:	4293      	cmp	r3, r2
 8000274:	d902      	bls.n	800027c <throw+0x18>
 8000276:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800027a:	607b      	str	r3, [r7, #4]
	if (speed < 2500) speed = 2500;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000282:	4293      	cmp	r3, r2
 8000284:	d802      	bhi.n	800028c <throw+0x28>
 8000286:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800028a:	607b      	str	r3, [r7, #4]
	TIM16->CCR1 = speed;
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <throw+0x74>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(400);
 8000292:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000296:	f001 faf7 	bl	8001888 <HAL_Delay>
	TIM17->CCR1 = 1000;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <throw+0x78>)
 800029c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34
	int n = 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
	while (n)
 80002a6:	e009      	b.n	80002bc <throw+0x58>
	{
		n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80002a8:	2120      	movs	r1, #32
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f001 fd9f 	bl	8001df0 <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(200);
 80002b6:	20c8      	movs	r0, #200	; 0xc8
 80002b8:	f001 fae6 	bl	8001888 <HAL_Delay>
	while (n)
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1f2      	bne.n	80002a8 <throw+0x44>
	}
	TIM17->CCR1 = 0;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <throw+0x78>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = 2500;
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <throw+0x74>)
 80002ca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80002ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40014400 	.word	0x40014400
 80002dc:	40014800 	.word	0x40014800

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e6:	f001 fa5e 	bl	80017a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ea:	f000 f907 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ee:	f000 fd7f 	bl	8000df0 <MX_GPIO_Init>
  MX_I2C3_Init();
 80002f2:	f000 f94f 	bl	8000594 <MX_I2C3_Init>
  MX_TIM2_Init();
 80002f6:	f000 fa19 	bl	800072c <MX_TIM2_Init>
  MX_TIM3_Init();
 80002fa:	f000 faa5 	bl	8000848 <MX_TIM3_Init>
  MX_TIM4_Init();
 80002fe:	f000 faf9 	bl	80008f4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000302:	f000 fb83 	bl	8000a0c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000306:	f000 fbdb 	bl	8000ac0 <MX_TIM15_Init>
  MX_TIM16_Init();
 800030a:	f000 fc7d 	bl	8000c08 <MX_TIM16_Init>
  MX_TIM17_Init();
 800030e:	f000 fcf5 	bl	8000cfc <MX_TIM17_Init>
  MX_TIM1_Init();
 8000312:	f000 f97f 	bl	8000614 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000316:	f000 fb43 	bl	80009a0 <MX_TIM6_Init>
  MX_USB_Device_Init();
 800031a:	f009 fcfb 	bl	8009d14 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 800031e:	2201      	movs	r2, #1
 8000320:	2101      	movs	r1, #1
 8000322:	4861      	ldr	r0, [pc, #388]	; (80004a8 <main+0x1c8>)
 8000324:	f001 fd7c 	bl	8001e20 <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 8000328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032c:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 8000330:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000332:	2104      	movs	r1, #4
 8000334:	485d      	ldr	r0, [pc, #372]	; (80004ac <main+0x1cc>)
 8000336:	f004 fc9f 	bl	8004c78 <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f001 faa4 	bl	8001888 <HAL_Delay>
  TIM2->CCR2 = 65536;
 8000340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000348:	639a      	str	r2, [r3, #56]	; 0x38

  //motor speeds to zero
  TIM2->CCR1 = 0;
 800034a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034e:	2200      	movs	r2, #0
 8000350:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 8000352:	4b57      	ldr	r3, [pc, #348]	; (80004b0 <main+0x1d0>)
 8000354:	2200      	movs	r2, #0
 8000356:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 8000358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035c:	2200      	movs	r2, #0
 800035e:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000360:	2100      	movs	r1, #0
 8000362:	4852      	ldr	r0, [pc, #328]	; (80004ac <main+0x1cc>)
 8000364:	f004 fc88 	bl	8004c78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000368:	2108      	movs	r1, #8
 800036a:	4850      	ldr	r0, [pc, #320]	; (80004ac <main+0x1cc>)
 800036c:	f004 fc84 	bl	8004c78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000370:	2100      	movs	r1, #0
 8000372:	4850      	ldr	r0, [pc, #320]	; (80004b4 <main+0x1d4>)
 8000374:	f004 fc80 	bl	8004c78 <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000378:	2100      	movs	r1, #0
 800037a:	484f      	ldr	r0, [pc, #316]	; (80004b8 <main+0x1d8>)
 800037c:	f004 fc7c 	bl	8004c78 <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 8000380:	4b4e      	ldr	r3, [pc, #312]	; (80004bc <main+0x1dc>)
 8000382:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000386:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 8000388:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800038c:	f001 fa7c 	bl	8001888 <HAL_Delay>

  //enable grabber and set its speed to zero
  TIM17->CCR1 = 0;
 8000390:	4b4b      	ldr	r3, [pc, #300]	; (80004c0 <main+0x1e0>)
 8000392:	2200      	movs	r2, #0
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000396:	2100      	movs	r1, #0
 8000398:	484a      	ldr	r0, [pc, #296]	; (80004c4 <main+0x1e4>)
 800039a:	f004 fc6d 	bl	8004c78 <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800039e:	2104      	movs	r1, #4
 80003a0:	4849      	ldr	r0, [pc, #292]	; (80004c8 <main+0x1e8>)
 80003a2:	f004 fe0f 	bl	8004fc4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003a6:	2104      	movs	r1, #4
 80003a8:	4848      	ldr	r0, [pc, #288]	; (80004cc <main+0x1ec>)
 80003aa:	f004 fe0b 	bl	8004fc4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003ae:	2104      	movs	r1, #4
 80003b0:	4847      	ldr	r0, [pc, #284]	; (80004d0 <main+0x1f0>)
 80003b2:	f004 fe07 	bl	8004fc4 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 80003b6:	4847      	ldr	r0, [pc, #284]	; (80004d4 <main+0x1f4>)
 80003b8:	f004 fb9c 	bl	8004af4 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  uint8_t n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80003bc:	2120      	movs	r1, #32
 80003be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c2:	f001 fd15 	bl	8001df0 <HAL_GPIO_ReadPin>
 80003c6:	4603      	mov	r3, r0
 80003c8:	71bb      	strb	r3, [r7, #6]

	  if (isCommandReceived){
 80003ca:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <main+0x1f8>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d033      	beq.n	800043c <main+0x15c>
		  tgt_M1 = command.speed1;
 80003d4:	4b41      	ldr	r3, [pc, #260]	; (80004dc <main+0x1fc>)
 80003d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003da:	461a      	mov	r2, r3
 80003dc:	4b40      	ldr	r3, [pc, #256]	; (80004e0 <main+0x200>)
 80003de:	601a      	str	r2, [r3, #0]
		  tgt_M2 = command.speed2;
 80003e0:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <main+0x1fc>)
 80003e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80003e6:	461a      	mov	r2, r3
 80003e8:	4b3e      	ldr	r3, [pc, #248]	; (80004e4 <main+0x204>)
 80003ea:	601a      	str	r2, [r3, #0]
		  tgt_M3 = command.speed3;
 80003ec:	4b3b      	ldr	r3, [pc, #236]	; (80004dc <main+0x1fc>)
 80003ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b3c      	ldr	r3, [pc, #240]	; (80004e8 <main+0x208>)
 80003f6:	601a      	str	r2, [r3, #0]
		  thrower_speed = command.thrower_speed;
 80003f8:	4b38      	ldr	r3, [pc, #224]	; (80004dc <main+0x1fc>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4a3b      	ldr	r2, [pc, #236]	; (80004ec <main+0x20c>)
 80003fe:	6013      	str	r3, [r2, #0]
		  uint8_t bools = command.bools;
 8000400:	4b36      	ldr	r3, [pc, #216]	; (80004dc <main+0x1fc>)
 8000402:	7b1b      	ldrb	r3, [r3, #12]
 8000404:	71fb      	strb	r3, [r7, #7]

		  if (bools >= 2)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d906      	bls.n	800041a <main+0x13a>
		  {
		  	  bools -= 2;
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	3b02      	subs	r3, #2
 8000410:	71fb      	strb	r3, [r7, #7]
		  	  grabber_on = 1;
 8000412:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <main+0x210>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e002      	b.n	8000420 <main+0x140>
		  }

		  else
		  {
			  grabber_on = 0;
 800041a:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <main+0x210>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
		  }

		  if (bools >= 1)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d005      	beq.n	8000432 <main+0x152>
		  {
			  bools -= 1;
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	3b01      	subs	r3, #1
 800042a:	71fb      	strb	r3, [r7, #7]
			  thrower = 1;
 800042c:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <main+0x214>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2101      	movs	r1, #1
 8000436:	481c      	ldr	r0, [pc, #112]	; (80004a8 <main+0x1c8>)
 8000438:	f001 fcf2 	bl	8001e20 <HAL_GPIO_WritePin>

	  }



	  if (grabber_on){
 800043c:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <main+0x210>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d00b      	beq.n	800045c <main+0x17c>

		  if (n) TIM17->CCR1 = 0;
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d003      	beq.n	8000452 <main+0x172>
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <main+0x1e0>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	; 0x34
 8000450:	e007      	b.n	8000462 <main+0x182>
		  else TIM17->CCR1 = 1000;
 8000452:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <main+0x1e0>)
 8000454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
 800045a:	e002      	b.n	8000462 <main+0x182>

	  }

	  else TIM17->CCR1 = 0;
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <main+0x1e0>)
 800045e:	2200      	movs	r2, #0
 8000460:	635a      	str	r2, [r3, #52]	; 0x34

	  if(thrower && n){
 8000462:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <main+0x214>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d008      	beq.n	800047c <main+0x19c>
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d005      	beq.n	800047c <main+0x19c>
		  throw(thrower_speed);
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <main+0x20c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fef5 	bl	8000264 <throw>
 800047a:	e002      	b.n	8000482 <main+0x1a2>
	  }
	  else thrower = 0;
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <main+0x214>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]

	  if (safety_iters > 100){
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <main+0x218>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b64      	cmp	r3, #100	; 0x64
 8000488:	d998      	bls.n	80003bc <main+0xdc>
		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 800048a:	2201      	movs	r2, #1
 800048c:	2101      	movs	r1, #1
 800048e:	4806      	ldr	r0, [pc, #24]	; (80004a8 <main+0x1c8>)
 8000490:	f001 fcc6 	bl	8001e20 <HAL_GPIO_WritePin>
		  tgt_M1 = 0;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <main+0x200>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
		  tgt_M2 = 0;
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <main+0x204>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
		  tgt_M3 = 0;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <main+0x208>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
  {
 80004a6:	e789      	b.n	80003bc <main+0xdc>
 80004a8:	48000400 	.word	0x48000400
 80004ac:	2000067c 	.word	0x2000067c
 80004b0:	40014000 	.word	0x40014000
 80004b4:	20000500 	.word	0x20000500
 80004b8:	200006c8 	.word	0x200006c8
 80004bc:	40014400 	.word	0x40014400
 80004c0:	40014800 	.word	0x40014800
 80004c4:	2000054c 	.word	0x2000054c
 80004c8:	20000598 	.word	0x20000598
 80004cc:	200004b4 	.word	0x200004b4
 80004d0:	20000468 	.word	0x20000468
 80004d4:	200005e4 	.word	0x200005e4
 80004d8:	200001fa 	.word	0x200001fa
 80004dc:	20000000 	.word	0x20000000
 80004e0:	200001c8 	.word	0x200001c8
 80004e4:	200001cc 	.word	0x200001cc
 80004e8:	200001d0 	.word	0x200001d0
 80004ec:	200001ec 	.word	0x200001ec
 80004f0:	200001f0 	.word	0x200001f0
 80004f4:	200001f1 	.word	0x200001f1
 80004f8:	200001f2 	.word	0x200001f2

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	2238      	movs	r2, #56	; 0x38
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f00a f944 	bl	800a798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000522:	f003 faef 	bl	8003b04 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	2340      	movs	r3, #64	; 0x40
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	2302      	movs	r3, #2
 8000536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800053c:	2301      	movs	r3, #1
 800053e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000540:	230c      	movs	r3, #12
 8000542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000548:	2304      	movs	r3, #4
 800054a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054c:	2302      	movs	r3, #2
 800054e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4618      	mov	r0, r3
 8000556:	f003 fb89 	bl	8003c6c <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000560:	f000 fddc 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000568:	2301      	movs	r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fe8d 	bl	800429c <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000588:	f000 fdc8 	bl	800111c <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3750      	adds	r7, #80	; 0x50
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_I2C3_Init+0x74>)
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <MX_I2C3_Init+0x78>)
 800059c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_I2C3_Init+0x74>)
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <MX_I2C3_Init+0x7c>)
 80005a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_I2C3_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_I2C3_Init+0x74>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_I2C3_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_I2C3_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_I2C3_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_I2C3_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_I2C3_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <MX_I2C3_Init+0x74>)
 80005d0:	f001 fc3e 	bl	8001e50 <HAL_I2C_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80005da:	f000 fd9f 	bl	800111c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005de:	2100      	movs	r1, #0
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <MX_I2C3_Init+0x74>)
 80005e2:	f001 fcc4 	bl	8001f6e <HAL_I2CEx_ConfigAnalogFilter>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f000 fd96 	bl	800111c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80005f0:	2100      	movs	r1, #0
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_I2C3_Init+0x74>)
 80005f4:	f001 fd06 	bl	8002004 <HAL_I2CEx_ConfigDigitalFilter>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80005fe:	f000 fd8d 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000041c 	.word	0x2000041c
 800060c:	40007800 	.word	0x40007800
 8000610:	00303d5b 	.word	0x00303d5b

08000614 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b098      	sub	sp, #96	; 0x60
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2234      	movs	r2, #52	; 0x34
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f00a f8a9 	bl	800a798 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <MX_TIM1_Init+0x110>)
 8000648:	4a37      	ldr	r2, [pc, #220]	; (8000728 <MX_TIM1_Init+0x114>)
 800064a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800064c:	4b35      	ldr	r3, [pc, #212]	; (8000724 <MX_TIM1_Init+0x110>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <MX_TIM1_Init+0x110>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <MX_TIM1_Init+0x110>)
 800065a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800065e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <MX_TIM1_Init+0x110>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000666:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <MX_TIM1_Init+0x110>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <MX_TIM1_Init+0x110>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000672:	482c      	ldr	r0, [pc, #176]	; (8000724 <MX_TIM1_Init+0x110>)
 8000674:	f004 faa8 	bl	8004bc8 <HAL_TIM_PWM_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800067e:	f000 fd4d 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800068e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000692:	4619      	mov	r1, r3
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <MX_TIM1_Init+0x110>)
 8000696:	f005 fd21 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006a0:	f000 fd3c 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a4:	2360      	movs	r3, #96	; 0x60
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ac:	2300      	movs	r3, #0
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80006b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006bc:	2210      	movs	r2, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	4818      	ldr	r0, [pc, #96]	; (8000724 <MX_TIM1_Init+0x110>)
 80006c2:	f004 fe8d 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80006cc:	f000 fd26 	bl	800111c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM1_Init+0x110>)
 800070e:	f005 fd67 	bl	80061e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000718:	f000 fd00 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3760      	adds	r7, #96	; 0x60
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000630 	.word	0x20000630
 8000728:	40012c00 	.word	0x40012c00

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075e:	4b39      	ldr	r3, [pc, #228]	; (8000844 <MX_TIM2_Init+0x118>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <MX_TIM2_Init+0x118>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_TIM2_Init+0x118>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <MX_TIM2_Init+0x118>)
 8000774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <MX_TIM2_Init+0x118>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b30      	ldr	r3, [pc, #192]	; (8000844 <MX_TIM2_Init+0x118>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000786:	482f      	ldr	r0, [pc, #188]	; (8000844 <MX_TIM2_Init+0x118>)
 8000788:	f004 f95c 	bl	8004a44 <HAL_TIM_Base_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000792:	f000 fcc3 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4828      	ldr	r0, [pc, #160]	; (8000844 <MX_TIM2_Init+0x118>)
 80007a4:	f004 ff30 	bl	8005608 <HAL_TIM_ConfigClockSource>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007ae:	f000 fcb5 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b2:	4824      	ldr	r0, [pc, #144]	; (8000844 <MX_TIM2_Init+0x118>)
 80007b4:	f004 fa08 	bl	8004bc8 <HAL_TIM_PWM_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007be:	f000 fcad 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_TIM2_Init+0x118>)
 80007d2:	f005 fc83 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007dc:	f000 fc9e 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 31250;
 80007e4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80007e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_TIM2_Init+0x118>)
 80007fa:	f004 fdf1 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000804:	f000 fc8a 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	2204      	movs	r2, #4
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_TIM2_Init+0x118>)
 8000810:	f004 fde6 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800081a:	f000 fc7f 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	2208      	movs	r2, #8
 8000822:	4619      	mov	r1, r3
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM2_Init+0x118>)
 8000826:	f004 fddb 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000830:	f000 fc74 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM2_Init+0x118>)
 8000836:	f000 fe6b 	bl	8001510 <HAL_TIM_MspPostInit>

}
 800083a:	bf00      	nop
 800083c:	3738      	adds	r7, #56	; 0x38
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000067c 	.word	0x2000067c

08000848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2224      	movs	r2, #36	; 0x24
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f009 ff9e 	bl	800a798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_TIM3_Init+0xa4>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_TIM3_Init+0xa8>)
 800086a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_TIM3_Init+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_TIM3_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_TIM3_Init+0xa4>)
 800087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_TIM3_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_TIM3_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800088c:	2301      	movs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000894:	2301      	movs	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_TIM3_Init+0xa4>)
 80008b8:	f004 fade 	bl	8004e78 <HAL_TIM_Encoder_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008c2:	f000 fc2b 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_TIM3_Init+0xa4>)
 80008d4:	f005 fc02 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008de:	f000 fc1d 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	; 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000598 	.word	0x20000598
 80008f0:	40000400 	.word	0x40000400

080008f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2224      	movs	r2, #36	; 0x24
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f009 ff48 	bl	800a798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_TIM4_Init+0xa4>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_TIM4_Init+0xa8>)
 8000916:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_TIM4_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM4_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_TIM4_Init+0xa4>)
 8000926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM4_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_TIM4_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000938:	2301      	movs	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000940:	2301      	movs	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000950:	2301      	movs	r3, #1
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_TIM4_Init+0xa4>)
 8000964:	f004 fa88 	bl	8004e78 <HAL_TIM_Encoder_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800096e:	f000 fbd5 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM4_Init+0xa4>)
 8000980:	f005 fbac 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800098a:	f000 fbc7 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200004b4 	.word	0x200004b4
 800099c:	40000800 	.word	0x40000800

080009a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_TIM6_Init+0x64>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_TIM6_Init+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_TIM6_Init+0x64>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_TIM6_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_TIM6_Init+0x64>)
 80009c4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80009c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_TIM6_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM6_Init+0x64>)
 80009d2:	f004 f837 	bl	8004a44 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009dc:	f000 fb9e 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_TIM6_Init+0x64>)
 80009ee:	f005 fb75 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009f8:	f000 fb90 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200005e4 	.word	0x200005e4
 8000a08:	40001000 	.word	0x40001000

08000a0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2224      	movs	r2, #36	; 0x24
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f009 febc 	bl	800a798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a2c:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_TIM8_Init+0xb0>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a32:	2205      	movs	r2, #5
 8000a34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64000;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a3e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000a42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000a82:	f004 f9f9 	bl	8004e78 <HAL_TIM_Encoder_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000a8c:	f000 fb46 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_TIM8_Init+0xac>)
 8000aa2:	f005 fb1b 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000aac:	f000 fb36 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000468 	.word	0x20000468
 8000abc:	40013400 	.word	0x40013400

08000ac0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b09c      	sub	sp, #112	; 0x70
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2234      	movs	r2, #52	; 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f009 fe4c 	bl	800a798 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b00:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <MX_TIM15_Init+0x144>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b06:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b12:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b18:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b2c:	4834      	ldr	r0, [pc, #208]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b2e:	f003 ff89 	bl	8004a44 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 faf0 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b46:	4619      	mov	r1, r3
 8000b48:	482d      	ldr	r0, [pc, #180]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b4a:	f004 fd5d 	bl	8005608 <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000b54:	f000 fae2 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000b58:	4829      	ldr	r0, [pc, #164]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b5a:	f004 f835 	bl	8004bc8 <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000b64:	f000 fada 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b74:	4619      	mov	r1, r3
 8000b76:	4822      	ldr	r0, [pc, #136]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000b78:	f005 fab0 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000b82:	f000 facb 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 31250;
 8000b8a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000bae:	f004 fc17 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000bb8:	f000 fab0 	bl	800111c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000be4:	f005 fafc 	bl	80061e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000bee:	f000 fa95 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM15_Init+0x140>)
 8000bf4:	f000 fc8c 	bl	8001510 <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3770      	adds	r7, #112	; 0x70
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000500 	.word	0x20000500
 8000c04:	40014000 	.word	0x40014000

08000c08 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b094      	sub	sp, #80	; 0x50
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2234      	movs	r2, #52	; 0x34
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f009 fdb5 	bl	800a798 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c30:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <MX_TIM16_Init+0xf0>)
 8000c32:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c42:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000c46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c5a:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c5c:	f003 fef2 	bl	8004a44 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000c66:	f000 fa59 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c6a:	4822      	ldr	r0, [pc, #136]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000c6c:	f003 ffac 	bl	8004bc8 <HAL_TIM_PWM_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c76:	f000 fa51 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7a:	2360      	movs	r3, #96	; 0x60
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c86:	2300      	movs	r3, #0
 8000c88:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000ca0:	f004 fb9e 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000caa:	f000 fa37 	bl	800111c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000cd6:	f005 fa83 	bl	80061e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ce0:	f000 fa1c 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_TIM16_Init+0xec>)
 8000ce6:	f000 fc13 	bl	8001510 <HAL_TIM_MspPostInit>

}
 8000cea:	bf00      	nop
 8000cec:	3750      	adds	r7, #80	; 0x50
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200006c8 	.word	0x200006c8
 8000cf8:	40014400 	.word	0x40014400

08000cfc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	; 0x50
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2234      	movs	r2, #52	; 0x34
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f009 fd3b 	bl	800a798 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d24:	4a31      	ldr	r2, [pc, #196]	; (8000dec <MX_TIM17_Init+0xf0>)
 8000d26:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d36:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000d3a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d42:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d4e:	4826      	ldr	r0, [pc, #152]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d50:	f003 fe78 	bl	8004a44 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d5a:	f000 f9df 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d5e:	4822      	ldr	r0, [pc, #136]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d60:	f003 ff32 	bl	8004bc8 <HAL_TIM_PWM_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d6a:	f000 f9d7 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	2360      	movs	r3, #96	; 0x60
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4815      	ldr	r0, [pc, #84]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000d94:	f004 fb24 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000d9e:	f000 f9bd 	bl	800111c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000dca:	f005 fa09 	bl	80061e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000dd4:	f000 f9a2 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM17_Init+0xec>)
 8000dda:	f000 fb99 	bl	8001510 <HAL_TIM_MspPostInit>

}
 8000dde:	bf00      	nop
 8000de0:	3750      	adds	r7, #80	; 0x50
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000054c 	.word	0x2000054c
 8000dec:	40014800 	.word	0x40014800

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a28      	ldr	r2, [pc, #160]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a22      	ldr	r2, [pc, #136]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_GPIO_Init+0xbc>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f240 410a 	movw	r1, #1034	; 0x40a
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f000 ffee 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <MX_GPIO_Init+0xc0>)
 8000e4a:	f000 ffe9 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8000e4e:	f240 430a 	movw	r3, #1034	; 0x40a
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f000 fe3f 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f000 fe32 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_GPIO_Init+0xc0>)
 8000ea0:	f000 fe24 	bl	8001aec <HAL_GPIO_Init>

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	int32_t Cpos_M1 = (int16_t)TIM3->CNT;
 8000ebc:	4b83      	ldr	r3, [pc, #524]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
	return_M1 += Cpos_M1;
 8000ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000ed8:	801a      	strh	r2, [r3, #0]
	int32_t dif_M1 = Cpos_M1 - Lpos_M1;
 8000eda:	4b7e      	ldr	r3, [pc, #504]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
	Lpos_M1 = Cpos_M1;
 8000ee4:	4a7b      	ldr	r2, [pc, #492]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ee8:	6013      	str	r3, [r2, #0]

	int32_t Cpos_M2 = (int16_t)TIM4->CNT;
 8000eea:	4b7b      	ldr	r3, [pc, #492]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
	return_M2 += Cpos_M2;
 8000ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b79      	ldr	r3, [pc, #484]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b75      	ldr	r3, [pc, #468]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000f06:	801a      	strh	r2, [r3, #0]
	int32_t dif_M2 = Cpos_M2 - Lpos_M2;
 8000f08:	4b75      	ldr	r3, [pc, #468]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
	Lpos_M2 = Cpos_M2;
 8000f12:	4a73      	ldr	r2, [pc, #460]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f16:	6013      	str	r3, [r2, #0]

	int32_t Cpos_M3 = (int16_t)TIM8->CNT;
 8000f18:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	return_M3 += Cpos_M3;
 8000f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b70      	ldr	r3, [pc, #448]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	4b6d      	ldr	r3, [pc, #436]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000f34:	801a      	strh	r2, [r3, #0]
	int32_t dif_M3 = Cpos_M3 - Lpos_M3;
 8000f36:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
	Lpos_M3 = Cpos_M3;
 8000f40:	4a6a      	ldr	r2, [pc, #424]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f44:	6013      	str	r3, [r2, #0]

	int32_t Err1 = tgt_M1 - dif_M1;
 8000f46:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t Err2 = tgt_M2 - dif_M2;
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t Err3 = tgt_M3 - dif_M3;
 8000f5a:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t pk = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t pi = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t pd = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]

	integral_M1 += Err1;
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f76:	4413      	add	r3, r2
 8000f78:	4a60      	ldr	r2, [pc, #384]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f7a:	6013      	str	r3, [r2, #0]
	integral_M2 += Err2;
 8000f7c:	4b60      	ldr	r3, [pc, #384]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f82:	4413      	add	r3, r2
 8000f84:	4a5e      	ldr	r2, [pc, #376]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000f86:	6013      	str	r3, [r2, #0]
	integral_M3 += Err3;
 8000f88:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a5c      	ldr	r2, [pc, #368]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f92:	6013      	str	r3, [r2, #0]

	int32_t derivative_M1 = (Err1 - last_err_M1);
 8000f94:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	61fb      	str	r3, [r7, #28]
	int32_t derivative_M2 = (Err2 - last_err_M2);
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	61bb      	str	r3, [r7, #24]
	int32_t derivative_M3 = (Err3 - last_err_M3);
 8000fa8:	4b59      	ldr	r3, [pc, #356]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]

	last_err_M1 = Err1;
 8000fb2:	4a55      	ldr	r2, [pc, #340]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	6013      	str	r3, [r2, #0]
	last_err_M2 = Err2;
 8000fb8:	4a54      	ldr	r2, [pc, #336]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbc:	6013      	str	r3, [r2, #0]
	last_err_M3 = Err3;
 8000fbe:	4a54      	ldr	r2, [pc, #336]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	6013      	str	r3, [r2, #0]

	int32_t Speed_M1 = (int32_t) Err1 * pk + integral_M1 * pi + derivative_M1 * pd;
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fc8:	fb02 f203 	mul.w	r2, r2, r3
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fd2:	fb01 f303 	mul.w	r3, r1, r3
 8000fd6:	441a      	add	r2, r3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	6a39      	ldr	r1, [r7, #32]
 8000fdc:	fb01 f303 	mul.w	r3, r1, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
	int32_t Speed_M2 = (int32_t) Err2 * pk + integral_M2 * pi + derivative_M2 * pd;
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	fb02 f203 	mul.w	r2, r2, r3
 8000fec:	4b44      	ldr	r3, [pc, #272]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ff2:	fb01 f303 	mul.w	r3, r1, r3
 8000ff6:	441a      	add	r2, r3
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6a39      	ldr	r1, [r7, #32]
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
	int32_t Speed_M3 = (int32_t) Err3 * pk + integral_M3 * pi + derivative_M3 * pd;
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001008:	fb02 f203 	mul.w	r2, r2, r3
 800100c:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	441a      	add	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	6a39      	ldr	r1, [r7, #32]
 800101c:	fb01 f303 	mul.w	r3, r1, r3
 8001020:	4413      	add	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]

	if (Speed_M1 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db06      	blt.n	8001038 <HAL_TIM_PeriodElapsedCallback+0x184>
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f000 fef5 	bl	8001e20 <HAL_GPIO_WritePin>
 8001036:	e005      	b.n	8001044 <HAL_TIM_PeriodElapsedCallback+0x190>
	else HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	2102      	movs	r1, #2
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f000 feee 	bl	8001e20 <HAL_GPIO_WritePin>

	if (Speed_M2 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M2_DIR_Pin, 0);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db07      	blt.n	800105a <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f000 fee4 	bl	8001e20 <HAL_GPIO_WritePin>
 8001058:	e006      	b.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x1b4>
	else HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f000 fedc 	bl	8001e20 <HAL_GPIO_WritePin>

	if (Speed_M3 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M3_DIR_Pin, 0);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db06      	blt.n	800107c <HAL_TIM_PeriodElapsedCallback+0x1c8>
 800106e:	2200      	movs	r2, #0
 8001070:	2108      	movs	r1, #8
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f000 fed3 	bl	8001e20 <HAL_GPIO_WritePin>
 800107a:	e005      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x1d4>
	else HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	2108      	movs	r1, #8
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f000 fecc 	bl	8001e20 <HAL_GPIO_WritePin>

	TIM2->CCR1 = abs(Speed_M1);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800108e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR1 = abs(Speed_M2);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800109e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR3 = abs(Speed_M3);
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c

	safety_iters++;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80010c0:	701a      	strb	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	; 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40000400 	.word	0x40000400
 80010d0:	200001f4 	.word	0x200001f4
 80010d4:	200001bc 	.word	0x200001bc
 80010d8:	40000800 	.word	0x40000800
 80010dc:	200001f6 	.word	0x200001f6
 80010e0:	200001c0 	.word	0x200001c0
 80010e4:	40013400 	.word	0x40013400
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	200001c4 	.word	0x200001c4
 80010f0:	200001c8 	.word	0x200001c8
 80010f4:	200001cc 	.word	0x200001cc
 80010f8:	200001d0 	.word	0x200001d0
 80010fc:	200001d4 	.word	0x200001d4
 8001100:	200001d8 	.word	0x200001d8
 8001104:	200001dc 	.word	0x200001dc
 8001108:	200001e0 	.word	0x200001e0
 800110c:	200001e4 	.word	0x200001e4
 8001110:	200001e8 	.word	0x200001e8
 8001114:	40014000 	.word	0x40014000
 8001118:	200001f2 	.word	0x200001f2

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6613      	str	r3, [r2, #96]	; 0x60
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6593      	str	r3, [r2, #88]	; 0x58
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x44>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800115e:	f002 fd75 	bl	8003c4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09c      	sub	sp, #112	; 0x70
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	2244      	movs	r2, #68	; 0x44
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f009 fb01 	bl	800a798 <memset>
  if(hi2c->Instance==I2C3)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_I2C_MspInit+0xe4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d154      	bne.n	800124a <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fa58 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011ba:	f7ff ffaf 	bl	800111c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001200:	2302      	movs	r3, #2
 8001202:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f000 fc6d 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001212:	2320      	movs	r3, #32
 8001214:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001216:	2312      	movs	r3, #18
 8001218:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001222:	2308      	movs	r3, #8
 8001224:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800122a:	4619      	mov	r1, r3
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <HAL_I2C_MspInit+0xec>)
 800122e:	f000 fc5d 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 8001238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800123c:	6593      	str	r3, [r2, #88]	; 0x58
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_I2C_MspInit+0xe8>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3770      	adds	r7, #112	; 0x70
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40007800 	.word	0x40007800
 8001258:	40021000 	.word	0x40021000
 800125c:	48000400 	.word	0x48000400

08001260 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_TIM_PWM_MspInit+0x38>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10b      	bne.n	800128a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_TIM_PWM_MspInit+0x3c>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_TIM_PWM_MspInit+0x3c>)
 8001278:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800127c:	6613      	str	r3, [r2, #96]	; 0x60
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_TIM_PWM_MspInit+0x3c>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40012c00 	.word	0x40012c00
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d10c      	bne.n	80012cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	4a2f      	ldr	r2, [pc, #188]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012ca:	e04e      	b.n	800136a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_TIM_Base_MspInit+0xd8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d114      	bne.n	8001300 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2036      	movs	r0, #54	; 0x36
 80012f4:	f000 fbc5 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f8:	2036      	movs	r0, #54	; 0x36
 80012fa:	f000 fbdc 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
}
 80012fe:	e034      	b.n	800136a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_TIM_Base_MspInit+0xdc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10c      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6613      	str	r3, [r2, #96]	; 0x60
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
}
 8001322:	e022      	b.n	800136a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_TIM_Base_MspInit+0xe0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10c      	bne.n	8001348 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6613      	str	r3, [r2, #96]	; 0x60
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
}
 8001346:	e010      	b.n	800136a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_TIM_Base_MspInit+0xe4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10b      	bne.n	800136a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6613      	str	r3, [r2, #96]	; 0x60
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_TIM_Base_MspInit+0xd4>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40001000 	.word	0x40001000
 800137c:	40014000 	.word	0x40014000
 8001380:	40014400 	.word	0x40014400
 8001384:	40014800 	.word	0x40014800

08001388 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a55      	ldr	r2, [pc, #340]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d129      	bne.n	80013fe <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a54      	ldr	r2, [pc, #336]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b52      	ldr	r3, [pc, #328]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	623b      	str	r3, [r7, #32]
 80013c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a4e      	ldr	r2, [pc, #312]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 80013da:	2350      	movs	r3, #80	; 0x50
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ea:	2302      	movs	r3, #2
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f000 fb78 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80013fc:	e079      	b.n	80014f2 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d128      	bne.n	800145a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001408:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	4a3c      	ldr	r2, [pc, #240]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6593      	str	r3, [r2, #88]	; 0x58
 8001414:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b37      	ldr	r3, [pc, #220]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	4a36      	ldr	r2, [pc, #216]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 8001438:	23c0      	movs	r3, #192	; 0xc0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001448:	2302      	movs	r3, #2
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	482d      	ldr	r0, [pc, #180]	; (8001508 <HAL_TIM_Encoder_MspInit+0x180>)
 8001454:	f000 fb4a 	bl	8001aec <HAL_GPIO_Init>
}
 8001458:	e04b      	b.n	80014f2 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <HAL_TIM_Encoder_MspInit+0x184>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d146      	bne.n	80014f2 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001468:	4a25      	ldr	r2, [pc, #148]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 800146a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800146e:	6613      	str	r3, [r2, #96]	; 0x60
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001480:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCA_Pin;
 80014ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80014be:	2302      	movs	r3, #2
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_ENCA_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f000 fb0e 	bl	8001aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8_CH2_ENCB_Pin;
 80014d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80014e2:	230a      	movs	r3, #10
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH2_ENCB_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_TIM_Encoder_MspInit+0x180>)
 80014ee:	f000 fafd 	bl	8001aec <HAL_GPIO_Init>
}
 80014f2:	bf00      	nop
 80014f4:	3738      	adds	r7, #56	; 0x38
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40000400 	.word	0x40000400
 8001500:	40021000 	.word	0x40021000
 8001504:	40000800 	.word	0x40000800
 8001508:	48000400 	.word	0x48000400
 800150c:	40013400 	.word	0x40013400

08001510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001530:	d14b      	bne.n	80015ca <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH1_M1_PWM_Pin;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001572:	2301      	movs	r3, #1
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f000 fab4 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 8001584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001596:	230a      	movs	r3, #10
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f000 faa2 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 80015a8:	2308      	movs	r3, #8
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4838      	ldr	r0, [pc, #224]	; (80016a4 <HAL_TIM_MspPostInit+0x194>)
 80015c4:	f000 fa92 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015c8:	e066      	b.n	8001698 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a36      	ldr	r2, [pc, #216]	; (80016a8 <HAL_TIM_MspPostInit+0x198>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d11d      	bne.n	8001610 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d8:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 80015ec:	2304      	movs	r3, #4
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80015fc:	2309      	movs	r3, #9
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f000 fa6f 	bl	8001aec <HAL_GPIO_Init>
}
 800160e:	e043      	b.n	8001698 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a25      	ldr	r2, [pc, #148]	; (80016ac <HAL_TIM_MspPostInit+0x19c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d11c      	bne.n	8001654 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 8001632:	2310      	movs	r3, #16
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001642:	2301      	movs	r3, #1
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <HAL_TIM_MspPostInit+0x194>)
 800164e:	f000 fa4d 	bl	8001aec <HAL_GPIO_Init>
}
 8001652:	e021      	b.n	8001698 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <HAL_TIM_MspPostInit+0x1a0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d11c      	bne.n	8001698 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_TIM_MspPostInit+0x190>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001686:	2301      	movs	r3, #1
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f000 fa2a 	bl	8001aec <HAL_GPIO_Init>
}
 8001698:	bf00      	nop
 800169a:	3730      	adds	r7, #48	; 0x30
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	40014000 	.word	0x40014000
 80016ac:	40014400 	.word	0x40014400
 80016b0:	40014800 	.word	0x40014800

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001700:	f000 f8a4 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <USB_LP_IRQHandler+0x10>)
 800170e:	f000 fdcc 	bl	80022aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200013b8 	.word	0x200013b8

0800171c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM6_DAC_IRQHandler+0x10>)
 8001722:	f003 fcdd 	bl	80050e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200005e4 	.word	0x200005e4

08001730 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0b      	ldr	r4, [pc, #44]	; (80017a0 <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177e:	f7ff ffd7 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f008 ffd7 	bl	800a734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001786:	f7fe fdab 	bl	80002e0 <main>

0800178a <LoopForever>:

LoopForever:
    b LoopForever
 800178a:	e7fe      	b.n	800178a <LoopForever>
  ldr   r0, =_estack
 800178c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001798:	0800a820 	.word	0x0800a820
  ldr r2, =_sbss
 800179c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80017a0:	200016ac 	.word	0x200016ac

080017a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>

080017a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f95b 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b6:	200f      	movs	r0, #15
 80017b8:	f000 f80e 	bl	80017d8 <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	e001      	b.n	80017cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c8:	f7ff fcae 	bl	8001128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017cc:	79fb      	ldrb	r3, [r7, #7]

}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_InitTick+0x68>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d022      	beq.n	8001832 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_InitTick+0x6c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_InitTick+0x68>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f966 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10f      	bne.n	800182c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	d809      	bhi.n	8001826 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001812:	2200      	movs	r2, #0
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181a:	f000 f932 	bl	8001a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_InitTick+0x70>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e007      	b.n	8001836 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e004      	b.n	8001836 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e001      	b.n	8001836 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000024 	.word	0x20000024
 8001844:	2000001c 	.word	0x2000001c
 8001848:	20000020 	.word	0x20000020

0800184c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x1c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_IncTick+0x20>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4413      	add	r3, r2
 800185a:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_IncTick+0x1c>)
 800185c:	6013      	str	r3, [r2, #0]
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	20000714 	.word	0x20000714
 800186c:	20000024 	.word	0x20000024

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000714 	.word	0x20000714

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018a0:	d004      	beq.n	80018ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_Delay+0x40>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ac:	bf00      	nop
 80018ae:	f7ff ffdf 	bl	8001870 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d8f7      	bhi.n	80018ae <HAL_Delay+0x26>
  {
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000024 	.word	0x20000024

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff40 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff33 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa4 	bl	8001a28 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001afa:	e15a      	b.n	8001db2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 814c 	beq.w	8001dac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 0201 	and.w	r2, r3, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d123      	bne.n	8001c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	6939      	ldr	r1, [r7, #16]
 8001c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0203 	and.w	r2, r3, #3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80a6 	beq.w	8001dac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c78:	4a56      	ldr	r2, [pc, #344]	; (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca2:	d01f      	beq.n	8001ce4 <HAL_GPIO_Init+0x1f8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4c      	ldr	r2, [pc, #304]	; (8001dd8 <HAL_GPIO_Init+0x2ec>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d019      	beq.n	8001ce0 <HAL_GPIO_Init+0x1f4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <HAL_GPIO_Init+0x2f0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_GPIO_Init+0x1f0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_GPIO_Init+0x2f4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <HAL_GPIO_Init+0x2f8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_GPIO_Init+0x2fc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001ccc:	2305      	movs	r3, #5
 8001cce:	e00a      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	e008      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e004      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	f002 0203 	and.w	r2, r2, #3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf6:	4937      	ldr	r1, [pc, #220]	; (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f47f ae9d 	bne.w	8001afc <HAL_GPIO_Init+0x10>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e081      	b.n	8001f66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff f97a 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e006      	b.n	8001ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d104      	bne.n	8001eea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69d9      	ldr	r1, [r3, #28]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d138      	bne.n	8001ff6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e032      	b.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2224      	movs	r2, #36	; 0x24
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
  }
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	d139      	bne.n	800208e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002024:	2302      	movs	r3, #2
 8002026:	e033      	b.n	8002090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002056:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800208e:	2302      	movs	r3, #2
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b08b      	sub	sp, #44	; 0x2c
 80020a0:	af06      	add	r7, sp, #24
 80020a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0d7      	b.n	800225e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f008 f830 	bl	800a128 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 f980 	bl	80063da <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	e04c      	b.n	800217a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	3301      	adds	r3, #1
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	b298      	uxth	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	3336      	adds	r3, #54	; 0x36
 800211e:	4602      	mov	r2, r0
 8002120:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	3303      	adds	r3, #3
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	3338      	adds	r3, #56	; 0x38
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	333c      	adds	r3, #60	; 0x3c
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	3340      	adds	r3, #64	; 0x40
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3ad      	bcc.n	80020e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e044      	b.n	8002214 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	f203 1369 	addw	r3, r3, #361	; 0x169
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3301      	adds	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3b5      	bcc.n	800218a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	687e      	ldr	r6, [r7, #4]
 8002226:	466d      	mov	r5, sp
 8002228:	f106 0410 	add.w	r4, r6, #16
 800222c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	602b      	str	r3, [r5, #0]
 8002234:	1d33      	adds	r3, r6, #4
 8002236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f004 f8e9 	bl	8006410 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f001 fc29 	bl	8003aae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002266 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_PCD_Start+0x16>
 8002278:	2302      	movs	r3, #2
 800227a:	e012      	b.n	80022a2 <HAL_PCD_Start+0x3c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f004 f88f 	bl	80063ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f006 f844 	bl	8008320 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f006 f849 	bl	800834e <USB_ReadInterrupts>
 80022bc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb26 	bl	800291a <PCD_EP_ISR_Handler>

    return;
 80022ce:	e110      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d013      	beq.n	8002302 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ec:	b292      	uxth	r2, r2
 80022ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f007 ffa9 	bl	800a24a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022f8:	2100      	movs	r1, #0
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8fc 	bl	80024f8 <HAL_PCD_SetAddress>

    return;
 8002300:	e0f7      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800231e:	b292      	uxth	r2, r2
 8002320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002324:	e0e5      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002342:	b292      	uxth	r2, r2
 8002344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002348:	e0d3      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d034      	beq.n	80023be <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0204 	bic.w	r2, r2, #4
 8002366:	b292      	uxth	r2, r2
 8002368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0208 	bic.w	r2, r2, #8
 800237e:	b292      	uxth	r2, r2
 8002380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f008 f94b 	bl	800a634 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f007 ff8c 	bl	800a2bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023b6:	b292      	uxth	r2, r2
 80023b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023bc:	e099      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d027      	beq.n	8002418 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0208 	orr.w	r2, r2, #8
 80023da:	b292      	uxth	r2, r2
 80023dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f2:	b292      	uxth	r2, r2
 80023f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0204 	orr.w	r2, r2, #4
 800240a:	b292      	uxth	r2, r2
 800240c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f007 ff39 	bl	800a288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002416:	e06c      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d040      	beq.n	80024a4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800242a:	b29a      	uxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002434:	b292      	uxth	r2, r2
 8002436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d12b      	bne.n	800249c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800244c:	b29a      	uxth	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0204 	orr.w	r2, r2, #4
 8002456:	b292      	uxth	r2, r2
 8002458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0208 	orr.w	r2, r2, #8
 800246e:	b292      	uxth	r2, r2
 8002470:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002484:	b29b      	uxth	r3, r3
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002492:	2101      	movs	r1, #1
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f008 f8cd 	bl	800a634 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800249a:	e02a      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f007 fef3 	bl	800a288 <HAL_PCD_SuspendCallback>
    return;
 80024a2:	e026      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00f      	beq.n	80024ce <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024c0:	b292      	uxth	r2, r2
 80024c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f007 feb1 	bl	800a22e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024cc:	e011      	b.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00c      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ea:	b292      	uxth	r2, r2
 80024ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024f0:	bf00      	nop
  }
}
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_PCD_SetAddress+0x1a>
 800250e:	2302      	movs	r3, #2
 8002510:	e013      	b.n	800253a <HAL_PCD_SetAddress+0x42>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f005 fee4 	bl	80082f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	4608      	mov	r0, r1
 800254c:	4611      	mov	r1, r2
 800254e:	461a      	mov	r2, r3
 8002550:	4603      	mov	r3, r0
 8002552:	70fb      	strb	r3, [r7, #3]
 8002554:	460b      	mov	r3, r1
 8002556:	803b      	strh	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da0e      	bge.n	8002586 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	705a      	strb	r2, [r3, #1]
 8002584:	e00e      	b.n	80025a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 0207 	and.w	r2, r3, #7
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025b0:	883a      	ldrh	r2, [r7, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	78ba      	ldrb	r2, [r7, #2]
 80025ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025ce:	78bb      	ldrb	r3, [r7, #2]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d102      	bne.n	80025da <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_PCD_EP_Open+0xa6>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e00e      	b.n	8002606 <HAL_PCD_EP_Open+0xc4>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 ff2c 	bl	8006454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002604:	7afb      	ldrb	r3, [r7, #11]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800261a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800261e:	2b00      	cmp	r3, #0
 8002620:	da0e      	bge.n	8002640 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	705a      	strb	r2, [r3, #1]
 800263e:	e00e      	b.n	800265e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 0207 	and.w	r2, r3, #7
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_PCD_EP_Close+0x6a>
 8002674:	2302      	movs	r3, #2
 8002676:	e00e      	b.n	8002696 <HAL_PCD_EP_Close+0x88>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68f9      	ldr	r1, [r7, #12]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fa78 	bl	8006b7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	460b      	mov	r3, r1
 80026ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ae:	7afb      	ldrb	r3, [r7, #11]
 80026b0:	f003 0207 	and.w	r2, r3, #7
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2200      	movs	r2, #0
 80026d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2200      	movs	r2, #0
 80026dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6979      	ldr	r1, [r7, #20]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fc2b 	bl	8006f56 <USB_EPStartXfer>
 8002700:	e005      	b.n	800270e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6979      	ldr	r1, [r7, #20]
 8002708:	4618      	mov	r0, r3
 800270a:	f004 fc24 	bl	8006f56 <USB_EPStartXfer>
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 0207 	and.w	r2, r3, #7
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	460b      	mov	r3, r1
 8002756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002758:	7afb      	ldrb	r3, [r7, #11]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2201      	movs	r2, #1
 8002792:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002794:	7afb      	ldrb	r3, [r7, #11]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	b2da      	uxtb	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a0:	7afb      	ldrb	r3, [r7, #11]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6979      	ldr	r1, [r7, #20]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 fbd0 	bl	8006f56 <USB_EPStartXfer>
 80027b6:	e005      	b.n	80027c4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6979      	ldr	r1, [r7, #20]
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 fbc9 	bl	8006f56 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 0207 	and.w	r2, r3, #7
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d901      	bls.n	80027ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e03e      	b.n	800286a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da0e      	bge.n	8002812 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	705a      	strb	r2, [r3, #1]
 8002810:	e00c      	b.n	800282c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_PCD_EP_SetStall+0x7e>
 8002848:	2302      	movs	r3, #2
 800284a:	e00e      	b.n	800286a <HAL_PCD_EP_SetStall+0x9c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	4618      	mov	r0, r3
 800285c:	f005 fc4d 	bl	80080fa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d901      	bls.n	8002890 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e040      	b.n	8002912 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da0e      	bge.n	80028b6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	705a      	strb	r2, [r3, #1]
 80028b4:	e00e      	b.n	80028d4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 0207 	and.w	r2, r3, #7
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_PCD_EP_ClrStall+0x82>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e00e      	b.n	8002912 <HAL_PCD_EP_ClrStall+0xa0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fc4a 	bl	800819c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b096      	sub	sp, #88	; 0x58
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002922:	e39c      	b.n	800305e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800292c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002930:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800293e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 815e 	bne.w	8002c04 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002948:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d150      	bne.n	80029f6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002964:	81fb      	strh	r3, [r7, #14]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	89fb      	ldrh	r3, [r7, #14]
 800296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002974:	b29b      	uxth	r3, r3
 8002976:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3328      	adds	r3, #40	; 0x28
 800297c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002986:	b29b      	uxth	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	4413      	add	r3, r2
 8002998:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	441a      	add	r2, r3
 80029b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029b4:	2100      	movs	r1, #0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f007 fc1f 	bl	800a1fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 834a 	beq.w	800305e <PCD_EP_ISR_Handler+0x744>
 80029ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 8345 	bne.w	800305e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b292      	uxth	r2, r2
 80029e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029f4:	e333      	b.n	800305e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a08:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d032      	beq.n	8002a7a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a48:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f005 fccf 	bl	80083f2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a60:	4013      	ands	r3, r2
 8002a62:	823b      	strh	r3, [r7, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	8a3a      	ldrh	r2, [r7, #16]
 8002a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f007 fb94 	bl	800a1a0 <HAL_PCD_SetupStageCallback>
 8002a78:	e2f1      	b.n	800305e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a7a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f280 82ed 	bge.w	800305e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a90:	4013      	ands	r3, r2
 8002a92:	83fb      	strh	r3, [r7, #30]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	8bfa      	ldrh	r2, [r7, #30]
 8002a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d019      	beq.n	8002b06 <PCD_EP_ISR_Handler+0x1ec>
 8002ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae0:	6959      	ldr	r1, [r3, #20]
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f005 fc81 	bl	80083f2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	441a      	add	r2, r3
 8002afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002afe:	2100      	movs	r1, #0
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f007 fb5f 	bl	800a1c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 82a3 	bne.w	800305e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3e:	d918      	bls.n	8002b72 <PCD_EP_ISR_Handler+0x258>
 8002b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
 8002b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <PCD_EP_ISR_Handler+0x240>
 8002b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b56:	3b01      	subs	r3, #1
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	029b      	lsls	r3, r3, #10
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	e029      	b.n	8002bc6 <PCD_EP_ISR_Handler+0x2ac>
 8002b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d112      	bne.n	8002ba0 <PCD_EP_ISR_Handler+0x286>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	e012      	b.n	8002bc6 <PCD_EP_ISR_Handler+0x2ac>
 8002ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <PCD_EP_ISR_Handler+0x2a0>
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	827b      	strh	r3, [r7, #18]
 8002bd8:	8a7b      	ldrh	r3, [r7, #18]
 8002bda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002bde:	827b      	strh	r3, [r7, #18]
 8002be0:	8a7b      	ldrh	r3, [r7, #18]
 8002be2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002be6:	827b      	strh	r3, [r7, #18]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	8a7b      	ldrh	r3, [r7, #18]
 8002bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	8013      	strh	r3, [r2, #0]
 8002c02:	e22c      	b.n	800305e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c18:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f280 80f6 	bge.w	8002e0e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c38:	4013      	ands	r3, r2
 8002c3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002c50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c54:	b292      	uxth	r2, r2
 8002c56:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c58:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c70:	7b1b      	ldrb	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d123      	bne.n	8002cbe <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002c9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 808e 	beq.w	8002dc4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cae:	6959      	ldr	r1, [r3, #20]
 8002cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb2:	88da      	ldrh	r2, [r3, #6]
 8002cb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cb8:	f005 fb9b 	bl	80083f2 <USB_ReadPMA>
 8002cbc:	e082      	b.n	8002dc4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc0:	78db      	ldrb	r3, [r3, #3]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d10a      	bne.n	8002cdc <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cc6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cca:	461a      	mov	r2, r3
 8002ccc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f9d3 	bl	800307a <HAL_PCD_EP_DB_Receive>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002cda:	e073      	b.n	8002dc4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	441a      	add	r2, r3
 8002d08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d022      	beq.n	8002d80 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002d62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d02c      	beq.n	8002dc4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d70:	6959      	ldr	r1, [r3, #20]
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	891a      	ldrh	r2, [r3, #8]
 8002d76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d7a:	f005 fb3a 	bl	80083f2 <USB_ReadPMA>
 8002d7e:	e021      	b.n	8002dc4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002da8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db6:	6959      	ldr	r1, [r3, #20]
 8002db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dba:	895a      	ldrh	r2, [r3, #10]
 8002dbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dc0:	f005 fb17 	bl	80083f2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dcc:	441a      	add	r2, r3
 8002dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dda:	441a      	add	r2, r3
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dde:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <PCD_EP_ISR_Handler+0x4da>
 8002de8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d206      	bcs.n	8002e02 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f007 f9e2 	bl	800a1c4 <HAL_PCD_DataOutStageCallback>
 8002e00:	e005      	b.n	8002e0e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 f8a4 	bl	8006f56 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8121 	beq.w	800305e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e1c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	441a      	add	r2, r3
 8002e5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	78db      	ldrb	r3, [r3, #3]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f000 80a2 	beq.w	8002fba <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7e:	7b1b      	ldrb	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8093 	beq.w	8002fac <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d046      	beq.n	8002f20 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	785b      	ldrb	r3, [r3, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d126      	bne.n	8002ee8 <PCD_EP_ISR_Handler+0x5ce>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	4413      	add	r3, r2
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	00da      	lsls	r2, r3, #3
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	4413      	add	r3, r2
 8002ebc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	e061      	b.n	8002fac <PCD_EP_ISR_Handler+0x692>
 8002ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d15d      	bne.n	8002fac <PCD_EP_ISR_Handler+0x692>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	4413      	add	r3, r2
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	00da      	lsls	r2, r3, #3
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	4413      	add	r3, r2
 8002f12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e045      	b.n	8002fac <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d126      	bne.n	8002f7c <PCD_EP_ISR_Handler+0x662>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f42:	4413      	add	r3, r2
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
 8002f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	e017      	b.n	8002fac <PCD_EP_ISR_Handler+0x692>
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d113      	bne.n	8002fac <PCD_EP_ISR_Handler+0x692>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f92:	4413      	add	r3, r2
 8002f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	00da      	lsls	r2, r3, #3
 8002f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	2200      	movs	r2, #0
 8002faa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f007 f921 	bl	800a1fa <HAL_PCD_DataInStageCallback>
 8002fb8:	e051      	b.n	800305e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002fba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d144      	bne.n	8003050 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d907      	bls.n	800300a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003002:	1ad2      	subs	r2, r2, r3
 8003004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003006:	619a      	str	r2, [r3, #24]
 8003008:	e002      	b.n	8003010 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f007 f8eb 	bl	800a1fa <HAL_PCD_DataInStageCallback>
 8003024:	e01b      	b.n	800305e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800302e:	441a      	add	r2, r3
 8003030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003032:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800303c:	441a      	add	r2, r3
 800303e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003040:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003048:	4618      	mov	r0, r3
 800304a:	f003 ff84 	bl	8006f56 <USB_EPStartXfer>
 800304e:	e006      	b.n	800305e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003050:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003054:	461a      	mov	r2, r3
 8003056:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f917 	bl	800328c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003066:	b29b      	uxth	r3, r3
 8003068:	b21b      	sxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	f6ff ac5a 	blt.w	8002924 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3758      	adds	r7, #88	; 0x58
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b088      	sub	sp, #32
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	4613      	mov	r3, r2
 8003086:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d07c      	beq.n	800318c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800309a:	b29b      	uxth	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	8b7b      	ldrh	r3, [r7, #26]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d306      	bcc.n	80030d0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	8b7b      	ldrh	r3, [r7, #26]
 80030c8:	1ad2      	subs	r2, r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	619a      	str	r2, [r3, #24]
 80030ce:	e002      	b.n	80030d6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d123      	bne.n	8003126 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f8:	833b      	strh	r3, [r7, #24]
 80030fa:	8b3b      	ldrh	r3, [r7, #24]
 80030fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003100:	833b      	strh	r3, [r7, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	441a      	add	r2, r3
 8003110:	8b3b      	ldrh	r3, [r7, #24]
 8003112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800311a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003122:	b29b      	uxth	r3, r3
 8003124:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01f      	beq.n	8003170 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	82fb      	strh	r3, [r7, #22]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	441a      	add	r2, r3
 800315a:	8afb      	ldrh	r3, [r7, #22]
 800315c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800316c:	b29b      	uxth	r3, r3
 800316e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003170:	8b7b      	ldrh	r3, [r7, #26]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 8085 	beq.w	8003282 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6959      	ldr	r1, [r3, #20]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	891a      	ldrh	r2, [r3, #8]
 8003184:	8b7b      	ldrh	r3, [r7, #26]
 8003186:	f005 f934 	bl	80083f2 <USB_ReadPMA>
 800318a:	e07a      	b.n	8003282 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	4413      	add	r3, r2
 80031a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	8b7b      	ldrh	r3, [r7, #26]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d306      	bcc.n	80031ca <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	8b7b      	ldrh	r3, [r7, #26]
 80031c2:	1ad2      	subs	r2, r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	619a      	str	r2, [r3, #24]
 80031c8:	e002      	b.n	80031d0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d123      	bne.n	8003220 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	83fb      	strh	r3, [r7, #30]
 80031f4:	8bfb      	ldrh	r3, [r7, #30]
 80031f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031fa:	83fb      	strh	r3, [r7, #30]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	8bfb      	ldrh	r3, [r7, #30]
 800320c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	b29b      	uxth	r3, r3
 800321e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11f      	bne.n	800326a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	83bb      	strh	r3, [r7, #28]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	8bbb      	ldrh	r3, [r7, #28]
 8003256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003262:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800326a:	8b7b      	ldrh	r3, [r7, #26]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6959      	ldr	r1, [r3, #20]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	895a      	ldrh	r2, [r3, #10]
 800327c:	8b7b      	ldrh	r3, [r7, #26]
 800327e:	f005 f8b8 	bl	80083f2 <USB_ReadPMA>
    }
  }

  return count;
 8003282:	8b7b      	ldrh	r3, [r7, #26]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b0a2      	sub	sp, #136	; 0x88
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 81c5 	beq.w	8003630 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d907      	bls.n	80032ea <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032e2:	1ad2      	subs	r2, r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	619a      	str	r2, [r3, #24]
 80032e8:	e002      	b.n	80032f0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f040 80b9 	bne.w	800346c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d126      	bne.n	8003350 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	4413      	add	r3, r2
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00da      	lsls	r2, r3, #3
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	4413      	add	r3, r2
 8003324:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003334:	b29a      	uxth	r2, r3
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003348:	b29a      	uxth	r2, r3
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	e01a      	b.n	8003386 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d116      	bne.n	8003386 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	4413      	add	r3, r2
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	00da      	lsls	r2, r3, #3
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	4413      	add	r3, r2
 800337a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	2200      	movs	r2, #0
 8003384:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d126      	bne.n	80033e2 <HAL_PCD_EP_DB_Transmit+0x156>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4413      	add	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	00da      	lsls	r2, r3, #3
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4413      	add	r3, r2
 80033b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	801a      	strh	r2, [r3, #0]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033da:	b29a      	uxth	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	801a      	strh	r2, [r3, #0]
 80033e0:	e017      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x186>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d113      	bne.n	8003412 <HAL_PCD_EP_DB_Transmit+0x186>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	4413      	add	r3, r2
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	00da      	lsls	r2, r3, #3
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	4413      	add	r3, r2
 8003406:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2200      	movs	r2, #0
 8003410:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f006 feee 	bl	800a1fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 82d2 	beq.w	80039ce <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003444:	827b      	strh	r3, [r7, #18]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	441a      	add	r2, r3
 8003454:	8a7b      	ldrh	r3, [r7, #18]
 8003456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]
 800346a:	e2b0      	b.n	80039ce <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d021      	beq.n	80034ba <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	441a      	add	r2, r3
 80034a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f040 8284 	bne.w	80039ce <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034ce:	441a      	add	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034dc:	441a      	add	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6a1a      	ldr	r2, [r3, #32]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d309      	bcc.n	8003502 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	621a      	str	r2, [r3, #32]
 8003500:	e015      	b.n	800352e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800350a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003518:	e009      	b.n	800352e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d155      	bne.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x356>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	4413      	add	r3, r2
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	00da      	lsls	r2, r3, #3
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	4413      	add	r3, r2
 8003558:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
 800355e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003560:	2b3e      	cmp	r3, #62	; 0x3e
 8003562:	d916      	bls.n	8003592 <HAL_PCD_EP_DB_Transmit+0x306>
 8003564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	64bb      	str	r3, [r7, #72]	; 0x48
 800356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003576:	3b01      	subs	r3, #1
 8003578:	64bb      	str	r3, [r7, #72]	; 0x48
 800357a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357c:	b29b      	uxth	r3, r3
 800357e:	029b      	lsls	r3, r3, #10
 8003580:	b29b      	uxth	r3, r3
 8003582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358a:	b29a      	uxth	r2, r3
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	e043      	b.n	800361a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003594:	2b00      	cmp	r3, #0
 8003596:	d112      	bne.n	80035be <HAL_PCD_EP_DB_Transmit+0x332>
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	801a      	strh	r2, [r3, #0]
 80035bc:	e02d      	b.n	800361a <HAL_PCD_EP_DB_Transmit+0x38e>
 80035be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x348>
 80035ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d0:	3301      	adds	r3, #1
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	e01b      	b.n	800361a <HAL_PCD_EP_DB_Transmit+0x38e>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d117      	bne.n	800361a <HAL_PCD_EP_DB_Transmit+0x38e>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	643b      	str	r3, [r7, #64]	; 0x40
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fe:	4413      	add	r3, r2
 8003600:	643b      	str	r3, [r7, #64]	; 0x40
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	00da      	lsls	r2, r3, #3
 8003608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360a:	4413      	add	r3, r2
 800360c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003614:	b29a      	uxth	r2, r3
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6959      	ldr	r1, [r3, #20]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	891a      	ldrh	r2, [r3, #8]
 8003626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003628:	b29b      	uxth	r3, r3
 800362a:	f004 fea0 	bl	800836e <USB_WritePMA>
 800362e:	e1ce      	b.n	80039ce <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4413      	add	r3, r2
 800364a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003654:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003660:	429a      	cmp	r2, r3
 8003662:	d307      	bcc.n	8003674 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	619a      	str	r2, [r3, #24]
 8003672:	e002      	b.n	800367a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 80c4 	bne.w	800380c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d126      	bne.n	80036da <HAL_PCD_EP_DB_Transmit+0x44e>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	66bb      	str	r3, [r7, #104]	; 0x68
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a0:	4413      	add	r3, r2
 80036a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	00da      	lsls	r2, r3, #3
 80036aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ac:	4413      	add	r3, r2
 80036ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036b2:	667b      	str	r3, [r7, #100]	; 0x64
 80036b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036be:	b29a      	uxth	r2, r3
 80036c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d6:	801a      	strh	r2, [r3, #0]
 80036d8:	e01a      	b.n	8003710 <HAL_PCD_EP_DB_Transmit+0x484>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d116      	bne.n	8003710 <HAL_PCD_EP_DB_Transmit+0x484>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	673b      	str	r3, [r7, #112]	; 0x70
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f6:	4413      	add	r3, r2
 80036f8:	673b      	str	r3, [r7, #112]	; 0x70
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	00da      	lsls	r2, r3, #3
 8003700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003702:	4413      	add	r3, r2
 8003704:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800370a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370c:	2200      	movs	r2, #0
 800370e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	785b      	ldrb	r3, [r3, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d12f      	bne.n	800377e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003736:	4413      	add	r3, r2
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	00da      	lsls	r2, r3, #3
 8003742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003746:	4413      	add	r3, r2
 8003748:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800374c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800375c:	b29a      	uxth	r2, r3
 800375e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003774:	b29a      	uxth	r2, r3
 8003776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	e017      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x522>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d113      	bne.n	80037ae <HAL_PCD_EP_DB_Transmit+0x522>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378e:	b29b      	uxth	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003794:	4413      	add	r3, r2
 8003796:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	00da      	lsls	r2, r3, #3
 800379e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037a0:	4413      	add	r3, r2
 80037a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80037a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037aa:	2200      	movs	r2, #0
 80037ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f006 fd20 	bl	800a1fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 8104 	bne.w	80039ce <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80037f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003806:	b29b      	uxth	r3, r3
 8003808:	8013      	strh	r3, [r2, #0]
 800380a:	e0e0      	b.n	80039ce <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d121      	bne.n	800385a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800384a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800384e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003856:	b29b      	uxth	r3, r3
 8003858:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003860:	2b01      	cmp	r3, #1
 8003862:	f040 80b4 	bne.w	80039ce <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800386e:	441a      	add	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800387c:	441a      	add	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d309      	bcc.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	621a      	str	r2, [r3, #32]
 80038a0:	e015      	b.n	80038ce <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80038aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038b8:	e009      	b.n	80038ce <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	663b      	str	r3, [r7, #96]	; 0x60
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	785b      	ldrb	r3, [r3, #1]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d155      	bne.n	8003988 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038f0:	4413      	add	r3, r2
 80038f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	00da      	lsls	r2, r3, #3
 80038fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038fc:	4413      	add	r3, r2
 80038fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003902:	657b      	str	r3, [r7, #84]	; 0x54
 8003904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003906:	2b3e      	cmp	r3, #62	; 0x3e
 8003908:	d916      	bls.n	8003938 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	677b      	str	r3, [r7, #116]	; 0x74
 8003910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_PCD_EP_DB_Transmit+0x694>
 800391a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391c:	3b01      	subs	r3, #1
 800391e:	677b      	str	r3, [r7, #116]	; 0x74
 8003920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003922:	b29b      	uxth	r3, r3
 8003924:	029b      	lsls	r3, r3, #10
 8003926:	b29b      	uxth	r3, r3
 8003928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800392c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003930:	b29a      	uxth	r2, r3
 8003932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	e040      	b.n	80039ba <HAL_PCD_EP_DB_Transmit+0x72e>
 8003938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393a:	2b00      	cmp	r3, #0
 800393c:	d112      	bne.n	8003964 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003948:	b29a      	uxth	r2, r3
 800394a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395c:	b29a      	uxth	r2, r3
 800395e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	e02a      	b.n	80039ba <HAL_PCD_EP_DB_Transmit+0x72e>
 8003964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	677b      	str	r3, [r7, #116]	; 0x74
 800396a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003976:	3301      	adds	r3, #1
 8003978:	677b      	str	r3, [r7, #116]	; 0x74
 800397a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397c:	b29b      	uxth	r3, r3
 800397e:	029b      	lsls	r3, r3, #10
 8003980:	b29a      	uxth	r2, r3
 8003982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	e018      	b.n	80039ba <HAL_PCD_EP_DB_Transmit+0x72e>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d114      	bne.n	80039ba <HAL_PCD_EP_DB_Transmit+0x72e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399e:	4413      	add	r3, r2
 80039a0:	663b      	str	r3, [r7, #96]	; 0x60
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	00da      	lsls	r2, r3, #3
 80039a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	6959      	ldr	r1, [r3, #20]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	895a      	ldrh	r2, [r3, #10]
 80039c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f004 fcd0 	bl	800836e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e8:	823b      	strh	r3, [r7, #16]
 80039ea:	8a3b      	ldrh	r3, [r7, #16]
 80039ec:	f083 0310 	eor.w	r3, r3, #16
 80039f0:	823b      	strh	r3, [r7, #16]
 80039f2:	8a3b      	ldrh	r3, [r7, #16]
 80039f4:	f083 0320 	eor.w	r3, r3, #32
 80039f8:	823b      	strh	r3, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	8a3b      	ldrh	r3, [r7, #16]
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3788      	adds	r7, #136	; 0x88
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	4613      	mov	r3, r2
 8003a38:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e009      	b.n	8003a72 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a5e:	897a      	ldrh	r2, [r7, #10]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a72:	893b      	ldrh	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	80da      	strh	r2, [r3, #6]
 8003a86:	e00b      	b.n	8003aa0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d141      	bne.n	8003b96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b12:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d131      	bne.n	8003b84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	4a46      	ldr	r2, [pc, #280]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b30:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b38:	4a41      	ldr	r2, [pc, #260]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b40:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2232      	movs	r2, #50	; 0x32
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	0c9b      	lsrs	r3, r3, #18
 8003b52:	3301      	adds	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b56:	e002      	b.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b5e:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d102      	bne.n	8003b72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f2      	bne.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b72:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7e:	d158      	bne.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e057      	b.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b84:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b94:	e04d      	b.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b9c:	d141      	bne.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b9e:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d131      	bne.n	8003c10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb2:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bc4:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2232      	movs	r2, #50	; 0x32
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	0c9b      	lsrs	r3, r3, #18
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be2:	e002      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d102      	bne.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f2      	bne.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0a:	d112      	bne.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e011      	b.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c16:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c20:	e007      	b.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c2a:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40007000 	.word	0x40007000
 8003c44:	2000001c 	.word	0x2000001c
 8003c48:	431bde83 	.word	0x431bde83

08003c4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5a:	6093      	str	r3, [r2, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40007000 	.word	0x40007000

08003c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e308      	b.n	8004290 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d075      	beq.n	8003d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8a:	4ba3      	ldr	r3, [pc, #652]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c94:	4ba0      	ldr	r3, [pc, #640]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d102      	bne.n	8003caa <HAL_RCC_OscConfig+0x3e>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d002      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x44>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d10b      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb0:	4b99      	ldr	r3, [pc, #612]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d05b      	beq.n	8003d74 <HAL_RCC_OscConfig+0x108>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d157      	bne.n	8003d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e2e3      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d106      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x74>
 8003cd2:	4b91      	ldr	r3, [pc, #580]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a90      	ldr	r2, [pc, #576]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e01d      	b.n	8003d1c <HAL_RCC_OscConfig+0xb0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x98>
 8003cea:	4b8b      	ldr	r3, [pc, #556]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a8a      	ldr	r2, [pc, #552]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a87      	ldr	r2, [pc, #540]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e00b      	b.n	8003d1c <HAL_RCC_OscConfig+0xb0>
 8003d04:	4b84      	ldr	r3, [pc, #528]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a83      	ldr	r2, [pc, #524]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	4b81      	ldr	r3, [pc, #516]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a80      	ldr	r2, [pc, #512]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fd fda4 	bl	8001870 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7fd fda0 	bl	8001870 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e2a8      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3e:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0xc0>
 8003d4a:	e014      	b.n	8003d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fd90 	bl	8001870 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fd fd8c 	bl	8001870 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	; 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e294      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d66:	4b6c      	ldr	r3, [pc, #432]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0xe8>
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d075      	beq.n	8003e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d82:	4b65      	ldr	r3, [pc, #404]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d8c:	4b62      	ldr	r3, [pc, #392]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	d102      	bne.n	8003da2 <HAL_RCC_OscConfig+0x136>
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_OscConfig+0x13c>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11f      	bne.n	8003de8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da8:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x154>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e267      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc0:	4b55      	ldr	r3, [pc, #340]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	4952      	ldr	r1, [pc, #328]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dd4:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_RCC_OscConfig+0x2b0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fd fcfd 	bl	80017d8 <HAL_InitTick>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d043      	beq.n	8003e6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e253      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d023      	beq.n	8003e38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a48      	ldr	r2, [pc, #288]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fd38 	bl	8001870 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fd fd34 	bl	8001870 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e23c      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e16:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e22:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	4939      	ldr	r1, [pc, #228]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
 8003e36:	e01a      	b.n	8003e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e38:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a36      	ldr	r2, [pc, #216]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd fd14 	bl	8001870 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4c:	f7fd fd10 	bl	8001870 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e218      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x1e0>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03c      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01c      	beq.n	8003ebc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e88:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fd fced 	bl	8001870 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9a:	f7fd fce9 	bl	8001870 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1f1      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eac:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ef      	beq.n	8003e9a <HAL_RCC_OscConfig+0x22e>
 8003eba:	e01b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebc:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec2:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd fcd0 	bl	8001870 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fd fccc 	bl	8001870 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e1d4      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ef      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80ab 	beq.w	8004058 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_RCC_OscConfig+0x2b4>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e005      	b.n	8003f22 <HAL_RCC_OscConfig+0x2b6>
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	20000020 	.word	0x20000020
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4baf      	ldr	r3, [pc, #700]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4aae      	ldr	r2, [pc, #696]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
 8003f32:	4bac      	ldr	r3, [pc, #688]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f42:	4ba9      	ldr	r3, [pc, #676]	; (80041e8 <HAL_RCC_OscConfig+0x57c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d118      	bne.n	8003f80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4e:	4ba6      	ldr	r3, [pc, #664]	; (80041e8 <HAL_RCC_OscConfig+0x57c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4aa5      	ldr	r2, [pc, #660]	; (80041e8 <HAL_RCC_OscConfig+0x57c>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fc89 	bl	8001870 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f62:	f7fd fc85 	bl	8001870 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e18d      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f74:	4b9c      	ldr	r3, [pc, #624]	; (80041e8 <HAL_RCC_OscConfig+0x57c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d108      	bne.n	8003f9a <HAL_RCC_OscConfig+0x32e>
 8003f88:	4b96      	ldr	r3, [pc, #600]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	4a95      	ldr	r2, [pc, #596]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f98:	e024      	b.n	8003fe4 <HAL_RCC_OscConfig+0x378>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d110      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x358>
 8003fa2:	4b90      	ldr	r3, [pc, #576]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	4a8e      	ldr	r2, [pc, #568]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fb2:	4b8c      	ldr	r3, [pc, #560]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	4a8a      	ldr	r2, [pc, #552]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fc2:	e00f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x378>
 8003fc4:	4b87      	ldr	r3, [pc, #540]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	4a86      	ldr	r2, [pc, #536]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd4:	4b83      	ldr	r3, [pc, #524]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	4a82      	ldr	r2, [pc, #520]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d016      	beq.n	800401a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd fc40 	bl	8001870 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd fc3c 	bl	8001870 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e142      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400a:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ed      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x388>
 8004018:	e015      	b.n	8004046 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fd fc29 	bl	8001870 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fd fc25 	bl	8001870 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e12b      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004038:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ed      	bne.n	8004022 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004046:	7ffb      	ldrb	r3, [r7, #31]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404c:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	4a64      	ldr	r2, [pc, #400]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004056:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d03c      	beq.n	80040de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01c      	beq.n	80040a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800406c:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 800406e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004072:	4a5c      	ldr	r2, [pc, #368]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd fbf8 	bl	8001870 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004084:	f7fd fbf4 	bl	8001870 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0fc      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004096:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ef      	beq.n	8004084 <HAL_RCC_OscConfig+0x418>
 80040a4:	e01b      	b.n	80040de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040a6:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80040a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ac:	4a4d      	ldr	r2, [pc, #308]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b6:	f7fd fbdb 	bl	8001870 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040be:	f7fd fbd7 	bl	8001870 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e0df      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040d0:	4b44      	ldr	r3, [pc, #272]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80040d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1ef      	bne.n	80040be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80d3 	beq.w	800428e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e8:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	f000 808d 	beq.w	8004210 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d15a      	bne.n	80041b4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fe:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a38      	ldr	r2, [pc, #224]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fd fbb1 	bl	8001870 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004112:	f7fd fbad 	bl	8001870 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0b5      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004124:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f0      	bne.n	8004112 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004130:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <HAL_RCC_OscConfig+0x580>)
 8004136:	4013      	ands	r3, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6a11      	ldr	r1, [r2, #32]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004140:	3a01      	subs	r2, #1
 8004142:	0112      	lsls	r2, r2, #4
 8004144:	4311      	orrs	r1, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800414a:	0212      	lsls	r2, r2, #8
 800414c:	4311      	orrs	r1, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004152:	0852      	lsrs	r2, r2, #1
 8004154:	3a01      	subs	r2, #1
 8004156:	0552      	lsls	r2, r2, #21
 8004158:	4311      	orrs	r1, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800415e:	0852      	lsrs	r2, r2, #1
 8004160:	3a01      	subs	r2, #1
 8004162:	0652      	lsls	r2, r2, #25
 8004164:	4311      	orrs	r1, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800416a:	06d2      	lsls	r2, r2, #27
 800416c:	430a      	orrs	r2, r1
 800416e:	491d      	ldr	r1, [pc, #116]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004170:	4313      	orrs	r3, r2
 8004172:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004180:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 8004186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fb70 	bl	8001870 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd fb6c 	bl	8001870 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e074      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x528>
 80041b2:	e06c      	b.n	800428e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80041ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_RCC_OscConfig+0x578>)
 80041d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80041d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fb48 	bl	8001870 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e2:	e00e      	b.n	8004202 <HAL_RCC_OscConfig+0x596>
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40007000 	.word	0x40007000
 80041ec:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd fb3e 	bl	8001870 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e046      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_OscConfig+0x62c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x584>
 800420e:	e03e      	b.n	800428e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e039      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCC_OscConfig+0x62c>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 0203 	and.w	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	429a      	cmp	r2, r3
 800422e:	d12c      	bne.n	800428a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	3b01      	subs	r3, #1
 800423c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d123      	bne.n	800428a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d11b      	bne.n	800428a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d113      	bne.n	800428a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	3b01      	subs	r3, #1
 8004270:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d109      	bne.n	800428a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	3b01      	subs	r3, #1
 8004284:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000

0800429c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e11e      	b.n	80044f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4b91      	ldr	r3, [pc, #580]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d910      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b8e      	ldr	r3, [pc, #568]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 020f 	bic.w	r2, r3, #15
 80042ca:	498c      	ldr	r1, [pc, #560]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b8a      	ldr	r3, [pc, #552]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e106      	b.n	80044f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d073      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d129      	bne.n	800434c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f8:	4b81      	ldr	r3, [pc, #516]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0f4      	b.n	80044f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004308:	f000 f966 	bl	80045d8 <RCC_GetSysClockFreqFromPLLSource>
 800430c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4a7c      	ldr	r2, [pc, #496]	; (8004504 <HAL_RCC_ClockConfig+0x268>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d93f      	bls.n	8004396 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004316:	4b7a      	ldr	r3, [pc, #488]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800432a:	2b00      	cmp	r3, #0
 800432c:	d033      	beq.n	8004396 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004332:	2b00      	cmp	r3, #0
 8004334:	d12f      	bne.n	8004396 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004336:	4b72      	ldr	r3, [pc, #456]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800433e:	4a70      	ldr	r2, [pc, #448]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004344:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e024      	b.n	8004396 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d107      	bne.n	8004364 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004354:	4b6a      	ldr	r3, [pc, #424]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0c6      	b.n	80044f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0be      	b.n	80044f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004374:	f000 f8ce 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 8004378:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4a61      	ldr	r2, [pc, #388]	; (8004504 <HAL_RCC_ClockConfig+0x268>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d909      	bls.n	8004396 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004382:	4b5f      	ldr	r3, [pc, #380]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800438a:	4a5d      	ldr	r2, [pc, #372]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 800438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004390:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b5a      	ldr	r3, [pc, #360]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4957      	ldr	r1, [pc, #348]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fd fa62 	bl	8001870 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fd fa5e 	bl	8001870 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e095      	b.n	80044f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f0:	4b43      	ldr	r3, [pc, #268]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a42      	ldr	r2, [pc, #264]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80043f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004408:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004410:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004416:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4936      	ldr	r1, [pc, #216]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
 800442a:	e008      	b.n	800443e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d105      	bne.n	800443e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004432:	4b33      	ldr	r3, [pc, #204]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	4a32      	ldr	r2, [pc, #200]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800443e:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d21d      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 020f 	bic.w	r2, r3, #15
 8004454:	4929      	ldr	r1, [pc, #164]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800445c:	f7fd fa08 	bl	8001870 <HAL_GetTick>
 8004460:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	e00a      	b.n	800447a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004464:	f7fd fa04 	bl	8001870 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e03b      	b.n	80044f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d1ed      	bne.n	8004464 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4917      	ldr	r1, [pc, #92]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490f      	ldr	r1, [pc, #60]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044c6:	f000 f825 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCC_ClockConfig+0x264>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490c      	ldr	r1, [pc, #48]	; (8004508 <HAL_RCC_ClockConfig+0x26c>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <HAL_RCC_ClockConfig+0x270>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_ClockConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fd f974 	bl	80017d8 <HAL_InitTick>
 80044f0:	4603      	mov	r3, r0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40022000 	.word	0x40022000
 8004500:	40021000 	.word	0x40021000
 8004504:	04c4b400 	.word	0x04c4b400
 8004508:	0800a808 	.word	0x0800a808
 800450c:	2000001c 	.word	0x2000001c
 8004510:	20000020 	.word	0x20000020

08004514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800451a:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b04      	cmp	r3, #4
 8004524:	d102      	bne.n	800452c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004526:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e047      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800452c:	4b27      	ldr	r3, [pc, #156]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	2b08      	cmp	r3, #8
 8004536:	d102      	bne.n	800453e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004538:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e03e      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d136      	bne.n	80045b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3301      	adds	r3, #1
 8004560:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004568:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004572:	68d2      	ldr	r2, [r2, #12]
 8004574:	0a12      	lsrs	r2, r2, #8
 8004576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	617b      	str	r3, [r7, #20]
      break;
 8004580:	e00c      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	4a10      	ldr	r2, [pc, #64]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800458c:	68d2      	ldr	r2, [r2, #12]
 800458e:	0a12      	lsrs	r2, r2, #8
 8004590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]
      break;
 800459a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	0e5b      	lsrs	r3, r3, #25
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	3301      	adds	r3, #1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	e001      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045bc:	693b      	ldr	r3, [r7, #16]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	00f42400 	.word	0x00f42400
 80045d4:	007a1200 	.word	0x007a1200

080045d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d10c      	bne.n	8004616 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	4a14      	ldr	r2, [pc, #80]	; (8004658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004606:	68d2      	ldr	r2, [r2, #12]
 8004608:	0a12      	lsrs	r2, r2, #8
 800460a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	617b      	str	r3, [r7, #20]
    break;
 8004614:	e00c      	b.n	8004630 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004616:	4a12      	ldr	r2, [pc, #72]	; (8004660 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004620:	68d2      	ldr	r2, [r2, #12]
 8004622:	0a12      	lsrs	r2, r2, #8
 8004624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]
    break;
 800462e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	0e5b      	lsrs	r3, r3, #25
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	3301      	adds	r3, #1
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800464a:	687b      	ldr	r3, [r7, #4]
}
 800464c:	4618      	mov	r0, r3
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	40021000 	.word	0x40021000
 800465c:	007a1200 	.word	0x007a1200
 8004660:	00f42400 	.word	0x00f42400

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800466c:	2300      	movs	r3, #0
 800466e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004670:	2300      	movs	r3, #0
 8004672:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8098 	beq.w	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004686:	4b43      	ldr	r3, [pc, #268]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10d      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	4a3f      	ldr	r2, [pc, #252]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469c:	6593      	str	r3, [r2, #88]	; 0x58
 800469e:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046aa:	2301      	movs	r3, #1
 80046ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ae:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a39      	ldr	r2, [pc, #228]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046ba:	f7fd f8d9 	bl	8001870 <HAL_GetTick>
 80046be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c0:	e009      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c2:	f7fd f8d5 	bl	8001870 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d902      	bls.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	74fb      	strb	r3, [r7, #19]
        break;
 80046d4:	e005      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ef      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d159      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046e8:	4b2a      	ldr	r3, [pc, #168]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01e      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	429a      	cmp	r2, r3
 8004702:	d019      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004704:	4b23      	ldr	r3, [pc, #140]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004710:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fd f895 	bl	8001870 <HAL_GetTick>
 8004746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004748:	e00b      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fd f891 	bl	8001870 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	; 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d902      	bls.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	74fb      	strb	r3, [r7, #19]
            break;
 8004760:	e006      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ec      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	4903      	ldr	r1, [pc, #12]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800478c:	e008      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
 8004792:	e005      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a0:	7c7b      	ldrb	r3, [r7, #17]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d105      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a6:	4ba6      	ldr	r3, [pc, #664]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	4aa5      	ldr	r2, [pc, #660]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047be:	4ba0      	ldr	r3, [pc, #640]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f023 0203 	bic.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	499c      	ldr	r1, [pc, #624]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e0:	4b97      	ldr	r3, [pc, #604]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f023 020c 	bic.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4994      	ldr	r1, [pc, #592]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004802:	4b8f      	ldr	r3, [pc, #572]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	498b      	ldr	r1, [pc, #556]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004824:	4b86      	ldr	r3, [pc, #536]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	4983      	ldr	r1, [pc, #524]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004846:	4b7e      	ldr	r3, [pc, #504]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	497a      	ldr	r1, [pc, #488]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004868:	4b75      	ldr	r3, [pc, #468]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	4972      	ldr	r1, [pc, #456]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800488a:	4b6d      	ldr	r3, [pc, #436]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	4969      	ldr	r1, [pc, #420]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ac:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4961      	ldr	r1, [pc, #388]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ce:	4b5c      	ldr	r3, [pc, #368]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	4958      	ldr	r1, [pc, #352]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d015      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f0:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	4950      	ldr	r1, [pc, #320]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490e:	d105      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004910:	4b4b      	ldr	r3, [pc, #300]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a4a      	ldr	r2, [pc, #296]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800491a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004924:	2b00      	cmp	r3, #0
 8004926:	d015      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	4942      	ldr	r1, [pc, #264]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004946:	d105      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004948:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4a3c      	ldr	r2, [pc, #240]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004952:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	4934      	ldr	r1, [pc, #208]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800497e:	d105      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004980:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a2e      	ldr	r2, [pc, #184]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800498a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004998:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	4926      	ldr	r1, [pc, #152]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b6:	d105      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b8:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a20      	ldr	r2, [pc, #128]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	4918      	ldr	r1, [pc, #96]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ee:	d105      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	490a      	ldr	r1, [pc, #40]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a26:	d105      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a34:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000

08004a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e049      	b.n	8004aea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc fc18 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 fee2 	bl	800584c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e04a      	b.n	8004ba2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b36:	d013      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x6c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d115      	bne.n	8004b8c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b06      	cmp	r3, #6
 8004b70:	d015      	beq.n	8004b9e <HAL_TIM_Base_Start_IT+0xaa>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d011      	beq.n	8004b9e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8a:	e008      	b.n	8004b9e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e000      	b.n	8004ba0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	00010007 	.word	0x00010007

08004bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e049      	b.n	8004c6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fb36 	bl	8001260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 fe20 	bl	800584c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <HAL_TIM_PWM_Start+0x24>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e03c      	b.n	8004d16 <HAL_TIM_PWM_Start+0x9e>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d109      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0x3e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	e02f      	b.n	8004d16 <HAL_TIM_PWM_Start+0x9e>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d109      	bne.n	8004cd0 <HAL_TIM_PWM_Start+0x58>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e022      	b.n	8004d16 <HAL_TIM_PWM_Start+0x9e>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d109      	bne.n	8004cea <HAL_TIM_PWM_Start+0x72>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e015      	b.n	8004d16 <HAL_TIM_PWM_Start+0x9e>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d109      	bne.n	8004d04 <HAL_TIM_PWM_Start+0x8c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e008      	b.n	8004d16 <HAL_TIM_PWM_Start+0x9e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e097      	b.n	8004e4e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_PWM_Start+0xb6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	e023      	b.n	8004d76 <HAL_TIM_PWM_Start+0xfe>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d104      	bne.n	8004d3e <HAL_TIM_PWM_Start+0xc6>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d3c:	e01b      	b.n	8004d76 <HAL_TIM_PWM_Start+0xfe>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_PWM_Start+0xd6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d4c:	e013      	b.n	8004d76 <HAL_TIM_PWM_Start+0xfe>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0xe6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d5c:	e00b      	b.n	8004d76 <HAL_TIM_PWM_Start+0xfe>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start+0xf6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d6c:	e003      	b.n	8004d76 <HAL_TIM_PWM_Start+0xfe>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f986 	bl	8006090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a33      	ldr	r2, [pc, #204]	; (8004e58 <HAL_TIM_PWM_Start+0x1e0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_TIM_PWM_Start+0x13e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a32      	ldr	r2, [pc, #200]	; (8004e5c <HAL_TIM_PWM_Start+0x1e4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_TIM_PWM_Start+0x13e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a30      	ldr	r2, [pc, #192]	; (8004e60 <HAL_TIM_PWM_Start+0x1e8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_TIM_PWM_Start+0x13e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <HAL_TIM_PWM_Start+0x1ec>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_TIM_PWM_Start+0x13e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <HAL_TIM_PWM_Start+0x1f0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <HAL_TIM_PWM_Start+0x142>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_TIM_PWM_Start+0x144>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <HAL_TIM_PWM_Start+0x1e0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d018      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x194>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d013      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x194>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a20      	ldr	r2, [pc, #128]	; (8004e6c <HAL_TIM_PWM_Start+0x1f4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x194>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_TIM_PWM_Start+0x1f8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x194>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <HAL_TIM_PWM_Start+0x1e4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x194>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <HAL_TIM_PWM_Start+0x1e8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d115      	bne.n	8004e38 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <HAL_TIM_PWM_Start+0x1fc>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d015      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x1d2>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e24:	d011      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	e008      	b.n	8004e4a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e000      	b.n	8004e4c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	00010007 	.word	0x00010007

08004e78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e097      	b.n	8004fbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fc fa71 	bl	8001388 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004ebc:	f023 0307 	bic.w	r3, r3, #7
 8004ec0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f000 fcbd 	bl	800584c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f18:	f023 030c 	bic.w	r3, r3, #12
 8004f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4313      	orrs	r3, r2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	011a      	lsls	r2, r3, #4
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	031b      	lsls	r3, r3, #12
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d110      	bne.n	8005016 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d102      	bne.n	8005000 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ffa:	7b7b      	ldrb	r3, [r7, #13]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d001      	beq.n	8005004 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e069      	b.n	80050d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005014:	e031      	b.n	800507a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d110      	bne.n	800503e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800501c:	7bbb      	ldrb	r3, [r7, #14]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005022:	7b3b      	ldrb	r3, [r7, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d001      	beq.n	800502c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e055      	b.n	80050d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	e01d      	b.n	800507a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d108      	bne.n	8005056 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d105      	bne.n	8005056 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800504a:	7b7b      	ldrb	r3, [r7, #13]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d102      	bne.n	8005056 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005050:	7b3b      	ldrb	r3, [r7, #12]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d001      	beq.n	800505a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e03e      	b.n	80050d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_TIM_Encoder_Start+0xc4>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b04      	cmp	r3, #4
 8005084:	d008      	beq.n	8005098 <HAL_TIM_Encoder_Start+0xd4>
 8005086:	e00f      	b.n	80050a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2201      	movs	r2, #1
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fffd 	bl	8006090 <TIM_CCxChannelCmd>
      break;
 8005096:	e016      	b.n	80050c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	2104      	movs	r1, #4
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fff5 	bl	8006090 <TIM_CCxChannelCmd>
      break;
 80050a6:	e00e      	b.n	80050c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 ffed 	bl	8006090 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2201      	movs	r2, #1
 80050bc:	2104      	movs	r1, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 ffe6 	bl	8006090 <TIM_CCxChannelCmd>
      break;
 80050c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d122      	bne.n	800513c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b02      	cmp	r3, #2
 8005102:	d11b      	bne.n	800513c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0202 	mvn.w	r2, #2
 800510c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fb74 	bl	8005810 <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fb66 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fb77 	bl	8005824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b04      	cmp	r3, #4
 8005148:	d122      	bne.n	8005190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b04      	cmp	r3, #4
 8005156:	d11b      	bne.n	8005190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0204 	mvn.w	r2, #4
 8005160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fb4a 	bl	8005810 <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fb3c 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fb4d 	bl	8005824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b08      	cmp	r3, #8
 800519c:	d122      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d11b      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0208 	mvn.w	r2, #8
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2204      	movs	r2, #4
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb20 	bl	8005810 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fb12 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb23 	bl	8005824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0210 	mvn.w	r2, #16
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2208      	movs	r2, #8
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 faf6 	bl	8005810 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fae8 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 faf9 	bl	8005824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0201 	mvn.w	r2, #1
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb fe28 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b80      	cmp	r3, #128	; 0x80
 8005270:	d10e      	bne.n	8005290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b80      	cmp	r3, #128	; 0x80
 800527e:	d107      	bne.n	8005290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f001 f852 	bl	8006334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529e:	d10e      	bne.n	80052be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052aa:	2b80      	cmp	r3, #128	; 0x80
 80052ac:	d107      	bne.n	80052be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 f845 	bl	8006348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d10e      	bne.n	80052ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d107      	bne.n	80052ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 faa7 	bl	8005838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d10e      	bne.n	8005316 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b20      	cmp	r3, #32
 8005304:	d107      	bne.n	8005316 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f06f 0220 	mvn.w	r2, #32
 800530e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 f805 	bl	8006320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005324:	d10f      	bne.n	8005346 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005334:	d107      	bne.n	8005346 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800533e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 f80b 	bl	800635c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005354:	d10f      	bne.n	8005376 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005364:	d107      	bne.n	8005376 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fffd 	bl	8006370 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005384:	d10f      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005394:	d107      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 ffef 	bl	8006384 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053b4:	d10f      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053c4:	d107      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 ffe1 	bl	8006398 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0ff      	b.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b14      	cmp	r3, #20
 800540a:	f200 80f0 	bhi.w	80055ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005469 	.word	0x08005469
 8005418:	080055ef 	.word	0x080055ef
 800541c:	080055ef 	.word	0x080055ef
 8005420:	080055ef 	.word	0x080055ef
 8005424:	080054a9 	.word	0x080054a9
 8005428:	080055ef 	.word	0x080055ef
 800542c:	080055ef 	.word	0x080055ef
 8005430:	080055ef 	.word	0x080055ef
 8005434:	080054eb 	.word	0x080054eb
 8005438:	080055ef 	.word	0x080055ef
 800543c:	080055ef 	.word	0x080055ef
 8005440:	080055ef 	.word	0x080055ef
 8005444:	0800552b 	.word	0x0800552b
 8005448:	080055ef 	.word	0x080055ef
 800544c:	080055ef 	.word	0x080055ef
 8005450:	080055ef 	.word	0x080055ef
 8005454:	0800556d 	.word	0x0800556d
 8005458:	080055ef 	.word	0x080055ef
 800545c:	080055ef 	.word	0x080055ef
 8005460:	080055ef 	.word	0x080055ef
 8005464:	080055ad 	.word	0x080055ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fa7c 	bl	800596c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6999      	ldr	r1, [r3, #24]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	619a      	str	r2, [r3, #24]
      break;
 80054a6:	e0a5      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 faec 	bl	8005a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6999      	ldr	r1, [r3, #24]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	619a      	str	r2, [r3, #24]
      break;
 80054e8:	e084      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fb55 	bl	8005ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0208 	orr.w	r2, r2, #8
 8005504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0204 	bic.w	r2, r2, #4
 8005514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69d9      	ldr	r1, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	61da      	str	r2, [r3, #28]
      break;
 8005528:	e064      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fbbd 	bl	8005cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69d9      	ldr	r1, [r3, #28]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	021a      	lsls	r2, r3, #8
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	61da      	str	r2, [r3, #28]
      break;
 800556a:	e043      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fc26 	bl	8005dc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80055aa:	e023      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fc6a 	bl	8005e8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80055ec:	e002      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
      break;
 80055f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop

08005608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIM_ConfigClockSource+0x1c>
 8005620:	2302      	movs	r3, #2
 8005622:	e0de      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x1da>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800564e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a63      	ldr	r2, [pc, #396]	; (80057ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	f000 80a9 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005664:	4a61      	ldr	r2, [pc, #388]	; (80057ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	f200 80ae 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800566c:	4a60      	ldr	r2, [pc, #384]	; (80057f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	f000 80a1 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005674:	4a5e      	ldr	r2, [pc, #376]	; (80057f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	f200 80a6 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800567c:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f000 8099 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005684:	4a5b      	ldr	r2, [pc, #364]	; (80057f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005686:	4293      	cmp	r3, r2
 8005688:	f200 809e 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800568c:	4a5a      	ldr	r2, [pc, #360]	; (80057f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	f000 8091 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005694:	4a58      	ldr	r2, [pc, #352]	; (80057f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	f200 8096 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800569c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056a0:	f000 8089 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80056a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056a8:	f200 808e 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b0:	d03e      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0x128>
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	f200 8087 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	f000 8086 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1c6>
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d87f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056c8:	2b70      	cmp	r3, #112	; 0x70
 80056ca:	d01a      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0xfa>
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d87b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056d0:	2b60      	cmp	r3, #96	; 0x60
 80056d2:	d050      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x16e>
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d877      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d03c      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x14e>
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d873      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d058      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x18e>
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d86f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d064      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80056ec:	2b30      	cmp	r3, #48	; 0x30
 80056ee:	d86b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d060      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d867      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05c      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d05a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005700:	e062      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6899      	ldr	r1, [r3, #8]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f000 fc9d 	bl	8006050 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	609a      	str	r2, [r3, #8]
      break;
 800572e:	e04f      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6899      	ldr	r1, [r3, #8]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f000 fc86 	bl	8006050 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005752:	609a      	str	r2, [r3, #8]
      break;
 8005754:	e03c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	461a      	mov	r2, r3
 8005764:	f000 fbf8 	bl	8005f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2150      	movs	r1, #80	; 0x50
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fc51 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005774:	e02c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	461a      	mov	r2, r3
 8005784:	f000 fc17 	bl	8005fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2160      	movs	r1, #96	; 0x60
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fc41 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005794:	e01c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 fbd8 	bl	8005f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2140      	movs	r1, #64	; 0x40
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fc31 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e00c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f000 fc28 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 80057c6:	e003      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80057ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	00100070 	.word	0x00100070
 80057f0:	00100040 	.word	0x00100040
 80057f4:	00100030 	.word	0x00100030
 80057f8:	00100020 	.word	0x00100020

080057fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <TIM_Base_SetConfig+0x104>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00f      	beq.n	8005884 <TIM_Base_SetConfig+0x38>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d00b      	beq.n	8005884 <TIM_Base_SetConfig+0x38>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a39      	ldr	r2, [pc, #228]	; (8005954 <TIM_Base_SetConfig+0x108>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_Base_SetConfig+0x38>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a38      	ldr	r2, [pc, #224]	; (8005958 <TIM_Base_SetConfig+0x10c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_Base_SetConfig+0x38>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a37      	ldr	r2, [pc, #220]	; (800595c <TIM_Base_SetConfig+0x110>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <TIM_Base_SetConfig+0x104>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01b      	beq.n	80058d6 <TIM_Base_SetConfig+0x8a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d017      	beq.n	80058d6 <TIM_Base_SetConfig+0x8a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <TIM_Base_SetConfig+0x108>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <TIM_Base_SetConfig+0x8a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a29      	ldr	r2, [pc, #164]	; (8005958 <TIM_Base_SetConfig+0x10c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00f      	beq.n	80058d6 <TIM_Base_SetConfig+0x8a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <TIM_Base_SetConfig+0x110>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <TIM_Base_SetConfig+0x8a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a27      	ldr	r2, [pc, #156]	; (8005960 <TIM_Base_SetConfig+0x114>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <TIM_Base_SetConfig+0x8a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <TIM_Base_SetConfig+0x118>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_Base_SetConfig+0x8a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a25      	ldr	r2, [pc, #148]	; (8005968 <TIM_Base_SetConfig+0x11c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d108      	bne.n	80058e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a10      	ldr	r2, [pc, #64]	; (8005950 <TIM_Base_SetConfig+0x104>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_Base_SetConfig+0xe8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a11      	ldr	r2, [pc, #68]	; (800595c <TIM_Base_SetConfig+0x110>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_Base_SetConfig+0xe8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a10      	ldr	r2, [pc, #64]	; (8005960 <TIM_Base_SetConfig+0x114>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0xe8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <TIM_Base_SetConfig+0x118>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0xe8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <TIM_Base_SetConfig+0x11c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d103      	bne.n	800593c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	615a      	str	r2, [r3, #20]
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40013400 	.word	0x40013400
 8005960:	40014000 	.word	0x40014000
 8005964:	40014400 	.word	0x40014400
 8005968:	40014800 	.word	0x40014800

0800596c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f023 0201 	bic.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0302 	bic.w	r3, r3, #2
 80059b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <TIM_OC1_SetConfig+0x10c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00f      	beq.n	80059ec <TIM_OC1_SetConfig+0x80>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <TIM_OC1_SetConfig+0x110>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00b      	beq.n	80059ec <TIM_OC1_SetConfig+0x80>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <TIM_OC1_SetConfig+0x114>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <TIM_OC1_SetConfig+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a29      	ldr	r2, [pc, #164]	; (8005a84 <TIM_OC1_SetConfig+0x118>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_OC1_SetConfig+0x80>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a28      	ldr	r2, [pc, #160]	; (8005a88 <TIM_OC1_SetConfig+0x11c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d10c      	bne.n	8005a06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0308 	bic.w	r3, r3, #8
 80059f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 0304 	bic.w	r3, r3, #4
 8005a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	; (8005a78 <TIM_OC1_SetConfig+0x10c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00f      	beq.n	8005a2e <TIM_OC1_SetConfig+0xc2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a1a      	ldr	r2, [pc, #104]	; (8005a7c <TIM_OC1_SetConfig+0x110>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00b      	beq.n	8005a2e <TIM_OC1_SetConfig+0xc2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a19      	ldr	r2, [pc, #100]	; (8005a80 <TIM_OC1_SetConfig+0x114>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <TIM_OC1_SetConfig+0xc2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <TIM_OC1_SetConfig+0x118>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_OC1_SetConfig+0xc2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <TIM_OC1_SetConfig+0x11c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d111      	bne.n	8005a52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40013400 	.word	0x40013400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800

08005a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0210 	bic.w	r2, r3, #16
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0320 	bic.w	r3, r3, #32
 8005ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <TIM_OC2_SetConfig+0x100>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC2_SetConfig+0x6c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <TIM_OC2_SetConfig+0x104>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d10d      	bne.n	8005b14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <TIM_OC2_SetConfig+0x100>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00f      	beq.n	8005b3c <TIM_OC2_SetConfig+0xb0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <TIM_OC2_SetConfig+0x104>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_OC2_SetConfig+0xb0>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <TIM_OC2_SetConfig+0x108>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_OC2_SetConfig+0xb0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <TIM_OC2_SetConfig+0x10c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC2_SetConfig+0xb0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <TIM_OC2_SetConfig+0x110>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d113      	bne.n	8005b64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <TIM_OC3_SetConfig+0xfc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_OC3_SetConfig+0x6a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a26      	ldr	r2, [pc, #152]	; (8005ca0 <TIM_OC3_SetConfig+0x100>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10d      	bne.n	8005c26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <TIM_OC3_SetConfig+0xfc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_OC3_SetConfig+0xae>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <TIM_OC3_SetConfig+0x100>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_OC3_SetConfig+0xae>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1a      	ldr	r2, [pc, #104]	; (8005ca4 <TIM_OC3_SetConfig+0x104>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_OC3_SetConfig+0xae>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <TIM_OC3_SetConfig+0x108>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC3_SetConfig+0xae>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a18      	ldr	r2, [pc, #96]	; (8005cac <TIM_OC3_SetConfig+0x10c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d113      	bne.n	8005c76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800

08005cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a28      	ldr	r2, [pc, #160]	; (8005db0 <TIM_OC4_SetConfig+0x100>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC4_SetConfig+0x6c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <TIM_OC4_SetConfig+0x104>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d10d      	bne.n	8005d38 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <TIM_OC4_SetConfig+0x100>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00f      	beq.n	8005d60 <TIM_OC4_SetConfig+0xb0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <TIM_OC4_SetConfig+0x104>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_OC4_SetConfig+0xb0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <TIM_OC4_SetConfig+0x108>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_OC4_SetConfig+0xb0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <TIM_OC4_SetConfig+0x10c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_OC4_SetConfig+0xb0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <TIM_OC4_SetConfig+0x110>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d113      	bne.n	8005d88 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800

08005dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a17      	ldr	r2, [pc, #92]	; (8005e78 <TIM_OC5_SetConfig+0xb4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_OC5_SetConfig+0x7a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a16      	ldr	r2, [pc, #88]	; (8005e7c <TIM_OC5_SetConfig+0xb8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_OC5_SetConfig+0x7a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <TIM_OC5_SetConfig+0xbc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_OC5_SetConfig+0x7a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <TIM_OC5_SetConfig+0xc0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_OC5_SetConfig+0x7a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <TIM_OC5_SetConfig+0xc4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d109      	bne.n	8005e52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40013400 	.word	0x40013400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800

08005e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <TIM_OC6_SetConfig+0xb8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00f      	beq.n	8005f08 <TIM_OC6_SetConfig+0x7c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <TIM_OC6_SetConfig+0xbc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_OC6_SetConfig+0x7c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <TIM_OC6_SetConfig+0xc0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_OC6_SetConfig+0x7c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <TIM_OC6_SetConfig+0xc4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC6_SetConfig+0x7c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <TIM_OC6_SetConfig+0xc8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d109      	bne.n	8005f1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	029b      	lsls	r3, r3, #10
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800

08005f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 030a 	bic.w	r3, r3, #10
 8005f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b087      	sub	sp, #28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0210 	bic.w	r2, r3, #16
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	031b      	lsls	r3, r3, #12
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	f043 0307 	orr.w	r3, r3, #7
 800603c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800606a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	431a      	orrs	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4313      	orrs	r3, r2
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	2201      	movs	r2, #1
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1a      	ldr	r2, [r3, #32]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	fa01 f303 	lsl.w	r3, r1, r3
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e065      	b.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2c      	ldr	r2, [pc, #176]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2b      	ldr	r2, [pc, #172]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d108      	bne.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800612e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d018      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d013      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00e      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a12      	ldr	r2, [pc, #72]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10c      	bne.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40014000 	.word	0x40014000

080061e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e087      	b.n	800630c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a27      	ldr	r2, [pc, #156]	; (8006318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a25      	ldr	r2, [pc, #148]	; (800631c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d106      	bne.n	8006298 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1e      	ldr	r2, [pc, #120]	; (8006318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d126      	bne.n	80062fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	051b      	lsls	r3, r3, #20
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a0d      	ldr	r2, [pc, #52]	; (800631c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d106      	bne.n	80062fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400

08006320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063bc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80063c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063e2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80063e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	4013      	ands	r3, r2
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	f107 0014 	add.w	r0, r7, #20
 800641e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	b004      	add	sp, #16
 8006450:	4770      	bx	lr
	...

08006454 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006454:	b480      	push	{r7}
 8006456:	b09d      	sub	sp, #116	; 0x74
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	78db      	ldrb	r3, [r3, #3]
 8006482:	2b03      	cmp	r3, #3
 8006484:	d81f      	bhi.n	80064c6 <USB_ActivateEndpoint+0x72>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <USB_ActivateEndpoint+0x38>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	0800649d 	.word	0x0800649d
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064cf 	.word	0x080064cf
 8006498:	080064ab 	.word	0x080064ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800649c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064a8:	e012      	b.n	80064d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80064b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064b6:	e00b      	b.n	80064d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80064b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064c4:	e004      	b.n	80064d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80064cc:	e000      	b.n	80064d0 <USB_ActivateEndpoint+0x7c>
      break;
 80064ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	b21b      	sxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	b21a      	sxth	r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	b21b      	sxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b21b      	sxth	r3, r3
 8006516:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	7b1b      	ldrb	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f040 8149 	bne.w	80067d8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8084 	beq.w	8006658 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	4413      	add	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	00da      	lsls	r2, r3, #3
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	88db      	ldrh	r3, [r3, #6]
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	b29b      	uxth	r3, r3
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	827b      	strh	r3, [r7, #18]
 8006592:	8a7b      	ldrh	r3, [r7, #18]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <USB_ActivateEndpoint+0x180>
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	823b      	strh	r3, [r7, #16]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	8a3b      	ldrh	r3, [r7, #16]
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d020      	beq.n	800661e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f2:	81bb      	strh	r3, [r7, #12]
 80065f4:	89bb      	ldrh	r3, [r7, #12]
 80065f6:	f083 0320 	eor.w	r3, r3, #32
 80065fa:	81bb      	strh	r3, [r7, #12]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	89bb      	ldrh	r3, [r7, #12]
 8006608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006618:	b29b      	uxth	r3, r3
 800661a:	8013      	strh	r3, [r2, #0]
 800661c:	e2a6      	b.n	8006b6c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006634:	81fb      	strh	r3, [r7, #14]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	441a      	add	r2, r3
 8006640:	89fb      	ldrh	r3, [r7, #14]
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]
 8006656:	e289      	b.n	8006b6c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	4413      	add	r3, r2
 800666a:	633b      	str	r3, [r7, #48]	; 0x30
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	00da      	lsls	r2, r3, #3
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	4413      	add	r3, r2
 8006676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	88db      	ldrh	r3, [r3, #6]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	b29b      	uxth	r3, r3
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	4413      	add	r3, r2
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	00da      	lsls	r2, r3, #3
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	4413      	add	r3, r2
 80066aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b3e      	cmp	r3, #62	; 0x3e
 80066b6:	d918      	bls.n	80066ea <USB_ActivateEndpoint+0x296>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <USB_ActivateEndpoint+0x27e>
 80066cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066ce:	3b01      	subs	r3, #1
 80066d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	029b      	lsls	r3, r3, #10
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	e029      	b.n	800673e <USB_ActivateEndpoint+0x2ea>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d112      	bne.n	8006718 <USB_ActivateEndpoint+0x2c4>
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e012      	b.n	800673e <USB_ActivateEndpoint+0x2ea>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <USB_ActivateEndpoint+0x2de>
 800672c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800672e:	3301      	adds	r3, #1
 8006730:	66bb      	str	r3, [r7, #104]	; 0x68
 8006732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006734:	b29b      	uxth	r3, r3
 8006736:	029b      	lsls	r3, r3, #10
 8006738:	b29a      	uxth	r2, r3
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	847b      	strh	r3, [r7, #34]	; 0x22
 800674c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800674e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01b      	beq.n	800678e <USB_ActivateEndpoint+0x33a>
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676c:	843b      	strh	r3, [r7, #32]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	8c3b      	ldrh	r3, [r7, #32]
 800677a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	b29b      	uxth	r3, r3
 800678c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	83fb      	strh	r3, [r7, #30]
 80067a6:	8bfb      	ldrh	r3, [r7, #30]
 80067a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067ac:	83fb      	strh	r3, [r7, #30]
 80067ae:	8bfb      	ldrh	r3, [r7, #30]
 80067b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067b4:	83fb      	strh	r3, [r7, #30]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8013      	strh	r3, [r2, #0]
 80067d6:	e1c9      	b.n	8006b6c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	78db      	ldrb	r3, [r3, #3]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d11e      	bne.n	800681e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	441a      	add	r2, r3
 8006804:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006810:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
 800681c:	e01d      	b.n	800685a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	441a      	add	r2, r3
 8006842:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800684e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006856:	b29b      	uxth	r3, r3
 8006858:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686a:	4413      	add	r3, r2
 800686c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	00da      	lsls	r2, r3, #3
 8006874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006876:	4413      	add	r3, r2
 8006878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687c:	65bb      	str	r3, [r7, #88]	; 0x58
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	891b      	ldrh	r3, [r3, #8]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	b29b      	uxth	r3, r3
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	657b      	str	r3, [r7, #84]	; 0x54
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006898:	b29b      	uxth	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689e:	4413      	add	r3, r2
 80068a0:	657b      	str	r3, [r7, #84]	; 0x54
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	00da      	lsls	r2, r3, #3
 80068a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068aa:	4413      	add	r3, r2
 80068ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068b0:	653b      	str	r3, [r7, #80]	; 0x50
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	895b      	ldrh	r3, [r3, #10]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8093 	bne.w	80069f2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80068dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01b      	beq.n	8006920 <USB_ActivateEndpoint+0x4cc>
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800690c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	b29b      	uxth	r3, r3
 800691e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800692e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <USB_ActivateEndpoint+0x51c>
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800695c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	873b      	strh	r3, [r7, #56]	; 0x38
 8006988:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800698a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800698e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006990:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006992:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006996:	873b      	strh	r3, [r7, #56]	; 0x38
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]
 80069f0:	e0bc      	b.n	8006b6c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006a02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01d      	beq.n	8006a4a <USB_ActivateEndpoint+0x5f6>
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01d      	beq.n	8006aa2 <USB_ActivateEndpoint+0x64e>
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	441a      	add	r2, r3
 8006a8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	78db      	ldrb	r3, [r3, #3]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d024      	beq.n	8006af4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ac4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ac8:	f083 0320 	eor.w	r3, r3, #32
 8006acc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	441a      	add	r2, r3
 8006ada:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
 8006af2:	e01d      	b.n	8006b30 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	441a      	add	r2, r3
 8006b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006b6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3774      	adds	r7, #116	; 0x74
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b08d      	sub	sp, #52	; 0x34
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	7b1b      	ldrb	r3, [r3, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f040 808e 	bne.w	8006cac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d044      	beq.n	8006c22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	81bb      	strh	r3, [r7, #12]
 8006ba6:	89bb      	ldrh	r3, [r7, #12]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01b      	beq.n	8006be8 <USB_DeactivateEndpoint+0x6c>
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	817b      	strh	r3, [r7, #10]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	897b      	ldrh	r3, [r7, #10]
 8006bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfe:	813b      	strh	r3, [r7, #8]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	441a      	add	r2, r3
 8006c0a:	893b      	ldrh	r3, [r7, #8]
 8006c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	8013      	strh	r3, [r2, #0]
 8006c20:	e192      	b.n	8006f48 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	827b      	strh	r3, [r7, #18]
 8006c30:	8a7b      	ldrh	r3, [r7, #18]
 8006c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01b      	beq.n	8006c72 <USB_DeactivateEndpoint+0xf6>
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c50:	823b      	strh	r3, [r7, #16]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	441a      	add	r2, r3
 8006c5c:	8a3b      	ldrh	r3, [r7, #16]
 8006c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c88:	81fb      	strh	r3, [r7, #14]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	441a      	add	r2, r3
 8006c94:	89fb      	ldrh	r3, [r7, #14]
 8006c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	8013      	strh	r3, [r2, #0]
 8006caa:	e14d      	b.n	8006f48 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 80a5 	bne.w	8006e00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	843b      	strh	r3, [r7, #32]
 8006cc4:	8c3b      	ldrh	r3, [r7, #32]
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01b      	beq.n	8006d06 <USB_DeactivateEndpoint+0x18a>
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	83fb      	strh	r3, [r7, #30]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	441a      	add	r2, r3
 8006cf0:	8bfb      	ldrh	r3, [r7, #30]
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	83bb      	strh	r3, [r7, #28]
 8006d14:	8bbb      	ldrh	r3, [r7, #28]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01b      	beq.n	8006d56 <USB_DeactivateEndpoint+0x1da>
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d34:	837b      	strh	r3, [r7, #26]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	8b7b      	ldrh	r3, [r7, #26]
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6c:	833b      	strh	r3, [r7, #24]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	441a      	add	r2, r3
 8006d78:	8b3b      	ldrh	r3, [r7, #24]
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da4:	82fb      	strh	r3, [r7, #22]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	441a      	add	r2, r3
 8006db0:	8afb      	ldrh	r3, [r7, #22]
 8006db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ddc:	82bb      	strh	r3, [r7, #20]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	441a      	add	r2, r3
 8006de8:	8abb      	ldrh	r3, [r7, #20]
 8006dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	8013      	strh	r3, [r2, #0]
 8006dfe:	e0a3      	b.n	8006f48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01b      	beq.n	8006e50 <USB_DeactivateEndpoint+0x2d4>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01b      	beq.n	8006ea0 <USB_DeactivateEndpoint+0x324>
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	441a      	add	r2, r3
 8006e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	441a      	add	r2, r3
 8006ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	441a      	add	r2, r3
 8006efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	441a      	add	r2, r3
 8006f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3734      	adds	r7, #52	; 0x34
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b0c2      	sub	sp, #264	; 0x108
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	1d3b      	adds	r3, r7, #4
 8006f5e:	6018      	str	r0, [r3, #0]
 8006f60:	463b      	mov	r3, r7
 8006f62:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f64:	463b      	mov	r3, r7
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	f040 8509 	bne.w	8007982 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f70:	463b      	mov	r3, r7
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	463b      	mov	r3, r7
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d905      	bls.n	8006f8c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f8a:	e004      	b.n	8006f96 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f96:	463b      	mov	r3, r7
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	7b1b      	ldrb	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d128      	bne.n	8006ff2 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6959      	ldr	r1, [r3, #20]
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	88da      	ldrh	r2, [r3, #6]
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	1d38      	adds	r0, r7, #4
 8006fb4:	6800      	ldr	r0, [r0, #0]
 8006fb6:	f001 f9da 	bl	800836e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	1d3b      	adds	r3, r7, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	4413      	add	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	00da      	lsls	r2, r3, #3
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	f000 bc9f 	b.w	8007930 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	78db      	ldrb	r3, [r3, #3]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	f040 8347 	bne.w	800768c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ffe:	463b      	mov	r3, r7
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	463b      	mov	r3, r7
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	429a      	cmp	r2, r3
 800700c:	f240 82eb 	bls.w	80075e6 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007010:	1d3b      	adds	r3, r7, #4
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	463b      	mov	r3, r7
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007048:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800704c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007050:	b29b      	uxth	r3, r3
 8007052:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007054:	463b      	mov	r3, r7
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a1a      	ldr	r2, [r3, #32]
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	463b      	mov	r3, r7
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007066:	1d3b      	adds	r3, r7, #4
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	463b      	mov	r3, r7
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8159 	beq.w	8007334 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	633b      	str	r3, [r7, #48]	; 0x30
 8007088:	463b      	mov	r3, r7
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d164      	bne.n	800715c <USB_EPStartXfer+0x206>
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
 8007098:	1d3b      	adds	r3, r7, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	4413      	add	r3, r2
 80070a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070aa:	463b      	mov	r3, r7
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	00da      	lsls	r2, r3, #3
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	4413      	add	r3, r2
 80070b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c0:	2b3e      	cmp	r3, #62	; 0x3e
 80070c2:	d91c      	bls.n	80070fe <USB_EPStartXfer+0x1a8>
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d104      	bne.n	80070e4 <USB_EPStartXfer+0x18e>
 80070da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070de:	3b01      	subs	r3, #1
 80070e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	029b      	lsls	r3, r3, #10
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e04a      	b.n	8007194 <USB_EPStartXfer+0x23e>
 80070fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007102:	2b00      	cmp	r3, #0
 8007104:	d112      	bne.n	800712c <USB_EPStartXfer+0x1d6>
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007110:	b29a      	uxth	r2, r3
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007124:	b29a      	uxth	r2, r3
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	e033      	b.n	8007194 <USB_EPStartXfer+0x23e>
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007130:	085b      	lsrs	r3, r3, #1
 8007132:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <USB_EPStartXfer+0x1f6>
 8007142:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007146:	3301      	adds	r3, #1
 8007148:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800714c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007150:	b29b      	uxth	r3, r3
 8007152:	029b      	lsls	r3, r3, #10
 8007154:	b29a      	uxth	r2, r3
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	e01b      	b.n	8007194 <USB_EPStartXfer+0x23e>
 800715c:	463b      	mov	r3, r7
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d116      	bne.n	8007194 <USB_EPStartXfer+0x23e>
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716e:	b29b      	uxth	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	4413      	add	r3, r2
 8007176:	633b      	str	r3, [r7, #48]	; 0x30
 8007178:	463b      	mov	r3, r7
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	00da      	lsls	r2, r3, #3
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	4413      	add	r3, r2
 8007184:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718e:	b29a      	uxth	r2, r3
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007194:	463b      	mov	r3, r7
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	895b      	ldrh	r3, [r3, #10]
 800719a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800719e:	463b      	mov	r3, r7
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6959      	ldr	r1, [r3, #20]
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071ae:	1d38      	adds	r0, r7, #4
 80071b0:	6800      	ldr	r0, [r0, #0]
 80071b2:	f001 f8dc 	bl	800836e <USB_WritePMA>
            ep->xfer_buff += len;
 80071b6:	463b      	mov	r3, r7
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	695a      	ldr	r2, [r3, #20]
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	441a      	add	r2, r3
 80071c2:	463b      	mov	r3, r7
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6a1a      	ldr	r2, [r3, #32]
 80071ce:	463b      	mov	r3, r7
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d909      	bls.n	80071ec <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 80071d8:	463b      	mov	r3, r7
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	1ad2      	subs	r2, r2, r3
 80071e4:	463b      	mov	r3, r7
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	621a      	str	r2, [r3, #32]
 80071ea:	e008      	b.n	80071fe <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 80071ec:	463b      	mov	r3, r7
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80071f6:	463b      	mov	r3, r7
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071fe:	463b      	mov	r3, r7
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d164      	bne.n	80072d2 <USB_EPStartXfer+0x37c>
 8007208:	1d3b      	adds	r3, r7, #4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	1d3b      	adds	r3, r7, #4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007216:	b29b      	uxth	r3, r3
 8007218:	461a      	mov	r2, r3
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	4413      	add	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	00da      	lsls	r2, r3, #3
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	4413      	add	r3, r2
 800722c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007236:	2b3e      	cmp	r3, #62	; 0x3e
 8007238:	d91c      	bls.n	8007274 <USB_EPStartXfer+0x31e>
 800723a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <USB_EPStartXfer+0x304>
 8007250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007254:	3b01      	subs	r3, #1
 8007256:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800725a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725e:	b29b      	uxth	r3, r3
 8007260:	029b      	lsls	r3, r3, #10
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	e04d      	b.n	8007310 <USB_EPStartXfer+0x3ba>
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007278:	2b00      	cmp	r3, #0
 800727a:	d112      	bne.n	80072a2 <USB_EPStartXfer+0x34c>
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	b29b      	uxth	r3, r3
 8007282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007286:	b29a      	uxth	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729a:	b29a      	uxth	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	e036      	b.n	8007310 <USB_EPStartXfer+0x3ba>
 80072a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <USB_EPStartXfer+0x36c>
 80072b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072bc:	3301      	adds	r3, #1
 80072be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	029b      	lsls	r3, r3, #10
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e01e      	b.n	8007310 <USB_EPStartXfer+0x3ba>
 80072d2:	463b      	mov	r3, r7
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d119      	bne.n	8007310 <USB_EPStartXfer+0x3ba>
 80072dc:	1d3b      	adds	r3, r7, #4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	623b      	str	r3, [r7, #32]
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	4413      	add	r3, r2
 80072f2:	623b      	str	r3, [r7, #32]
 80072f4:	463b      	mov	r3, r7
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	00da      	lsls	r2, r3, #3
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	4413      	add	r3, r2
 8007300:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007304:	61fb      	str	r3, [r7, #28]
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730a:	b29a      	uxth	r2, r3
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007310:	463b      	mov	r3, r7
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	891b      	ldrh	r3, [r3, #8]
 8007316:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800731a:	463b      	mov	r3, r7
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6959      	ldr	r1, [r3, #20]
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007324:	b29b      	uxth	r3, r3
 8007326:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800732a:	1d38      	adds	r0, r7, #4
 800732c:	6800      	ldr	r0, [r0, #0]
 800732e:	f001 f81e 	bl	800836e <USB_WritePMA>
 8007332:	e2fd      	b.n	8007930 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d164      	bne.n	8007408 <USB_EPStartXfer+0x4b2>
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
 8007344:	1d3b      	adds	r3, r7, #4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734c:	b29b      	uxth	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007352:	4413      	add	r3, r2
 8007354:	64bb      	str	r3, [r7, #72]	; 0x48
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	00da      	lsls	r2, r3, #3
 800735e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007360:	4413      	add	r3, r2
 8007362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007366:	647b      	str	r3, [r7, #68]	; 0x44
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800736c:	2b3e      	cmp	r3, #62	; 0x3e
 800736e:	d91c      	bls.n	80073aa <USB_EPStartXfer+0x454>
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <USB_EPStartXfer+0x43a>
 8007386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800738a:	3b01      	subs	r3, #1
 800738c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007390:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007394:	b29b      	uxth	r3, r3
 8007396:	029b      	lsls	r3, r3, #10
 8007398:	b29b      	uxth	r3, r3
 800739a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	e04d      	b.n	8007446 <USB_EPStartXfer+0x4f0>
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d112      	bne.n	80073d8 <USB_EPStartXfer+0x482>
 80073b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073bc:	b29a      	uxth	r2, r3
 80073be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e036      	b.n	8007446 <USB_EPStartXfer+0x4f0>
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <USB_EPStartXfer+0x4a2>
 80073ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073f2:	3301      	adds	r3, #1
 80073f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	029b      	lsls	r3, r3, #10
 8007400:	b29a      	uxth	r2, r3
 8007402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e01e      	b.n	8007446 <USB_EPStartXfer+0x4f0>
 8007408:	463b      	mov	r3, r7
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d119      	bne.n	8007446 <USB_EPStartXfer+0x4f0>
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	653b      	str	r3, [r7, #80]	; 0x50
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007420:	b29b      	uxth	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007426:	4413      	add	r3, r2
 8007428:	653b      	str	r3, [r7, #80]	; 0x50
 800742a:	463b      	mov	r3, r7
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	00da      	lsls	r2, r3, #3
 8007432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007434:	4413      	add	r3, r2
 8007436:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007440:	b29a      	uxth	r2, r3
 8007442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007446:	463b      	mov	r3, r7
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	891b      	ldrh	r3, [r3, #8]
 800744c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007450:	463b      	mov	r3, r7
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6959      	ldr	r1, [r3, #20]
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745a:	b29b      	uxth	r3, r3
 800745c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007460:	1d38      	adds	r0, r7, #4
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	f000 ff83 	bl	800836e <USB_WritePMA>
            ep->xfer_buff += len;
 8007468:	463b      	mov	r3, r7
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695a      	ldr	r2, [r3, #20]
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007472:	441a      	add	r2, r3
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800747a:	463b      	mov	r3, r7
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6a1a      	ldr	r2, [r3, #32]
 8007480:	463b      	mov	r3, r7
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	429a      	cmp	r2, r3
 8007488:	d909      	bls.n	800749e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800748a:	463b      	mov	r3, r7
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	463b      	mov	r3, r7
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	621a      	str	r2, [r3, #32]
 800749c:	e008      	b.n	80074b0 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800749e:	463b      	mov	r3, r7
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80074a8:	463b      	mov	r3, r7
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074b0:	1d3b      	adds	r3, r7, #4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	643b      	str	r3, [r7, #64]	; 0x40
 80074b6:	463b      	mov	r3, r7
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d164      	bne.n	800758a <USB_EPStartXfer+0x634>
 80074c0:	1d3b      	adds	r3, r7, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80074c6:	1d3b      	adds	r3, r7, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	4413      	add	r3, r2
 80074d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80074d8:	463b      	mov	r3, r7
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	00da      	lsls	r2, r3, #3
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	4413      	add	r3, r2
 80074e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ee:	2b3e      	cmp	r3, #62	; 0x3e
 80074f0:	d91c      	bls.n	800752c <USB_EPStartXfer+0x5d6>
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <USB_EPStartXfer+0x5bc>
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	3b01      	subs	r3, #1
 800750e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007516:	b29b      	uxth	r3, r3
 8007518:	029b      	lsls	r3, r3, #10
 800751a:	b29b      	uxth	r3, r3
 800751c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007524:	b29a      	uxth	r2, r3
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	e04a      	b.n	80075c2 <USB_EPStartXfer+0x66c>
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007530:	2b00      	cmp	r3, #0
 8007532:	d112      	bne.n	800755a <USB_EPStartXfer+0x604>
 8007534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800753e:	b29a      	uxth	r2, r3
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007552:	b29a      	uxth	r2, r3
 8007554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e033      	b.n	80075c2 <USB_EPStartXfer+0x66c>
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <USB_EPStartXfer+0x624>
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007574:	3301      	adds	r3, #1
 8007576:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757e:	b29b      	uxth	r3, r3
 8007580:	029b      	lsls	r3, r3, #10
 8007582:	b29a      	uxth	r2, r3
 8007584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	e01b      	b.n	80075c2 <USB_EPStartXfer+0x66c>
 800758a:	463b      	mov	r3, r7
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d116      	bne.n	80075c2 <USB_EPStartXfer+0x66c>
 8007594:	1d3b      	adds	r3, r7, #4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759c:	b29b      	uxth	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a2:	4413      	add	r3, r2
 80075a4:	643b      	str	r3, [r7, #64]	; 0x40
 80075a6:	463b      	mov	r3, r7
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	00da      	lsls	r2, r3, #3
 80075ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b0:	4413      	add	r3, r2
 80075b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075bc:	b29a      	uxth	r2, r3
 80075be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075c2:	463b      	mov	r3, r7
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	895b      	ldrh	r3, [r3, #10]
 80075c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075cc:	463b      	mov	r3, r7
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6959      	ldr	r1, [r3, #20]
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075dc:	1d38      	adds	r0, r7, #4
 80075de:	6800      	ldr	r0, [r0, #0]
 80075e0:	f000 fec5 	bl	800836e <USB_WritePMA>
 80075e4:	e1a4      	b.n	8007930 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80075e6:	463b      	mov	r3, r7
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80075f0:	1d3b      	adds	r3, r7, #4
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	463b      	mov	r3, r7
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	463b      	mov	r3, r7
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	441a      	add	r2, r3
 800761c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007630:	b29b      	uxth	r3, r3
 8007632:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007634:	1d3b      	adds	r3, r7, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007642:	b29b      	uxth	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007648:	4413      	add	r3, r2
 800764a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800764c:	463b      	mov	r3, r7
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	00da      	lsls	r2, r3, #3
 8007654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007656:	4413      	add	r3, r2
 8007658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800765c:	65bb      	str	r3, [r7, #88]	; 0x58
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007662:	b29a      	uxth	r2, r3
 8007664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007668:	463b      	mov	r3, r7
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	891b      	ldrh	r3, [r3, #8]
 800766e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007672:	463b      	mov	r3, r7
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6959      	ldr	r1, [r3, #20]
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767c:	b29b      	uxth	r3, r3
 800767e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007682:	1d38      	adds	r0, r7, #4
 8007684:	6800      	ldr	r0, [r0, #0]
 8007686:	f000 fe72 	bl	800836e <USB_WritePMA>
 800768a:	e151      	b.n	8007930 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800768c:	463b      	mov	r3, r7
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a1a      	ldr	r2, [r3, #32]
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	463b      	mov	r3, r7
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	463b      	mov	r3, r7
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 809b 	beq.w	80077f0 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ba:	1d3b      	adds	r3, r7, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	673b      	str	r3, [r7, #112]	; 0x70
 80076c0:	463b      	mov	r3, r7
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d164      	bne.n	8007794 <USB_EPStartXfer+0x83e>
 80076ca:	1d3b      	adds	r3, r7, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80076d0:	1d3b      	adds	r3, r7, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d8:	b29b      	uxth	r3, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076de:	4413      	add	r3, r2
 80076e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80076e2:	463b      	mov	r3, r7
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	00da      	lsls	r2, r3, #3
 80076ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076ec:	4413      	add	r3, r2
 80076ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076f2:	667b      	str	r3, [r7, #100]	; 0x64
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f8:	2b3e      	cmp	r3, #62	; 0x3e
 80076fa:	d91c      	bls.n	8007736 <USB_EPStartXfer+0x7e0>
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <USB_EPStartXfer+0x7c6>
 8007712:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007716:	3b01      	subs	r3, #1
 8007718:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800771c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007720:	b29b      	uxth	r3, r3
 8007722:	029b      	lsls	r3, r3, #10
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772e:	b29a      	uxth	r2, r3
 8007730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	e04a      	b.n	80077cc <USB_EPStartXfer+0x876>
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773a:	2b00      	cmp	r3, #0
 800773c:	d112      	bne.n	8007764 <USB_EPStartXfer+0x80e>
 800773e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007748:	b29a      	uxth	r2, r3
 800774a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774c:	801a      	strh	r2, [r3, #0]
 800774e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775c:	b29a      	uxth	r2, r3
 800775e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007760:	801a      	strh	r2, [r3, #0]
 8007762:	e033      	b.n	80077cc <USB_EPStartXfer+0x876>
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007768:	085b      	lsrs	r3, r3, #1
 800776a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <USB_EPStartXfer+0x82e>
 800777a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800777e:	3301      	adds	r3, #1
 8007780:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007784:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007788:	b29b      	uxth	r3, r3
 800778a:	029b      	lsls	r3, r3, #10
 800778c:	b29a      	uxth	r2, r3
 800778e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	e01b      	b.n	80077cc <USB_EPStartXfer+0x876>
 8007794:	463b      	mov	r3, r7
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d116      	bne.n	80077cc <USB_EPStartXfer+0x876>
 800779e:	1d3b      	adds	r3, r7, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ac:	4413      	add	r3, r2
 80077ae:	673b      	str	r3, [r7, #112]	; 0x70
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	00da      	lsls	r2, r3, #3
 80077b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ba:	4413      	add	r3, r2
 80077bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077cc:	463b      	mov	r3, r7
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	895b      	ldrh	r3, [r3, #10]
 80077d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077d6:	463b      	mov	r3, r7
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6959      	ldr	r1, [r3, #20]
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077e6:	1d38      	adds	r0, r7, #4
 80077e8:	6800      	ldr	r0, [r0, #0]
 80077ea:	f000 fdc0 	bl	800836e <USB_WritePMA>
 80077ee:	e09f      	b.n	8007930 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d164      	bne.n	80078c4 <USB_EPStartXfer+0x96e>
 80077fa:	1d3b      	adds	r3, r7, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007800:	1d3b      	adds	r3, r7, #4
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007808:	b29b      	uxth	r3, r3
 800780a:	461a      	mov	r2, r3
 800780c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800780e:	4413      	add	r3, r2
 8007810:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	00da      	lsls	r2, r3, #3
 800781a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800781c:	4413      	add	r3, r2
 800781e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007822:	67bb      	str	r3, [r7, #120]	; 0x78
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007828:	2b3e      	cmp	r3, #62	; 0x3e
 800782a:	d91c      	bls.n	8007866 <USB_EPStartXfer+0x910>
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2b00      	cmp	r3, #0
 8007840:	d104      	bne.n	800784c <USB_EPStartXfer+0x8f6>
 8007842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007846:	3b01      	subs	r3, #1
 8007848:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800784c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007850:	b29b      	uxth	r3, r3
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	b29b      	uxth	r3, r3
 8007856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800785e:	b29a      	uxth	r2, r3
 8007860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007862:	801a      	strh	r2, [r3, #0]
 8007864:	e053      	b.n	800790e <USB_EPStartXfer+0x9b8>
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786a:	2b00      	cmp	r3, #0
 800786c:	d112      	bne.n	8007894 <USB_EPStartXfer+0x93e>
 800786e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007878:	b29a      	uxth	r2, r3
 800787a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788c:	b29a      	uxth	r2, r3
 800788e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007890:	801a      	strh	r2, [r3, #0]
 8007892:	e03c      	b.n	800790e <USB_EPStartXfer+0x9b8>
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007898:	085b      	lsrs	r3, r3, #1
 800789a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <USB_EPStartXfer+0x95e>
 80078aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078ae:	3301      	adds	r3, #1
 80078b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	029b      	lsls	r3, r3, #10
 80078bc:	b29a      	uxth	r2, r3
 80078be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	e024      	b.n	800790e <USB_EPStartXfer+0x9b8>
 80078c4:	463b      	mov	r3, r7
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d11f      	bne.n	800790e <USB_EPStartXfer+0x9b8>
 80078ce:	1d3b      	adds	r3, r7, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078d6:	1d3b      	adds	r3, r7, #4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078e6:	4413      	add	r3, r2
 80078e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078ec:	463b      	mov	r3, r7
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	00da      	lsls	r2, r3, #3
 80078f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078f8:	4413      	add	r3, r2
 80078fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007906:	b29a      	uxth	r2, r3
 8007908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800790c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800790e:	463b      	mov	r3, r7
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	891b      	ldrh	r3, [r3, #8]
 8007914:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007918:	463b      	mov	r3, r7
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6959      	ldr	r1, [r3, #20]
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007922:	b29b      	uxth	r3, r3
 8007924:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007928:	1d38      	adds	r0, r7, #4
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	f000 fd1f 	bl	800836e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	463b      	mov	r3, r7
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b29b      	uxth	r3, r3
 8007942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794a:	817b      	strh	r3, [r7, #10]
 800794c:	897b      	ldrh	r3, [r7, #10]
 800794e:	f083 0310 	eor.w	r3, r3, #16
 8007952:	817b      	strh	r3, [r7, #10]
 8007954:	897b      	ldrh	r3, [r7, #10]
 8007956:	f083 0320 	eor.w	r3, r3, #32
 800795a:	817b      	strh	r3, [r7, #10]
 800795c:	1d3b      	adds	r3, r7, #4
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	463b      	mov	r3, r7
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	441a      	add	r2, r3
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800797c:	b29b      	uxth	r3, r3
 800797e:	8013      	strh	r3, [r2, #0]
 8007980:	e3b5      	b.n	80080ee <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007982:	463b      	mov	r3, r7
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	7b1b      	ldrb	r3, [r3, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 8090 	bne.w	8007aae <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800798e:	463b      	mov	r3, r7
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	463b      	mov	r3, r7
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	429a      	cmp	r2, r3
 800799c:	d90e      	bls.n	80079bc <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800799e:	463b      	mov	r3, r7
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80079a8:	463b      	mov	r3, r7
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	463b      	mov	r3, r7
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	619a      	str	r2, [r3, #24]
 80079ba:	e008      	b.n	80079ce <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 80079bc:	463b      	mov	r3, r7
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80079c6:	463b      	mov	r3, r7
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2200      	movs	r2, #0
 80079cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80079ce:	1d3b      	adds	r3, r7, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079d6:	1d3b      	adds	r3, r7, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079de:	b29b      	uxth	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079e6:	4413      	add	r3, r2
 80079e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ec:	463b      	mov	r3, r7
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	00da      	lsls	r2, r3, #3
 80079f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079f8:	4413      	add	r3, r2
 80079fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	2b3e      	cmp	r3, #62	; 0x3e
 8007a08:	d91d      	bls.n	8007a46 <USB_EPStartXfer+0xaf0>
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <USB_EPStartXfer+0xad4>
 8007a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a24:	3b01      	subs	r3, #1
 8007a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	029b      	lsls	r3, r3, #10
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a42:	801a      	strh	r2, [r3, #0]
 8007a44:	e325      	b.n	8008092 <USB_EPStartXfer+0x113c>
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d116      	bne.n	8007a7c <USB_EPStartXfer+0xb26>
 8007a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e30a      	b.n	8008092 <USB_EPStartXfer+0x113c>
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <USB_EPStartXfer+0xb46>
 8007a92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a96:	3301      	adds	r3, #1
 8007a98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	029b      	lsls	r3, r3, #10
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e2f1      	b.n	8008092 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007aae:	463b      	mov	r3, r7
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	78db      	ldrb	r3, [r3, #3]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	f040 818f 	bne.w	8007dd8 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007aba:	463b      	mov	r3, r7
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d175      	bne.n	8007bb0 <USB_EPStartXfer+0xc5a>
 8007ac4:	1d3b      	adds	r3, r7, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007acc:	1d3b      	adds	r3, r7, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007adc:	4413      	add	r3, r2
 8007ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	00da      	lsls	r2, r3, #3
 8007aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aee:	4413      	add	r3, r2
 8007af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007af8:	463b      	mov	r3, r7
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b3e      	cmp	r3, #62	; 0x3e
 8007b00:	d91f      	bls.n	8007b42 <USB_EPStartXfer+0xbec>
 8007b02:	463b      	mov	r3, r7
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b0e:	463b      	mov	r3, r7
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <USB_EPStartXfer+0xbd0>
 8007b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b20:	3b01      	subs	r3, #1
 8007b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	029b      	lsls	r3, r3, #10
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b3e:	801a      	strh	r2, [r3, #0]
 8007b40:	e05c      	b.n	8007bfc <USB_EPStartXfer+0xca6>
 8007b42:	463b      	mov	r3, r7
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d116      	bne.n	8007b7a <USB_EPStartXfer+0xc24>
 8007b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	e040      	b.n	8007bfc <USB_EPStartXfer+0xca6>
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b86:	463b      	mov	r3, r7
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <USB_EPStartXfer+0xc48>
 8007b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b98:	3301      	adds	r3, #1
 8007b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	029b      	lsls	r3, r3, #10
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	e025      	b.n	8007bfc <USB_EPStartXfer+0xca6>
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d120      	bne.n	8007bfc <USB_EPStartXfer+0xca6>
 8007bba:	1d3b      	adds	r3, r7, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bc2:	1d3b      	adds	r3, r7, #4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bd8:	463b      	mov	r3, r7
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	00da      	lsls	r2, r3, #3
 8007be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007be4:	4413      	add	r3, r2
 8007be6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bee:	463b      	mov	r3, r7
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	1d3b      	adds	r3, r7, #4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c04:	463b      	mov	r3, r7
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d175      	bne.n	8007cfa <USB_EPStartXfer+0xda4>
 8007c0e:	1d3b      	adds	r3, r7, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c26:	4413      	add	r3, r2
 8007c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	00da      	lsls	r2, r3, #3
 8007c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c38:	4413      	add	r3, r2
 8007c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c42:	463b      	mov	r3, r7
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b3e      	cmp	r3, #62	; 0x3e
 8007c4a:	d91f      	bls.n	8007c8c <USB_EPStartXfer+0xd36>
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c58:	463b      	mov	r3, r7
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 031f 	and.w	r3, r3, #31
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d104      	bne.n	8007c70 <USB_EPStartXfer+0xd1a>
 8007c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	029b      	lsls	r3, r3, #10
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	e058      	b.n	8007d3e <USB_EPStartXfer+0xde8>
 8007c8c:	463b      	mov	r3, r7
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d116      	bne.n	8007cc4 <USB_EPStartXfer+0xd6e>
 8007c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	e03c      	b.n	8007d3e <USB_EPStartXfer+0xde8>
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	085b      	lsrs	r3, r3, #1
 8007ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <USB_EPStartXfer+0xd92>
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	e021      	b.n	8007d3e <USB_EPStartXfer+0xde8>
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d11c      	bne.n	8007d3e <USB_EPStartXfer+0xde8>
 8007d04:	1d3b      	adds	r3, r7, #4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d14:	4413      	add	r3, r2
 8007d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	00da      	lsls	r2, r3, #3
 8007d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d26:	4413      	add	r3, r2
 8007d28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d30:	463b      	mov	r3, r7
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d3c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d3e:	463b      	mov	r3, r7
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 81a4 	beq.w	8008092 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d4a:	1d3b      	adds	r3, r7, #4
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	463b      	mov	r3, r7
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <USB_EPStartXfer+0xe20>
 8007d6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10d      	bne.n	8007d92 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f040 8187 	bne.w	8008092 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 8180 	bne.w	8008092 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d92:	1d3b      	adds	r3, r7, #4
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	463b      	mov	r3, r7
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007db0:	1d3b      	adds	r3, r7, #4
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	463b      	mov	r3, r7
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]
 8007dd6:	e15c      	b.n	8008092 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007dd8:	463b      	mov	r3, r7
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	78db      	ldrb	r3, [r3, #3]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	f040 8155 	bne.w	800808e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007de4:	463b      	mov	r3, r7
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	463b      	mov	r3, r7
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d90e      	bls.n	8007e12 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007df4:	463b      	mov	r3, r7
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007dfe:	463b      	mov	r3, r7
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e08:	1ad2      	subs	r2, r2, r3
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	619a      	str	r2, [r3, #24]
 8007e10:	e008      	b.n	8007e24 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007e12:	463b      	mov	r3, r7
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2200      	movs	r2, #0
 8007e22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e24:	463b      	mov	r3, r7
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d16f      	bne.n	8007f0e <USB_EPStartXfer+0xfb8>
 8007e2e:	1d3b      	adds	r3, r7, #4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e46:	4413      	add	r3, r2
 8007e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	00da      	lsls	r2, r3, #3
 8007e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e58:	4413      	add	r3, r2
 8007e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e66:	2b3e      	cmp	r3, #62	; 0x3e
 8007e68:	d91d      	bls.n	8007ea6 <USB_EPStartXfer+0xf50>
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6e:	095b      	lsrs	r3, r3, #5
 8007e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <USB_EPStartXfer+0xf34>
 8007e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e84:	3b01      	subs	r3, #1
 8007e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	029b      	lsls	r3, r3, #10
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	e058      	b.n	8007f58 <USB_EPStartXfer+0x1002>
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d116      	bne.n	8007edc <USB_EPStartXfer+0xf86>
 8007eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	e03d      	b.n	8007f58 <USB_EPStartXfer+0x1002>
 8007edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d004      	beq.n	8007efc <USB_EPStartXfer+0xfa6>
 8007ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	029b      	lsls	r3, r3, #10
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	e024      	b.n	8007f58 <USB_EPStartXfer+0x1002>
 8007f0e:	463b      	mov	r3, r7
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d11f      	bne.n	8007f58 <USB_EPStartXfer+0x1002>
 8007f18:	1d3b      	adds	r3, r7, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f20:	1d3b      	adds	r3, r7, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f30:	4413      	add	r3, r2
 8007f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f36:	463b      	mov	r3, r7
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	00da      	lsls	r2, r3, #3
 8007f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f42:	4413      	add	r3, r2
 8007f44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f56:	801a      	strh	r2, [r3, #0]
 8007f58:	1d3b      	adds	r3, r7, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f60:	463b      	mov	r3, r7
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d16f      	bne.n	800804a <USB_EPStartXfer+0x10f4>
 8007f6a:	1d3b      	adds	r3, r7, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f72:	1d3b      	adds	r3, r7, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f82:	4413      	add	r3, r2
 8007f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f88:	463b      	mov	r3, r7
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	00da      	lsls	r2, r3, #3
 8007f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f94:	4413      	add	r3, r2
 8007f96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8007fa4:	d91d      	bls.n	8007fe2 <USB_EPStartXfer+0x108c>
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007faa:	095b      	lsrs	r3, r3, #5
 8007fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <USB_EPStartXfer+0x1070>
 8007fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	029b      	lsls	r3, r3, #10
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	e057      	b.n	8008092 <USB_EPStartXfer+0x113c>
 8007fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d116      	bne.n	8008018 <USB_EPStartXfer+0x10c2>
 8007fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800e:	b29a      	uxth	r2, r3
 8008010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	e03c      	b.n	8008092 <USB_EPStartXfer+0x113c>
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800801c:	085b      	lsrs	r3, r3, #1
 800801e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <USB_EPStartXfer+0x10e2>
 800802e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008032:	3301      	adds	r3, #1
 8008034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800803c:	b29b      	uxth	r3, r3
 800803e:	029b      	lsls	r3, r3, #10
 8008040:	b29a      	uxth	r2, r3
 8008042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	e023      	b.n	8008092 <USB_EPStartXfer+0x113c>
 800804a:	463b      	mov	r3, r7
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d11e      	bne.n	8008092 <USB_EPStartXfer+0x113c>
 8008054:	1d3b      	adds	r3, r7, #4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800805c:	b29b      	uxth	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008064:	4413      	add	r3, r2
 8008066:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800806a:	463b      	mov	r3, r7
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	00da      	lsls	r2, r3, #3
 8008072:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008076:	4413      	add	r3, r2
 8008078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800807c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008084:	b29a      	uxth	r2, r3
 8008086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800808a:	801a      	strh	r2, [r3, #0]
 800808c:	e001      	b.n	8008092 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e02e      	b.n	80080f0 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008092:	1d3b      	adds	r3, r7, #4
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	463b      	mov	r3, r7
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80080b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80080b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80080bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80080c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080c4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80080c8:	1d3b      	adds	r3, r7, #4
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	463b      	mov	r3, r7
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	441a      	add	r2, r3
 80080d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80080da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d020      	beq.n	800814e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008122:	81bb      	strh	r3, [r7, #12]
 8008124:	89bb      	ldrh	r3, [r7, #12]
 8008126:	f083 0310 	eor.w	r3, r3, #16
 800812a:	81bb      	strh	r3, [r7, #12]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	441a      	add	r2, r3
 8008136:	89bb      	ldrh	r3, [r7, #12]
 8008138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800813c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008148:	b29b      	uxth	r3, r3
 800814a:	8013      	strh	r3, [r2, #0]
 800814c:	e01f      	b.n	800818e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29b      	uxth	r3, r3
 800815c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008164:	81fb      	strh	r3, [r7, #14]
 8008166:	89fb      	ldrh	r3, [r7, #14]
 8008168:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800816c:	81fb      	strh	r3, [r7, #14]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	441a      	add	r2, r3
 8008178:	89fb      	ldrh	r3, [r7, #14]
 800817a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818a:	b29b      	uxth	r3, r3
 800818c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	7b1b      	ldrb	r3, [r3, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 809d 	bne.w	80082ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d04c      	beq.n	8008252 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	823b      	strh	r3, [r7, #16]
 80081c6:	8a3b      	ldrh	r3, [r7, #16]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01b      	beq.n	8008208 <USB_EPClearStall+0x6c>
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e6:	81fb      	strh	r3, [r7, #14]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	441a      	add	r2, r3
 80081f2:	89fb      	ldrh	r3, [r7, #14]
 80081f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008204:	b29b      	uxth	r3, r3
 8008206:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	78db      	ldrb	r3, [r3, #3]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d06c      	beq.n	80082ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008226:	81bb      	strh	r3, [r7, #12]
 8008228:	89bb      	ldrh	r3, [r7, #12]
 800822a:	f083 0320 	eor.w	r3, r3, #32
 800822e:	81bb      	strh	r3, [r7, #12]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	441a      	add	r2, r3
 800823a:	89bb      	ldrh	r3, [r7, #12]
 800823c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824c:	b29b      	uxth	r3, r3
 800824e:	8013      	strh	r3, [r2, #0]
 8008250:	e04b      	b.n	80082ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	82fb      	strh	r3, [r7, #22]
 8008260:	8afb      	ldrh	r3, [r7, #22]
 8008262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d01b      	beq.n	80082a2 <USB_EPClearStall+0x106>
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008280:	82bb      	strh	r3, [r7, #20]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	8abb      	ldrh	r3, [r7, #20]
 800828e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800829a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829e:	b29b      	uxth	r3, r3
 80082a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b8:	827b      	strh	r3, [r7, #18]
 80082ba:	8a7b      	ldrh	r3, [r7, #18]
 80082bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082c0:	827b      	strh	r3, [r7, #18]
 80082c2:	8a7b      	ldrh	r3, [r7, #18]
 80082c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082c8:	827b      	strh	r3, [r7, #18]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	441a      	add	r2, r3
 80082d4:	8a7b      	ldrh	r3, [r7, #18]
 80082d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2280      	movs	r2, #128	; 0x80
 800830e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800832e:	b29b      	uxth	r3, r3
 8008330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800835c:	b29b      	uxth	r3, r3
 800835e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008360:	68fb      	ldr	r3, [r7, #12]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800836e:	b480      	push	{r7}
 8008370:	b08d      	sub	sp, #52	; 0x34
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	4611      	mov	r1, r2
 800837a:	461a      	mov	r2, r3
 800837c:	460b      	mov	r3, r1
 800837e:	80fb      	strh	r3, [r7, #6]
 8008380:	4613      	mov	r3, r2
 8008382:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008384:	88bb      	ldrh	r3, [r7, #4]
 8008386:	3301      	adds	r3, #1
 8008388:	085b      	lsrs	r3, r3, #1
 800838a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008394:	88fa      	ldrh	r2, [r7, #6]
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a4:	e01b      	b.n	80083de <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	3301      	adds	r3, #1
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	3302      	adds	r3, #2
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	3301      	adds	r3, #1
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	3b01      	subs	r3, #1
 80083dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e0      	bne.n	80083a6 <USB_WritePMA+0x38>
  }
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	3734      	adds	r7, #52	; 0x34
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b08b      	sub	sp, #44	; 0x2c
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	4611      	mov	r1, r2
 80083fe:	461a      	mov	r2, r3
 8008400:	460b      	mov	r3, r1
 8008402:	80fb      	strh	r3, [r7, #6]
 8008404:	4613      	mov	r3, r2
 8008406:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008408:	88bb      	ldrh	r3, [r7, #4]
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	b29b      	uxth	r3, r3
 800840e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008418:	88fa      	ldrh	r2, [r7, #6]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008422:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
 8008428:	e018      	b.n	800845c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	3302      	adds	r3, #2
 8008436:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	3301      	adds	r3, #1
 8008444:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	0a1b      	lsrs	r3, r3, #8
 800844a:	b2da      	uxtb	r2, r3
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	3b01      	subs	r3, #1
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e3      	bne.n	800842a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008462:	88bb      	ldrh	r3, [r7, #4]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	b2da      	uxtb	r2, r3
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	701a      	strb	r2, [r3, #0]
  }
}
 800847e:	bf00      	nop
 8008480:	372c      	adds	r7, #44	; 0x2c
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008496:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800849a:	f002 f901 	bl	800a6a0 <USBD_static_malloc>
 800849e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80084ae:	2302      	movs	r3, #2
 80084b0:	e066      	b.n	8008580 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7c1b      	ldrb	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d119      	bne.n	80084f6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80084c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c6:	2202      	movs	r2, #2
 80084c8:	2181      	movs	r1, #129	; 0x81
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 ff8d 	bl	800a3ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80084d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084da:	2202      	movs	r2, #2
 80084dc:	2101      	movs	r1, #1
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 ff83 	bl	800a3ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2210      	movs	r2, #16
 80084f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80084f4:	e016      	b.n	8008524 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80084f6:	2340      	movs	r3, #64	; 0x40
 80084f8:	2202      	movs	r2, #2
 80084fa:	2181      	movs	r1, #129	; 0x81
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 ff74 	bl	800a3ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	2202      	movs	r2, #2
 800850c:	2101      	movs	r1, #1
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 ff6b 	bl	800a3ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2210      	movs	r2, #16
 8008520:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008524:	2308      	movs	r3, #8
 8008526:	2203      	movs	r2, #3
 8008528:	2182      	movs	r1, #130	; 0x82
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 ff5d 	bl	800a3ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7c1b      	ldrb	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008564:	2101      	movs	r1, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f002 f82f 	bl	800a5ca <USBD_LL_PrepareReceive>
 800856c:	e007      	b.n	800857e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008574:	2340      	movs	r3, #64	; 0x40
 8008576:	2101      	movs	r1, #1
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f002 f826 	bl	800a5ca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008594:	2181      	movs	r1, #129	; 0x81
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 ff4d 	bl	800a436 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085a2:	2101      	movs	r1, #1
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 ff46 	bl	800a436 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80085b2:	2182      	movs	r1, #130	; 0x82
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 ff3e 	bl	800a436 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00e      	beq.n	80085f2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e4:	4618      	mov	r0, r3
 80085e6:	f002 f869 	bl	800a6bc <USBD_static_free>
    pdev->pClassData = NULL;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800860c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008620:	2303      	movs	r3, #3
 8008622:	e0af      	b.n	8008784 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800862c:	2b00      	cmp	r3, #0
 800862e:	d03f      	beq.n	80086b0 <USBD_CDC_Setup+0xb4>
 8008630:	2b20      	cmp	r3, #32
 8008632:	f040 809f 	bne.w	8008774 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	88db      	ldrh	r3, [r3, #6]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d02e      	beq.n	800869c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b25b      	sxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	da16      	bge.n	8008676 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008654:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	88d2      	ldrh	r2, [r2, #6]
 800865a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	88db      	ldrh	r3, [r3, #6]
 8008660:	2b07      	cmp	r3, #7
 8008662:	bf28      	it	cs
 8008664:	2307      	movcs	r3, #7
 8008666:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	89fa      	ldrh	r2, [r7, #14]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 facf 	bl	8009c12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008674:	e085      	b.n	8008782 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	785a      	ldrb	r2, [r3, #1]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	88db      	ldrh	r3, [r3, #6]
 8008684:	b2da      	uxtb	r2, r3
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800868c:	6939      	ldr	r1, [r7, #16]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	88db      	ldrh	r3, [r3, #6]
 8008692:	461a      	mov	r2, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fae8 	bl	8009c6a <USBD_CtlPrepareRx>
      break;
 800869a:	e072      	b.n	8008782 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	7850      	ldrb	r0, [r2, #1]
 80086a8:	2200      	movs	r2, #0
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	4798      	blx	r3
      break;
 80086ae:	e068      	b.n	8008782 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b0b      	cmp	r3, #11
 80086b6:	d852      	bhi.n	800875e <USBD_CDC_Setup+0x162>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <USBD_CDC_Setup+0xc4>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086f1 	.word	0x080086f1
 80086c4:	0800876d 	.word	0x0800876d
 80086c8:	0800875f 	.word	0x0800875f
 80086cc:	0800875f 	.word	0x0800875f
 80086d0:	0800875f 	.word	0x0800875f
 80086d4:	0800875f 	.word	0x0800875f
 80086d8:	0800875f 	.word	0x0800875f
 80086dc:	0800875f 	.word	0x0800875f
 80086e0:	0800875f 	.word	0x0800875f
 80086e4:	0800875f 	.word	0x0800875f
 80086e8:	0800871b 	.word	0x0800871b
 80086ec:	08008745 	.word	0x08008745
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d107      	bne.n	800870c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086fc:	f107 030a 	add.w	r3, r7, #10
 8008700:	2202      	movs	r2, #2
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 fa84 	bl	8009c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800870a:	e032      	b.n	8008772 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fa0e 	bl	8009b30 <USBD_CtlError>
            ret = USBD_FAIL;
 8008714:	2303      	movs	r3, #3
 8008716:	75fb      	strb	r3, [r7, #23]
          break;
 8008718:	e02b      	b.n	8008772 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b03      	cmp	r3, #3
 8008724:	d107      	bne.n	8008736 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008726:	f107 030d 	add.w	r3, r7, #13
 800872a:	2201      	movs	r2, #1
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 fa6f 	bl	8009c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008734:	e01d      	b.n	8008772 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 f9f9 	bl	8009b30 <USBD_CtlError>
            ret = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	75fb      	strb	r3, [r7, #23]
          break;
 8008742:	e016      	b.n	8008772 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b03      	cmp	r3, #3
 800874e:	d00f      	beq.n	8008770 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 f9ec 	bl	8009b30 <USBD_CtlError>
            ret = USBD_FAIL;
 8008758:	2303      	movs	r3, #3
 800875a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800875c:	e008      	b.n	8008770 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f001 f9e5 	bl	8009b30 <USBD_CtlError>
          ret = USBD_FAIL;
 8008766:	2303      	movs	r3, #3
 8008768:	75fb      	strb	r3, [r7, #23]
          break;
 800876a:	e002      	b.n	8008772 <USBD_CDC_Setup+0x176>
          break;
 800876c:	bf00      	nop
 800876e:	e008      	b.n	8008782 <USBD_CDC_Setup+0x186>
          break;
 8008770:	bf00      	nop
      }
      break;
 8008772:	e006      	b.n	8008782 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 f9da 	bl	8009b30 <USBD_CtlError>
      ret = USBD_FAIL;
 800877c:	2303      	movs	r3, #3
 800877e:	75fb      	strb	r3, [r7, #23]
      break;
 8008780:	bf00      	nop
  }

  return (uint8_t)ret;
 8008782:	7dfb      	ldrb	r3, [r7, #23]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800879e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e04f      	b.n	800884e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	3318      	adds	r3, #24
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d029      	beq.n	8008820 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	3318      	adds	r3, #24
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	78f9      	ldrb	r1, [r7, #3]
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	460b      	mov	r3, r1
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	4403      	add	r3, r0
 80087ec:	3338      	adds	r3, #56	; 0x38
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80087f4:	fb03 f301 	mul.w	r3, r3, r1
 80087f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d110      	bne.n	8008820 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3318      	adds	r3, #24
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008812:	78f9      	ldrb	r1, [r7, #3]
 8008814:	2300      	movs	r3, #0
 8008816:	2200      	movs	r2, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 feb5 	bl	800a588 <USBD_LL_Transmit>
 800881e:	e015      	b.n	800884c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008868:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008874:	2303      	movs	r3, #3
 8008876:	e015      	b.n	80088a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fec5 	bl	800a60c <USBD_LL_GetRxDataSize>
 8008882:	4602      	mov	r2, r0
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800889e:	4611      	mov	r1, r2
 80088a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e01b      	b.n	80088fe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d015      	beq.n	80088fc <USBD_CDC_EP0_RxReady+0x50>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80088d6:	2bff      	cmp	r3, #255	; 0xff
 80088d8:	d010      	beq.n	80088fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80088e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80088f0:	b292      	uxth	r2, r2
 80088f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	22ff      	movs	r2, #255	; 0xff
 80088f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2243      	movs	r2, #67	; 0x43
 8008914:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008916:	4b03      	ldr	r3, [pc, #12]	; (8008924 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008918:	4618      	mov	r0, r3
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	200000b0 	.word	0x200000b0

08008928 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2243      	movs	r2, #67	; 0x43
 8008934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008936:	4b03      	ldr	r3, [pc, #12]	; (8008944 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	2000006c 	.word	0x2000006c

08008948 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2243      	movs	r2, #67	; 0x43
 8008954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008956:	4b03      	ldr	r3, [pc, #12]	; (8008964 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	200000f4 	.word	0x200000f4

08008968 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	220a      	movs	r2, #10
 8008974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008976:	4b03      	ldr	r3, [pc, #12]	; (8008984 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20000028 	.word	0x20000028

08008988 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	e004      	b.n	80089a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b087      	sub	sp, #28
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e008      	b.n	80089e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e004      	b.n	8008a14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a30:	2301      	movs	r3, #1
 8008a32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e01a      	b.n	8008a78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d114      	bne.n	8008a76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a6a:	2181      	movs	r1, #129	; 0x81
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fd8b 	bl	800a588 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e016      	b.n	8008acc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7c1b      	ldrb	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f001 fd89 	bl	800a5ca <USBD_LL_PrepareReceive>
 8008ab8:	e007      	b.n	8008aca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ac0:	2340      	movs	r3, #64	; 0x40
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 fd80 	bl	800a5ca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e01f      	b.n	8008b2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	79fa      	ldrb	r2, [r7, #7]
 8008b1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fbe7 	bl	800a2f4 <USBD_LL_Init>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e016      	b.n	8008b7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	f107 020e 	add.w	r2, r7, #14
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	4602      	mov	r2, r0
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 fc12 	bl	800a3b4 <USBD_LL_Start>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d007      	beq.n	8008c0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 ff46 	bl	8009abc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c4c:	f003 031f 	and.w	r3, r3, #31
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d01a      	beq.n	8008c8a <USBD_LL_SetupStage+0x72>
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d822      	bhi.n	8008c9e <USBD_LL_SetupStage+0x86>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <USBD_LL_SetupStage+0x4a>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d00a      	beq.n	8008c76 <USBD_LL_SetupStage+0x5e>
 8008c60:	e01d      	b.n	8008c9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f9ee 	bl	800904c <USBD_StdDevReq>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
      break;
 8008c74:	e020      	b.n	8008cb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa52 	bl	8009128 <USBD_StdItfReq>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]
      break;
 8008c88:	e016      	b.n	8008cb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa91 	bl	80091ba <USBD_StdEPReq>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c9c:	e00c      	b.n	8008cb8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ca4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fbe1 	bl	800a474 <USBD_LL_StallEP>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb6:	bf00      	nop
  }

  return ret;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b086      	sub	sp, #24
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	607a      	str	r2, [r7, #4]
 8008cce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d138      	bne.n	8008d48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008cdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d14a      	bne.n	8008d7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d913      	bls.n	8008d1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	1ad2      	subs	r2, r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	bf28      	it	cs
 8008d0e:	4613      	movcs	r3, r2
 8008d10:	461a      	mov	r2, r3
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 ffc5 	bl	8009ca4 <USBD_CtlContinueRx>
 8008d1a:	e030      	b.n	8008d7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d10b      	bne.n	8008d40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 ffc0 	bl	8009cc6 <USBD_CtlSendStatus>
 8008d46:	e01a      	b.n	8008d7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d114      	bne.n	8008d7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00e      	beq.n	8008d7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	7afa      	ldrb	r2, [r7, #11]
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	4798      	blx	r3
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	e000      	b.n	8008d80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	460b      	mov	r3, r1
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d16b      	bne.n	8008e74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3314      	adds	r3, #20
 8008da0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d156      	bne.n	8008e5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d914      	bls.n	8008de2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	1ad2      	subs	r2, r2, r3
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 ff3a 	bl	8009c48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f001 fbf5 	bl	800a5ca <USBD_LL_PrepareReceive>
 8008de0:	e03b      	b.n	8008e5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d11c      	bne.n	8008e28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d316      	bcc.n	8008e28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d20f      	bcs.n	8008e28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 ff1b 	bl	8009c48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f001 fbd2 	bl	800a5ca <USBD_LL_PrepareReceive>
 8008e26:	e018      	b.n	8008e5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	d10b      	bne.n	8008e4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e4c:	2180      	movs	r1, #128	; 0x80
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f001 fb10 	bl	800a474 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 ff49 	bl	8009cec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d122      	bne.n	8008eaa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff fe98 	bl	8008b9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e72:	e01a      	b.n	8008eaa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d114      	bne.n	8008eaa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00e      	beq.n	8008eaa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	7afa      	ldrb	r2, [r7, #11]
 8008e96:	4611      	mov	r1, r2
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	4798      	blx	r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	e000      	b.n	8008eac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e02f      	b.n	8008f48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00f      	beq.n	8008f12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6852      	ldr	r2, [r2, #4]
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f12:	2340      	movs	r3, #64	; 0x40
 8008f14:	2200      	movs	r2, #0
 8008f16:	2100      	movs	r1, #0
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 fa66 	bl	800a3ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2240      	movs	r2, #64	; 0x40
 8008f2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f2e:	2340      	movs	r3, #64	; 0x40
 8008f30:	2200      	movs	r2, #0
 8008f32:	2180      	movs	r1, #128	; 0x80
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fa58 	bl	800a3ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2240      	movs	r2, #64	; 0x40
 8008f44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2204      	movs	r2, #4
 8008f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	d106      	bne.n	8008fbe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e012      	b.n	8009008 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d10b      	bne.n	8009006 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	3301      	adds	r3, #1
 8009026:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800902e:	8a3b      	ldrh	r3, [r7, #16]
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	b21a      	sxth	r2, r3
 8009034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009038:	4313      	orrs	r3, r2
 800903a:	b21b      	sxth	r3, r3
 800903c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800903e:	89fb      	ldrh	r3, [r7, #14]
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d005      	beq.n	8009072 <USBD_StdDevReq+0x26>
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	d853      	bhi.n	8009112 <USBD_StdDevReq+0xc6>
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <USBD_StdDevReq+0x3a>
 800906e:	2b20      	cmp	r3, #32
 8009070:	d14f      	bne.n	8009112 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	4798      	blx	r3
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]
      break;
 8009084:	e04a      	b.n	800911c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b09      	cmp	r3, #9
 800908c:	d83b      	bhi.n	8009106 <USBD_StdDevReq+0xba>
 800908e:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <USBD_StdDevReq+0x48>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090e9 	.word	0x080090e9
 8009098:	080090fd 	.word	0x080090fd
 800909c:	08009107 	.word	0x08009107
 80090a0:	080090f3 	.word	0x080090f3
 80090a4:	08009107 	.word	0x08009107
 80090a8:	080090c7 	.word	0x080090c7
 80090ac:	080090bd 	.word	0x080090bd
 80090b0:	08009107 	.word	0x08009107
 80090b4:	080090df 	.word	0x080090df
 80090b8:	080090d1 	.word	0x080090d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f9de 	bl	8009480 <USBD_GetDescriptor>
          break;
 80090c4:	e024      	b.n	8009110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fb6d 	bl	80097a8 <USBD_SetAddress>
          break;
 80090ce:	e01f      	b.n	8009110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fbac 	bl	8009830 <USBD_SetConfig>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
          break;
 80090dc:	e018      	b.n	8009110 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc4b 	bl	800997c <USBD_GetConfig>
          break;
 80090e6:	e013      	b.n	8009110 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fc7c 	bl	80099e8 <USBD_GetStatus>
          break;
 80090f0:	e00e      	b.n	8009110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fcab 	bl	8009a50 <USBD_SetFeature>
          break;
 80090fa:	e009      	b.n	8009110 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fcba 	bl	8009a78 <USBD_ClrFeature>
          break;
 8009104:	e004      	b.n	8009110 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fd11 	bl	8009b30 <USBD_CtlError>
          break;
 800910e:	bf00      	nop
      }
      break;
 8009110:	e004      	b.n	800911c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fd0b 	bl	8009b30 <USBD_CtlError>
      break;
 800911a:	bf00      	nop
  }

  return ret;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop

08009128 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800913e:	2b40      	cmp	r3, #64	; 0x40
 8009140:	d005      	beq.n	800914e <USBD_StdItfReq+0x26>
 8009142:	2b40      	cmp	r3, #64	; 0x40
 8009144:	d82f      	bhi.n	80091a6 <USBD_StdItfReq+0x7e>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <USBD_StdItfReq+0x26>
 800914a:	2b20      	cmp	r3, #32
 800914c:	d12b      	bne.n	80091a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009154:	b2db      	uxtb	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	2b02      	cmp	r3, #2
 800915a:	d81d      	bhi.n	8009198 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	889b      	ldrh	r3, [r3, #4]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b01      	cmp	r3, #1
 8009164:	d813      	bhi.n	800918e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	4798      	blx	r3
 8009174:	4603      	mov	r3, r0
 8009176:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	88db      	ldrh	r3, [r3, #6]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d110      	bne.n	80091a2 <USBD_StdItfReq+0x7a>
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10d      	bne.n	80091a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fd9d 	bl	8009cc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800918c:	e009      	b.n	80091a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fccd 	bl	8009b30 <USBD_CtlError>
          break;
 8009196:	e004      	b.n	80091a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fcc8 	bl	8009b30 <USBD_CtlError>
          break;
 80091a0:	e000      	b.n	80091a4 <USBD_StdItfReq+0x7c>
          break;
 80091a2:	bf00      	nop
      }
      break;
 80091a4:	e004      	b.n	80091b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fcc1 	bl	8009b30 <USBD_CtlError>
      break;
 80091ae:	bf00      	nop
  }

  return ret;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	889b      	ldrh	r3, [r3, #4]
 80091cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d6:	2b40      	cmp	r3, #64	; 0x40
 80091d8:	d007      	beq.n	80091ea <USBD_StdEPReq+0x30>
 80091da:	2b40      	cmp	r3, #64	; 0x40
 80091dc:	f200 8145 	bhi.w	800946a <USBD_StdEPReq+0x2b0>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <USBD_StdEPReq+0x44>
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	f040 8140 	bne.w	800946a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	4798      	blx	r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]
      break;
 80091fc:	e13a      	b.n	8009474 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	2b03      	cmp	r3, #3
 8009204:	d007      	beq.n	8009216 <USBD_StdEPReq+0x5c>
 8009206:	2b03      	cmp	r3, #3
 8009208:	f300 8129 	bgt.w	800945e <USBD_StdEPReq+0x2a4>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d07f      	beq.n	8009310 <USBD_StdEPReq+0x156>
 8009210:	2b01      	cmp	r3, #1
 8009212:	d03c      	beq.n	800928e <USBD_StdEPReq+0xd4>
 8009214:	e123      	b.n	800945e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d002      	beq.n	8009228 <USBD_StdEPReq+0x6e>
 8009222:	2b03      	cmp	r3, #3
 8009224:	d016      	beq.n	8009254 <USBD_StdEPReq+0x9a>
 8009226:	e02c      	b.n	8009282 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00d      	beq.n	800924a <USBD_StdEPReq+0x90>
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b80      	cmp	r3, #128	; 0x80
 8009232:	d00a      	beq.n	800924a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 f91b 	bl	800a474 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800923e:	2180      	movs	r1, #128	; 0x80
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 f917 	bl	800a474 <USBD_LL_StallEP>
 8009246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009248:	e020      	b.n	800928c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fc6f 	bl	8009b30 <USBD_CtlError>
              break;
 8009252:	e01b      	b.n	800928c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	885b      	ldrh	r3, [r3, #2]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10e      	bne.n	800927a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <USBD_StdEPReq+0xc0>
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	2b80      	cmp	r3, #128	; 0x80
 8009266:	d008      	beq.n	800927a <USBD_StdEPReq+0xc0>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	88db      	ldrh	r3, [r3, #6]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f001 f8fd 	bl	800a474 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fd23 	bl	8009cc6 <USBD_CtlSendStatus>

              break;
 8009280:	e004      	b.n	800928c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fc53 	bl	8009b30 <USBD_CtlError>
              break;
 800928a:	bf00      	nop
          }
          break;
 800928c:	e0ec      	b.n	8009468 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d002      	beq.n	80092a0 <USBD_StdEPReq+0xe6>
 800929a:	2b03      	cmp	r3, #3
 800929c:	d016      	beq.n	80092cc <USBD_StdEPReq+0x112>
 800929e:	e030      	b.n	8009302 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00d      	beq.n	80092c2 <USBD_StdEPReq+0x108>
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b80      	cmp	r3, #128	; 0x80
 80092aa:	d00a      	beq.n	80092c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 f8df 	bl	800a474 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092b6:	2180      	movs	r1, #128	; 0x80
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 f8db 	bl	800a474 <USBD_LL_StallEP>
 80092be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092c0:	e025      	b.n	800930e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fc33 	bl	8009b30 <USBD_CtlError>
              break;
 80092ca:	e020      	b.n	800930e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	885b      	ldrh	r3, [r3, #2]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11b      	bne.n	800930c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092de:	7bbb      	ldrb	r3, [r7, #14]
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 f8e5 	bl	800a4b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fcec 	bl	8009cc6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	4798      	blx	r3
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009300:	e004      	b.n	800930c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fc13 	bl	8009b30 <USBD_CtlError>
              break;
 800930a:	e000      	b.n	800930e <USBD_StdEPReq+0x154>
              break;
 800930c:	bf00      	nop
          }
          break;
 800930e:	e0ab      	b.n	8009468 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d002      	beq.n	8009322 <USBD_StdEPReq+0x168>
 800931c:	2b03      	cmp	r3, #3
 800931e:	d032      	beq.n	8009386 <USBD_StdEPReq+0x1cc>
 8009320:	e097      	b.n	8009452 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d007      	beq.n	8009338 <USBD_StdEPReq+0x17e>
 8009328:	7bbb      	ldrb	r3, [r7, #14]
 800932a:	2b80      	cmp	r3, #128	; 0x80
 800932c:	d004      	beq.n	8009338 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fbfd 	bl	8009b30 <USBD_CtlError>
                break;
 8009336:	e091      	b.n	800945c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	da0b      	bge.n	8009358 <USBD_StdEPReq+0x19e>
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	3310      	adds	r3, #16
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	3304      	adds	r3, #4
 8009356:	e00b      	b.n	8009370 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	3304      	adds	r3, #4
 8009370:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2202      	movs	r2, #2
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc47 	bl	8009c12 <USBD_CtlSendData>
              break;
 8009384:	e06a      	b.n	800945c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800938a:	2b00      	cmp	r3, #0
 800938c:	da11      	bge.n	80093b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	f003 020f 	and.w	r2, r3, #15
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	3324      	adds	r3, #36	; 0x24
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d117      	bne.n	80093d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fbc0 	bl	8009b30 <USBD_CtlError>
                  break;
 80093b0:	e054      	b.n	800945c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
 80093b4:	f003 020f 	and.w	r2, r3, #15
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d104      	bne.n	80093d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fbad 	bl	8009b30 <USBD_CtlError>
                  break;
 80093d6:	e041      	b.n	800945c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da0b      	bge.n	80093f8 <USBD_StdEPReq+0x23e>
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	3310      	adds	r3, #16
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	3304      	adds	r3, #4
 80093f6:	e00b      	b.n	8009410 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	4413      	add	r3, r2
 800940e:	3304      	adds	r3, #4
 8009410:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <USBD_StdEPReq+0x264>
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	2b80      	cmp	r3, #128	; 0x80
 800941c:	d103      	bne.n	8009426 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e00e      	b.n	8009444 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 f860 	bl	800a4f0 <USBD_LL_IsStallEP>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2201      	movs	r2, #1
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	e002      	b.n	8009444 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2202      	movs	r2, #2
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fbe1 	bl	8009c12 <USBD_CtlSendData>
              break;
 8009450:	e004      	b.n	800945c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fb6b 	bl	8009b30 <USBD_CtlError>
              break;
 800945a:	bf00      	nop
          }
          break;
 800945c:	e004      	b.n	8009468 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fb65 	bl	8009b30 <USBD_CtlError>
          break;
 8009466:	bf00      	nop
      }
      break;
 8009468:	e004      	b.n	8009474 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fb5f 	bl	8009b30 <USBD_CtlError>
      break;
 8009472:	bf00      	nop
  }

  return ret;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	885b      	ldrh	r3, [r3, #2]
 800949a:	0a1b      	lsrs	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	2b0e      	cmp	r3, #14
 80094a2:	f200 8152 	bhi.w	800974a <USBD_GetDescriptor+0x2ca>
 80094a6:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <USBD_GetDescriptor+0x2c>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	0800951d 	.word	0x0800951d
 80094b0:	08009535 	.word	0x08009535
 80094b4:	08009575 	.word	0x08009575
 80094b8:	0800974b 	.word	0x0800974b
 80094bc:	0800974b 	.word	0x0800974b
 80094c0:	080096eb 	.word	0x080096eb
 80094c4:	08009717 	.word	0x08009717
 80094c8:	0800974b 	.word	0x0800974b
 80094cc:	0800974b 	.word	0x0800974b
 80094d0:	0800974b 	.word	0x0800974b
 80094d4:	0800974b 	.word	0x0800974b
 80094d8:	0800974b 	.word	0x0800974b
 80094dc:	0800974b 	.word	0x0800974b
 80094e0:	0800974b 	.word	0x0800974b
 80094e4:	080094e9 	.word	0x080094e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00b      	beq.n	800950c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	7c12      	ldrb	r2, [r2, #16]
 8009500:	f107 0108 	add.w	r1, r7, #8
 8009504:	4610      	mov	r0, r2
 8009506:	4798      	blx	r3
 8009508:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800950a:	e126      	b.n	800975a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fb0e 	bl	8009b30 <USBD_CtlError>
        err++;
 8009514:	7afb      	ldrb	r3, [r7, #11]
 8009516:	3301      	adds	r3, #1
 8009518:	72fb      	strb	r3, [r7, #11]
      break;
 800951a:	e11e      	b.n	800975a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	7c12      	ldrb	r2, [r2, #16]
 8009528:	f107 0108 	add.w	r1, r7, #8
 800952c:	4610      	mov	r0, r2
 800952e:	4798      	blx	r3
 8009530:	60f8      	str	r0, [r7, #12]
      break;
 8009532:	e112      	b.n	800975a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	7c1b      	ldrb	r3, [r3, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10d      	bne.n	8009558 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	f107 0208 	add.w	r2, r7, #8
 8009548:	4610      	mov	r0, r2
 800954a:	4798      	blx	r3
 800954c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	2202      	movs	r2, #2
 8009554:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009556:	e100      	b.n	800975a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	f107 0208 	add.w	r2, r7, #8
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3
 8009568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	2202      	movs	r2, #2
 8009570:	701a      	strb	r2, [r3, #0]
      break;
 8009572:	e0f2      	b.n	800975a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	885b      	ldrh	r3, [r3, #2]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b05      	cmp	r3, #5
 800957c:	f200 80ac 	bhi.w	80096d8 <USBD_GetDescriptor+0x258>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <USBD_GetDescriptor+0x108>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080095a1 	.word	0x080095a1
 800958c:	080095d5 	.word	0x080095d5
 8009590:	08009609 	.word	0x08009609
 8009594:	0800963d 	.word	0x0800963d
 8009598:	08009671 	.word	0x08009671
 800959c:	080096a5 	.word	0x080096a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	7c12      	ldrb	r2, [r2, #16]
 80095b8:	f107 0108 	add.w	r1, r7, #8
 80095bc:	4610      	mov	r0, r2
 80095be:	4798      	blx	r3
 80095c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095c2:	e091      	b.n	80096e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fab2 	bl	8009b30 <USBD_CtlError>
            err++;
 80095cc:	7afb      	ldrb	r3, [r7, #11]
 80095ce:	3301      	adds	r3, #1
 80095d0:	72fb      	strb	r3, [r7, #11]
          break;
 80095d2:	e089      	b.n	80096e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	7c12      	ldrb	r2, [r2, #16]
 80095ec:	f107 0108 	add.w	r1, r7, #8
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
 80095f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095f6:	e077      	b.n	80096e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa98 	bl	8009b30 <USBD_CtlError>
            err++;
 8009600:	7afb      	ldrb	r3, [r7, #11]
 8009602:	3301      	adds	r3, #1
 8009604:	72fb      	strb	r3, [r7, #11]
          break;
 8009606:	e06f      	b.n	80096e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	7c12      	ldrb	r2, [r2, #16]
 8009620:	f107 0108 	add.w	r1, r7, #8
 8009624:	4610      	mov	r0, r2
 8009626:	4798      	blx	r3
 8009628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800962a:	e05d      	b.n	80096e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa7e 	bl	8009b30 <USBD_CtlError>
            err++;
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	3301      	adds	r3, #1
 8009638:	72fb      	strb	r3, [r7, #11]
          break;
 800963a:	e055      	b.n	80096e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	7c12      	ldrb	r2, [r2, #16]
 8009654:	f107 0108 	add.w	r1, r7, #8
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800965e:	e043      	b.n	80096e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa64 	bl	8009b30 <USBD_CtlError>
            err++;
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	3301      	adds	r3, #1
 800966c:	72fb      	strb	r3, [r7, #11]
          break;
 800966e:	e03b      	b.n	80096e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	7c12      	ldrb	r2, [r2, #16]
 8009688:	f107 0108 	add.w	r1, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009692:	e029      	b.n	80096e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa4a 	bl	8009b30 <USBD_CtlError>
            err++;
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	3301      	adds	r3, #1
 80096a0:	72fb      	strb	r3, [r7, #11]
          break;
 80096a2:	e021      	b.n	80096e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c6:	e00f      	b.n	80096e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa30 	bl	8009b30 <USBD_CtlError>
            err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
          break;
 80096d6:	e007      	b.n	80096e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa28 	bl	8009b30 <USBD_CtlError>
          err++;
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	3301      	adds	r3, #1
 80096e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80096e6:	bf00      	nop
      }
      break;
 80096e8:	e037      	b.n	800975a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7c1b      	ldrb	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	f107 0208 	add.w	r2, r7, #8
 80096fe:	4610      	mov	r0, r2
 8009700:	4798      	blx	r3
 8009702:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009704:	e029      	b.n	800975a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fa11 	bl	8009b30 <USBD_CtlError>
        err++;
 800970e:	7afb      	ldrb	r3, [r7, #11]
 8009710:	3301      	adds	r3, #1
 8009712:	72fb      	strb	r3, [r7, #11]
      break;
 8009714:	e021      	b.n	800975a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	7c1b      	ldrb	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10d      	bne.n	800973a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	f107 0208 	add.w	r2, r7, #8
 800972a:	4610      	mov	r0, r2
 800972c:	4798      	blx	r3
 800972e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	2207      	movs	r2, #7
 8009736:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009738:	e00f      	b.n	800975a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f9f7 	bl	8009b30 <USBD_CtlError>
        err++;
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	3301      	adds	r3, #1
 8009746:	72fb      	strb	r3, [r7, #11]
      break;
 8009748:	e007      	b.n	800975a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f9ef 	bl	8009b30 <USBD_CtlError>
      err++;
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	3301      	adds	r3, #1
 8009756:	72fb      	strb	r3, [r7, #11]
      break;
 8009758:	bf00      	nop
  }

  if (err != 0U)
 800975a:	7afb      	ldrb	r3, [r7, #11]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d11e      	bne.n	800979e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	88db      	ldrh	r3, [r3, #6]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d016      	beq.n	8009796 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009768:	893b      	ldrh	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00e      	beq.n	800978c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	88da      	ldrh	r2, [r3, #6]
 8009772:	893b      	ldrh	r3, [r7, #8]
 8009774:	4293      	cmp	r3, r2
 8009776:	bf28      	it	cs
 8009778:	4613      	movcs	r3, r2
 800977a:	b29b      	uxth	r3, r3
 800977c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800977e:	893b      	ldrh	r3, [r7, #8]
 8009780:	461a      	mov	r2, r3
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa44 	bl	8009c12 <USBD_CtlSendData>
 800978a:	e009      	b.n	80097a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f9ce 	bl	8009b30 <USBD_CtlError>
 8009794:	e004      	b.n	80097a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa95 	bl	8009cc6 <USBD_CtlSendStatus>
 800979c:	e000      	b.n	80097a0 <USBD_GetDescriptor+0x320>
    return;
 800979e:	bf00      	nop
  }
}
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop

080097a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	889b      	ldrh	r3, [r3, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d131      	bne.n	800981e <USBD_SetAddress+0x76>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88db      	ldrh	r3, [r3, #6]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d12d      	bne.n	800981e <USBD_SetAddress+0x76>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	885b      	ldrh	r3, [r3, #2]
 80097c6:	2b7f      	cmp	r3, #127	; 0x7f
 80097c8:	d829      	bhi.n	800981e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	885b      	ldrh	r3, [r3, #2]
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d104      	bne.n	80097ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f9a3 	bl	8009b30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ea:	e01d      	b.n	8009828 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7bfa      	ldrb	r2, [r7, #15]
 80097f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fea6 	bl	800a54a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fa61 	bl	8009cc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009812:	e009      	b.n	8009828 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800981c:	e004      	b.n	8009828 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f985 	bl	8009b30 <USBD_CtlError>
  }
}
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	885b      	ldrh	r3, [r3, #2]
 8009842:	b2da      	uxtb	r2, r3
 8009844:	4b4c      	ldr	r3, [pc, #304]	; (8009978 <USBD_SetConfig+0x148>)
 8009846:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009848:	4b4b      	ldr	r3, [pc, #300]	; (8009978 <USBD_SetConfig+0x148>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d905      	bls.n	800985c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f96c 	bl	8009b30 <USBD_CtlError>
    return USBD_FAIL;
 8009858:	2303      	movs	r3, #3
 800985a:	e088      	b.n	800996e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b02      	cmp	r3, #2
 8009866:	d002      	beq.n	800986e <USBD_SetConfig+0x3e>
 8009868:	2b03      	cmp	r3, #3
 800986a:	d025      	beq.n	80098b8 <USBD_SetConfig+0x88>
 800986c:	e071      	b.n	8009952 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800986e:	4b42      	ldr	r3, [pc, #264]	; (8009978 <USBD_SetConfig+0x148>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d01c      	beq.n	80098b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009876:	4b40      	ldr	r3, [pc, #256]	; (8009978 <USBD_SetConfig+0x148>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009880:	4b3d      	ldr	r3, [pc, #244]	; (8009978 <USBD_SetConfig+0x148>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff f992 	bl	8008bb0 <USBD_SetClassConfig>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d004      	beq.n	80098a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f949 	bl	8009b30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800989e:	e065      	b.n	800996c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fa10 	bl	8009cc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2203      	movs	r2, #3
 80098aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098ae:	e05d      	b.n	800996c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fa08 	bl	8009cc6 <USBD_CtlSendStatus>
      break;
 80098b6:	e059      	b.n	800996c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098b8:	4b2f      	ldr	r3, [pc, #188]	; (8009978 <USBD_SetConfig+0x148>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d112      	bne.n	80098e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098c8:	4b2b      	ldr	r3, [pc, #172]	; (8009978 <USBD_SetConfig+0x148>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098d2:	4b29      	ldr	r3, [pc, #164]	; (8009978 <USBD_SetConfig+0x148>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff f985 	bl	8008be8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f9f1 	bl	8009cc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098e4:	e042      	b.n	800996c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80098e6:	4b24      	ldr	r3, [pc, #144]	; (8009978 <USBD_SetConfig+0x148>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d02a      	beq.n	800994a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff f973 	bl	8008be8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009902:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <USBD_SetConfig+0x148>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800990c:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <USBD_SetConfig+0x148>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff f94c 	bl	8008bb0 <USBD_SetClassConfig>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00f      	beq.n	8009942 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f903 	bl	8009b30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff f958 	bl	8008be8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009940:	e014      	b.n	800996c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9bf 	bl	8009cc6 <USBD_CtlSendStatus>
      break;
 8009948:	e010      	b.n	800996c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f9bb 	bl	8009cc6 <USBD_CtlSendStatus>
      break;
 8009950:	e00c      	b.n	800996c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f8eb 	bl	8009b30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <USBD_SetConfig+0x148>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff f941 	bl	8008be8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009966:	2303      	movs	r3, #3
 8009968:	73fb      	strb	r3, [r7, #15]
      break;
 800996a:	bf00      	nop
  }

  return ret;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200001fb 	.word	0x200001fb

0800997c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	88db      	ldrh	r3, [r3, #6]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d004      	beq.n	8009998 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f8cd 	bl	8009b30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009996:	e023      	b.n	80099e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	dc02      	bgt.n	80099aa <USBD_GetConfig+0x2e>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dc03      	bgt.n	80099b0 <USBD_GetConfig+0x34>
 80099a8:	e015      	b.n	80099d6 <USBD_GetConfig+0x5a>
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d00b      	beq.n	80099c6 <USBD_GetConfig+0x4a>
 80099ae:	e012      	b.n	80099d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3308      	adds	r3, #8
 80099ba:	2201      	movs	r2, #1
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f927 	bl	8009c12 <USBD_CtlSendData>
        break;
 80099c4:	e00c      	b.n	80099e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3304      	adds	r3, #4
 80099ca:	2201      	movs	r2, #1
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f91f 	bl	8009c12 <USBD_CtlSendData>
        break;
 80099d4:	e004      	b.n	80099e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f8a9 	bl	8009b30 <USBD_CtlError>
        break;
 80099de:	bf00      	nop
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d81e      	bhi.n	8009a3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	88db      	ldrh	r3, [r3, #6]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d004      	beq.n	8009a12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f890 	bl	8009b30 <USBD_CtlError>
        break;
 8009a10:	e01a      	b.n	8009a48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f043 0202 	orr.w	r2, r3, #2
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	330c      	adds	r3, #12
 8009a32:	2202      	movs	r2, #2
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f8eb 	bl	8009c12 <USBD_CtlSendData>
      break;
 8009a3c:	e004      	b.n	8009a48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f875 	bl	8009b30 <USBD_CtlError>
      break;
 8009a46:	bf00      	nop
  }
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	885b      	ldrh	r3, [r3, #2]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d106      	bne.n	8009a70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f92b 	bl	8009cc6 <USBD_CtlSendStatus>
  }
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d80b      	bhi.n	8009aa8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	885b      	ldrh	r3, [r3, #2]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d10c      	bne.n	8009ab2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f910 	bl	8009cc6 <USBD_CtlSendStatus>
      }
      break;
 8009aa6:	e004      	b.n	8009ab2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f840 	bl	8009b30 <USBD_CtlError>
      break;
 8009ab0:	e000      	b.n	8009ab4 <USBD_ClrFeature+0x3c>
      break;
 8009ab2:	bf00      	nop
  }
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	781a      	ldrb	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7ff fa92 	bl	8009010 <SWAPBYTE>
 8009aec:	4603      	mov	r3, r0
 8009aee:	461a      	mov	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3301      	adds	r3, #1
 8009af8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fa85 	bl	8009010 <SWAPBYTE>
 8009b06:	4603      	mov	r3, r0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3301      	adds	r3, #1
 8009b18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff fa78 	bl	8009010 <SWAPBYTE>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	80da      	strh	r2, [r3, #6]
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b3a:	2180      	movs	r1, #128	; 0x80
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fc99 	bl	800a474 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b42:	2100      	movs	r1, #0
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fc95 	bl	800a474 <USBD_LL_StallEP>
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d036      	beq.n	8009bd6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b6c:	6938      	ldr	r0, [r7, #16]
 8009b6e:	f000 f836 	bl	8009bde <USBD_GetLen>
 8009b72:	4603      	mov	r3, r0
 8009b74:	3301      	adds	r3, #1
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	4413      	add	r3, r2
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	7812      	ldrb	r2, [r2, #0]
 8009b8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	4413      	add	r3, r2
 8009b98:	2203      	movs	r2, #3
 8009b9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ba2:	e013      	b.n	8009bcc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	4413      	add	r3, r2
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	7812      	ldrb	r2, [r2, #0]
 8009bae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	613b      	str	r3, [r7, #16]
    idx++;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	701a      	strb	r2, [r3, #0]
    idx++;
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e7      	bne.n	8009ba4 <USBD_GetString+0x52>
 8009bd4:	e000      	b.n	8009bd8 <USBD_GetString+0x86>
    return;
 8009bd6:	bf00      	nop
  }
}
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009bee:	e005      	b.n	8009bfc <USBD_GetLen+0x1e>
  {
    len++;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1f5      	bne.n	8009bf0 <USBD_GetLen+0x12>
  }

  return len;
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2202      	movs	r2, #2
 8009c22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	2100      	movs	r1, #0
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fca5 	bl	800a588 <USBD_LL_Transmit>

  return USBD_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	2100      	movs	r1, #0
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fc94 	bl	800a588 <USBD_LL_Transmit>

  return USBD_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2203      	movs	r2, #3
 8009c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	2100      	movs	r1, #0
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 fc98 	bl	800a5ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fc87 	bl	800a5ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2204      	movs	r2, #4
 8009cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fc53 	bl	800a588 <USBD_LL_Transmit>

  return USBD_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2205      	movs	r2, #5
 8009cf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc61 	bl	800a5ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4912      	ldr	r1, [pc, #72]	; (8009d64 <MX_USB_Device_Init+0x50>)
 8009d1c:	4812      	ldr	r0, [pc, #72]	; (8009d68 <MX_USB_Device_Init+0x54>)
 8009d1e:	f7fe fed9 	bl	8008ad4 <USBD_Init>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009d28:	f7f7 f9f8 	bl	800111c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009d2c:	490f      	ldr	r1, [pc, #60]	; (8009d6c <MX_USB_Device_Init+0x58>)
 8009d2e:	480e      	ldr	r0, [pc, #56]	; (8009d68 <MX_USB_Device_Init+0x54>)
 8009d30:	f7fe ff00 	bl	8008b34 <USBD_RegisterClass>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009d3a:	f7f7 f9ef 	bl	800111c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009d3e:	490c      	ldr	r1, [pc, #48]	; (8009d70 <MX_USB_Device_Init+0x5c>)
 8009d40:	4809      	ldr	r0, [pc, #36]	; (8009d68 <MX_USB_Device_Init+0x54>)
 8009d42:	f7fe fe21 	bl	8008988 <USBD_CDC_RegisterInterface>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009d4c:	f7f7 f9e6 	bl	800111c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009d50:	4805      	ldr	r0, [pc, #20]	; (8009d68 <MX_USB_Device_Init+0x54>)
 8009d52:	f7fe ff16 	bl	8008b82 <USBD_Start>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009d5c:	f7f7 f9de 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009d60:	bf00      	nop
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	2000014c 	.word	0x2000014c
 8009d68:	20000718 	.word	0x20000718
 8009d6c:	20000034 	.word	0x20000034
 8009d70:	20000138 	.word	0x20000138

08009d74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4905      	ldr	r1, [pc, #20]	; (8009d90 <CDC_Init_FS+0x1c>)
 8009d7c:	4805      	ldr	r0, [pc, #20]	; (8009d94 <CDC_Init_FS+0x20>)
 8009d7e:	f7fe fe18 	bl	80089b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d82:	4905      	ldr	r1, [pc, #20]	; (8009d98 <CDC_Init_FS+0x24>)
 8009d84:	4803      	ldr	r0, [pc, #12]	; (8009d94 <CDC_Init_FS+0x20>)
 8009d86:	f7fe fe32 	bl	80089ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20000dd0 	.word	0x20000dd0
 8009d94:	20000718 	.word	0x20000718
 8009d98:	200009e8 	.word	0x200009e8

08009d9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009da0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	71fb      	strb	r3, [r7, #7]
 8009db8:	4613      	mov	r3, r2
 8009dba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	2b23      	cmp	r3, #35	; 0x23
 8009dc0:	d84a      	bhi.n	8009e58 <CDC_Control_FS+0xac>
 8009dc2:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <CDC_Control_FS+0x1c>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009e59 	.word	0x08009e59
 8009dcc:	08009e59 	.word	0x08009e59
 8009dd0:	08009e59 	.word	0x08009e59
 8009dd4:	08009e59 	.word	0x08009e59
 8009dd8:	08009e59 	.word	0x08009e59
 8009ddc:	08009e59 	.word	0x08009e59
 8009de0:	08009e59 	.word	0x08009e59
 8009de4:	08009e59 	.word	0x08009e59
 8009de8:	08009e59 	.word	0x08009e59
 8009dec:	08009e59 	.word	0x08009e59
 8009df0:	08009e59 	.word	0x08009e59
 8009df4:	08009e59 	.word	0x08009e59
 8009df8:	08009e59 	.word	0x08009e59
 8009dfc:	08009e59 	.word	0x08009e59
 8009e00:	08009e59 	.word	0x08009e59
 8009e04:	08009e59 	.word	0x08009e59
 8009e08:	08009e59 	.word	0x08009e59
 8009e0c:	08009e59 	.word	0x08009e59
 8009e10:	08009e59 	.word	0x08009e59
 8009e14:	08009e59 	.word	0x08009e59
 8009e18:	08009e59 	.word	0x08009e59
 8009e1c:	08009e59 	.word	0x08009e59
 8009e20:	08009e59 	.word	0x08009e59
 8009e24:	08009e59 	.word	0x08009e59
 8009e28:	08009e59 	.word	0x08009e59
 8009e2c:	08009e59 	.word	0x08009e59
 8009e30:	08009e59 	.word	0x08009e59
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e59 	.word	0x08009e59
 8009e3c:	08009e59 	.word	0x08009e59
 8009e40:	08009e59 	.word	0x08009e59
 8009e44:	08009e59 	.word	0x08009e59
 8009e48:	08009e59 	.word	0x08009e59
 8009e4c:	08009e59 	.word	0x08009e59
 8009e50:	08009e59 	.word	0x08009e59
 8009e54:	08009e59 	.word	0x08009e59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e58:	bf00      	nop
  }

  return (USBD_OK);
 8009e5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t* Len)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7f6 f9cf 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e7a:	6879      	ldr	r1, [r7, #4]
 8009e7c:	4805      	ldr	r0, [pc, #20]	; (8009e94 <CDC_Receive_FS+0x2c>)
 8009e7e:	f7fe fdb6 	bl	80089ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e82:	4804      	ldr	r0, [pc, #16]	; (8009e94 <CDC_Receive_FS+0x2c>)
 8009e84:	f7fe fdfc 	bl	8008a80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009e88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20000718 	.word	0x20000718

08009e98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <CDC_Transmit_FS+0x48>)
 8009eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e00b      	b.n	8009ed6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ebe:	887b      	ldrh	r3, [r7, #2]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	4806      	ldr	r0, [pc, #24]	; (8009ee0 <CDC_Transmit_FS+0x48>)
 8009ec6:	f7fe fd74 	bl	80089b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009eca:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <CDC_Transmit_FS+0x48>)
 8009ecc:	f7fe fda8 	bl	8008a20 <USBD_CDC_TransmitPacket>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000718 	.word	0x20000718

08009ee4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
	...

08009f08 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	6039      	str	r1, [r7, #0]
 8009f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2212      	movs	r2, #18
 8009f18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009f1a:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	2000016c 	.word	0x2000016c

08009f2c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	6039      	str	r1, [r7, #0]
 8009f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2204      	movs	r2, #4
 8009f3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f3e:	4b03      	ldr	r3, [pc, #12]	; (8009f4c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20000180 	.word	0x20000180

08009f50 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	6039      	str	r1, [r7, #0]
 8009f5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f5c:	79fb      	ldrb	r3, [r7, #7]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d105      	bne.n	8009f6e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	4907      	ldr	r1, [pc, #28]	; (8009f84 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009f66:	4808      	ldr	r0, [pc, #32]	; (8009f88 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009f68:	f7ff fdf3 	bl	8009b52 <USBD_GetString>
 8009f6c:	e004      	b.n	8009f78 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	4904      	ldr	r1, [pc, #16]	; (8009f84 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009f72:	4805      	ldr	r0, [pc, #20]	; (8009f88 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009f74:	f7ff fded 	bl	8009b52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f78:	4b02      	ldr	r3, [pc, #8]	; (8009f84 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	200011b8 	.word	0x200011b8
 8009f88:	0800a7c0 	.word	0x0800a7c0

08009f8c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	6039      	str	r1, [r7, #0]
 8009f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	4904      	ldr	r1, [pc, #16]	; (8009fac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009f9c:	4804      	ldr	r0, [pc, #16]	; (8009fb0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009f9e:	f7ff fdd8 	bl	8009b52 <USBD_GetString>
  return USBD_StrDesc;
 8009fa2:	4b02      	ldr	r3, [pc, #8]	; (8009fac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	200011b8 	.word	0x200011b8
 8009fb0:	0800a7d8 	.word	0x0800a7d8

08009fb4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6039      	str	r1, [r7, #0]
 8009fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	221a      	movs	r2, #26
 8009fc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fc6:	f000 f843 	bl	800a050 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009fca:	4b02      	ldr	r3, [pc, #8]	; (8009fd4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000184 	.word	0x20000184

08009fd8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	6039      	str	r1, [r7, #0]
 8009fe2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d105      	bne.n	8009ff6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	4907      	ldr	r1, [pc, #28]	; (800a00c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009fee:	4808      	ldr	r0, [pc, #32]	; (800a010 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009ff0:	f7ff fdaf 	bl	8009b52 <USBD_GetString>
 8009ff4:	e004      	b.n	800a000 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	4904      	ldr	r1, [pc, #16]	; (800a00c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009ffa:	4805      	ldr	r0, [pc, #20]	; (800a010 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009ffc:	f7ff fda9 	bl	8009b52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a000:	4b02      	ldr	r3, [pc, #8]	; (800a00c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	200011b8 	.word	0x200011b8
 800a010:	0800a7ec 	.word	0x0800a7ec

0800a014 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a020:	79fb      	ldrb	r3, [r7, #7]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d105      	bne.n	800a032 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	4907      	ldr	r1, [pc, #28]	; (800a048 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a02a:	4808      	ldr	r0, [pc, #32]	; (800a04c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a02c:	f7ff fd91 	bl	8009b52 <USBD_GetString>
 800a030:	e004      	b.n	800a03c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4904      	ldr	r1, [pc, #16]	; (800a048 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a036:	4805      	ldr	r0, [pc, #20]	; (800a04c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a038:	f7ff fd8b 	bl	8009b52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a03c:	4b02      	ldr	r3, [pc, #8]	; (800a048 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	200011b8 	.word	0x200011b8
 800a04c:	0800a7f8 	.word	0x0800a7f8

0800a050 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a056:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <Get_SerialNum+0x44>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a05c:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <Get_SerialNum+0x48>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a062:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <Get_SerialNum+0x4c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4413      	add	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d009      	beq.n	800a08a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a076:	2208      	movs	r2, #8
 800a078:	4909      	ldr	r1, [pc, #36]	; (800a0a0 <Get_SerialNum+0x50>)
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 f814 	bl	800a0a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a080:	2204      	movs	r2, #4
 800a082:	4908      	ldr	r1, [pc, #32]	; (800a0a4 <Get_SerialNum+0x54>)
 800a084:	68b8      	ldr	r0, [r7, #8]
 800a086:	f000 f80f 	bl	800a0a8 <IntToUnicode>
  }
}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	1fff7590 	.word	0x1fff7590
 800a098:	1fff7594 	.word	0x1fff7594
 800a09c:	1fff7598 	.word	0x1fff7598
 800a0a0:	20000186 	.word	0x20000186
 800a0a4:	20000196 	.word	0x20000196

0800a0a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]
 800a0be:	e027      	b.n	800a110 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	0f1b      	lsrs	r3, r3, #28
 800a0c4:	2b09      	cmp	r3, #9
 800a0c6:	d80b      	bhi.n	800a0e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	0f1b      	lsrs	r3, r3, #28
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	440b      	add	r3, r1
 800a0d8:	3230      	adds	r2, #48	; 0x30
 800a0da:	b2d2      	uxtb	r2, r2
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	e00a      	b.n	800a0f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	0f1b      	lsrs	r3, r3, #28
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	440b      	add	r3, r1
 800a0f0:	3237      	adds	r2, #55	; 0x37
 800a0f2:	b2d2      	uxtb	r2, r2
 800a0f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	3301      	adds	r3, #1
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	4413      	add	r3, r2
 800a106:	2200      	movs	r2, #0
 800a108:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	3301      	adds	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
 800a110:	7dfa      	ldrb	r2, [r7, #23]
 800a112:	79fb      	ldrb	r3, [r7, #7]
 800a114:	429a      	cmp	r2, r3
 800a116:	d3d3      	bcc.n	800a0c0 <IntToUnicode+0x18>
  }
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b094      	sub	sp, #80	; 0x50
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a130:	f107 030c 	add.w	r3, r7, #12
 800a134:	2244      	movs	r2, #68	; 0x44
 800a136:	2100      	movs	r1, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fb2d 	bl	800a798 <memset>
  if(pcdHandle->Instance==USB)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a15      	ldr	r2, [pc, #84]	; (800a198 <HAL_PCD_MspInit+0x70>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d123      	bne.n	800a190 <HAL_PCD_MspInit+0x68>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a14c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800a14e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a152:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a154:	f107 030c 	add.w	r3, r7, #12
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fa fa83 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a164:	f7f6 ffda 	bl	800111c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <HAL_PCD_MspInit+0x74>)
 800a16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16c:	4a0b      	ldr	r2, [pc, #44]	; (800a19c <HAL_PCD_MspInit+0x74>)
 800a16e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a172:	6593      	str	r3, [r2, #88]	; 0x58
 800a174:	4b09      	ldr	r3, [pc, #36]	; (800a19c <HAL_PCD_MspInit+0x74>)
 800a176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a17c:	60bb      	str	r3, [r7, #8]
 800a17e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	2014      	movs	r0, #20
 800a186:	f7f7 fc7c 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a18a:	2014      	movs	r0, #20
 800a18c:	f7f7 fc93 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a190:	bf00      	nop
 800a192:	3750      	adds	r7, #80	; 0x50
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	40005c00 	.word	0x40005c00
 800a19c:	40021000 	.word	0x40021000

0800a1a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f7fe fd2e 	bl	8008c18 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a1d6:	78fa      	ldrb	r2, [r7, #3]
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	440b      	add	r3, r1
 800a1e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	f7fe fd68 	bl	8008cc2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	460b      	mov	r3, r1
 800a204:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	440b      	add	r3, r1
 800a21a:	333c      	adds	r3, #60	; 0x3c
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	4619      	mov	r1, r3
 800a222:	f7fe fdb1 	bl	8008d88 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a226:	bf00      	nop
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fec5 	bl	8008fcc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a252:	2301      	movs	r3, #1
 800a254:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d001      	beq.n	800a262 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a25e:	f7f6 ff5d 	bl	800111c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a268:	7bfa      	ldrb	r2, [r7, #15]
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fe fe6f 	bl	8008f50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fe fe1b 	bl	8008eb4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a27e:	bf00      	nop
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fe6a 	bl	8008f70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2a4:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <HAL_PCD_SuspendCallback+0x30>)
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	4a03      	ldr	r2, [pc, #12]	; (800a2b8 <HAL_PCD_SuspendCallback+0x30>)
 800a2aa:	f043 0306 	orr.w	r3, r3, #6
 800a2ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	e000ed00 	.word	0xe000ed00

0800a2bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d007      	beq.n	800a2dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2cc:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <HAL_PCD_ResumeCallback+0x34>)
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <HAL_PCD_ResumeCallback+0x34>)
 800a2d2:	f023 0306 	bic.w	r3, r3, #6
 800a2d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a2d8:	f000 f9fa 	bl	800a6d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe fe5a 	bl	8008f9c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a2e8:	bf00      	nop
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	e000ed00 	.word	0xe000ed00

0800a2f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a2fc:	4a2b      	ldr	r2, [pc, #172]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a29      	ldr	r2, [pc, #164]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a308:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a30c:	4b27      	ldr	r3, [pc, #156]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a30e:	4a28      	ldr	r2, [pc, #160]	; (800a3b0 <USBD_LL_Init+0xbc>)
 800a310:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a312:	4b26      	ldr	r3, [pc, #152]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a314:	2208      	movs	r2, #8
 800a316:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a318:	4b24      	ldr	r3, [pc, #144]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a31a:	2202      	movs	r2, #2
 800a31c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a31e:	4b23      	ldr	r3, [pc, #140]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a320:	2202      	movs	r2, #2
 800a322:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a324:	4b21      	ldr	r3, [pc, #132]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a326:	2200      	movs	r2, #0
 800a328:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a32a:	4b20      	ldr	r3, [pc, #128]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a330:	4b1e      	ldr	r3, [pc, #120]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a332:	2200      	movs	r2, #0
 800a334:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a336:	4b1d      	ldr	r3, [pc, #116]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a338:	2200      	movs	r2, #0
 800a33a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a33c:	481b      	ldr	r0, [pc, #108]	; (800a3ac <USBD_LL_Init+0xb8>)
 800a33e:	f7f7 fead 	bl	800209c <HAL_PCD_Init>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a348:	f7f6 fee8 	bl	800111c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a352:	2318      	movs	r3, #24
 800a354:	2200      	movs	r2, #0
 800a356:	2100      	movs	r1, #0
 800a358:	f7f9 fb66 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a362:	2358      	movs	r3, #88	; 0x58
 800a364:	2200      	movs	r2, #0
 800a366:	2180      	movs	r1, #128	; 0x80
 800a368:	f7f9 fb5e 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a372:	23c0      	movs	r3, #192	; 0xc0
 800a374:	2200      	movs	r2, #0
 800a376:	2181      	movs	r1, #129	; 0x81
 800a378:	f7f9 fb56 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a382:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a386:	2200      	movs	r2, #0
 800a388:	2101      	movs	r1, #1
 800a38a:	f7f9 fb4d 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a394:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a398:	2200      	movs	r2, #0
 800a39a:	2182      	movs	r1, #130	; 0x82
 800a39c:	f7f9 fb44 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200013b8 	.word	0x200013b8
 800a3b0:	40005c00 	.word	0x40005c00

0800a3b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f7 ff4b 	bl	8002266 <HAL_PCD_Start>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f980 	bl	800a6dc <USBD_Get_USB_Status>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	4608      	mov	r0, r1
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	70fb      	strb	r3, [r7, #3]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70bb      	strb	r3, [r7, #2]
 800a400:	4613      	mov	r3, r2
 800a402:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a412:	78bb      	ldrb	r3, [r7, #2]
 800a414:	883a      	ldrh	r2, [r7, #0]
 800a416:	78f9      	ldrb	r1, [r7, #3]
 800a418:	f7f8 f893 	bl	8002542 <HAL_PCD_EP_Open>
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 f95a 	bl	800a6dc <USBD_Get_USB_Status>
 800a428:	4603      	mov	r3, r0
 800a42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7f8 f8da 	bl	800260e <HAL_PCD_EP_Close>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	4618      	mov	r0, r3
 800a462:	f000 f93b 	bl	800a6dc <USBD_Get_USB_Status>
 800a466:	4603      	mov	r3, r0
 800a468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f7f8 f99b 	bl	80027ce <HAL_PCD_EP_SetStall>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f91c 	bl	800a6dc <USBD_Get_USB_Status>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7f8 f9ce 	bl	8002872 <HAL_PCD_EP_ClrStall>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 f8fd 	bl	800a6dc <USBD_Get_USB_Status>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a502:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	da0c      	bge.n	800a526 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a512:	68f9      	ldr	r1, [r7, #12]
 800a514:	1c5a      	adds	r2, r3, #1
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	3302      	adds	r3, #2
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	e00b      	b.n	800a53e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a52c:	68f9      	ldr	r1, [r7, #12]
 800a52e:	4613      	mov	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	440b      	add	r3, r1
 800a538:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a53c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a564:	78fa      	ldrb	r2, [r7, #3]
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7f7 ffc5 	bl	80024f8 <HAL_PCD_SetAddress>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 f8b1 	bl	800a6dc <USBD_Get_USB_Status>
 800a57a:	4603      	mov	r3, r0
 800a57c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a57e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	460b      	mov	r3, r1
 800a596:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5a6:	7af9      	ldrb	r1, [r7, #11]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	f7f8 f8cc 	bl	8002748 <HAL_PCD_EP_Transmit>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f890 	bl	800a6dc <USBD_Get_USB_Status>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b086      	sub	sp, #24
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5e8:	7af9      	ldrb	r1, [r7, #11]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	f7f8 f856 	bl	800269e <HAL_PCD_EP_Receive>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 f86f 	bl	800a6dc <USBD_Get_USB_Status>
 800a5fe:	4603      	mov	r3, r0
 800a600:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a602:	7dbb      	ldrb	r3, [r7, #22]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	4611      	mov	r1, r2
 800a622:	4618      	mov	r0, r3
 800a624:	f7f8 f878 	bl	8002718 <HAL_PCD_EP_GetRxCount>
 800a628:	4603      	mov	r3, r0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <HAL_PCDEx_LPM_Callback+0x18>
 800a646:	2b01      	cmp	r3, #1
 800a648:	d013      	beq.n	800a672 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a64a:	e023      	b.n	800a694 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a654:	f000 f83c 	bl	800a6d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a658:	4b10      	ldr	r3, [pc, #64]	; (800a69c <HAL_PCDEx_LPM_Callback+0x68>)
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	4a0f      	ldr	r2, [pc, #60]	; (800a69c <HAL_PCDEx_LPM_Callback+0x68>)
 800a65e:	f023 0306 	bic.w	r3, r3, #6
 800a662:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fc96 	bl	8008f9c <USBD_LL_Resume>
    break;
 800a670:	e010      	b.n	800a694 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe fc79 	bl	8008f70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <HAL_PCDEx_LPM_Callback+0x68>)
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	4a04      	ldr	r2, [pc, #16]	; (800a69c <HAL_PCDEx_LPM_Callback+0x68>)
 800a68c:	f043 0306 	orr.w	r3, r3, #6
 800a690:	6113      	str	r3, [r2, #16]
    break;
 800a692:	bf00      	nop
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	e000ed00 	.word	0xe000ed00

0800a6a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6a8:	4b03      	ldr	r3, [pc, #12]	; (800a6b8 <USBD_static_malloc+0x18>)
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	200001fc 	.word	0x200001fc

0800a6bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]

}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a6d4:	f7f5 ff12 	bl	80004fc <SystemClock_Config>
}
 800a6d8:	bf00      	nop
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d817      	bhi.n	800a720 <USBD_Get_USB_Status+0x44>
 800a6f0:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <USBD_Get_USB_Status+0x1c>)
 800a6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f6:	bf00      	nop
 800a6f8:	0800a709 	.word	0x0800a709
 800a6fc:	0800a70f 	.word	0x0800a70f
 800a700:	0800a715 	.word	0x0800a715
 800a704:	0800a71b 	.word	0x0800a71b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
    break;
 800a70c:	e00b      	b.n	800a726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a70e:	2303      	movs	r3, #3
 800a710:	73fb      	strb	r3, [r7, #15]
    break;
 800a712:	e008      	b.n	800a726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a714:	2301      	movs	r3, #1
 800a716:	73fb      	strb	r3, [r7, #15]
    break;
 800a718:	e005      	b.n	800a726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a71a:	2303      	movs	r3, #3
 800a71c:	73fb      	strb	r3, [r7, #15]
    break;
 800a71e:	e002      	b.n	800a726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a720:	2303      	movs	r3, #3
 800a722:	73fb      	strb	r3, [r7, #15]
    break;
 800a724:	bf00      	nop
  }
  return usb_status;
 800a726:	7bfb      	ldrb	r3, [r7, #15]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <__libc_init_array>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	4d0d      	ldr	r5, [pc, #52]	; (800a76c <__libc_init_array+0x38>)
 800a738:	4c0d      	ldr	r4, [pc, #52]	; (800a770 <__libc_init_array+0x3c>)
 800a73a:	1b64      	subs	r4, r4, r5
 800a73c:	10a4      	asrs	r4, r4, #2
 800a73e:	2600      	movs	r6, #0
 800a740:	42a6      	cmp	r6, r4
 800a742:	d109      	bne.n	800a758 <__libc_init_array+0x24>
 800a744:	4d0b      	ldr	r5, [pc, #44]	; (800a774 <__libc_init_array+0x40>)
 800a746:	4c0c      	ldr	r4, [pc, #48]	; (800a778 <__libc_init_array+0x44>)
 800a748:	f000 f82e 	bl	800a7a8 <_init>
 800a74c:	1b64      	subs	r4, r4, r5
 800a74e:	10a4      	asrs	r4, r4, #2
 800a750:	2600      	movs	r6, #0
 800a752:	42a6      	cmp	r6, r4
 800a754:	d105      	bne.n	800a762 <__libc_init_array+0x2e>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75c:	4798      	blx	r3
 800a75e:	3601      	adds	r6, #1
 800a760:	e7ee      	b.n	800a740 <__libc_init_array+0xc>
 800a762:	f855 3b04 	ldr.w	r3, [r5], #4
 800a766:	4798      	blx	r3
 800a768:	3601      	adds	r6, #1
 800a76a:	e7f2      	b.n	800a752 <__libc_init_array+0x1e>
 800a76c:	0800a818 	.word	0x0800a818
 800a770:	0800a818 	.word	0x0800a818
 800a774:	0800a818 	.word	0x0800a818
 800a778:	0800a81c 	.word	0x0800a81c

0800a77c <memcpy>:
 800a77c:	440a      	add	r2, r1
 800a77e:	4291      	cmp	r1, r2
 800a780:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a784:	d100      	bne.n	800a788 <memcpy+0xc>
 800a786:	4770      	bx	lr
 800a788:	b510      	push	{r4, lr}
 800a78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a78e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a792:	4291      	cmp	r1, r2
 800a794:	d1f9      	bne.n	800a78a <memcpy+0xe>
 800a796:	bd10      	pop	{r4, pc}

0800a798 <memset>:
 800a798:	4402      	add	r2, r0
 800a79a:	4603      	mov	r3, r0
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d100      	bne.n	800a7a2 <memset+0xa>
 800a7a0:	4770      	bx	lr
 800a7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7a6:	e7f9      	b.n	800a79c <memset+0x4>

0800a7a8 <_init>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr

0800a7b4 <_fini>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	bf00      	nop
 800a7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ba:	bc08      	pop	{r3}
 800a7bc:	469e      	mov	lr, r3
 800a7be:	4770      	bx	lr
