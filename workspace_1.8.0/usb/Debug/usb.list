
usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800894c  0800894c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800894c  0800894c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800894c  0800894c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008950  08008950  00018950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  20000184  08008ad8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b0  08008ad8  000213b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be1a  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003877  00000000  00000000  0003bfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0003f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00040b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c6b  00000000  00000000  00041c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c51  00000000  00000000  000628cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6522  00000000  00000000  0007851c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ea3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dbc  00000000  00000000  0013ea94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080088d4 	.word	0x080088d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	080088d4 	.word	0x080088d4

08000218 <CDC_On_Receive>:
} Feedback;

Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0}; // (4)
volatile uint8_t isCommandReceived = 0; // (5)

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f008 fb3a 	bl	80088a8 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001a0 	.word	0x200001a0
 8000254:	200001aa 	.word	0x200001aa

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 f9fa 	bl	8000656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f825 	bl	80002b0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f8e5 	bl	8000434 <MX_GPIO_Init>
  MX_TIM2_Init();
 800026a:	f000 f86d 	bl	8000348 <MX_TIM2_Init>
  MX_USB_Device_Init();
 800026e:	f007 fde7 	bl	8007e40 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = { // (1)
 8000272:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <main+0x50>)
 8000274:	463b      	mov	r3, r7
 8000276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800027a:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (isCommandReceived == 1) { // (2)
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <main+0x54>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	2b01      	cmp	r3, #1
 8000286:	d1fa      	bne.n	800027e <main+0x26>
        isCommandReceived = 0;
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <main+0x54>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]

        feedback.speed1 = 2; // (4)
 800028e:	2302      	movs	r3, #2
 8000290:	803b      	strh	r3, [r7, #0]
        feedback.speed2 = 2;
 8000292:	2302      	movs	r3, #2
 8000294:	807b      	strh	r3, [r7, #2]
        feedback.speed3 = 2;
 8000296:	2302      	movs	r3, #2
 8000298:	80bb      	strh	r3, [r7, #4]

        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 800029a:	463b      	mov	r3, r7
 800029c:	2108      	movs	r1, #8
 800029e:	4618      	mov	r0, r3
 80002a0:	f007 fe90 	bl	8007fc4 <CDC_Transmit_FS>
      if (isCommandReceived == 1) { // (2)
 80002a4:	e7eb      	b.n	800027e <main+0x26>
 80002a6:	bf00      	nop
 80002a8:	080088ec 	.word	0x080088ec
 80002ac:	200001aa 	.word	0x200001aa

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b094      	sub	sp, #80	; 0x50
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2238      	movs	r2, #56	; 0x38
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f008 fb00 	bl	80088c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002d6:	f002 f9f5 	bl	80026c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	2340      	movs	r3, #64	; 0x40
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ec:	2302      	movs	r3, #2
 80002ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80002f4:	230c      	movs	r3, #12
 80002f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f8:	2302      	movs	r3, #2
 80002fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80002fc:	2304      	movs	r3, #4
 80002fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000300:	2302      	movs	r3, #2
 8000302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f002 fa8f 	bl	800282c <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000314:	f000 f8b2 	bl	800047c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	2301      	movs	r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f002 fd93 	bl	8002e5c <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800033c:	f000 f89e 	bl	800047c <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3750      	adds	r7, #80	; 0x50
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08e      	sub	sp, #56	; 0x38
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]
 8000376:	615a      	str	r2, [r3, #20]
 8000378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <MX_TIM2_Init+0xe8>)
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000382:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <MX_TIM2_Init+0xe8>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000388:	4b29      	ldr	r3, [pc, #164]	; (8000430 <MX_TIM2_Init+0xe8>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800038e:	4b28      	ldr	r3, [pc, #160]	; (8000430 <MX_TIM2_Init+0xe8>)
 8000390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000396:	4b26      	ldr	r3, [pc, #152]	; (8000430 <MX_TIM2_Init+0xe8>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039c:	4b24      	ldr	r3, [pc, #144]	; (8000430 <MX_TIM2_Init+0xe8>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003a2:	4823      	ldr	r0, [pc, #140]	; (8000430 <MX_TIM2_Init+0xe8>)
 80003a4:	f003 f92e 	bl	8003604 <HAL_TIM_Base_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003ae:	f000 f865 	bl	800047c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003bc:	4619      	mov	r1, r3
 80003be:	481c      	ldr	r0, [pc, #112]	; (8000430 <MX_TIM2_Init+0xe8>)
 80003c0:	f003 faec 	bl	800399c <HAL_TIM_ConfigClockSource>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80003ca:	f000 f857 	bl	800047c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003ce:	4818      	ldr	r0, [pc, #96]	; (8000430 <MX_TIM2_Init+0xe8>)
 80003d0:	f003 f96f 	bl	80036b2 <HAL_TIM_PWM_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003da:	f000 f84f 	bl	800047c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003de:	2300      	movs	r3, #0
 80003e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	4619      	mov	r1, r3
 80003ec:	4810      	ldr	r0, [pc, #64]	; (8000430 <MX_TIM2_Init+0xe8>)
 80003ee:	f003 fff1 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003f8:	f000 f840 	bl	800047c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003fc:	2360      	movs	r3, #96	; 0x60
 80003fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800040c:	463b      	mov	r3, r7
 800040e:	2204      	movs	r2, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <MX_TIM2_Init+0xe8>)
 8000414:	f003 f9ae 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800041e:	f000 f82d 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000422:	4803      	ldr	r0, [pc, #12]	; (8000430 <MX_TIM2_Init+0xe8>)
 8000424:	f000 f872 	bl	800050c <HAL_TIM_MspPostInit>

}
 8000428:	bf00      	nop
 800042a:	3738      	adds	r7, #56	; 0x38
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200003cc 	.word	0x200003cc

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_GPIO_Init+0x44>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <MX_GPIO_Init+0x44>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_GPIO_Init+0x44>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_GPIO_Init+0x44>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <MX_GPIO_Init+0x44>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_GPIO_Init+0x44>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x44>)
 8000490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <HAL_MspInit+0x44>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6613      	str	r3, [r2, #96]	; 0x60
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_MspInit+0x44>)
 800049c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <HAL_MspInit+0x44>)
 80004a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <HAL_MspInit+0x44>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	6593      	str	r3, [r2, #88]	; 0x58
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <HAL_MspInit+0x44>)
 80004b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004be:	f002 f9a5 	bl	800280c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004e0:	d10b      	bne.n	80004fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_TIM_Base_MspInit+0x38>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_TIM_Base_MspInit+0x38>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6593      	str	r3, [r2, #88]	; 0x58
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_TIM_Base_MspInit+0x38>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800052c:	d11b      	bne.n	8000566 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <HAL_TIM_MspPostInit+0x64>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <HAL_TIM_MspPostInit+0x64>)
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_TIM_MspPostInit+0x64>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000546:	2308      	movs	r3, #8
 8000548:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000556:	2301      	movs	r3, #1
 8000558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4619      	mov	r1, r3
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <HAL_TIM_MspPostInit+0x68>)
 8000562:	f000 f9f9 	bl	8000958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000566:	bf00      	nop
 8000568:	3720      	adds	r7, #32
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	48000400 	.word	0x48000400

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c4:	f000 f89a 	bl	80006fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <USB_LP_IRQHandler+0x10>)
 80005d2:	f000 fc4a 	bl	8000e6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200010bc 	.word	0x200010bc

080005e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SystemInit+0x20>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <SystemInit+0x20>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000606:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490e      	ldr	r1, [pc, #56]	; (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0b      	ldr	r4, [pc, #44]	; (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062e:	f7ff ffd7 	bl	80005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000632:	f008 f915 	bl	8008860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000636:	f7ff fe0f 	bl	8000258 <main>

0800063a <LoopForever>:

LoopForever:
    b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   r0, =_estack
 800063c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000648:	08008954 	.word	0x08008954
  ldr r2, =_sbss
 800064c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000650:	200013b0 	.word	0x200013b0

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>

08000656 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f939 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000666:	200f      	movs	r0, #15
 8000668:	f000 f80e 	bl	8000688 <HAL_InitTick>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	e001      	b.n	800067c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000678:	f7ff ff06 	bl	8000488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800067c:	79fb      	ldrb	r3, [r7, #7]

}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_InitTick+0x68>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d022      	beq.n	80006e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_InitTick+0x6c>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <HAL_InitTick+0x68>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f944 	bl	800093e <HAL_SYSTICK_Config>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10f      	bne.n	80006dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	d809      	bhi.n	80006d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c2:	2200      	movs	r2, #0
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006ca:	f000 f910 	bl	80008ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_InitTick+0x70>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	e007      	b.n	80006e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e004      	b.n	80006e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	e001      	b.n	80006e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x1c>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_IncTick+0x20>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4413      	add	r3, r2
 800070a:	4a03      	ldr	r2, [pc, #12]	; (8000718 <HAL_IncTick+0x1c>)
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	20000418 	.word	0x20000418
 800071c:	20000008 	.word	0x20000008

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000418 	.word	0x20000418

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db0b      	blt.n	80007c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <__NVIC_EnableIRQ+0x38>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a4:	d301      	bcc.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00f      	b.n	80008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <SysTick_Config+0x40>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	210f      	movs	r1, #15
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b8:	f7ff ff8e 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <SysTick_Config+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SysTick_Config+0x40>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff29 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff40 	bl	8000780 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff90 	bl	800082c <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5f 	bl	80007d8 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff33 	bl	800079c <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffa4 	bl	8000894 <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000966:	e15a      	b.n	8000c1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 814c 	beq.w	8000c18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d005      	beq.n	8000998 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000994:	2b02      	cmp	r3, #2
 8000996:	d130      	bne.n	80009fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	f003 0201 	and.w	r2, r3, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d017      	beq.n	8000a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	2203      	movs	r2, #3
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d123      	bne.n	8000a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	08da      	lsrs	r2, r3, #3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3208      	adds	r2, #8
 8000a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	220f      	movs	r2, #15
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	691a      	ldr	r2, [r3, #16]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	08da      	lsrs	r2, r3, #3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3208      	adds	r2, #8
 8000a84:	6939      	ldr	r1, [r7, #16]
 8000a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0203 	and.w	r2, r3, #3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80a6 	beq.w	8000c18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000acc:	4b5b      	ldr	r3, [pc, #364]	; (8000c3c <HAL_GPIO_Init+0x2e4>)
 8000ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad0:	4a5a      	ldr	r2, [pc, #360]	; (8000c3c <HAL_GPIO_Init+0x2e4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad8:	4b58      	ldr	r3, [pc, #352]	; (8000c3c <HAL_GPIO_Init+0x2e4>)
 8000ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ae4:	4a56      	ldr	r2, [pc, #344]	; (8000c40 <HAL_GPIO_Init+0x2e8>)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	220f      	movs	r2, #15
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b0e:	d01f      	beq.n	8000b50 <HAL_GPIO_Init+0x1f8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4c      	ldr	r2, [pc, #304]	; (8000c44 <HAL_GPIO_Init+0x2ec>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d019      	beq.n	8000b4c <HAL_GPIO_Init+0x1f4>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4b      	ldr	r2, [pc, #300]	; (8000c48 <HAL_GPIO_Init+0x2f0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d013      	beq.n	8000b48 <HAL_GPIO_Init+0x1f0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4a      	ldr	r2, [pc, #296]	; (8000c4c <HAL_GPIO_Init+0x2f4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a49      	ldr	r2, [pc, #292]	; (8000c50 <HAL_GPIO_Init+0x2f8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a48      	ldr	r2, [pc, #288]	; (8000c54 <HAL_GPIO_Init+0x2fc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e00a      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	e008      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b40:	2304      	movs	r3, #4
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b44:	2303      	movs	r3, #3
 8000b46:	e004      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b50:	2300      	movs	r3, #0
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	f002 0203 	and.w	r2, r2, #3
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b62:	4937      	ldr	r1, [pc, #220]	; (8000c40 <HAL_GPIO_Init+0x2e8>)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3302      	adds	r3, #2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b70:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b94:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bbe:	4a26      	ldr	r2, [pc, #152]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_GPIO_Init+0x300>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa22 f303 	lsr.w	r3, r2, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f47f ae9d 	bne.w	8000968 <HAL_GPIO_Init+0x10>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48000c00 	.word	0x48000c00
 8000c50:	48001000 	.word	0x48001000
 8000c54:	48001400 	.word	0x48001400
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	b08b      	sub	sp, #44	; 0x2c
 8000c60:	af06      	add	r7, sp, #24
 8000c62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e0d7      	b.n	8000e1e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d106      	bne.n	8000c88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f007 fae6 	bl	8008254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fc36 	bl	8004506 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e04c      	b.n	8000d3a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	b298      	uxth	r0, r3
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3336      	adds	r3, #54	; 0x36
 8000cde:	4602      	mov	r2, r0
 8000ce0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	3338      	adds	r3, #56	; 0x38
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d0c:	7bfa      	ldrb	r2, [r7, #15]
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	333c      	adds	r3, #60	; 0x3c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3340      	adds	r3, #64	; 0x40
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	3301      	adds	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	7bfa      	ldrb	r2, [r7, #15]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d3ad      	bcc.n	8000ca0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e044      	b.n	8000dd4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d3b5      	bcc.n	8000d4a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	687e      	ldr	r6, [r7, #4]
 8000de6:	466d      	mov	r5, sp
 8000de8:	f106 0410 	add.w	r4, r6, #16
 8000dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df0:	6823      	ldr	r3, [r4, #0]
 8000df2:	602b      	str	r3, [r5, #0]
 8000df4:	1d33      	adds	r3, r6, #4
 8000df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f003 fb9f 	bl	800453c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f001 fc29 	bl	800266e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d101      	bne.n	8000e3c <HAL_PCD_Start+0x16>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e012      	b.n	8000e62 <HAL_PCD_Start+0x3c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fb45 	bl	80044d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 fafa 	bl	800644c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 faff 	bl	800647a <USB_ReadInterrupts>
 8000e7c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 fb26 	bl	80014da <PCD_EP_ISR_Handler>

    return;
 8000e8e:	e110      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d013      	beq.n	8000ec2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eac:	b292      	uxth	r2, r2
 8000eae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f007 fa5f 	bl	8008376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f8fc 	bl	80010b8 <HAL_PCD_SetAddress>

    return;
 8000ec0:	e0f7      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00c      	beq.n	8000ee6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000ee4:	e0e5      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00c      	beq.n	8000f0a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f02:	b292      	uxth	r2, r2
 8000f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f08:	e0d3      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d034      	beq.n	8000f7e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0204 	bic.w	r2, r2, #4
 8000f26:	b292      	uxth	r2, r2
 8000f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0208 	bic.w	r2, r2, #8
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d107      	bne.n	8000f5e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f56:	2100      	movs	r1, #0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f007 fc01 	bl	8008760 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f007 fa42 	bl	80083e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f76:	b292      	uxth	r2, r2
 8000f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f7c:	e099      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d027      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0208 	orr.w	r2, r2, #8
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0204 	orr.w	r2, r2, #4
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f007 f9ef 	bl	80083b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000fd6:	e06c      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d040      	beq.n	8001064 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d12b      	bne.n	800105c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800100c:	b29a      	uxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0204 	orr.w	r2, r2, #4
 8001016:	b292      	uxth	r2, r2
 8001018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001024:	b29a      	uxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0208 	orr.w	r2, r2, #8
 800102e:	b292      	uxth	r2, r2
 8001030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001044:	b29b      	uxth	r3, r3
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001052:	2101      	movs	r1, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f007 fb83 	bl	8008760 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800105a:	e02a      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f007 f9a9 	bl	80083b4 <HAL_PCD_SuspendCallback>
    return;
 8001062:	e026      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00f      	beq.n	800108e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001076:	b29a      	uxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001080:	b292      	uxth	r2, r2
 8001082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f007 f967 	bl	800835a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800108c:	e011      	b.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010aa:	b292      	uxth	r2, r2
 80010ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010b0:	bf00      	nop
  }
}
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_PCD_SetAddress+0x1a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e013      	b.n	80010fa <HAL_PCD_SetAddress+0x42>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 f99a 	bl	8006424 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	4608      	mov	r0, r1
 800110c:	4611      	mov	r1, r2
 800110e:	461a      	mov	r2, r3
 8001110:	4603      	mov	r3, r0
 8001112:	70fb      	strb	r3, [r7, #3]
 8001114:	460b      	mov	r3, r1
 8001116:	803b      	strh	r3, [r7, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da0e      	bge.n	8001146 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2201      	movs	r2, #1
 8001142:	705a      	strb	r2, [r3, #1]
 8001144:	e00e      	b.n	8001164 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	f003 0207 	and.w	r2, r3, #7
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001170:	883a      	ldrh	r2, [r7, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	78ba      	ldrb	r2, [r7, #2]
 800117a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	785b      	ldrb	r3, [r3, #1]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800118e:	78bb      	ldrb	r3, [r7, #2]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d102      	bne.n	800119a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_PCD_EP_Open+0xa6>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e00e      	b.n	80011c6 <HAL_PCD_EP_Open+0xc4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 f9e2 	bl	8004580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80011c4:	7afb      	ldrb	r3, [r7, #11]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da0e      	bge.n	8001200 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	705a      	strb	r2, [r3, #1]
 80011fe:	e00e      	b.n	800121e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	f003 0207 	and.w	r2, r3, #7
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	b2da      	uxtb	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_PCD_EP_Close+0x6a>
 8001234:	2302      	movs	r3, #2
 8001236:	e00e      	b.n	8001256 <HAL_PCD_EP_Close+0x88>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68f9      	ldr	r1, [r7, #12]
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fd2e 	bl	8004ca8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	460b      	mov	r3, r1
 800126c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	f003 0207 	and.w	r2, r3, #7
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2200      	movs	r2, #0
 800129c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6979      	ldr	r1, [r7, #20]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fee1 	bl	8005082 <USB_EPStartXfer>
 80012c0:	e005      	b.n	80012ce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6979      	ldr	r1, [r7, #20]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 feda 	bl	8005082 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f003 0207 	and.w	r2, r3, #7
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	460b      	mov	r3, r1
 8001316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001318:	7afb      	ldrb	r3, [r7, #11]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	b2da      	uxtb	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fe86 	bl	8005082 <USB_EPStartXfer>
 8001376:	e005      	b.n	8001384 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6979      	ldr	r1, [r7, #20]
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fe7f 	bl	8005082 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	f003 0207 	and.w	r2, r3, #7
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d901      	bls.n	80013ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e03e      	b.n	800142a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da0e      	bge.n	80013d2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2201      	movs	r2, #1
 80013ce:	705a      	strb	r2, [r3, #1]
 80013d0:	e00c      	b.n	80013ec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013d2:	78fa      	ldrb	r2, [r7, #3]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_PCD_EP_SetStall+0x7e>
 8001408:	2302      	movs	r3, #2
 800140a:	e00e      	b.n	800142a <HAL_PCD_EP_SetStall+0x9c>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68f9      	ldr	r1, [r7, #12]
 800141a:	4618      	mov	r0, r3
 800141c:	f004 ff03 	bl	8006226 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	f003 020f 	and.w	r2, r3, #15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	d901      	bls.n	8001450 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e040      	b.n	80014d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001454:	2b00      	cmp	r3, #0
 8001456:	da0e      	bge.n	8001476 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	705a      	strb	r2, [r3, #1]
 8001474:	e00e      	b.n	8001494 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f003 0207 	and.w	r2, r3, #7
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_PCD_EP_ClrStall+0x82>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e00e      	b.n	80014d2 <HAL_PCD_EP_ClrStall+0xa0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 ff00 	bl	80062c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b096      	sub	sp, #88	; 0x58
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014e2:	e39c      	b.n	8001c1e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80014fe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 815e 	bne.w	80017c4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001508:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b00      	cmp	r3, #0
 8001512:	d150      	bne.n	80015b6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001534:	b29b      	uxth	r3, r3
 8001536:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3328      	adds	r3, #40	; 0x28
 800153c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001546:	b29b      	uxth	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4413      	add	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	4413      	add	r3, r2
 8001558:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001564:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	441a      	add	r2, r3
 8001570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001572:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f006 fed5 	bl	8008326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 834a 	beq.w	8001c1e <PCD_EP_ISR_Handler+0x744>
 800158a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 8345 	bne.w	8001c1e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b292      	uxth	r2, r2
 80015a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015b4:	e333      	b.n	8001c1e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80015cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d032      	beq.n	800163a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015dc:	b29b      	uxth	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001608:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800160a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800160e:	b29b      	uxth	r3, r3
 8001610:	f004 ff85 	bl	800651e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29a      	uxth	r2, r3
 800161c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001620:	4013      	ands	r3, r2
 8001622:	823b      	strh	r3, [r7, #16]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	8a3a      	ldrh	r2, [r7, #16]
 800162a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800162e:	b292      	uxth	r2, r2
 8001630:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f006 fe4a 	bl	80082cc <HAL_PCD_SetupStageCallback>
 8001638:	e2f1      	b.n	8001c1e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800163a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800163e:	2b00      	cmp	r3, #0
 8001640:	f280 82ed 	bge.w	8001c1e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	b29a      	uxth	r2, r3
 800164c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001650:	4013      	ands	r3, r2
 8001652:	83fb      	strh	r3, [r7, #30]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	8bfa      	ldrh	r2, [r7, #30]
 800165a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165e:	b292      	uxth	r2, r2
 8001660:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	4413      	add	r3, r2
 800167c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001688:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800168a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d019      	beq.n	80016c6 <PCD_EP_ISR_Handler+0x1ec>
 8001692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a0:	6959      	ldr	r1, [r3, #20]
 80016a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	f004 ff37 	bl	800651e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	441a      	add	r2, r3
 80016ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016bc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f006 fe15 	bl	80082f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 82a3 	bne.w	8001c1e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4413      	add	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b3e      	cmp	r3, #62	; 0x3e
 80016fe:	d918      	bls.n	8001732 <PCD_EP_ISR_Handler+0x258>
 8001700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	095b      	lsrs	r3, r3, #5
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
 8001708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <PCD_EP_ISR_Handler+0x240>
 8001714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001716:	3b01      	subs	r3, #1
 8001718:	647b      	str	r3, [r7, #68]	; 0x44
 800171a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800171c:	b29b      	uxth	r3, r3
 800171e:	029b      	lsls	r3, r3, #10
 8001720:	b29b      	uxth	r3, r3
 8001722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800172a:	b29a      	uxth	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	e029      	b.n	8001786 <PCD_EP_ISR_Handler+0x2ac>
 8001732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d112      	bne.n	8001760 <PCD_EP_ISR_Handler+0x286>
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001744:	b29a      	uxth	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	801a      	strh	r2, [r3, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001758:	b29a      	uxth	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	e012      	b.n	8001786 <PCD_EP_ISR_Handler+0x2ac>
 8001760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	647b      	str	r3, [r7, #68]	; 0x44
 8001768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <PCD_EP_ISR_Handler+0x2a0>
 8001774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001776:	3301      	adds	r3, #1
 8001778:	647b      	str	r3, [r7, #68]	; 0x44
 800177a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800177c:	b29b      	uxth	r3, r3
 800177e:	029b      	lsls	r3, r3, #10
 8001780:	b29a      	uxth	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001796:	827b      	strh	r3, [r7, #18]
 8001798:	8a7b      	ldrh	r3, [r7, #18]
 800179a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800179e:	827b      	strh	r3, [r7, #18]
 80017a0:	8a7b      	ldrh	r3, [r7, #18]
 80017a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017a6:	827b      	strh	r3, [r7, #18]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	8a7b      	ldrh	r3, [r7, #18]
 80017ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017be:	b29b      	uxth	r3, r3
 80017c0:	8013      	strh	r3, [r2, #0]
 80017c2:	e22c      	b.n	8001c1e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017d8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f280 80f6 	bge.w	80019ce <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017f8:	4013      	ands	r3, r2
 80017fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001810:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001814:	b292      	uxth	r2, r2
 8001816:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001818:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800182e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001830:	7b1b      	ldrb	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d123      	bne.n	800187e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	4413      	add	r3, r2
 8001850:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800185a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800185e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 808e 	beq.w	8001984 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800186e:	6959      	ldr	r1, [r3, #20]
 8001870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001872:	88da      	ldrh	r2, [r3, #6]
 8001874:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001878:	f004 fe51 	bl	800651e <USB_ReadPMA>
 800187c:	e082      	b.n	8001984 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800187e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001880:	78db      	ldrb	r3, [r3, #3]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d10a      	bne.n	800189c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001886:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800188a:	461a      	mov	r2, r3
 800188c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f9d3 	bl	8001c3a <HAL_PCD_EP_DB_Receive>
 8001894:	4603      	mov	r3, r0
 8001896:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800189a:	e073      	b.n	8001984 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	441a      	add	r2, r3
 80018c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018dc:	b29b      	uxth	r3, r3
 80018de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d022      	beq.n	8001940 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4413      	add	r3, r2
 8001914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800191e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001922:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02c      	beq.n	8001984 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001930:	6959      	ldr	r1, [r3, #20]
 8001932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001934:	891a      	ldrh	r2, [r3, #8]
 8001936:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800193a:	f004 fdf0 	bl	800651e <USB_ReadPMA>
 800193e:	e021      	b.n	8001984 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001948:	b29b      	uxth	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4413      	add	r3, r2
 800195a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001964:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001968:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001976:	6959      	ldr	r1, [r3, #20]
 8001978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800197a:	895a      	ldrh	r2, [r3, #10]
 800197c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001980:	f004 fdcd 	bl	800651e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800198c:	441a      	add	r2, r3
 800198e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001990:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800199a:	441a      	add	r2, r3
 800199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <PCD_EP_ISR_Handler+0x4da>
 80019a8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80019ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d206      	bcs.n	80019c2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f006 fc98 	bl	80082f0 <HAL_PCD_DataOutStageCallback>
 80019c0:	e005      	b.n	80019ce <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fb5a 	bl	8005082 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8121 	beq.w	8001c1e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80019dc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	441a      	add	r2, r3
 8001a1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2e:	78db      	ldrb	r3, [r3, #3]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	f000 80a2 	beq.w	8001b7a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3e:	7b1b      	ldrb	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8093 	beq.w	8001b6c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d046      	beq.n	8001ae0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d126      	bne.n	8001aa8 <PCD_EP_ISR_Handler+0x5ce>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	4413      	add	r3, r2
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	00da      	lsls	r2, r3, #3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	e061      	b.n	8001b6c <PCD_EP_ISR_Handler+0x692>
 8001aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d15d      	bne.n	8001b6c <PCD_EP_ISR_Handler+0x692>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	4413      	add	r3, r2
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	00da      	lsls	r2, r3, #3
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	e045      	b.n	8001b6c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d126      	bne.n	8001b3c <PCD_EP_ISR_Handler+0x662>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	4413      	add	r3, r2
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
 8001b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	00da      	lsls	r2, r3, #3
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	4413      	add	r3, r2
 8001b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	e017      	b.n	8001b6c <PCD_EP_ISR_Handler+0x692>
 8001b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d113      	bne.n	8001b6c <PCD_EP_ISR_Handler+0x692>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b52:	4413      	add	r3, r2
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	00da      	lsls	r2, r3, #3
 8001b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5e:	4413      	add	r3, r2
 8001b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f006 fbd7 	bl	8008326 <HAL_PCD_DataInStageCallback>
 8001b78:	e051      	b.n	8001c1e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d144      	bne.n	8001c10 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001baa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d907      	bls.n	8001bca <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bc2:	1ad2      	subs	r2, r2, r3
 8001bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	e002      	b.n	8001bd0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f006 fba1 	bl	8008326 <HAL_PCD_DataInStageCallback>
 8001be4:	e01b      	b.n	8001c1e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bee:	441a      	add	r2, r3
 8001bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bfc:	441a      	add	r2, r3
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c00:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fa3a 	bl	8005082 <USB_EPStartXfer>
 8001c0e:	e006      	b.n	8001c1e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c14:	461a      	mov	r2, r3
 8001c16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f917 	bl	8001e4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f6ff ac5a 	blt.w	80014e4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3758      	adds	r7, #88	; 0x58
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b088      	sub	sp, #32
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	4613      	mov	r3, r2
 8001c46:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d07c      	beq.n	8001d4c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	8b7b      	ldrh	r3, [r7, #26]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d306      	bcc.n	8001c90 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	8b7b      	ldrh	r3, [r7, #26]
 8001c88:	1ad2      	subs	r2, r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	619a      	str	r2, [r3, #24]
 8001c8e:	e002      	b.n	8001c96 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d123      	bne.n	8001ce6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb8:	833b      	strh	r3, [r7, #24]
 8001cba:	8b3b      	ldrh	r3, [r7, #24]
 8001cbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cc0:	833b      	strh	r3, [r7, #24]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	441a      	add	r2, r3
 8001cd0:	8b3b      	ldrh	r3, [r7, #24]
 8001cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01f      	beq.n	8001d30 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0a:	82fb      	strh	r3, [r7, #22]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	8afb      	ldrh	r3, [r7, #22]
 8001d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d30:	8b7b      	ldrh	r3, [r7, #26]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8085 	beq.w	8001e42 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	6959      	ldr	r1, [r3, #20]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	891a      	ldrh	r2, [r3, #8]
 8001d44:	8b7b      	ldrh	r3, [r7, #26]
 8001d46:	f004 fbea 	bl	800651e <USB_ReadPMA>
 8001d4a:	e07a      	b.n	8001e42 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	8b7b      	ldrh	r3, [r7, #26]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d306      	bcc.n	8001d8a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	8b7b      	ldrh	r3, [r7, #26]
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	e002      	b.n	8001d90 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d123      	bne.n	8001de0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db2:	83fb      	strh	r3, [r7, #30]
 8001db4:	8bfb      	ldrh	r3, [r7, #30]
 8001db6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dba:	83fb      	strh	r3, [r7, #30]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	441a      	add	r2, r3
 8001dca:	8bfb      	ldrh	r3, [r7, #30]
 8001dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d11f      	bne.n	8001e2a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e04:	83bb      	strh	r3, [r7, #28]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e2a:	8b7b      	ldrh	r3, [r7, #26]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	6959      	ldr	r1, [r3, #20]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	895a      	ldrh	r2, [r3, #10]
 8001e3c:	8b7b      	ldrh	r3, [r7, #26]
 8001e3e:	f004 fb6e 	bl	800651e <USB_ReadPMA>
    }
  }

  return count;
 8001e42:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0a2      	sub	sp, #136	; 0x88
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 81c5 	beq.w	80021f0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d907      	bls.n	8001eaa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ea2:	1ad2      	subs	r2, r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	619a      	str	r2, [r3, #24]
 8001ea8:	e002      	b.n	8001eb0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 80b9 	bne.w	800202c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d126      	bne.n	8001f10 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	4413      	add	r3, r2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	00da      	lsls	r2, r3, #3
 8001ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	801a      	strh	r2, [r3, #0]
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	e01a      	b.n	8001f46 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d116      	bne.n	8001f46 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2c:	4413      	add	r3, r2
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	00da      	lsls	r2, r3, #3
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	4413      	add	r3, r2
 8001f3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	2200      	movs	r2, #0
 8001f44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d126      	bne.n	8001fa2 <HAL_PCD_EP_DB_Transmit+0x156>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4413      	add	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	00da      	lsls	r2, r3, #3
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4413      	add	r3, r2
 8001f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	e017      	b.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d113      	bne.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	4413      	add	r3, r2
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	00da      	lsls	r2, r3, #3
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f006 f9a4 	bl	8008326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 82d2 	beq.w	800258e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002004:	827b      	strh	r3, [r7, #18]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	441a      	add	r2, r3
 8002014:	8a7b      	ldrh	r3, [r7, #18]
 8002016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800201e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002026:	b29b      	uxth	r3, r3
 8002028:	8013      	strh	r3, [r2, #0]
 800202a:	e2b0      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d021      	beq.n	800207a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002050:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	441a      	add	r2, r3
 8002062:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800206a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800206e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002076:	b29b      	uxth	r3, r3
 8002078:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002080:	2b01      	cmp	r3, #1
 8002082:	f040 8284 	bne.w	800258e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800208e:	441a      	add	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800209c:	441a      	add	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d309      	bcc.n	80020c2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	621a      	str	r2, [r3, #32]
 80020c0:	e015      	b.n	80020ee <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80020ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020d8:	e009      	b.n	80020ee <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d155      	bne.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x356>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	4413      	add	r3, r2
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00da      	lsls	r2, r3, #3
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002116:	4413      	add	r3, r2
 8002118:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
 800211e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002120:	2b3e      	cmp	r3, #62	; 0x3e
 8002122:	d916      	bls.n	8002152 <HAL_PCD_EP_DB_Transmit+0x306>
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	64bb      	str	r3, [r7, #72]	; 0x48
 800212a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002136:	3b01      	subs	r3, #1
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
 800213a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800213c:	b29b      	uxth	r3, r3
 800213e:	029b      	lsls	r3, r3, #10
 8002140:	b29b      	uxth	r3, r3
 8002142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800214a:	b29a      	uxth	r2, r3
 800214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214e:	801a      	strh	r2, [r3, #0]
 8002150:	e043      	b.n	80021da <HAL_PCD_EP_DB_Transmit+0x38e>
 8002152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002154:	2b00      	cmp	r3, #0
 8002156:	d112      	bne.n	800217e <HAL_PCD_EP_DB_Transmit+0x332>
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002162:	b29a      	uxth	r2, r3
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002176:	b29a      	uxth	r2, r3
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	e02d      	b.n	80021da <HAL_PCD_EP_DB_Transmit+0x38e>
 800217e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
 8002184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_PCD_EP_DB_Transmit+0x348>
 800218e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002190:	3301      	adds	r3, #1
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
 8002194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002196:	b29b      	uxth	r3, r3
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	b29a      	uxth	r2, r3
 800219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219e:	801a      	strh	r2, [r3, #0]
 80021a0:	e01b      	b.n	80021da <HAL_PCD_EP_DB_Transmit+0x38e>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d117      	bne.n	80021da <HAL_PCD_EP_DB_Transmit+0x38e>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021be:	4413      	add	r3, r2
 80021c0:	643b      	str	r3, [r7, #64]	; 0x40
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	00da      	lsls	r2, r3, #3
 80021c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ca:	4413      	add	r3, r2
 80021cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6959      	ldr	r1, [r3, #20]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	891a      	ldrh	r2, [r3, #8]
 80021e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f004 f956 	bl	800649a <USB_WritePMA>
 80021ee:	e1ce      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	4413      	add	r3, r2
 800220a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002214:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002220:	429a      	cmp	r2, r3
 8002222:	d307      	bcc.n	8002234 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	619a      	str	r2, [r3, #24]
 8002232:	e002      	b.n	800223a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 80c4 	bne.w	80023cc <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d126      	bne.n	800229a <HAL_PCD_EP_DB_Transmit+0x44e>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	66bb      	str	r3, [r7, #104]	; 0x68
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002260:	4413      	add	r3, r2
 8002262:	66bb      	str	r3, [r7, #104]	; 0x68
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	00da      	lsls	r2, r3, #3
 800226a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800226c:	4413      	add	r3, r2
 800226e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002272:	667b      	str	r3, [r7, #100]	; 0x64
 8002274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800227e:	b29a      	uxth	r2, r3
 8002280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002292:	b29a      	uxth	r2, r3
 8002294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002296:	801a      	strh	r2, [r3, #0]
 8002298:	e01a      	b.n	80022d0 <HAL_PCD_EP_DB_Transmit+0x484>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d116      	bne.n	80022d0 <HAL_PCD_EP_DB_Transmit+0x484>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	673b      	str	r3, [r7, #112]	; 0x70
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b6:	4413      	add	r3, r2
 80022b8:	673b      	str	r3, [r7, #112]	; 0x70
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	00da      	lsls	r2, r3, #3
 80022c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022cc:	2200      	movs	r2, #0
 80022ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12f      	bne.n	800233e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022f6:	4413      	add	r3, r2
 80022f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	00da      	lsls	r2, r3, #3
 8002302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002306:	4413      	add	r3, r2
 8002308:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800230c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800231c:	b29a      	uxth	r2, r3
 800231e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002334:	b29a      	uxth	r2, r3
 8002336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	e017      	b.n	800236e <HAL_PCD_EP_DB_Transmit+0x522>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d113      	bne.n	800236e <HAL_PCD_EP_DB_Transmit+0x522>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002354:	4413      	add	r3, r2
 8002356:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	00da      	lsls	r2, r3, #3
 800235e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002360:	4413      	add	r3, r2
 8002362:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002366:	67bb      	str	r3, [r7, #120]	; 0x78
 8002368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800236a:	2200      	movs	r2, #0
 800236c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f005 ffd6 	bl	8008326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 8104 	bne.w	800258e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	441a      	add	r2, r3
 80023b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80023b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	8013      	strh	r3, [r2, #0]
 80023ca:	e0e0      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d121      	bne.n	800241a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800240a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002416:	b29b      	uxth	r3, r3
 8002418:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002420:	2b01      	cmp	r3, #1
 8002422:	f040 80b4 	bne.w	800258e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800242e:	441a      	add	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800243c:	441a      	add	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6a1a      	ldr	r2, [r3, #32]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	d309      	bcc.n	8002462 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6a1a      	ldr	r2, [r3, #32]
 8002458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	621a      	str	r2, [r3, #32]
 8002460:	e015      	b.n	800248e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800246a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800246e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002478:	e009      	b.n	800248e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	663b      	str	r3, [r7, #96]	; 0x60
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d155      	bne.n	8002548 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b0:	4413      	add	r3, r2
 80024b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	00da      	lsls	r2, r3, #3
 80024ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024bc:	4413      	add	r3, r2
 80024be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c2:	657b      	str	r3, [r7, #84]	; 0x54
 80024c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c6:	2b3e      	cmp	r3, #62	; 0x3e
 80024c8:	d916      	bls.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80024ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	677b      	str	r3, [r7, #116]	; 0x74
 80024d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x694>
 80024da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024dc:	3b01      	subs	r3, #1
 80024de:	677b      	str	r3, [r7, #116]	; 0x74
 80024e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e040      	b.n	800257a <HAL_PCD_EP_DB_Transmit+0x72e>
 80024f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d112      	bne.n	8002524 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80024fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002508:	b29a      	uxth	r2, r3
 800250a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251c:	b29a      	uxth	r2, r3
 800251e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	e02a      	b.n	800257a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	677b      	str	r3, [r7, #116]	; 0x74
 800252a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002536:	3301      	adds	r3, #1
 8002538:	677b      	str	r3, [r7, #116]	; 0x74
 800253a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253c:	b29b      	uxth	r3, r3
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	b29a      	uxth	r2, r3
 8002542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	e018      	b.n	800257a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d114      	bne.n	800257a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800255e:	4413      	add	r3, r2
 8002560:	663b      	str	r3, [r7, #96]	; 0x60
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	00da      	lsls	r2, r3, #3
 8002568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800256a:	4413      	add	r3, r2
 800256c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002574:	b29a      	uxth	r2, r3
 8002576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002578:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	6959      	ldr	r1, [r3, #20]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	895a      	ldrh	r2, [r3, #10]
 8002586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	f003 ff86 	bl	800649a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025a8:	823b      	strh	r3, [r7, #16]
 80025aa:	8a3b      	ldrh	r3, [r7, #16]
 80025ac:	f083 0310 	eor.w	r3, r3, #16
 80025b0:	823b      	strh	r3, [r7, #16]
 80025b2:	8a3b      	ldrh	r3, [r7, #16]
 80025b4:	f083 0320 	eor.w	r3, r3, #32
 80025b8:	823b      	strh	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	441a      	add	r2, r3
 80025c8:	8a3b      	ldrh	r3, [r7, #16]
 80025ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3788      	adds	r7, #136	; 0x88
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	4613      	mov	r3, r2
 80025f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002606:	897b      	ldrh	r3, [r7, #10]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4413      	add	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e009      	b.n	8002632 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800261e:	897a      	ldrh	r2, [r7, #10]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002632:	893b      	ldrh	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2200      	movs	r2, #0
 800263c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	80da      	strh	r2, [r3, #6]
 8002646:	e00b      	b.n	8002660 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2201      	movs	r2, #1
 800264c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	b29a      	uxth	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0c1b      	lsrs	r3, r3, #16
 800265a:	b29a      	uxth	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002692:	b29b      	uxth	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d141      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d2:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026de:	d131      	bne.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e0:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e6:	4a46      	ldr	r2, [pc, #280]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f0:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026f8:	4a41      	ldr	r2, [pc, #260]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002700:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2232      	movs	r2, #50	; 0x32
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9b      	lsrs	r3, r3, #18
 8002712:	3301      	adds	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002716:	e002      	b.n	800271e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3b01      	subs	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d102      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f2      	bne.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	d158      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e057      	b.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002754:	e04d      	b.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d141      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d131      	bne.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2232      	movs	r2, #50	; 0x32
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9b      	lsrs	r3, r3, #18
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a2:	e002      	b.n	80027aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d102      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f2      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d112      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e011      	b.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027e0:	e007      	b.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40007000 	.word	0x40007000
 8002804:	20000000 	.word	0x20000000
 8002808:	431bde83 	.word	0x431bde83

0800280c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281a:	6093      	str	r3, [r2, #8]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40007000 	.word	0x40007000

0800282c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e308      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d075      	beq.n	8002936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284a:	4ba3      	ldr	r3, [pc, #652]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002854:	4ba0      	ldr	r3, [pc, #640]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d102      	bne.n	800286a <HAL_RCC_OscConfig+0x3e>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d002      	beq.n	8002870 <HAL_RCC_OscConfig+0x44>
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d10b      	bne.n	8002888 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	4b99      	ldr	r3, [pc, #612]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d05b      	beq.n	8002934 <HAL_RCC_OscConfig+0x108>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d157      	bne.n	8002934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e2e3      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002890:	d106      	bne.n	80028a0 <HAL_RCC_OscConfig+0x74>
 8002892:	4b91      	ldr	r3, [pc, #580]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a90      	ldr	r2, [pc, #576]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xb0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x98>
 80028aa:	4b8b      	ldr	r3, [pc, #556]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a8a      	ldr	r2, [pc, #552]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a87      	ldr	r2, [pc, #540]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xb0>
 80028c4:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a83      	ldr	r2, [pc, #524]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b81      	ldr	r3, [pc, #516]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a80      	ldr	r2, [pc, #512]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fd ff1c 	bl	8000720 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fd ff18 	bl	8000720 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e2a8      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xc0>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fd ff08 	bl	8000720 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7fd ff04 	bl	8000720 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e294      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002926:	4b6c      	ldr	r3, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0xe8>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d075      	beq.n	8002a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294c:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d102      	bne.n	8002962 <HAL_RCC_OscConfig+0x136>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d002      	beq.n	8002968 <HAL_RCC_OscConfig+0x13c>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d11f      	bne.n	80029a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002968:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_OscConfig+0x154>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e267      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b55      	ldr	r3, [pc, #340]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	4952      	ldr	r1, [pc, #328]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_RCC_OscConfig+0x2b0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fe75 	bl	8000688 <HAL_InitTick>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d043      	beq.n	8002a2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e253      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d023      	beq.n	80029f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	4b49      	ldr	r3, [pc, #292]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a48      	ldr	r2, [pc, #288]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fd feb0 	bl	8000720 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fd feac 	bl	8000720 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e23c      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	061b      	lsls	r3, r3, #24
 80029f0:	4939      	ldr	r1, [pc, #228]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
 80029f6:	e01a      	b.n	8002a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f8:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a36      	ldr	r2, [pc, #216]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fd fe8c 	bl	8000720 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fd fe88 	bl	8000720 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e218      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1e0>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d03c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7fd fe65 	bl	8000720 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7fd fe61 	bl	8000720 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1f1      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ef      	beq.n	8002a5a <HAL_RCC_OscConfig+0x22e>
 8002a7a:	e01b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fd fe48 	bl	8000720 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fd fe44 	bl	8000720 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1d4      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ef      	bne.n	8002a94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80ab 	beq.w	8002c18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2b4>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e005      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2b6>
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4baf      	ldr	r3, [pc, #700]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	4aae      	ldr	r2, [pc, #696]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6593      	str	r3, [r2, #88]	; 0x58
 8002af2:	4bac      	ldr	r3, [pc, #688]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002afe:	2301      	movs	r3, #1
 8002b00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b02:	4ba9      	ldr	r3, [pc, #676]	; (8002da8 <HAL_RCC_OscConfig+0x57c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d118      	bne.n	8002b40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b0e:	4ba6      	ldr	r3, [pc, #664]	; (8002da8 <HAL_RCC_OscConfig+0x57c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4aa5      	ldr	r2, [pc, #660]	; (8002da8 <HAL_RCC_OscConfig+0x57c>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1a:	f7fd fe01 	bl	8000720 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fd fdfd 	bl	8000720 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e18d      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b34:	4b9c      	ldr	r3, [pc, #624]	; (8002da8 <HAL_RCC_OscConfig+0x57c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d108      	bne.n	8002b5a <HAL_RCC_OscConfig+0x32e>
 8002b48:	4b96      	ldr	r3, [pc, #600]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	4a95      	ldr	r2, [pc, #596]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b58:	e024      	b.n	8002ba4 <HAL_RCC_OscConfig+0x378>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d110      	bne.n	8002b84 <HAL_RCC_OscConfig+0x358>
 8002b62:	4b90      	ldr	r3, [pc, #576]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	4a8e      	ldr	r2, [pc, #568]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b72:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	4a8a      	ldr	r2, [pc, #552]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x378>
 8002b84:	4b87      	ldr	r3, [pc, #540]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	4a86      	ldr	r2, [pc, #536]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b94:	4b83      	ldr	r3, [pc, #524]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a82      	ldr	r2, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fd fdb8 	bl	8000720 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fd fdb4 	bl	8000720 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e142      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ed      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x388>
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fd fda1 	bl	8000720 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fd fd9d 	bl	8000720 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e12b      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ed      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4a64      	ldr	r2, [pc, #400]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d03c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c2c:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c32:	4a5c      	ldr	r2, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fd fd70 	bl	8000720 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c44:	f7fd fd6c 	bl	8000720 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0fc      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ef      	beq.n	8002c44 <HAL_RCC_OscConfig+0x418>
 8002c64:	e01b      	b.n	8002c9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c66:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c6c:	4a4d      	ldr	r2, [pc, #308]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fd fd53 	bl	8000720 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c7e:	f7fd fd4f 	bl	8000720 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0df      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c90:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ef      	bne.n	8002c7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80d3 	beq.w	8002e4e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca8:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	f000 808d 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d15a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002cc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fd fd29 	bl	8000720 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fd fd25 	bl	8000720 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0b5      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCC_OscConfig+0x580>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6a11      	ldr	r1, [r2, #32]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d0a:	0212      	lsls	r2, r2, #8
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d12:	0852      	lsrs	r2, r2, #1
 8002d14:	3a01      	subs	r2, #1
 8002d16:	0552      	lsls	r2, r2, #21
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d1e:	0852      	lsrs	r2, r2, #1
 8002d20:	3a01      	subs	r2, #1
 8002d22:	0652      	lsls	r2, r2, #25
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d2a:	06d2      	lsls	r2, r2, #27
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	491d      	ldr	r1, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fd fce8 	bl	8000720 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fd fce4 	bl	8000720 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e074      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x528>
 8002d72:	e06c      	b.n	8002e4e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_RCC_OscConfig+0x578>)
 8002d92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fd fcc0 	bl	8000720 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da2:	e00e      	b.n	8002dc2 <HAL_RCC_OscConfig+0x596>
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
 8002dac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fd fcb6 	bl	8000720 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e046      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc2:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <HAL_RCC_OscConfig+0x62c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x584>
 8002dce:	e03e      	b.n	8002e4e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e039      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_OscConfig+0x62c>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d12c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d123      	bne.n	8002e4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11b      	bne.n	8002e4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d113      	bne.n	8002e4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	3b01      	subs	r3, #1
 8002e44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e11e      	b.n	80030b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b91      	ldr	r3, [pc, #580]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b8e      	ldr	r3, [pc, #568]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 020f 	bic.w	r2, r3, #15
 8002e8a:	498c      	ldr	r1, [pc, #560]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b8a      	ldr	r3, [pc, #552]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e106      	b.n	80030b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d073      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d129      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0f4      	b.n	80030b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ec8:	f000 f966 	bl	8003198 <RCC_GetSysClockFreqFromPLLSource>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4a7c      	ldr	r2, [pc, #496]	; (80030c4 <HAL_RCC_ClockConfig+0x268>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d93f      	bls.n	8002f56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ed6:	4b7a      	ldr	r3, [pc, #488]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d033      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d12f      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ef6:	4b72      	ldr	r3, [pc, #456]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002efe:	4a70      	ldr	r2, [pc, #448]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e024      	b.n	8002f56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f14:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0c6      	b.n	80030b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f24:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0be      	b.n	80030b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f34:	f000 f8ce 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4a61      	ldr	r2, [pc, #388]	; (80030c4 <HAL_RCC_ClockConfig+0x268>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d909      	bls.n	8002f56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f42:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4a:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f56:	4b5a      	ldr	r3, [pc, #360]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4957      	ldr	r1, [pc, #348]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fd fbda 	bl	8000720 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f70:	f7fd fbd6 	bl	8000720 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e095      	b.n	80030b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 020c 	and.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1eb      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d023      	beq.n	8002fec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a42      	ldr	r2, [pc, #264]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002fb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fc8:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fd0:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4936      	ldr	r1, [pc, #216]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4a32      	ldr	r2, [pc, #200]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d21d      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 020f 	bic.w	r2, r3, #15
 8003014:	4929      	ldr	r1, [pc, #164]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800301c:	f7fd fb80 	bl	8000720 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fd fb7c 	bl	8000720 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e03b      	b.n	80030b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x260>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d1ed      	bne.n	8003024 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4917      	ldr	r1, [pc, #92]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	490f      	ldr	r1, [pc, #60]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003086:	f000 f825 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCC_ClockConfig+0x264>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	490c      	ldr	r1, [pc, #48]	; (80030c8 <HAL_RCC_ClockConfig+0x26c>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x270>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x274>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd faec 	bl	8000688 <HAL_InitTick>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40021000 	.word	0x40021000
 80030c4:	04c4b400 	.word	0x04c4b400
 80030c8:	0800893c 	.word	0x0800893c
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000004 	.word	0x20000004

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d102      	bne.n	80030ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e6:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	e047      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d102      	bne.n	80030fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e03e      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d136      	bne.n	8003178 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3301      	adds	r3, #1
 8003120:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d10c      	bne.n	8003142 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003128:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <HAL_RCC_GetSysClockFreq+0xc0>)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003132:	68d2      	ldr	r2, [r2, #12]
 8003134:	0a12      	lsrs	r2, r2, #8
 8003136:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	617b      	str	r3, [r7, #20]
      break;
 8003140:	e00c      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	4a10      	ldr	r2, [pc, #64]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	0a12      	lsrs	r2, r2, #8
 8003150:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
      break;
 800315a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_GetSysClockFreq+0xb8>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0e5b      	lsrs	r3, r3, #25
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e001      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800317c:	693b      	ldr	r3, [r7, #16]
}
 800317e:	4618      	mov	r0, r3
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	00f42400 	.word	0x00f42400
 8003194:	007a1200 	.word	0x007a1200

08003198 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3301      	adds	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d10c      	bne.n	80031d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	4a14      	ldr	r2, [pc, #80]	; (8003218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031c6:	68d2      	ldr	r2, [r2, #12]
 80031c8:	0a12      	lsrs	r2, r2, #8
 80031ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	617b      	str	r3, [r7, #20]
    break;
 80031d4:	e00c      	b.n	80031f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031e0:	68d2      	ldr	r2, [r2, #12]
 80031e2:	0a12      	lsrs	r2, r2, #8
 80031e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]
    break;
 80031ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0e5b      	lsrs	r3, r3, #25
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	3301      	adds	r3, #1
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800320a:	687b      	ldr	r3, [r7, #4]
}
 800320c:	4618      	mov	r0, r3
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40021000 	.word	0x40021000
 800321c:	007a1200 	.word	0x007a1200
 8003220:	00f42400 	.word	0x00f42400

08003224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800322c:	2300      	movs	r3, #0
 800322e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003230:	2300      	movs	r3, #0
 8003232:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8098 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	4a3f      	ldr	r2, [pc, #252]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6593      	str	r3, [r2, #88]	; 0x58
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326e:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a39      	ldr	r2, [pc, #228]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800327a:	f7fd fa51 	bl	8000720 <HAL_GetTick>
 800327e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003280:	e009      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fd fa4d 	bl	8000720 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d902      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	74fb      	strb	r3, [r7, #19]
        break;
 8003294:	e005      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003296:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ef      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d159      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01e      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d019      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fd fa0d 	bl	8000720 <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003308:	e00b      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fd fa09 	bl	8000720 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d902      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	74fb      	strb	r3, [r7, #19]
            break;
 8003320:	e006      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ec      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800334c:	e008      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	74bb      	strb	r3, [r7, #18]
 8003352:	e005      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003360:	7c7b      	ldrb	r3, [r7, #17]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4ba6      	ldr	r3, [pc, #664]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	4aa5      	ldr	r2, [pc, #660]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800337e:	4ba0      	ldr	r3, [pc, #640]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 0203 	bic.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	499c      	ldr	r1, [pc, #624]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033a0:	4b97      	ldr	r3, [pc, #604]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 020c 	bic.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4994      	ldr	r1, [pc, #592]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033c2:	4b8f      	ldr	r3, [pc, #572]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	498b      	ldr	r1, [pc, #556]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033e4:	4b86      	ldr	r3, [pc, #536]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	4983      	ldr	r1, [pc, #524]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003406:	4b7e      	ldr	r3, [pc, #504]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	497a      	ldr	r1, [pc, #488]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	4972      	ldr	r1, [pc, #456]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800344a:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4969      	ldr	r1, [pc, #420]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4961      	ldr	r1, [pc, #388]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800348e:	4b5c      	ldr	r3, [pc, #368]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	4958      	ldr	r1, [pc, #352]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	4950      	ldr	r1, [pc, #320]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ce:	d105      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d0:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	4942      	ldr	r1, [pc, #264]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	4b3d      	ldr	r3, [pc, #244]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a3c      	ldr	r2, [pc, #240]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003512:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	4934      	ldr	r1, [pc, #208]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003540:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a2e      	ldr	r2, [pc, #184]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003558:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	4926      	ldr	r1, [pc, #152]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	4918      	ldr	r1, [pc, #96]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ae:	d105      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	490a      	ldr	r1, [pc, #40]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e6:	d105      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e049      	b.n	80036aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fc ff50 	bl	80004d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f000 faa4 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e049      	b.n	8003758 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f841 	bl	8003760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 fa4d 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800378e:	2302      	movs	r3, #2
 8003790:	e0ff      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b14      	cmp	r3, #20
 800379e:	f200 80f0 	bhi.w	8003982 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037fd 	.word	0x080037fd
 80037ac:	08003983 	.word	0x08003983
 80037b0:	08003983 	.word	0x08003983
 80037b4:	08003983 	.word	0x08003983
 80037b8:	0800383d 	.word	0x0800383d
 80037bc:	08003983 	.word	0x08003983
 80037c0:	08003983 	.word	0x08003983
 80037c4:	08003983 	.word	0x08003983
 80037c8:	0800387f 	.word	0x0800387f
 80037cc:	08003983 	.word	0x08003983
 80037d0:	08003983 	.word	0x08003983
 80037d4:	08003983 	.word	0x08003983
 80037d8:	080038bf 	.word	0x080038bf
 80037dc:	08003983 	.word	0x08003983
 80037e0:	08003983 	.word	0x08003983
 80037e4:	08003983 	.word	0x08003983
 80037e8:	08003901 	.word	0x08003901
 80037ec:	08003983 	.word	0x08003983
 80037f0:	08003983 	.word	0x08003983
 80037f4:	08003983 	.word	0x08003983
 80037f8:	08003941 	.word	0x08003941
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fa54 	bl	8003cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6999      	ldr	r1, [r3, #24]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	619a      	str	r2, [r3, #24]
      break;
 800383a:	e0a5      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fac4 	bl	8003dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	619a      	str	r2, [r3, #24]
      break;
 800387c:	e084      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fb2d 	bl	8003ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0208 	orr.w	r2, r2, #8
 8003898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0204 	bic.w	r2, r2, #4
 80038a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69d9      	ldr	r1, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	61da      	str	r2, [r3, #28]
      break;
 80038bc:	e064      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fb95 	bl	8003ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69d9      	ldr	r1, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	021a      	lsls	r2, r3, #8
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	61da      	str	r2, [r3, #28]
      break;
 80038fe:	e043      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fbfe 	bl	8004108 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0208 	orr.w	r2, r2, #8
 800391a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800393e:	e023      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fc42 	bl	80041d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	021a      	lsls	r2, r3, #8
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003980:	e002      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
      break;
 8003986:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop

0800399c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIM_ConfigClockSource+0x1c>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e0de      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x1da>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80039d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a63      	ldr	r2, [pc, #396]	; (8003b80 <HAL_TIM_ConfigClockSource+0x1e4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f000 80a9 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 80039f8:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <HAL_TIM_ConfigClockSource+0x1e4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f200 80ae 	bhi.w	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a00:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	f000 80a1 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a08:	4a5e      	ldr	r2, [pc, #376]	; (8003b84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	f200 80a6 	bhi.w	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a10:	4a5d      	ldr	r2, [pc, #372]	; (8003b88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	f000 8099 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a18:	4a5b      	ldr	r2, [pc, #364]	; (8003b88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f200 809e 	bhi.w	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a20:	4a5a      	ldr	r2, [pc, #360]	; (8003b8c <HAL_TIM_ConfigClockSource+0x1f0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f000 8091 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a28:	4a58      	ldr	r2, [pc, #352]	; (8003b8c <HAL_TIM_ConfigClockSource+0x1f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	f200 8096 	bhi.w	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003a34:	f000 8089 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003a3c:	f200 808e 	bhi.w	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a44:	d03e      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x128>
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	f200 8087 	bhi.w	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a52:	f000 8086 	beq.w	8003b62 <HAL_TIM_ConfigClockSource+0x1c6>
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5a:	d87f      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a5c:	2b70      	cmp	r3, #112	; 0x70
 8003a5e:	d01a      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0xfa>
 8003a60:	2b70      	cmp	r3, #112	; 0x70
 8003a62:	d87b      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a64:	2b60      	cmp	r3, #96	; 0x60
 8003a66:	d050      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x16e>
 8003a68:	2b60      	cmp	r3, #96	; 0x60
 8003a6a:	d877      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a6c:	2b50      	cmp	r3, #80	; 0x50
 8003a6e:	d03c      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x14e>
 8003a70:	2b50      	cmp	r3, #80	; 0x50
 8003a72:	d873      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d058      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x18e>
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d86f      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a7c:	2b30      	cmp	r3, #48	; 0x30
 8003a7e:	d064      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a80:	2b30      	cmp	r3, #48	; 0x30
 8003a82:	d86b      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d060      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d867      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d05c      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d05a      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x1ae>
 8003a94:	e062      	b.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6899      	ldr	r1, [r3, #8]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f000 fc75 	bl	8004394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	609a      	str	r2, [r3, #8]
      break;
 8003ac2:	e04f      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6899      	ldr	r1, [r3, #8]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f000 fc5e 	bl	8004394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ae6:	609a      	str	r2, [r3, #8]
      break;
 8003ae8:	e03c      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 fbd0 	bl	800429c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2150      	movs	r1, #80	; 0x50
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fc29 	bl	800435a <TIM_ITRx_SetConfig>
      break;
 8003b08:	e02c      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f000 fbef 	bl	80042fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2160      	movs	r1, #96	; 0x60
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fc19 	bl	800435a <TIM_ITRx_SetConfig>
      break;
 8003b28:	e01c      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f000 fbb0 	bl	800429c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2140      	movs	r1, #64	; 0x40
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fc09 	bl	800435a <TIM_ITRx_SetConfig>
      break;
 8003b48:	e00c      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	4610      	mov	r0, r2
 8003b56:	f000 fc00 	bl	800435a <TIM_ITRx_SetConfig>
      break;
 8003b5a:	e003      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e000      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	00100070 	.word	0x00100070
 8003b84:	00100040 	.word	0x00100040
 8003b88:	00100030 	.word	0x00100030
 8003b8c:	00100020 	.word	0x00100020

08003b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <TIM_Base_SetConfig+0x104>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bae:	d00b      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <TIM_Base_SetConfig+0x108>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <TIM_Base_SetConfig+0x10c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a37      	ldr	r2, [pc, #220]	; (8003ca0 <TIM_Base_SetConfig+0x110>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <TIM_Base_SetConfig+0x104>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01b      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d017      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <TIM_Base_SetConfig+0x108>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <TIM_Base_SetConfig+0x10c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00f      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a28      	ldr	r2, [pc, #160]	; (8003ca0 <TIM_Base_SetConfig+0x110>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a25      	ldr	r2, [pc, #148]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <TIM_Base_SetConfig+0x104>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00f      	beq.n	8003c78 <TIM_Base_SetConfig+0xe8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <TIM_Base_SetConfig+0x110>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <TIM_Base_SetConfig+0xe8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0xe8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0xe8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d103      	bne.n	8003c80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	615a      	str	r2, [r3, #20]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	40013400 	.word	0x40013400
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40014400 	.word	0x40014400
 8003cac:	40014800 	.word	0x40014800

08003cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f023 0201 	bic.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0303 	bic.w	r3, r3, #3
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f023 0302 	bic.w	r3, r3, #2
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <TIM_OC1_SetConfig+0x10c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00f      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <TIM_OC1_SetConfig+0x110>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <TIM_OC1_SetConfig+0x114>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <TIM_OC1_SetConfig+0x118>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <TIM_OC1_SetConfig+0x11c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0308 	bic.w	r3, r3, #8
 8003d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <TIM_OC1_SetConfig+0x10c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <TIM_OC1_SetConfig+0x110>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <TIM_OC1_SetConfig+0x114>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <TIM_OC1_SetConfig+0x118>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <TIM_OC1_SetConfig+0x11c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d111      	bne.n	8003d96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800

08003dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0210 	bic.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0320 	bic.w	r3, r3, #32
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <TIM_OC2_SetConfig+0x100>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_OC2_SetConfig+0x6c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <TIM_OC2_SetConfig+0x104>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10d      	bne.n	8003e58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <TIM_OC2_SetConfig+0x100>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00f      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <TIM_OC2_SetConfig+0x104>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <TIM_OC2_SetConfig+0x108>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <TIM_OC2_SetConfig+0x10c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <TIM_OC2_SetConfig+0x110>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d113      	bne.n	8003ea8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40013400 	.word	0x40013400
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800

08003ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <TIM_OC3_SetConfig+0xfc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_OC3_SetConfig+0x6a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <TIM_OC3_SetConfig+0x100>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10d      	bne.n	8003f6a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <TIM_OC3_SetConfig+0xfc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00f      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <TIM_OC3_SetConfig+0x100>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <TIM_OC3_SetConfig+0x104>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d007      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <TIM_OC3_SetConfig+0x108>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <TIM_OC3_SetConfig+0x10c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d113      	bne.n	8003fba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40013400 	.word	0x40013400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40014800 	.word	0x40014800

08003ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_OC4_SetConfig+0x100>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC4_SetConfig+0x6c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <TIM_OC4_SetConfig+0x104>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10d      	bne.n	800407c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800407a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <TIM_OC4_SetConfig+0x100>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_OC4_SetConfig+0xb0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <TIM_OC4_SetConfig+0x104>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC4_SetConfig+0xb0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <TIM_OC4_SetConfig+0x108>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC4_SetConfig+0xb0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <TIM_OC4_SetConfig+0x10c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC4_SetConfig+0xb0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a19      	ldr	r2, [pc, #100]	; (8004104 <TIM_OC4_SetConfig+0x110>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d113      	bne.n	80040cc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	019b      	lsls	r3, r3, #6
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	019b      	lsls	r3, r3, #6
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40013400 	.word	0x40013400
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800

08004108 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800414c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	041b      	lsls	r3, r3, #16
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a17      	ldr	r2, [pc, #92]	; (80041bc <TIM_OC5_SetConfig+0xb4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00f      	beq.n	8004182 <TIM_OC5_SetConfig+0x7a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <TIM_OC5_SetConfig+0xb8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_OC5_SetConfig+0x7a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <TIM_OC5_SetConfig+0xbc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <TIM_OC5_SetConfig+0x7a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <TIM_OC5_SetConfig+0xc0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC5_SetConfig+0x7a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a13      	ldr	r2, [pc, #76]	; (80041cc <TIM_OC5_SetConfig+0xc4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d109      	bne.n	8004196 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004188:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40013400 	.word	0x40013400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40014400 	.word	0x40014400
 80041cc:	40014800 	.word	0x40014800

080041d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	051b      	lsls	r3, r3, #20
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <TIM_OC6_SetConfig+0xb8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_OC6_SetConfig+0x7c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <TIM_OC6_SetConfig+0xbc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_OC6_SetConfig+0x7c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <TIM_OC6_SetConfig+0xc0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_OC6_SetConfig+0x7c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <TIM_OC6_SetConfig+0xc4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC6_SetConfig+0x7c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <TIM_OC6_SetConfig+0xc8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d109      	bne.n	8004260 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004252:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0201 	bic.w	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f023 030a 	bic.w	r3, r3, #10
 80042d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b087      	sub	sp, #28
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0210 	bic.w	r2, r3, #16
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	031b      	lsls	r3, r3, #12
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004336:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	621a      	str	r2, [r3, #32]
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	f043 0307 	orr.w	r3, r3, #7
 8004380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	021a      	lsls	r2, r3, #8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	609a      	str	r2, [r3, #8]
}
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e065      	b.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2c      	ldr	r2, [pc, #176]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2b      	ldr	r2, [pc, #172]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004426:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d018      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004462:	d013      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00e      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a17      	ldr	r2, [pc, #92]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10c      	bne.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40013400 	.word	0x40013400
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40014000 	.word	0x40014000

080044d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80044ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800450e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004512:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	b29b      	uxth	r3, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	b29b      	uxth	r3, r3
 8004524:	4013      	ands	r3, r2
 8004526:	b29a      	uxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800453c:	b084      	sub	sp, #16
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	f107 0014 	add.w	r0, r7, #20
 800454a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	b004      	add	sp, #16
 800457c:	4770      	bx	lr
	...

08004580 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004580:	b480      	push	{r7}
 8004582:	b09d      	sub	sp, #116	; 0x74
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d81f      	bhi.n	80045f2 <USB_ActivateEndpoint+0x72>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <USB_ActivateEndpoint+0x38>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	080045fb 	.word	0x080045fb
 80045c4:	080045d7 	.word	0x080045d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045d4:	e012      	b.n	80045fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045e2:	e00b      	b.n	80045fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045f0:	e004      	b.n	80045fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045f8:	e000      	b.n	80045fc <USB_ActivateEndpoint+0x7c>
      break;
 80045fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800460a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800460e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461a:	b29b      	uxth	r3, r3
 800461c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	b21b      	sxth	r3, r3
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	b21a      	sxth	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	b21b      	sxth	r3, r3
 800463e:	4313      	orrs	r3, r2
 8004640:	b21b      	sxth	r3, r3
 8004642:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004664:	b29b      	uxth	r3, r3
 8004666:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	7b1b      	ldrb	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 8149 	bne.w	8004904 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8084 	beq.w	8004784 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4413      	add	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	00da      	lsls	r2, r3, #3
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	88db      	ldrh	r3, [r3, #6]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	827b      	strh	r3, [r7, #18]
 80046be:	8a7b      	ldrh	r3, [r7, #18]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <USB_ActivateEndpoint+0x180>
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	823b      	strh	r3, [r7, #16]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	8a3b      	ldrh	r3, [r7, #16]
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	78db      	ldrb	r3, [r3, #3]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d020      	beq.n	800474a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471e:	81bb      	strh	r3, [r7, #12]
 8004720:	89bb      	ldrh	r3, [r7, #12]
 8004722:	f083 0320 	eor.w	r3, r3, #32
 8004726:	81bb      	strh	r3, [r7, #12]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	89bb      	ldrh	r3, [r7, #12]
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]
 8004748:	e2a6      	b.n	8004c98 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004760:	81fb      	strh	r3, [r7, #14]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	89fb      	ldrh	r3, [r7, #14]
 800476e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]
 8004782:	e289      	b.n	8004c98 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478e:	b29b      	uxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	4413      	add	r3, r2
 8004796:	633b      	str	r3, [r7, #48]	; 0x30
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00da      	lsls	r2, r3, #3
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	88db      	ldrh	r3, [r3, #6]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	4413      	add	r3, r2
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	00da      	lsls	r2, r3, #3
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	4413      	add	r3, r2
 80047d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b3e      	cmp	r3, #62	; 0x3e
 80047e2:	d918      	bls.n	8004816 <USB_ActivateEndpoint+0x296>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <USB_ActivateEndpoint+0x27e>
 80047f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fa:	3b01      	subs	r3, #1
 80047fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004800:	b29b      	uxth	r3, r3
 8004802:	029b      	lsls	r3, r3, #10
 8004804:	b29b      	uxth	r3, r3
 8004806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480e:	b29a      	uxth	r2, r3
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	e029      	b.n	800486a <USB_ActivateEndpoint+0x2ea>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d112      	bne.n	8004844 <USB_ActivateEndpoint+0x2c4>
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004828:	b29a      	uxth	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483c:	b29a      	uxth	r2, r3
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	e012      	b.n	800486a <USB_ActivateEndpoint+0x2ea>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	66bb      	str	r3, [r7, #104]	; 0x68
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <USB_ActivateEndpoint+0x2de>
 8004858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800485a:	3301      	adds	r3, #1
 800485c:	66bb      	str	r3, [r7, #104]	; 0x68
 800485e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004860:	b29b      	uxth	r3, r3
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	b29a      	uxth	r2, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	847b      	strh	r3, [r7, #34]	; 0x22
 8004878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800487a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01b      	beq.n	80048ba <USB_ActivateEndpoint+0x33a>
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	843b      	strh	r3, [r7, #32]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	8c3b      	ldrh	r3, [r7, #32]
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	83fb      	strh	r3, [r7, #30]
 80048d2:	8bfb      	ldrh	r3, [r7, #30]
 80048d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048d8:	83fb      	strh	r3, [r7, #30]
 80048da:	8bfb      	ldrh	r3, [r7, #30]
 80048dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048e0:	83fb      	strh	r3, [r7, #30]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	8bfb      	ldrh	r3, [r7, #30]
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]
 8004902:	e1c9      	b.n	8004c98 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	78db      	ldrb	r3, [r3, #3]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d11e      	bne.n	800494a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	441a      	add	r2, r3
 8004930:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]
 8004948:	e01d      	b.n	8004986 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800495c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004960:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004982:	b29b      	uxth	r3, r3
 8004984:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	4413      	add	r3, r2
 8004998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	00da      	lsls	r2, r3, #3
 80049a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	891b      	ldrh	r3, [r3, #8]
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b8:	801a      	strh	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	657b      	str	r3, [r7, #84]	; 0x54
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ca:	4413      	add	r3, r2
 80049cc:	657b      	str	r3, [r7, #84]	; 0x54
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	00da      	lsls	r2, r3, #3
 80049d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d6:	4413      	add	r3, r2
 80049d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049dc:	653b      	str	r3, [r7, #80]	; 0x50
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	895b      	ldrh	r3, [r3, #10]
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ec:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 8093 	bne.w	8004b1e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <USB_ActivateEndpoint+0x4cc>
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <USB_ActivateEndpoint+0x51c>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ab4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ab6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004aba:	873b      	strh	r3, [r7, #56]	; 0x38
 8004abc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004abe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ac2:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	441a      	add	r2, r3
 8004b06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	8013      	strh	r3, [r2, #0]
 8004b1c:	e0bc      	b.n	8004c98 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01d      	beq.n	8004b76 <USB_ActivateEndpoint+0x5f6>
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01d      	beq.n	8004bce <USB_ActivateEndpoint+0x64e>
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	78db      	ldrb	r3, [r3, #3]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d024      	beq.n	8004c20 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bf4:	f083 0320 	eor.w	r3, r3, #32
 8004bf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	441a      	add	r2, r3
 8004c44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	441a      	add	r2, r3
 8004c80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3774      	adds	r7, #116	; 0x74
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b08d      	sub	sp, #52	; 0x34
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	7b1b      	ldrb	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 808e 	bne.w	8004dd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d044      	beq.n	8004d4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	81bb      	strh	r3, [r7, #12]
 8004cd2:	89bb      	ldrh	r3, [r7, #12]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01b      	beq.n	8004d14 <USB_DeactivateEndpoint+0x6c>
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	817b      	strh	r3, [r7, #10]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2a:	813b      	strh	r3, [r7, #8]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	893b      	ldrh	r3, [r7, #8]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]
 8004d4c:	e192      	b.n	8005074 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	827b      	strh	r3, [r7, #18]
 8004d5c:	8a7b      	ldrh	r3, [r7, #18]
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01b      	beq.n	8004d9e <USB_DeactivateEndpoint+0xf6>
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	823b      	strh	r3, [r7, #16]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	8a3b      	ldrh	r3, [r7, #16]
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db4:	81fb      	strh	r3, [r7, #14]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	89fb      	ldrh	r3, [r7, #14]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
 8004dd6:	e14d      	b.n	8005074 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 80a5 	bne.w	8004f2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	843b      	strh	r3, [r7, #32]
 8004df0:	8c3b      	ldrh	r3, [r7, #32]
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <USB_DeactivateEndpoint+0x18a>
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	83fb      	strh	r3, [r7, #30]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	8bfb      	ldrh	r3, [r7, #30]
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	83bb      	strh	r3, [r7, #28]
 8004e40:	8bbb      	ldrh	r3, [r7, #28]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01b      	beq.n	8004e82 <USB_DeactivateEndpoint+0x1da>
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	837b      	strh	r3, [r7, #26]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	8b7b      	ldrh	r3, [r7, #26]
 8004e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	833b      	strh	r3, [r7, #24]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	8b3b      	ldrh	r3, [r7, #24]
 8004ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	82fb      	strh	r3, [r7, #22]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	8afb      	ldrh	r3, [r7, #22]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f08:	82bb      	strh	r3, [r7, #20]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8abb      	ldrh	r3, [r7, #20]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
 8004f2a:	e0a3      	b.n	8005074 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <USB_DeactivateEndpoint+0x2d4>
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01b      	beq.n	8004fcc <USB_DeactivateEndpoint+0x324>
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	847b      	strh	r3, [r7, #34]	; 0x22
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3734      	adds	r7, #52	; 0x34
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b0c2      	sub	sp, #264	; 0x108
 8005086:	af00      	add	r7, sp, #0
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	6018      	str	r0, [r3, #0]
 800508c:	463b      	mov	r3, r7
 800508e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005090:	463b      	mov	r3, r7
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b01      	cmp	r3, #1
 8005098:	f040 8509 	bne.w	8005aae <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800509c:	463b      	mov	r3, r7
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	463b      	mov	r3, r7
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d905      	bls.n	80050b8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80050ac:	463b      	mov	r3, r7
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050b6:	e004      	b.n	80050c2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	7b1b      	ldrb	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d128      	bne.n	800511e <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050cc:	463b      	mov	r3, r7
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6959      	ldr	r1, [r3, #20]
 80050d2:	463b      	mov	r3, r7
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	88da      	ldrh	r2, [r3, #6]
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050dc:	b29b      	uxth	r3, r3
 80050de:	1d38      	adds	r0, r7, #4
 80050e0:	6800      	ldr	r0, [r0, #0]
 80050e2:	f001 f9da 	bl	800649a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050e6:	1d3b      	adds	r3, r7, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	463b      	mov	r3, r7
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	00da      	lsls	r2, r3, #3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	801a      	strh	r2, [r3, #0]
 800511a:	f000 bc9f 	b.w	8005a5c <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800511e:	463b      	mov	r3, r7
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b02      	cmp	r3, #2
 8005126:	f040 8347 	bne.w	80057b8 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800512a:	463b      	mov	r3, r7
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6a1a      	ldr	r2, [r3, #32]
 8005130:	463b      	mov	r3, r7
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	429a      	cmp	r2, r3
 8005138:	f240 82eb 	bls.w	8005712 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800513c:	1d3b      	adds	r3, r7, #4
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800516c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005174:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517c:	b29b      	uxth	r3, r3
 800517e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005180:	463b      	mov	r3, r7
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	463b      	mov	r3, r7
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8159 	beq.w	8005460 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
 80051b4:	463b      	mov	r3, r7
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d164      	bne.n	8005288 <USB_EPStartXfer+0x206>
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	4413      	add	r3, r2
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	00da      	lsls	r2, r3, #3
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ec:	2b3e      	cmp	r3, #62	; 0x3e
 80051ee:	d91c      	bls.n	800522a <USB_EPStartXfer+0x1a8>
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <USB_EPStartXfer+0x18e>
 8005206:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800520a:	3b01      	subs	r3, #1
 800520c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005210:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005214:	b29b      	uxth	r3, r3
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	b29b      	uxth	r3, r3
 800521a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005222:	b29a      	uxth	r2, r3
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	e04a      	b.n	80052c0 <USB_EPStartXfer+0x23e>
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522e:	2b00      	cmp	r3, #0
 8005230:	d112      	bne.n	8005258 <USB_EPStartXfer+0x1d6>
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800523c:	b29a      	uxth	r2, r3
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005250:	b29a      	uxth	r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e033      	b.n	80052c0 <USB_EPStartXfer+0x23e>
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <USB_EPStartXfer+0x1f6>
 800526e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005272:	3301      	adds	r3, #1
 8005274:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005278:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800527c:	b29b      	uxth	r3, r3
 800527e:	029b      	lsls	r3, r3, #10
 8005280:	b29a      	uxth	r2, r3
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	e01b      	b.n	80052c0 <USB_EPStartXfer+0x23e>
 8005288:	463b      	mov	r3, r7
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d116      	bne.n	80052c0 <USB_EPStartXfer+0x23e>
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	4413      	add	r3, r2
 80052a2:	633b      	str	r3, [r7, #48]	; 0x30
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	00da      	lsls	r2, r3, #3
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052c0:	463b      	mov	r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	895b      	ldrh	r3, [r3, #10]
 80052c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6959      	ldr	r1, [r3, #20]
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052da:	1d38      	adds	r0, r7, #4
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f001 f8dc 	bl	800649a <USB_WritePMA>
            ep->xfer_buff += len;
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ec:	441a      	add	r2, r3
 80052ee:	463b      	mov	r3, r7
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a1a      	ldr	r2, [r3, #32]
 80052fa:	463b      	mov	r3, r7
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d909      	bls.n	8005318 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	463b      	mov	r3, r7
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	621a      	str	r2, [r3, #32]
 8005316:	e008      	b.n	800532a <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8005318:	463b      	mov	r3, r7
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800532a:	463b      	mov	r3, r7
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d164      	bne.n	80053fe <USB_EPStartXfer+0x37c>
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005342:	b29b      	uxth	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4413      	add	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	00da      	lsls	r2, r3, #3
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	2b3e      	cmp	r3, #62	; 0x3e
 8005364:	d91c      	bls.n	80053a0 <USB_EPStartXfer+0x31e>
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <USB_EPStartXfer+0x304>
 800537c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005380:	3b01      	subs	r3, #1
 8005382:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005398:	b29a      	uxth	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e04d      	b.n	800543c <USB_EPStartXfer+0x3ba>
 80053a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d112      	bne.n	80053ce <USB_EPStartXfer+0x34c>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	e036      	b.n	800543c <USB_EPStartXfer+0x3ba>
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d004      	beq.n	80053ee <USB_EPStartXfer+0x36c>
 80053e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e8:	3301      	adds	r3, #1
 80053ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e01e      	b.n	800543c <USB_EPStartXfer+0x3ba>
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d119      	bne.n	800543c <USB_EPStartXfer+0x3ba>
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	623b      	str	r3, [r7, #32]
 800540e:	1d3b      	adds	r3, r7, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005416:	b29b      	uxth	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	4413      	add	r3, r2
 800541e:	623b      	str	r3, [r7, #32]
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00da      	lsls	r2, r3, #3
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	4413      	add	r3, r2
 800542c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005436:	b29a      	uxth	r2, r3
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	891b      	ldrh	r3, [r3, #8]
 8005442:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005446:	463b      	mov	r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6959      	ldr	r1, [r3, #20]
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005450:	b29b      	uxth	r3, r3
 8005452:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005456:	1d38      	adds	r0, r7, #4
 8005458:	6800      	ldr	r0, [r0, #0]
 800545a:	f001 f81e 	bl	800649a <USB_WritePMA>
 800545e:	e2fd      	b.n	8005a5c <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d164      	bne.n	8005534 <USB_EPStartXfer+0x4b2>
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547e:	4413      	add	r3, r2
 8005480:	64bb      	str	r3, [r7, #72]	; 0x48
 8005482:	463b      	mov	r3, r7
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	00da      	lsls	r2, r3, #3
 800548a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548c:	4413      	add	r3, r2
 800548e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005492:	647b      	str	r3, [r7, #68]	; 0x44
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	2b3e      	cmp	r3, #62	; 0x3e
 800549a:	d91c      	bls.n	80054d6 <USB_EPStartXfer+0x454>
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <USB_EPStartXfer+0x43a>
 80054b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054b6:	3b01      	subs	r3, #1
 80054b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	029b      	lsls	r3, r3, #10
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	e04d      	b.n	8005572 <USB_EPStartXfer+0x4f0>
 80054d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d112      	bne.n	8005504 <USB_EPStartXfer+0x482>
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e036      	b.n	8005572 <USB_EPStartXfer+0x4f0>
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800550e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <USB_EPStartXfer+0x4a2>
 800551a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800551e:	3301      	adds	r3, #1
 8005520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005524:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005528:	b29b      	uxth	r3, r3
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	b29a      	uxth	r2, r3
 800552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e01e      	b.n	8005572 <USB_EPStartXfer+0x4f0>
 8005534:	463b      	mov	r3, r7
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d119      	bne.n	8005572 <USB_EPStartXfer+0x4f0>
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	653b      	str	r3, [r7, #80]	; 0x50
 8005544:	1d3b      	adds	r3, r7, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554c:	b29b      	uxth	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005552:	4413      	add	r3, r2
 8005554:	653b      	str	r3, [r7, #80]	; 0x50
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	00da      	lsls	r2, r3, #3
 800555e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005560:	4413      	add	r3, r2
 8005562:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556c:	b29a      	uxth	r2, r3
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	891b      	ldrh	r3, [r3, #8]
 8005578:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6959      	ldr	r1, [r3, #20]
 8005582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005586:	b29b      	uxth	r3, r3
 8005588:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800558c:	1d38      	adds	r0, r7, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	f000 ff83 	bl	800649a <USB_WritePMA>
            ep->xfer_buff += len;
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559e:	441a      	add	r2, r3
 80055a0:	463b      	mov	r3, r7
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d909      	bls.n	80055ca <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	621a      	str	r2, [r3, #32]
 80055c8:	e008      	b.n	80055dc <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	643b      	str	r3, [r7, #64]	; 0x40
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d164      	bne.n	80056b6 <USB_EPStartXfer+0x634>
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	4413      	add	r3, r2
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	00da      	lsls	r2, r3, #3
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	4413      	add	r3, r2
 8005610:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561a:	2b3e      	cmp	r3, #62	; 0x3e
 800561c:	d91c      	bls.n	8005658 <USB_EPStartXfer+0x5d6>
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <USB_EPStartXfer+0x5bc>
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	3b01      	subs	r3, #1
 800563a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005642:	b29b      	uxth	r3, r3
 8005644:	029b      	lsls	r3, r3, #10
 8005646:	b29b      	uxth	r3, r3
 8005648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005650:	b29a      	uxth	r2, r3
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	e04a      	b.n	80056ee <USB_EPStartXfer+0x66c>
 8005658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565c:	2b00      	cmp	r3, #0
 800565e:	d112      	bne.n	8005686 <USB_EPStartXfer+0x604>
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29b      	uxth	r3, r3
 8005666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800566a:	b29a      	uxth	r2, r3
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567e:	b29a      	uxth	r2, r3
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	e033      	b.n	80056ee <USB_EPStartXfer+0x66c>
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <USB_EPStartXfer+0x624>
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	3301      	adds	r3, #1
 80056a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	029b      	lsls	r3, r3, #10
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	e01b      	b.n	80056ee <USB_EPStartXfer+0x66c>
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d116      	bne.n	80056ee <USB_EPStartXfer+0x66c>
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ce:	4413      	add	r3, r2
 80056d0:	643b      	str	r3, [r7, #64]	; 0x40
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	00da      	lsls	r2, r3, #3
 80056da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056dc:	4413      	add	r3, r2
 80056de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	895b      	ldrh	r3, [r3, #10]
 80056f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6959      	ldr	r1, [r3, #20]
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005702:	b29b      	uxth	r3, r3
 8005704:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005708:	1d38      	adds	r0, r7, #4
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	f000 fec5 	bl	800649a <USB_WritePMA>
 8005710:	e1a4      	b.n	8005a5c <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800574c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575c:	b29b      	uxth	r3, r3
 800575e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005774:	4413      	add	r3, r2
 8005776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	00da      	lsls	r2, r3, #3
 8005780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005782:	4413      	add	r3, r2
 8005784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005788:	65bb      	str	r3, [r7, #88]	; 0x58
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578e:	b29a      	uxth	r2, r3
 8005790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005792:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	891b      	ldrh	r3, [r3, #8]
 800579a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057ae:	1d38      	adds	r0, r7, #4
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	f000 fe72 	bl	800649a <USB_WritePMA>
 80057b6:	e151      	b.n	8005a5c <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c2:	1ad2      	subs	r2, r2, r3
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 809b 	beq.w	800591c <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	673b      	str	r3, [r7, #112]	; 0x70
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d164      	bne.n	80058c0 <USB_EPStartXfer+0x83e>
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800580a:	4413      	add	r3, r2
 800580c:	66bb      	str	r3, [r7, #104]	; 0x68
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	00da      	lsls	r2, r3, #3
 8005816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005818:	4413      	add	r3, r2
 800581a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800581e:	667b      	str	r3, [r7, #100]	; 0x64
 8005820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005824:	2b3e      	cmp	r3, #62	; 0x3e
 8005826:	d91c      	bls.n	8005862 <USB_EPStartXfer+0x7e0>
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <USB_EPStartXfer+0x7c6>
 800583e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005842:	3b01      	subs	r3, #1
 8005844:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005848:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800584c:	b29b      	uxth	r3, r3
 800584e:	029b      	lsls	r3, r3, #10
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e04a      	b.n	80058f8 <USB_EPStartXfer+0x876>
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005866:	2b00      	cmp	r3, #0
 8005868:	d112      	bne.n	8005890 <USB_EPStartXfer+0x80e>
 800586a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005874:	b29a      	uxth	r2, r3
 8005876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005888:	b29a      	uxth	r2, r3
 800588a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	e033      	b.n	80058f8 <USB_EPStartXfer+0x876>
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <USB_EPStartXfer+0x82e>
 80058a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058aa:	3301      	adds	r3, #1
 80058ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e01b      	b.n	80058f8 <USB_EPStartXfer+0x876>
 80058c0:	463b      	mov	r3, r7
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d116      	bne.n	80058f8 <USB_EPStartXfer+0x876>
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058d8:	4413      	add	r3, r2
 80058da:	673b      	str	r3, [r7, #112]	; 0x70
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	00da      	lsls	r2, r3, #3
 80058e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e6:	4413      	add	r3, r2
 80058e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	895b      	ldrh	r3, [r3, #10]
 80058fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6959      	ldr	r1, [r3, #20]
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590c:	b29b      	uxth	r3, r3
 800590e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005912:	1d38      	adds	r0, r7, #4
 8005914:	6800      	ldr	r0, [r0, #0]
 8005916:	f000 fdc0 	bl	800649a <USB_WritePMA>
 800591a:	e09f      	b.n	8005a5c <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d164      	bne.n	80059f0 <USB_EPStartXfer+0x96e>
 8005926:	1d3b      	adds	r3, r7, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005934:	b29b      	uxth	r3, r3
 8005936:	461a      	mov	r2, r3
 8005938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800593a:	4413      	add	r3, r2
 800593c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	00da      	lsls	r2, r3, #3
 8005946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005948:	4413      	add	r3, r2
 800594a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800594e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005954:	2b3e      	cmp	r3, #62	; 0x3e
 8005956:	d91c      	bls.n	8005992 <USB_EPStartXfer+0x910>
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <USB_EPStartXfer+0x8f6>
 800596e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005972:	3b01      	subs	r3, #1
 8005974:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005978:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800597c:	b29b      	uxth	r3, r3
 800597e:	029b      	lsls	r3, r3, #10
 8005980:	b29b      	uxth	r3, r3
 8005982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598a:	b29a      	uxth	r2, r3
 800598c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598e:	801a      	strh	r2, [r3, #0]
 8005990:	e053      	b.n	8005a3a <USB_EPStartXfer+0x9b8>
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005996:	2b00      	cmp	r3, #0
 8005998:	d112      	bne.n	80059c0 <USB_EPStartXfer+0x93e>
 800599a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e03c      	b.n	8005a3a <USB_EPStartXfer+0x9b8>
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <USB_EPStartXfer+0x95e>
 80059d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059da:	3301      	adds	r3, #1
 80059dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	029b      	lsls	r3, r3, #10
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	e024      	b.n	8005a3a <USB_EPStartXfer+0x9b8>
 80059f0:	463b      	mov	r3, r7
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d11f      	bne.n	8005a3a <USB_EPStartXfer+0x9b8>
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a12:	4413      	add	r3, r2
 8005a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	00da      	lsls	r2, r3, #3
 8005a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	891b      	ldrh	r3, [r3, #8]
 8005a40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a44:	463b      	mov	r3, r7
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6959      	ldr	r1, [r3, #20]
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a54:	1d38      	adds	r0, r7, #4
 8005a56:	6800      	ldr	r0, [r0, #0]
 8005a58:	f000 fd1f 	bl	800649a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a5c:	1d3b      	adds	r3, r7, #4
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a76:	817b      	strh	r3, [r7, #10]
 8005a78:	897b      	ldrh	r3, [r7, #10]
 8005a7a:	f083 0310 	eor.w	r3, r3, #16
 8005a7e:	817b      	strh	r3, [r7, #10]
 8005a80:	897b      	ldrh	r3, [r7, #10]
 8005a82:	f083 0320 	eor.w	r3, r3, #32
 8005a86:	817b      	strh	r3, [r7, #10]
 8005a88:	1d3b      	adds	r3, r7, #4
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	441a      	add	r2, r3
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8013      	strh	r3, [r2, #0]
 8005aac:	e3b5      	b.n	800621a <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	7b1b      	ldrb	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 8090 	bne.w	8005bda <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d90e      	bls.n	8005ae8 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	619a      	str	r2, [r3, #24]
 8005ae6:	e008      	b.n	8005afa <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b12:	4413      	add	r3, r2
 8005b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b18:	463b      	mov	r3, r7
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	00da      	lsls	r2, r3, #3
 8005b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b32:	2b3e      	cmp	r3, #62	; 0x3e
 8005b34:	d91d      	bls.n	8005b72 <USB_EPStartXfer+0xaf0>
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <USB_EPStartXfer+0xad4>
 8005b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b50:	3b01      	subs	r3, #1
 8005b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	029b      	lsls	r3, r3, #10
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e325      	b.n	80061be <USB_EPStartXfer+0x113c>
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d116      	bne.n	8005ba8 <USB_EPStartXfer+0xb26>
 8005b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b8c:	801a      	strh	r2, [r3, #0]
 8005b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e30a      	b.n	80061be <USB_EPStartXfer+0x113c>
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <USB_EPStartXfer+0xb46>
 8005bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e2f1      	b.n	80061be <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005bda:	463b      	mov	r3, r7
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	78db      	ldrb	r3, [r3, #3]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	f040 818f 	bne.w	8005f04 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d175      	bne.n	8005cdc <USB_EPStartXfer+0xc5a>
 8005bf0:	1d3b      	adds	r3, r7, #4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bf8:	1d3b      	adds	r3, r7, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c08:	4413      	add	r3, r2
 8005c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	00da      	lsls	r2, r3, #3
 8005c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c24:	463b      	mov	r3, r7
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2c:	d91f      	bls.n	8005c6e <USB_EPStartXfer+0xbec>
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <USB_EPStartXfer+0xbd0>
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c6a:	801a      	strh	r2, [r3, #0]
 8005c6c:	e05c      	b.n	8005d28 <USB_EPStartXfer+0xca6>
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d116      	bne.n	8005ca6 <USB_EPStartXfer+0xc24>
 8005c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	e040      	b.n	8005d28 <USB_EPStartXfer+0xca6>
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <USB_EPStartXfer+0xc48>
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	029b      	lsls	r3, r3, #10
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	e025      	b.n	8005d28 <USB_EPStartXfer+0xca6>
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d120      	bne.n	8005d28 <USB_EPStartXfer+0xca6>
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cfe:	4413      	add	r3, r2
 8005d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	00da      	lsls	r2, r3, #3
 8005d0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d10:	4413      	add	r3, r2
 8005d12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d175      	bne.n	8005e26 <USB_EPStartXfer+0xda4>
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d52:	4413      	add	r3, r2
 8005d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d58:	463b      	mov	r3, r7
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	00da      	lsls	r2, r3, #3
 8005d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d64:	4413      	add	r3, r2
 8005d66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b3e      	cmp	r3, #62	; 0x3e
 8005d76:	d91f      	bls.n	8005db8 <USB_EPStartXfer+0xd36>
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <USB_EPStartXfer+0xd1a>
 8005d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d96:	3b01      	subs	r3, #1
 8005d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	029b      	lsls	r3, r3, #10
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e058      	b.n	8005e6a <USB_EPStartXfer+0xde8>
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d116      	bne.n	8005df0 <USB_EPStartXfer+0xd6e>
 8005dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	e03c      	b.n	8005e6a <USB_EPStartXfer+0xde8>
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <USB_EPStartXfer+0xd92>
 8005e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e021      	b.n	8005e6a <USB_EPStartXfer+0xde8>
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d11c      	bne.n	8005e6a <USB_EPStartXfer+0xde8>
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e40:	4413      	add	r3, r2
 8005e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	00da      	lsls	r2, r3, #3
 8005e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 81a4 	beq.w	80061be <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e76:	1d3b      	adds	r3, r7, #4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <USB_EPStartXfer+0xe20>
 8005e96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ea2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f040 8187 	bne.w	80061be <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eb0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8180 	bne.w	80061be <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ebe:	1d3b      	adds	r3, r7, #4
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
 8005f02:	e15c      	b.n	80061be <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	78db      	ldrb	r3, [r3, #3]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	f040 8155 	bne.w	80061ba <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d90e      	bls.n	8005f3e <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8005f20:	463b      	mov	r3, r7
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	619a      	str	r2, [r3, #24]
 8005f3c:	e008      	b.n	8005f50 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005f48:	463b      	mov	r3, r7
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d16f      	bne.n	800603a <USB_EPStartXfer+0xfb8>
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f72:	4413      	add	r3, r2
 8005f74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	00da      	lsls	r2, r3, #3
 8005f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f84:	4413      	add	r3, r2
 8005f86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f92:	2b3e      	cmp	r3, #62	; 0x3e
 8005f94:	d91d      	bls.n	8005fd2 <USB_EPStartXfer+0xf50>
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <USB_EPStartXfer+0xf34>
 8005fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	029b      	lsls	r3, r3, #10
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	e058      	b.n	8006084 <USB_EPStartXfer+0x1002>
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d116      	bne.n	8006008 <USB_EPStartXfer+0xf86>
 8005fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e03d      	b.n	8006084 <USB_EPStartXfer+0x1002>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <USB_EPStartXfer+0xfa6>
 800601e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006022:	3301      	adds	r3, #1
 8006024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602c:	b29b      	uxth	r3, r3
 800602e:	029b      	lsls	r3, r3, #10
 8006030:	b29a      	uxth	r2, r3
 8006032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e024      	b.n	8006084 <USB_EPStartXfer+0x1002>
 800603a:	463b      	mov	r3, r7
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d11f      	bne.n	8006084 <USB_EPStartXfer+0x1002>
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800604c:	1d3b      	adds	r3, r7, #4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605c:	4413      	add	r3, r2
 800605e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006062:	463b      	mov	r3, r7
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	00da      	lsls	r2, r3, #3
 800606a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800606e:	4413      	add	r3, r2
 8006070:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607c:	b29a      	uxth	r2, r3
 800607e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006082:	801a      	strh	r2, [r3, #0]
 8006084:	1d3b      	adds	r3, r7, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d16f      	bne.n	8006176 <USB_EPStartXfer+0x10f4>
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060ae:	4413      	add	r3, r2
 80060b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	00da      	lsls	r2, r3, #3
 80060bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ce:	2b3e      	cmp	r3, #62	; 0x3e
 80060d0:	d91d      	bls.n	800610e <USB_EPStartXfer+0x108c>
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <USB_EPStartXfer+0x1070>
 80060e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e057      	b.n	80061be <USB_EPStartXfer+0x113c>
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006112:	2b00      	cmp	r3, #0
 8006114:	d116      	bne.n	8006144 <USB_EPStartXfer+0x10c2>
 8006116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006122:	b29a      	uxth	r2, r3
 8006124:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613a:	b29a      	uxth	r2, r3
 800613c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	e03c      	b.n	80061be <USB_EPStartXfer+0x113c>
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <USB_EPStartXfer+0x10e2>
 800615a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615e:	3301      	adds	r3, #1
 8006160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006168:	b29b      	uxth	r3, r3
 800616a:	029b      	lsls	r3, r3, #10
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	e023      	b.n	80061be <USB_EPStartXfer+0x113c>
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d11e      	bne.n	80061be <USB_EPStartXfer+0x113c>
 8006180:	1d3b      	adds	r3, r7, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006188:	b29b      	uxth	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006190:	4413      	add	r3, r2
 8006192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	00da      	lsls	r2, r3, #3
 800619e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061a2:	4413      	add	r3, r2
 80061a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e001      	b.n	80061be <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e02e      	b.n	800621c <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061be:	1d3b      	adds	r3, r7, #4
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061f4:	1d3b      	adds	r3, r7, #4
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	441a      	add	r2, r3
 8006202:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800620e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006216:	b29b      	uxth	r3, r3
 8006218:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d020      	beq.n	800627a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624e:	81bb      	strh	r3, [r7, #12]
 8006250:	89bb      	ldrh	r3, [r7, #12]
 8006252:	f083 0310 	eor.w	r3, r3, #16
 8006256:	81bb      	strh	r3, [r7, #12]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	89bb      	ldrh	r3, [r7, #12]
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]
 8006278:	e01f      	b.n	80062ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	81fb      	strh	r3, [r7, #14]
 8006292:	89fb      	ldrh	r3, [r7, #14]
 8006294:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006298:	81fb      	strh	r3, [r7, #14]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	89fb      	ldrh	r3, [r7, #14]
 80062a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	7b1b      	ldrb	r3, [r3, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f040 809d 	bne.w	8006416 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d04c      	beq.n	800637e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	823b      	strh	r3, [r7, #16]
 80062f2:	8a3b      	ldrh	r3, [r7, #16]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <USB_EPClearStall+0x6c>
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	81fb      	strh	r3, [r7, #14]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	89fb      	ldrh	r3, [r7, #14]
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	78db      	ldrb	r3, [r3, #3]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d06c      	beq.n	8006416 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006352:	81bb      	strh	r3, [r7, #12]
 8006354:	89bb      	ldrh	r3, [r7, #12]
 8006356:	f083 0320 	eor.w	r3, r3, #32
 800635a:	81bb      	strh	r3, [r7, #12]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	441a      	add	r2, r3
 8006366:	89bb      	ldrh	r3, [r7, #12]
 8006368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006378:	b29b      	uxth	r3, r3
 800637a:	8013      	strh	r3, [r2, #0]
 800637c:	e04b      	b.n	8006416 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	82fb      	strh	r3, [r7, #22]
 800638c:	8afb      	ldrh	r3, [r7, #22]
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d01b      	beq.n	80063ce <USB_EPClearStall+0x106>
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ac:	82bb      	strh	r3, [r7, #20]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	441a      	add	r2, r3
 80063b8:	8abb      	ldrh	r3, [r7, #20]
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	827b      	strh	r3, [r7, #18]
 80063e6:	8a7b      	ldrh	r3, [r7, #18]
 80063e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063ec:	827b      	strh	r3, [r7, #18]
 80063ee:	8a7b      	ldrh	r3, [r7, #18]
 80063f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063f4:	827b      	strh	r3, [r7, #18]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	8a7b      	ldrh	r3, [r7, #18]
 8006402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006412:	b29b      	uxth	r3, r3
 8006414:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2280      	movs	r2, #128	; 0x80
 800643a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800645a:	b29b      	uxth	r3, r3
 800645c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006464:	b29a      	uxth	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006488:	b29b      	uxth	r3, r3
 800648a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800649a:	b480      	push	{r7}
 800649c:	b08d      	sub	sp, #52	; 0x34
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	4611      	mov	r1, r2
 80064a6:	461a      	mov	r2, r3
 80064a8:	460b      	mov	r3, r1
 80064aa:	80fb      	strh	r3, [r7, #6]
 80064ac:	4613      	mov	r3, r2
 80064ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80064b0:	88bb      	ldrh	r3, [r7, #4]
 80064b2:	3301      	adds	r3, #1
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d0:	e01b      	b.n	800650a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	3301      	adds	r3, #1
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	3302      	adds	r3, #2
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	3301      	adds	r3, #1
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	3b01      	subs	r3, #1
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e0      	bne.n	80064d2 <USB_WritePMA+0x38>
  }
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	3734      	adds	r7, #52	; 0x34
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800651e:	b480      	push	{r7}
 8006520:	b08b      	sub	sp, #44	; 0x2c
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	4611      	mov	r1, r2
 800652a:	461a      	mov	r2, r3
 800652c:	460b      	mov	r3, r1
 800652e:	80fb      	strh	r3, [r7, #6]
 8006530:	4613      	mov	r3, r2
 8006532:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006534:	88bb      	ldrh	r3, [r7, #4]
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800654e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
 8006554:	e018      	b.n	8006588 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	3302      	adds	r3, #2
 8006562:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	3301      	adds	r3, #1
 8006570:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	b2da      	uxtb	r2, r3
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3301      	adds	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	3b01      	subs	r3, #1
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e3      	bne.n	8006556 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800658e:	88bb      	ldrh	r3, [r7, #4]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	701a      	strb	r2, [r3, #0]
  }
}
 80065aa:	bf00      	nop
 80065ac:	372c      	adds	r7, #44	; 0x2c
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065c2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065c6:	f002 f901 	bl	80087cc <USBD_static_malloc>
 80065ca:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d105      	bne.n	80065de <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80065da:	2302      	movs	r3, #2
 80065dc:	e066      	b.n	80066ac <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7c1b      	ldrb	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d119      	bne.n	8006622 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f2:	2202      	movs	r2, #2
 80065f4:	2181      	movs	r1, #129	; 0x81
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 ff8d 	bl	8008516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006606:	2202      	movs	r2, #2
 8006608:	2101      	movs	r1, #1
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 ff83 	bl	8008516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2210      	movs	r2, #16
 800661c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006620:	e016      	b.n	8006650 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	2202      	movs	r2, #2
 8006626:	2181      	movs	r1, #129	; 0x81
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 ff74 	bl	8008516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	2202      	movs	r2, #2
 8006638:	2101      	movs	r1, #1
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 ff6b 	bl	8008516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2210      	movs	r2, #16
 800664c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006650:	2308      	movs	r3, #8
 8006652:	2203      	movs	r2, #3
 8006654:	2182      	movs	r1, #130	; 0x82
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 ff5d 	bl	8008516 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	7c1b      	ldrb	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800668c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006690:	2101      	movs	r1, #1
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f002 f82f 	bl	80086f6 <USBD_LL_PrepareReceive>
 8006698:	e007      	b.n	80066aa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a0:	2340      	movs	r3, #64	; 0x40
 80066a2:	2101      	movs	r1, #1
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f002 f826 	bl	80086f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066c0:	2181      	movs	r1, #129	; 0x81
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 ff4d 	bl	8008562 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066ce:	2101      	movs	r1, #1
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 ff46 	bl	8008562 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066de:	2182      	movs	r1, #130	; 0x82
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 ff3e 	bl	8008562 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00e      	beq.n	800671e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006710:	4618      	mov	r0, r3
 8006712:	f002 f869 	bl	80087e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006738:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800674c:	2303      	movs	r3, #3
 800674e:	e0af      	b.n	80068b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006758:	2b00      	cmp	r3, #0
 800675a:	d03f      	beq.n	80067dc <USBD_CDC_Setup+0xb4>
 800675c:	2b20      	cmp	r3, #32
 800675e:	f040 809f 	bne.w	80068a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	88db      	ldrh	r3, [r3, #6]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d02e      	beq.n	80067c8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b25b      	sxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	da16      	bge.n	80067a2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006780:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	88d2      	ldrh	r2, [r2, #6]
 8006786:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	88db      	ldrh	r3, [r3, #6]
 800678c:	2b07      	cmp	r3, #7
 800678e:	bf28      	it	cs
 8006790:	2307      	movcs	r3, #7
 8006792:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	89fa      	ldrh	r2, [r7, #14]
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 facf 	bl	8007d3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80067a0:	e085      	b.n	80068ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	785a      	ldrb	r2, [r3, #1]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	88db      	ldrh	r3, [r3, #6]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80067b8:	6939      	ldr	r1, [r7, #16]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	88db      	ldrh	r3, [r3, #6]
 80067be:	461a      	mov	r2, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fae8 	bl	8007d96 <USBD_CtlPrepareRx>
      break;
 80067c6:	e072      	b.n	80068ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	7850      	ldrb	r0, [r2, #1]
 80067d4:	2200      	movs	r2, #0
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	4798      	blx	r3
      break;
 80067da:	e068      	b.n	80068ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b0b      	cmp	r3, #11
 80067e2:	d852      	bhi.n	800688a <USBD_CDC_Setup+0x162>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <USBD_CDC_Setup+0xc4>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	0800681d 	.word	0x0800681d
 80067f0:	08006899 	.word	0x08006899
 80067f4:	0800688b 	.word	0x0800688b
 80067f8:	0800688b 	.word	0x0800688b
 80067fc:	0800688b 	.word	0x0800688b
 8006800:	0800688b 	.word	0x0800688b
 8006804:	0800688b 	.word	0x0800688b
 8006808:	0800688b 	.word	0x0800688b
 800680c:	0800688b 	.word	0x0800688b
 8006810:	0800688b 	.word	0x0800688b
 8006814:	08006847 	.word	0x08006847
 8006818:	08006871 	.word	0x08006871
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b03      	cmp	r3, #3
 8006826:	d107      	bne.n	8006838 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006828:	f107 030a 	add.w	r3, r7, #10
 800682c:	2202      	movs	r2, #2
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fa84 	bl	8007d3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006836:	e032      	b.n	800689e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fa0e 	bl	8007c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	75fb      	strb	r3, [r7, #23]
          break;
 8006844:	e02b      	b.n	800689e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b03      	cmp	r3, #3
 8006850:	d107      	bne.n	8006862 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006852:	f107 030d 	add.w	r3, r7, #13
 8006856:	2201      	movs	r2, #1
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fa6f 	bl	8007d3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006860:	e01d      	b.n	800689e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 f9f9 	bl	8007c5c <USBD_CtlError>
            ret = USBD_FAIL;
 800686a:	2303      	movs	r3, #3
 800686c:	75fb      	strb	r3, [r7, #23]
          break;
 800686e:	e016      	b.n	800689e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b03      	cmp	r3, #3
 800687a:	d00f      	beq.n	800689c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 f9ec 	bl	8007c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006888:	e008      	b.n	800689c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f9e5 	bl	8007c5c <USBD_CtlError>
          ret = USBD_FAIL;
 8006892:	2303      	movs	r3, #3
 8006894:	75fb      	strb	r3, [r7, #23]
          break;
 8006896:	e002      	b.n	800689e <USBD_CDC_Setup+0x176>
          break;
 8006898:	bf00      	nop
 800689a:	e008      	b.n	80068ae <USBD_CDC_Setup+0x186>
          break;
 800689c:	bf00      	nop
      }
      break;
 800689e:	e006      	b.n	80068ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f9da 	bl	8007c5c <USBD_CtlError>
      ret = USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	75fb      	strb	r3, [r7, #23]
      break;
 80068ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e04f      	b.n	800697a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	3318      	adds	r3, #24
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d029      	beq.n	800694c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	3318      	adds	r3, #24
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	78f9      	ldrb	r1, [r7, #3]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	460b      	mov	r3, r1
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4403      	add	r3, r0
 8006918:	3338      	adds	r3, #56	; 0x38
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006920:	fb03 f301 	mul.w	r3, r3, r1
 8006924:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006926:	2b00      	cmp	r3, #0
 8006928:	d110      	bne.n	800694c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	3318      	adds	r3, #24
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800693e:	78f9      	ldrb	r1, [r7, #3]
 8006940:	2300      	movs	r3, #0
 8006942:	2200      	movs	r2, #0
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 feb5 	bl	80086b4 <USBD_LL_Transmit>
 800694a:	e015      	b.n	8006978 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006974:	78fa      	ldrb	r2, [r7, #3]
 8006976:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006994:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e015      	b.n	80069d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fec5 	bl	8008738 <USBD_LL_GetRxDataSize>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069ca:	4611      	mov	r1, r2
 80069cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e01b      	b.n	8006a2a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d015      	beq.n	8006a28 <USBD_CDC_EP0_RxReady+0x50>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a02:	2bff      	cmp	r3, #255	; 0xff
 8006a04:	d010      	beq.n	8006a28 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006a14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a1c:	b292      	uxth	r2, r2
 8006a1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	22ff      	movs	r2, #255	; 0xff
 8006a24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2243      	movs	r2, #67	; 0x43
 8006a40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006a42:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20000094 	.word	0x20000094

08006a54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2243      	movs	r2, #67	; 0x43
 8006a60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006a62:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	20000050 	.word	0x20000050

08006a74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2243      	movs	r2, #67	; 0x43
 8006a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a82:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	200000d8 	.word	0x200000d8

08006a94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006aa2:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	2000000c 	.word	0x2000000c

08006ab4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e004      	b.n	8006ad2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b087      	sub	sp, #28
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e008      	b.n	8006b0e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e004      	b.n	8006b40 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e01a      	b.n	8006ba4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d114      	bne.n	8006ba2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b96:	2181      	movs	r1, #129	; 0x81
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fd8b 	bl	80086b4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e016      	b.n	8006bf8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7c1b      	ldrb	r3, [r3, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bdc:	2101      	movs	r1, #1
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fd89 	bl	80086f6 <USBD_LL_PrepareReceive>
 8006be4:	e007      	b.n	8006bf6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	2101      	movs	r1, #1
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fd80 	bl	80086f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e01f      	b.n	8006c58 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	79fa      	ldrb	r2, [r7, #7]
 8006c4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f001 fbe7 	bl	8008420 <USBD_LL_Init>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e016      	b.n	8006ca6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	f107 020e 	add.w	r2, r7, #14
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fc12 	bl	80084e0 <USBD_LL_Start>
 8006cbc:	4603      	mov	r3, r0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	4611      	mov	r1, r2
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	4611      	mov	r1, r2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
  }

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 ff46 	bl	8007be8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d01a      	beq.n	8006db6 <USBD_LL_SetupStage+0x72>
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d822      	bhi.n	8006dca <USBD_LL_SetupStage+0x86>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <USBD_LL_SetupStage+0x4a>
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d00a      	beq.n	8006da2 <USBD_LL_SetupStage+0x5e>
 8006d8c:	e01d      	b.n	8006dca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9ee 	bl	8007178 <USBD_StdDevReq>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e020      	b.n	8006de4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa52 	bl	8007254 <USBD_StdItfReq>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
      break;
 8006db4:	e016      	b.n	8006de4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa91 	bl	80072e6 <USBD_StdEPReq>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e00c      	b.n	8006de4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fbe1 	bl	80085a0 <USBD_LL_StallEP>
 8006dde:	4603      	mov	r3, r0
 8006de0:	73fb      	strb	r3, [r7, #15]
      break;
 8006de2:	bf00      	nop
  }

  return ret;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b086      	sub	sp, #24
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	460b      	mov	r3, r1
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d138      	bne.n	8006e74 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d14a      	bne.n	8006eaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d913      	bls.n	8006e48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	bf28      	it	cs
 8006e3a:	4613      	movcs	r3, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 ffc5 	bl	8007dd0 <USBD_CtlContinueRx>
 8006e46:	e030      	b.n	8006eaa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d10b      	bne.n	8006e6c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 ffc0 	bl	8007df2 <USBD_CtlSendStatus>
 8006e72:	e01a      	b.n	8006eaa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d114      	bne.n	8006eaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	7afa      	ldrb	r2, [r7, #11]
 8006e96:	4611      	mov	r1, r2
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	4798      	blx	r3
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	e000      	b.n	8006eac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ec2:	7afb      	ldrb	r3, [r7, #11]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d16b      	bne.n	8006fa0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d156      	bne.n	8006f86 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d914      	bls.n	8006f0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	1ad2      	subs	r2, r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 ff3a 	bl	8007d74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f00:	2300      	movs	r3, #0
 8006f02:	2200      	movs	r2, #0
 8006f04:	2100      	movs	r1, #0
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f001 fbf5 	bl	80086f6 <USBD_LL_PrepareReceive>
 8006f0c:	e03b      	b.n	8006f86 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d11c      	bne.n	8006f54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d316      	bcc.n	8006f54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d20f      	bcs.n	8006f54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f34:	2200      	movs	r2, #0
 8006f36:	2100      	movs	r1, #0
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 ff1b 	bl	8007d74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f46:	2300      	movs	r3, #0
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f001 fbd2 	bl	80086f6 <USBD_LL_PrepareReceive>
 8006f52:	e018      	b.n	8006f86 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d10b      	bne.n	8006f78 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f78:	2180      	movs	r1, #128	; 0x80
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f001 fb10 	bl	80085a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 ff49 	bl	8007e18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d122      	bne.n	8006fd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fe98 	bl	8006cc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f9e:	e01a      	b.n	8006fd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d114      	bne.n	8006fd6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00e      	beq.n	8006fd6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	7afa      	ldrb	r2, [r7, #11]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	4798      	blx	r3
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	e000      	b.n	8006fd8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	e02f      	b.n	8007074 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00f      	beq.n	800703e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6852      	ldr	r2, [r2, #4]
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	4611      	mov	r1, r2
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800703e:	2340      	movs	r3, #64	; 0x40
 8007040:	2200      	movs	r2, #0
 8007042:	2100      	movs	r1, #0
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fa66 	bl	8008516 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2240      	movs	r2, #64	; 0x40
 8007056:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800705a:	2340      	movs	r3, #64	; 0x40
 800705c:	2200      	movs	r2, #0
 800705e:	2180      	movs	r1, #128	; 0x80
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fa58 	bl	8008516 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2240      	movs	r2, #64	; 0x40
 8007070:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2204      	movs	r2, #4
 80070b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d106      	bne.n	80070ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800710a:	2303      	movs	r3, #3
 800710c:	e012      	b.n	8007134 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b03      	cmp	r3, #3
 8007118:	d10b      	bne.n	8007132 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	3301      	adds	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800715a:	8a3b      	ldrh	r3, [r7, #16]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	b21a      	sxth	r2, r3
 8007160:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007164:	4313      	orrs	r3, r2
 8007166:	b21b      	sxth	r3, r3
 8007168:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800716a:	89fb      	ldrh	r3, [r7, #14]
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800718e:	2b40      	cmp	r3, #64	; 0x40
 8007190:	d005      	beq.n	800719e <USBD_StdDevReq+0x26>
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d853      	bhi.n	800723e <USBD_StdDevReq+0xc6>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <USBD_StdDevReq+0x3a>
 800719a:	2b20      	cmp	r3, #32
 800719c:	d14f      	bne.n	800723e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
      break;
 80071b0:	e04a      	b.n	8007248 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d83b      	bhi.n	8007232 <USBD_StdDevReq+0xba>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <USBD_StdDevReq+0x48>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007229 	.word	0x08007229
 80071c8:	08007233 	.word	0x08007233
 80071cc:	0800721f 	.word	0x0800721f
 80071d0:	08007233 	.word	0x08007233
 80071d4:	080071f3 	.word	0x080071f3
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	08007233 	.word	0x08007233
 80071e0:	0800720b 	.word	0x0800720b
 80071e4:	080071fd 	.word	0x080071fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f9de 	bl	80075ac <USBD_GetDescriptor>
          break;
 80071f0:	e024      	b.n	800723c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb6d 	bl	80078d4 <USBD_SetAddress>
          break;
 80071fa:	e01f      	b.n	800723c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fbac 	bl	800795c <USBD_SetConfig>
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
          break;
 8007208:	e018      	b.n	800723c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fc4b 	bl	8007aa8 <USBD_GetConfig>
          break;
 8007212:	e013      	b.n	800723c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fc7c 	bl	8007b14 <USBD_GetStatus>
          break;
 800721c:	e00e      	b.n	800723c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fcab 	bl	8007b7c <USBD_SetFeature>
          break;
 8007226:	e009      	b.n	800723c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fcba 	bl	8007ba4 <USBD_ClrFeature>
          break;
 8007230:	e004      	b.n	800723c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fd11 	bl	8007c5c <USBD_CtlError>
          break;
 800723a:	bf00      	nop
      }
      break;
 800723c:	e004      	b.n	8007248 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fd0b 	bl	8007c5c <USBD_CtlError>
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop

08007254 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d005      	beq.n	800727a <USBD_StdItfReq+0x26>
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d82f      	bhi.n	80072d2 <USBD_StdItfReq+0x7e>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <USBD_StdItfReq+0x26>
 8007276:	2b20      	cmp	r3, #32
 8007278:	d12b      	bne.n	80072d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	b2db      	uxtb	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	2b02      	cmp	r3, #2
 8007286:	d81d      	bhi.n	80072c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	889b      	ldrh	r3, [r3, #4]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	d813      	bhi.n	80072ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	88db      	ldrh	r3, [r3, #6]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d110      	bne.n	80072ce <USBD_StdItfReq+0x7a>
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fd9d 	bl	8007df2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072b8:	e009      	b.n	80072ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fccd 	bl	8007c5c <USBD_CtlError>
          break;
 80072c2:	e004      	b.n	80072ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fcc8 	bl	8007c5c <USBD_CtlError>
          break;
 80072cc:	e000      	b.n	80072d0 <USBD_StdItfReq+0x7c>
          break;
 80072ce:	bf00      	nop
      }
      break;
 80072d0:	e004      	b.n	80072dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fcc1 	bl	8007c5c <USBD_CtlError>
      break;
 80072da:	bf00      	nop
  }

  return ret;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	889b      	ldrh	r3, [r3, #4]
 80072f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d007      	beq.n	8007316 <USBD_StdEPReq+0x30>
 8007306:	2b40      	cmp	r3, #64	; 0x40
 8007308:	f200 8145 	bhi.w	8007596 <USBD_StdEPReq+0x2b0>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <USBD_StdEPReq+0x44>
 8007310:	2b20      	cmp	r3, #32
 8007312:	f040 8140 	bne.w	8007596 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e13a      	b.n	80075a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b03      	cmp	r3, #3
 8007330:	d007      	beq.n	8007342 <USBD_StdEPReq+0x5c>
 8007332:	2b03      	cmp	r3, #3
 8007334:	f300 8129 	bgt.w	800758a <USBD_StdEPReq+0x2a4>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d07f      	beq.n	800743c <USBD_StdEPReq+0x156>
 800733c:	2b01      	cmp	r3, #1
 800733e:	d03c      	beq.n	80073ba <USBD_StdEPReq+0xd4>
 8007340:	e123      	b.n	800758a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d002      	beq.n	8007354 <USBD_StdEPReq+0x6e>
 800734e:	2b03      	cmp	r3, #3
 8007350:	d016      	beq.n	8007380 <USBD_StdEPReq+0x9a>
 8007352:	e02c      	b.n	80073ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00d      	beq.n	8007376 <USBD_StdEPReq+0x90>
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d00a      	beq.n	8007376 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 f91b 	bl	80085a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800736a:	2180      	movs	r1, #128	; 0x80
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f917 	bl	80085a0 <USBD_LL_StallEP>
 8007372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007374:	e020      	b.n	80073b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fc6f 	bl	8007c5c <USBD_CtlError>
              break;
 800737e:	e01b      	b.n	80073b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	885b      	ldrh	r3, [r3, #2]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10e      	bne.n	80073a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <USBD_StdEPReq+0xc0>
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	2b80      	cmp	r3, #128	; 0x80
 8007392:	d008      	beq.n	80073a6 <USBD_StdEPReq+0xc0>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	88db      	ldrh	r3, [r3, #6]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 f8fd 	bl	80085a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fd23 	bl	8007df2 <USBD_CtlSendStatus>

              break;
 80073ac:	e004      	b.n	80073b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fc53 	bl	8007c5c <USBD_CtlError>
              break;
 80073b6:	bf00      	nop
          }
          break;
 80073b8:	e0ec      	b.n	8007594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d002      	beq.n	80073cc <USBD_StdEPReq+0xe6>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d016      	beq.n	80073f8 <USBD_StdEPReq+0x112>
 80073ca:	e030      	b.n	800742e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00d      	beq.n	80073ee <USBD_StdEPReq+0x108>
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d00a      	beq.n	80073ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f8df 	bl	80085a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f8db 	bl	80085a0 <USBD_LL_StallEP>
 80073ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073ec:	e025      	b.n	800743a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fc33 	bl	8007c5c <USBD_CtlError>
              break;
 80073f6:	e020      	b.n	800743a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	885b      	ldrh	r3, [r3, #2]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11b      	bne.n	8007438 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f8e5 	bl	80085de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fcec 	bl	8007df2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800742c:	e004      	b.n	8007438 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fc13 	bl	8007c5c <USBD_CtlError>
              break;
 8007436:	e000      	b.n	800743a <USBD_StdEPReq+0x154>
              break;
 8007438:	bf00      	nop
          }
          break;
 800743a:	e0ab      	b.n	8007594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d002      	beq.n	800744e <USBD_StdEPReq+0x168>
 8007448:	2b03      	cmp	r3, #3
 800744a:	d032      	beq.n	80074b2 <USBD_StdEPReq+0x1cc>
 800744c:	e097      	b.n	800757e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <USBD_StdEPReq+0x17e>
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d004      	beq.n	8007464 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbfd 	bl	8007c5c <USBD_CtlError>
                break;
 8007462:	e091      	b.n	8007588 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007468:	2b00      	cmp	r3, #0
 800746a:	da0b      	bge.n	8007484 <USBD_StdEPReq+0x19e>
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	3310      	adds	r3, #16
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4413      	add	r3, r2
 8007480:	3304      	adds	r3, #4
 8007482:	e00b      	b.n	800749c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	3304      	adds	r3, #4
 800749c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2202      	movs	r2, #2
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fc47 	bl	8007d3e <USBD_CtlSendData>
              break;
 80074b0:	e06a      	b.n	8007588 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da11      	bge.n	80074de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	f003 020f 	and.w	r2, r3, #15
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	3324      	adds	r3, #36	; 0x24
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d117      	bne.n	8007504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fbc0 	bl	8007c5c <USBD_CtlError>
                  break;
 80074dc:	e054      	b.n	8007588 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	f003 020f 	and.w	r2, r3, #15
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fbad 	bl	8007c5c <USBD_CtlError>
                  break;
 8007502:	e041      	b.n	8007588 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007508:	2b00      	cmp	r3, #0
 800750a:	da0b      	bge.n	8007524 <USBD_StdEPReq+0x23e>
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	3310      	adds	r3, #16
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4413      	add	r3, r2
 8007520:	3304      	adds	r3, #4
 8007522:	e00b      	b.n	800753c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	3304      	adds	r3, #4
 800753c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <USBD_StdEPReq+0x264>
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b80      	cmp	r3, #128	; 0x80
 8007548:	d103      	bne.n	8007552 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	e00e      	b.n	8007570 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 f860 	bl	800861c <USBD_LL_IsStallEP>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2201      	movs	r2, #1
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	e002      	b.n	8007570 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2202      	movs	r2, #2
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fbe1 	bl	8007d3e <USBD_CtlSendData>
              break;
 800757c:	e004      	b.n	8007588 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb6b 	bl	8007c5c <USBD_CtlError>
              break;
 8007586:	bf00      	nop
          }
          break;
 8007588:	e004      	b.n	8007594 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb65 	bl	8007c5c <USBD_CtlError>
          break;
 8007592:	bf00      	nop
      }
      break;
 8007594:	e004      	b.n	80075a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fb5f 	bl	8007c5c <USBD_CtlError>
      break;
 800759e:	bf00      	nop
  }

  return ret;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	885b      	ldrh	r3, [r3, #2]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b0e      	cmp	r3, #14
 80075ce:	f200 8152 	bhi.w	8007876 <USBD_GetDescriptor+0x2ca>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <USBD_GetDescriptor+0x2c>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	08007649 	.word	0x08007649
 80075dc:	08007661 	.word	0x08007661
 80075e0:	080076a1 	.word	0x080076a1
 80075e4:	08007877 	.word	0x08007877
 80075e8:	08007877 	.word	0x08007877
 80075ec:	08007817 	.word	0x08007817
 80075f0:	08007843 	.word	0x08007843
 80075f4:	08007877 	.word	0x08007877
 80075f8:	08007877 	.word	0x08007877
 80075fc:	08007877 	.word	0x08007877
 8007600:	08007877 	.word	0x08007877
 8007604:	08007877 	.word	0x08007877
 8007608:	08007877 	.word	0x08007877
 800760c:	08007877 	.word	0x08007877
 8007610:	08007615 	.word	0x08007615
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007636:	e126      	b.n	8007886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fb0e 	bl	8007c5c <USBD_CtlError>
        err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
      break;
 8007646:	e11e      	b.n	8007886 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
      break;
 800765e:	e112      	b.n	8007886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	7c1b      	ldrb	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10d      	bne.n	8007684 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	f107 0208 	add.w	r2, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3301      	adds	r3, #1
 800767e:	2202      	movs	r2, #2
 8007680:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007682:	e100      	b.n	8007886 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	f107 0208 	add.w	r2, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	2202      	movs	r2, #2
 800769c:	701a      	strb	r2, [r3, #0]
      break;
 800769e:	e0f2      	b.n	8007886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	885b      	ldrh	r3, [r3, #2]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	f200 80ac 	bhi.w	8007804 <USBD_GetDescriptor+0x258>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USBD_GetDescriptor+0x108>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076cd 	.word	0x080076cd
 80076b8:	08007701 	.word	0x08007701
 80076bc:	08007735 	.word	0x08007735
 80076c0:	08007769 	.word	0x08007769
 80076c4:	0800779d 	.word	0x0800779d
 80076c8:	080077d1 	.word	0x080077d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7c12      	ldrb	r2, [r2, #16]
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ee:	e091      	b.n	8007814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fab2 	bl	8007c5c <USBD_CtlError>
            err++;
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	3301      	adds	r3, #1
 80076fc:	72fb      	strb	r3, [r7, #11]
          break;
 80076fe:	e089      	b.n	8007814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007722:	e077      	b.n	8007814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa98 	bl	8007c5c <USBD_CtlError>
            err++;
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	3301      	adds	r3, #1
 8007730:	72fb      	strb	r3, [r7, #11]
          break;
 8007732:	e06f      	b.n	8007814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007756:	e05d      	b.n	8007814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa7e 	bl	8007c5c <USBD_CtlError>
            err++;
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	3301      	adds	r3, #1
 8007764:	72fb      	strb	r3, [r7, #11]
          break;
 8007766:	e055      	b.n	8007814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7c12      	ldrb	r2, [r2, #16]
 8007780:	f107 0108 	add.w	r1, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778a:	e043      	b.n	8007814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa64 	bl	8007c5c <USBD_CtlError>
            err++;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	3301      	adds	r3, #1
 8007798:	72fb      	strb	r3, [r7, #11]
          break;
 800779a:	e03b      	b.n	8007814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	7c12      	ldrb	r2, [r2, #16]
 80077b4:	f107 0108 	add.w	r1, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077be:	e029      	b.n	8007814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa4a 	bl	8007c5c <USBD_CtlError>
            err++;
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	3301      	adds	r3, #1
 80077cc:	72fb      	strb	r3, [r7, #11]
          break;
 80077ce:	e021      	b.n	8007814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7c12      	ldrb	r2, [r2, #16]
 80077e8:	f107 0108 	add.w	r1, r7, #8
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f2:	e00f      	b.n	8007814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa30 	bl	8007c5c <USBD_CtlError>
            err++;
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	3301      	adds	r3, #1
 8007800:	72fb      	strb	r3, [r7, #11]
          break;
 8007802:	e007      	b.n	8007814 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa28 	bl	8007c5c <USBD_CtlError>
          err++;
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	3301      	adds	r3, #1
 8007810:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007812:	bf00      	nop
      }
      break;
 8007814:	e037      	b.n	8007886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	7c1b      	ldrb	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007826:	f107 0208 	add.w	r2, r7, #8
 800782a:	4610      	mov	r0, r2
 800782c:	4798      	blx	r3
 800782e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007830:	e029      	b.n	8007886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa11 	bl	8007c5c <USBD_CtlError>
        err++;
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	3301      	adds	r3, #1
 800783e:	72fb      	strb	r3, [r7, #11]
      break;
 8007840:	e021      	b.n	8007886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7c1b      	ldrb	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10d      	bne.n	8007866 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007852:	f107 0208 	add.w	r2, r7, #8
 8007856:	4610      	mov	r0, r2
 8007858:	4798      	blx	r3
 800785a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	2207      	movs	r2, #7
 8007862:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007864:	e00f      	b.n	8007886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9f7 	bl	8007c5c <USBD_CtlError>
        err++;
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	3301      	adds	r3, #1
 8007872:	72fb      	strb	r3, [r7, #11]
      break;
 8007874:	e007      	b.n	8007886 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f9ef 	bl	8007c5c <USBD_CtlError>
      err++;
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	3301      	adds	r3, #1
 8007882:	72fb      	strb	r3, [r7, #11]
      break;
 8007884:	bf00      	nop
  }

  if (err != 0U)
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d11e      	bne.n	80078ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	88db      	ldrh	r3, [r3, #6]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007894:	893b      	ldrh	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00e      	beq.n	80078b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	88da      	ldrh	r2, [r3, #6]
 800789e:	893b      	ldrh	r3, [r7, #8]
 80078a0:	4293      	cmp	r3, r2
 80078a2:	bf28      	it	cs
 80078a4:	4613      	movcs	r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078aa:	893b      	ldrh	r3, [r7, #8]
 80078ac:	461a      	mov	r2, r3
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fa44 	bl	8007d3e <USBD_CtlSendData>
 80078b6:	e009      	b.n	80078cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f9ce 	bl	8007c5c <USBD_CtlError>
 80078c0:	e004      	b.n	80078cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa95 	bl	8007df2 <USBD_CtlSendStatus>
 80078c8:	e000      	b.n	80078cc <USBD_GetDescriptor+0x320>
    return;
 80078ca:	bf00      	nop
  }
}
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop

080078d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	889b      	ldrh	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d131      	bne.n	800794a <USBD_SetAddress+0x76>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	88db      	ldrh	r3, [r3, #6]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d12d      	bne.n	800794a <USBD_SetAddress+0x76>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	2b7f      	cmp	r3, #127	; 0x7f
 80078f4:	d829      	bhi.n	800794a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	885b      	ldrh	r3, [r3, #2]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007900:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b03      	cmp	r3, #3
 800790c:	d104      	bne.n	8007918 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f9a3 	bl	8007c5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007916:	e01d      	b.n	8007954 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	7bfa      	ldrb	r2, [r7, #15]
 800791c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fea6 	bl	8008676 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa61 	bl	8007df2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793e:	e009      	b.n	8007954 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007948:	e004      	b.n	8007954 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f985 	bl	8007c5c <USBD_CtlError>
  }
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	b2da      	uxtb	r2, r3
 8007970:	4b4c      	ldr	r3, [pc, #304]	; (8007aa4 <USBD_SetConfig+0x148>)
 8007972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007974:	4b4b      	ldr	r3, [pc, #300]	; (8007aa4 <USBD_SetConfig+0x148>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d905      	bls.n	8007988 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f96c 	bl	8007c5c <USBD_CtlError>
    return USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e088      	b.n	8007a9a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d002      	beq.n	800799a <USBD_SetConfig+0x3e>
 8007994:	2b03      	cmp	r3, #3
 8007996:	d025      	beq.n	80079e4 <USBD_SetConfig+0x88>
 8007998:	e071      	b.n	8007a7e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800799a:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <USBD_SetConfig+0x148>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01c      	beq.n	80079dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80079a2:	4b40      	ldr	r3, [pc, #256]	; (8007aa4 <USBD_SetConfig+0x148>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079ac:	4b3d      	ldr	r3, [pc, #244]	; (8007aa4 <USBD_SetConfig+0x148>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff f992 	bl	8006cdc <USBD_SetClassConfig>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f949 	bl	8007c5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079ca:	e065      	b.n	8007a98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fa10 	bl	8007df2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2203      	movs	r2, #3
 80079d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079da:	e05d      	b.n	8007a98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fa08 	bl	8007df2 <USBD_CtlSendStatus>
      break;
 80079e2:	e059      	b.n	8007a98 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079e4:	4b2f      	ldr	r3, [pc, #188]	; (8007aa4 <USBD_SetConfig+0x148>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d112      	bne.n	8007a12 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079f4:	4b2b      	ldr	r3, [pc, #172]	; (8007aa4 <USBD_SetConfig+0x148>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079fe:	4b29      	ldr	r3, [pc, #164]	; (8007aa4 <USBD_SetConfig+0x148>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff f985 	bl	8006d14 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f9f1 	bl	8007df2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a10:	e042      	b.n	8007a98 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <USBD_SetConfig+0x148>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d02a      	beq.n	8007a76 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff f973 	bl	8006d14 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <USBD_SetConfig+0x148>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <USBD_SetConfig+0x148>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff f94c 	bl	8006cdc <USBD_SetClassConfig>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00f      	beq.n	8007a6e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f903 	bl	8007c5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff f958 	bl	8006d14 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a6c:	e014      	b.n	8007a98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9bf 	bl	8007df2 <USBD_CtlSendStatus>
      break;
 8007a74:	e010      	b.n	8007a98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f9bb 	bl	8007df2 <USBD_CtlSendStatus>
      break;
 8007a7c:	e00c      	b.n	8007a98 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f8eb 	bl	8007c5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <USBD_SetConfig+0x148>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff f941 	bl	8006d14 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a92:	2303      	movs	r3, #3
 8007a94:	73fb      	strb	r3, [r7, #15]
      break;
 8007a96:	bf00      	nop
  }

  return ret;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200001ab 	.word	0x200001ab

08007aa8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	88db      	ldrh	r3, [r3, #6]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d004      	beq.n	8007ac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8cd 	bl	8007c5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ac2:	e023      	b.n	8007b0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	dc02      	bgt.n	8007ad6 <USBD_GetConfig+0x2e>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dc03      	bgt.n	8007adc <USBD_GetConfig+0x34>
 8007ad4:	e015      	b.n	8007b02 <USBD_GetConfig+0x5a>
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d00b      	beq.n	8007af2 <USBD_GetConfig+0x4a>
 8007ada:	e012      	b.n	8007b02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f927 	bl	8007d3e <USBD_CtlSendData>
        break;
 8007af0:	e00c      	b.n	8007b0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	2201      	movs	r2, #1
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f91f 	bl	8007d3e <USBD_CtlSendData>
        break;
 8007b00:	e004      	b.n	8007b0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8a9 	bl	8007c5c <USBD_CtlError>
        break;
 8007b0a:	bf00      	nop
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d81e      	bhi.n	8007b6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	88db      	ldrh	r3, [r3, #6]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d004      	beq.n	8007b3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f890 	bl	8007c5c <USBD_CtlError>
        break;
 8007b3c:	e01a      	b.n	8007b74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f043 0202 	orr.w	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	2202      	movs	r2, #2
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8eb 	bl	8007d3e <USBD_CtlSendData>
      break;
 8007b68:	e004      	b.n	8007b74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f875 	bl	8007c5c <USBD_CtlError>
      break;
 8007b72:	bf00      	nop
  }
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d106      	bne.n	8007b9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f92b 	bl	8007df2 <USBD_CtlSendStatus>
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d80b      	bhi.n	8007bd4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	885b      	ldrh	r3, [r3, #2]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d10c      	bne.n	8007bde <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f910 	bl	8007df2 <USBD_CtlSendStatus>
      }
      break;
 8007bd2:	e004      	b.n	8007bde <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f840 	bl	8007c5c <USBD_CtlError>
      break;
 8007bdc:	e000      	b.n	8007be0 <USBD_ClrFeature+0x3c>
      break;
 8007bde:	bf00      	nop
  }
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	781a      	ldrb	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	781a      	ldrb	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff fa92 	bl	800713c <SWAPBYTE>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fa85 	bl	800713c <SWAPBYTE>
 8007c32:	4603      	mov	r3, r0
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7ff fa78 	bl	800713c <SWAPBYTE>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	80da      	strh	r2, [r3, #6]
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c66:	2180      	movs	r1, #128	; 0x80
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fc99 	bl	80085a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fc95 	bl	80085a0 <USBD_LL_StallEP>
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d036      	beq.n	8007d02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c98:	6938      	ldr	r0, [r7, #16]
 8007c9a:	f000 f836 	bl	8007d0a <USBD_GetLen>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cce:	e013      	b.n	8007cf8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	7812      	ldrb	r2, [r2, #0]
 8007cda:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	613b      	str	r3, [r7, #16]
    idx++;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e7      	bne.n	8007cd0 <USBD_GetString+0x52>
 8007d00:	e000      	b.n	8007d04 <USBD_GetString+0x86>
    return;
 8007d02:	bf00      	nop
  }
}
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d1a:	e005      	b.n	8007d28 <USBD_GetLen+0x1e>
  {
    len++;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f5      	bne.n	8007d1c <USBD_GetLen+0x12>
  }

  return len;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	2100      	movs	r1, #0
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 fca5 	bl	80086b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	2100      	movs	r1, #0
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 fc94 	bl	80086b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2203      	movs	r2, #3
 8007da6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fc98 	bl	80086f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	2100      	movs	r1, #0
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 fc87 	bl	80086f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e02:	2300      	movs	r3, #0
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc53 	bl	80086b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2205      	movs	r2, #5
 8007e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fc61 	bl	80086f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007e44:	2200      	movs	r2, #0
 8007e46:	4912      	ldr	r1, [pc, #72]	; (8007e90 <MX_USB_Device_Init+0x50>)
 8007e48:	4812      	ldr	r0, [pc, #72]	; (8007e94 <MX_USB_Device_Init+0x54>)
 8007e4a:	f7fe fed9 	bl	8006c00 <USBD_Init>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007e54:	f7f8 fb12 	bl	800047c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007e58:	490f      	ldr	r1, [pc, #60]	; (8007e98 <MX_USB_Device_Init+0x58>)
 8007e5a:	480e      	ldr	r0, [pc, #56]	; (8007e94 <MX_USB_Device_Init+0x54>)
 8007e5c:	f7fe ff00 	bl	8006c60 <USBD_RegisterClass>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007e66:	f7f8 fb09 	bl	800047c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007e6a:	490c      	ldr	r1, [pc, #48]	; (8007e9c <MX_USB_Device_Init+0x5c>)
 8007e6c:	4809      	ldr	r0, [pc, #36]	; (8007e94 <MX_USB_Device_Init+0x54>)
 8007e6e:	f7fe fe21 	bl	8006ab4 <USBD_CDC_RegisterInterface>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007e78:	f7f8 fb00 	bl	800047c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007e7c:	4805      	ldr	r0, [pc, #20]	; (8007e94 <MX_USB_Device_Init+0x54>)
 8007e7e:	f7fe ff16 	bl	8006cae <USBD_Start>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007e88:	f7f8 faf8 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007e8c:	bf00      	nop
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000130 	.word	0x20000130
 8007e94:	2000041c 	.word	0x2000041c
 8007e98:	20000018 	.word	0x20000018
 8007e9c:	2000011c 	.word	0x2000011c

08007ea0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4905      	ldr	r1, [pc, #20]	; (8007ebc <CDC_Init_FS+0x1c>)
 8007ea8:	4805      	ldr	r0, [pc, #20]	; (8007ec0 <CDC_Init_FS+0x20>)
 8007eaa:	f7fe fe18 	bl	8006ade <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007eae:	4905      	ldr	r1, [pc, #20]	; (8007ec4 <CDC_Init_FS+0x24>)
 8007eb0:	4803      	ldr	r0, [pc, #12]	; (8007ec0 <CDC_Init_FS+0x20>)
 8007eb2:	f7fe fe32 	bl	8006b1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000ad4 	.word	0x20000ad4
 8007ec0:	2000041c 	.word	0x2000041c
 8007ec4:	200006ec 	.word	0x200006ec

08007ec8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ecc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	6039      	str	r1, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	2b23      	cmp	r3, #35	; 0x23
 8007eec:	d84a      	bhi.n	8007f84 <CDC_Control_FS+0xac>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <CDC_Control_FS+0x1c>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f85 	.word	0x08007f85
 8007ef8:	08007f85 	.word	0x08007f85
 8007efc:	08007f85 	.word	0x08007f85
 8007f00:	08007f85 	.word	0x08007f85
 8007f04:	08007f85 	.word	0x08007f85
 8007f08:	08007f85 	.word	0x08007f85
 8007f0c:	08007f85 	.word	0x08007f85
 8007f10:	08007f85 	.word	0x08007f85
 8007f14:	08007f85 	.word	0x08007f85
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08007f85 	.word	0x08007f85
 8007f24:	08007f85 	.word	0x08007f85
 8007f28:	08007f85 	.word	0x08007f85
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	08007f85 	.word	0x08007f85
 8007f3c:	08007f85 	.word	0x08007f85
 8007f40:	08007f85 	.word	0x08007f85
 8007f44:	08007f85 	.word	0x08007f85
 8007f48:	08007f85 	.word	0x08007f85
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007f85 	.word	0x08007f85
 8007f54:	08007f85 	.word	0x08007f85
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007f85 	.word	0x08007f85
 8007f68:	08007f85 	.word	0x08007f85
 8007f6c:	08007f85 	.word	0x08007f85
 8007f70:	08007f85 	.word	0x08007f85
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007f85 	.word	0x08007f85
 8007f7c:	08007f85 	.word	0x08007f85
 8007f80:	08007f85 	.word	0x08007f85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f84:	bf00      	nop
  }

  return (USBD_OK);
 8007f86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7f8 f939 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <CDC_Receive_FS+0x2c>)
 8007faa:	f7fe fdb6 	bl	8006b1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fae:	4804      	ldr	r0, [pc, #16]	; (8007fc0 <CDC_Receive_FS+0x2c>)
 8007fb0:	f7fe fdfc 	bl	8006bac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	2000041c 	.word	0x2000041c

08007fc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	; (800800c <CDC_Transmit_FS+0x48>)
 8007fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e00b      	b.n	8008002 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fea:	887b      	ldrh	r3, [r7, #2]
 8007fec:	461a      	mov	r2, r3
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4806      	ldr	r0, [pc, #24]	; (800800c <CDC_Transmit_FS+0x48>)
 8007ff2:	f7fe fd74 	bl	8006ade <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ff6:	4805      	ldr	r0, [pc, #20]	; (800800c <CDC_Transmit_FS+0x48>)
 8007ff8:	f7fe fda8 	bl	8006b4c <USBD_CDC_TransmitPacket>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	2000041c 	.word	0x2000041c

08008010 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008026:	4618      	mov	r0, r3
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	6039      	str	r1, [r7, #0]
 800803e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2212      	movs	r2, #18
 8008044:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008046:	4b03      	ldr	r3, [pc, #12]	; (8008054 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	20000150 	.word	0x20000150

08008058 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2204      	movs	r2, #4
 8008068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800806a:	4b03      	ldr	r3, [pc, #12]	; (8008078 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20000164 	.word	0x20000164

0800807c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	4907      	ldr	r1, [pc, #28]	; (80080b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008092:	4808      	ldr	r0, [pc, #32]	; (80080b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008094:	f7ff fdf3 	bl	8007c7e <USBD_GetString>
 8008098:	e004      	b.n	80080a4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	4904      	ldr	r1, [pc, #16]	; (80080b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800809e:	4805      	ldr	r0, [pc, #20]	; (80080b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80080a0:	f7ff fded 	bl	8007c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a4:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20000ebc 	.word	0x20000ebc
 80080b4:	080088f4 	.word	0x080088f4

080080b8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	4904      	ldr	r1, [pc, #16]	; (80080d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80080c8:	4804      	ldr	r0, [pc, #16]	; (80080dc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80080ca:	f7ff fdd8 	bl	8007c7e <USBD_GetString>
  return USBD_StrDesc;
 80080ce:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000ebc 	.word	0x20000ebc
 80080dc:	0800890c 	.word	0x0800890c

080080e0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	221a      	movs	r2, #26
 80080f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080f2:	f000 f843 	bl	800817c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80080f6:	4b02      	ldr	r3, [pc, #8]	; (8008100 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	20000168 	.word	0x20000168

08008104 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d105      	bne.n	8008122 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4907      	ldr	r1, [pc, #28]	; (8008138 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800811a:	4808      	ldr	r0, [pc, #32]	; (800813c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800811c:	f7ff fdaf 	bl	8007c7e <USBD_GetString>
 8008120:	e004      	b.n	800812c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4904      	ldr	r1, [pc, #16]	; (8008138 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008128:	f7ff fda9 	bl	8007c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000ebc 	.word	0x20000ebc
 800813c:	08008920 	.word	0x08008920

08008140 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d105      	bne.n	800815e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4907      	ldr	r1, [pc, #28]	; (8008174 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008156:	4808      	ldr	r0, [pc, #32]	; (8008178 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008158:	f7ff fd91 	bl	8007c7e <USBD_GetString>
 800815c:	e004      	b.n	8008168 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4904      	ldr	r1, [pc, #16]	; (8008174 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008162:	4805      	ldr	r0, [pc, #20]	; (8008178 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008164:	f7ff fd8b 	bl	8007c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008168:	4b02      	ldr	r3, [pc, #8]	; (8008174 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20000ebc 	.word	0x20000ebc
 8008178:	0800892c 	.word	0x0800892c

0800817c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008182:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <Get_SerialNum+0x44>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008188:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <Get_SerialNum+0x48>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800818e:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <Get_SerialNum+0x4c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4413      	add	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081a2:	2208      	movs	r2, #8
 80081a4:	4909      	ldr	r1, [pc, #36]	; (80081cc <Get_SerialNum+0x50>)
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 f814 	bl	80081d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081ac:	2204      	movs	r2, #4
 80081ae:	4908      	ldr	r1, [pc, #32]	; (80081d0 <Get_SerialNum+0x54>)
 80081b0:	68b8      	ldr	r0, [r7, #8]
 80081b2:	f000 f80f 	bl	80081d4 <IntToUnicode>
  }
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	1fff7590 	.word	0x1fff7590
 80081c4:	1fff7594 	.word	0x1fff7594
 80081c8:	1fff7598 	.word	0x1fff7598
 80081cc:	2000016a 	.word	0x2000016a
 80081d0:	2000017a 	.word	0x2000017a

080081d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
 80081ea:	e027      	b.n	800823c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	0f1b      	lsrs	r3, r3, #28
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d80b      	bhi.n	800820c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	0f1b      	lsrs	r3, r3, #28
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4619      	mov	r1, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	440b      	add	r3, r1
 8008204:	3230      	adds	r2, #48	; 0x30
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	e00a      	b.n	8008222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	0f1b      	lsrs	r3, r3, #28
 8008210:	b2da      	uxtb	r2, r3
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4619      	mov	r1, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	440b      	add	r3, r1
 800821c:	3237      	adds	r2, #55	; 0x37
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	3301      	adds	r3, #1
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	3301      	adds	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
 800823c:	7dfa      	ldrb	r2, [r7, #23]
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	429a      	cmp	r2, r3
 8008242:	d3d3      	bcc.n	80081ec <IntToUnicode+0x18>
  }
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b094      	sub	sp, #80	; 0x50
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800825c:	f107 030c 	add.w	r3, r7, #12
 8008260:	2244      	movs	r2, #68	; 0x44
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb2d 	bl	80088c4 <memset>
  if(pcdHandle->Instance==USB)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <HAL_PCD_MspInit+0x70>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d123      	bne.n	80082bc <HAL_PCD_MspInit+0x68>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008278:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800827a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800827e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008280:	f107 030c 	add.w	r3, r7, #12
 8008284:	4618      	mov	r0, r3
 8008286:	f7fa ffcd 	bl	8003224 <HAL_RCCEx_PeriphCLKConfig>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8008290:	f7f8 f8f4 	bl	800047c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <HAL_PCD_MspInit+0x74>)
 8008296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008298:	4a0b      	ldr	r2, [pc, #44]	; (80082c8 <HAL_PCD_MspInit+0x74>)
 800829a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800829e:	6593      	str	r3, [r2, #88]	; 0x58
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <HAL_PCD_MspInit+0x74>)
 80082a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80082ac:	2200      	movs	r2, #0
 80082ae:	2100      	movs	r1, #0
 80082b0:	2014      	movs	r0, #20
 80082b2:	f7f8 fb1c 	bl	80008ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80082b6:	2014      	movs	r0, #20
 80082b8:	f7f8 fb33 	bl	8000922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082bc:	bf00      	nop
 80082be:	3750      	adds	r7, #80	; 0x50
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40005c00 	.word	0x40005c00
 80082c8:	40021000 	.word	0x40021000

080082cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fe fd2e 	bl	8006d44 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	440b      	add	r3, r1
 8008310:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	4619      	mov	r1, r3
 800831a:	f7fe fd68 	bl	8006dee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	440b      	add	r3, r1
 8008346:	333c      	adds	r3, #60	; 0x3c
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	4619      	mov	r1, r3
 800834e:	f7fe fdb1 	bl	8006eb4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fec5 	bl	80070f8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800837e:	2301      	movs	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d001      	beq.n	800838e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800838a:	f7f8 f877 	bl	800047c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008394:	7bfa      	ldrb	r2, [r7, #15]
 8008396:	4611      	mov	r1, r2
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fe6f 	bl	800707c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fe1b 	bl	8006fe0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fe6a 	bl	800709c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083d0:	4b04      	ldr	r3, [pc, #16]	; (80083e4 <HAL_PCD_SuspendCallback+0x30>)
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	4a03      	ldr	r2, [pc, #12]	; (80083e4 <HAL_PCD_SuspendCallback+0x30>)
 80083d6:	f043 0306 	orr.w	r3, r3, #6
 80083da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	e000ed00 	.word	0xe000ed00

080083e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <HAL_PCD_ResumeCallback+0x34>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	4a07      	ldr	r2, [pc, #28]	; (800841c <HAL_PCD_ResumeCallback+0x34>)
 80083fe:	f023 0306 	bic.w	r3, r3, #6
 8008402:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008404:	f000 f9fa 	bl	80087fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fe5a 	bl	80070c8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	e000ed00 	.word	0xe000ed00

08008420 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008428:	4a2b      	ldr	r2, [pc, #172]	; (80084d8 <USBD_LL_Init+0xb8>)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <USBD_LL_Init+0xb8>)
 8008434:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008438:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <USBD_LL_Init+0xb8>)
 800843a:	4a28      	ldr	r2, [pc, #160]	; (80084dc <USBD_LL_Init+0xbc>)
 800843c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800843e:	4b26      	ldr	r3, [pc, #152]	; (80084d8 <USBD_LL_Init+0xb8>)
 8008440:	2208      	movs	r2, #8
 8008442:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008444:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <USBD_LL_Init+0xb8>)
 8008446:	2202      	movs	r2, #2
 8008448:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800844a:	4b23      	ldr	r3, [pc, #140]	; (80084d8 <USBD_LL_Init+0xb8>)
 800844c:	2202      	movs	r2, #2
 800844e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008450:	4b21      	ldr	r3, [pc, #132]	; (80084d8 <USBD_LL_Init+0xb8>)
 8008452:	2200      	movs	r2, #0
 8008454:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008456:	4b20      	ldr	r3, [pc, #128]	; (80084d8 <USBD_LL_Init+0xb8>)
 8008458:	2200      	movs	r2, #0
 800845a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800845c:	4b1e      	ldr	r3, [pc, #120]	; (80084d8 <USBD_LL_Init+0xb8>)
 800845e:	2200      	movs	r2, #0
 8008460:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008462:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <USBD_LL_Init+0xb8>)
 8008464:	2200      	movs	r2, #0
 8008466:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008468:	481b      	ldr	r0, [pc, #108]	; (80084d8 <USBD_LL_Init+0xb8>)
 800846a:	f7f8 fbf7 	bl	8000c5c <HAL_PCD_Init>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008474:	f7f8 f802 	bl	800047c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800847e:	2318      	movs	r3, #24
 8008480:	2200      	movs	r2, #0
 8008482:	2100      	movs	r1, #0
 8008484:	f7fa f8b0 	bl	80025e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800848e:	2358      	movs	r3, #88	; 0x58
 8008490:	2200      	movs	r2, #0
 8008492:	2180      	movs	r1, #128	; 0x80
 8008494:	f7fa f8a8 	bl	80025e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800849e:	23c0      	movs	r3, #192	; 0xc0
 80084a0:	2200      	movs	r2, #0
 80084a2:	2181      	movs	r1, #129	; 0x81
 80084a4:	f7fa f8a0 	bl	80025e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80084b2:	2200      	movs	r2, #0
 80084b4:	2101      	movs	r1, #1
 80084b6:	f7fa f897 	bl	80025e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084c4:	2200      	movs	r2, #0
 80084c6:	2182      	movs	r1, #130	; 0x82
 80084c8:	f7fa f88e 	bl	80025e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200010bc 	.word	0x200010bc
 80084dc:	40005c00 	.word	0x40005c00

080084e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f8 fc95 	bl	8000e26 <HAL_PCD_Start>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f980 	bl	8008808 <USBD_Get_USB_Status>
 8008508:	4603      	mov	r3, r0
 800850a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850c:	7bbb      	ldrb	r3, [r7, #14]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	4608      	mov	r0, r1
 8008520:	4611      	mov	r1, r2
 8008522:	461a      	mov	r2, r3
 8008524:	4603      	mov	r3, r0
 8008526:	70fb      	strb	r3, [r7, #3]
 8008528:	460b      	mov	r3, r1
 800852a:	70bb      	strb	r3, [r7, #2]
 800852c:	4613      	mov	r3, r2
 800852e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800853e:	78bb      	ldrb	r3, [r7, #2]
 8008540:	883a      	ldrh	r2, [r7, #0]
 8008542:	78f9      	ldrb	r1, [r7, #3]
 8008544:	f7f8 fddd 	bl	8001102 <HAL_PCD_EP_Open>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f95a 	bl	8008808 <USBD_Get_USB_Status>
 8008554:	4603      	mov	r3, r0
 8008556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008558:	7bbb      	ldrb	r3, [r7, #14]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	4611      	mov	r1, r2
 8008580:	4618      	mov	r0, r3
 8008582:	f7f8 fe24 	bl	80011ce <HAL_PCD_EP_Close>
 8008586:	4603      	mov	r3, r0
 8008588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	4618      	mov	r0, r3
 800858e:	f000 f93b 	bl	8008808 <USBD_Get_USB_Status>
 8008592:	4603      	mov	r3, r0
 8008594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008596:	7bbb      	ldrb	r3, [r7, #14]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f8 fee5 	bl	800138e <HAL_PCD_EP_SetStall>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f91c 	bl	8008808 <USBD_Get_USB_Status>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7f8 ff18 	bl	8001432 <HAL_PCD_EP_ClrStall>
 8008602:	4603      	mov	r3, r0
 8008604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 f8fd 	bl	8008808 <USBD_Get_USB_Status>
 800860e:	4603      	mov	r3, r0
 8008610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008612:	7bbb      	ldrb	r3, [r7, #14]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	460b      	mov	r3, r1
 8008626:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800862e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008634:	2b00      	cmp	r3, #0
 8008636:	da0c      	bge.n	8008652 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	440b      	add	r3, r1
 800864c:	3302      	adds	r3, #2
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	e00b      	b.n	800866a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008658:	68f9      	ldr	r1, [r7, #12]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	440b      	add	r3, r1
 8008664:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008668:	781b      	ldrb	r3, [r3, #0]
  }
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	4611      	mov	r1, r2
 8008694:	4618      	mov	r0, r3
 8008696:	f7f8 fd0f 	bl	80010b8 <HAL_PCD_SetAddress>
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 f8b1 	bl	8008808 <USBD_Get_USB_Status>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	607a      	str	r2, [r7, #4]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	460b      	mov	r3, r1
 80086c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086d2:	7af9      	ldrb	r1, [r7, #11]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	f7f8 fe16 	bl	8001308 <HAL_PCD_EP_Transmit>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f890 	bl	8008808 <USBD_Get_USB_Status>
 80086e8:	4603      	mov	r3, r0
 80086ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
 8008702:	460b      	mov	r3, r1
 8008704:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008714:	7af9      	ldrb	r1, [r7, #11]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	f7f8 fda0 	bl	800125e <HAL_PCD_EP_Receive>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	4618      	mov	r0, r3
 8008726:	f000 f86f 	bl	8008808 <USBD_Get_USB_Status>
 800872a:	4603      	mov	r3, r0
 800872c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800872e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800874a:	78fa      	ldrb	r2, [r7, #3]
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7f8 fdc2 	bl	80012d8 <HAL_PCD_EP_GetRxCount>
 8008754:	4603      	mov	r3, r0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_PCDEx_LPM_Callback+0x18>
 8008772:	2b01      	cmp	r3, #1
 8008774:	d013      	beq.n	800879e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008776:	e023      	b.n	80087c0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008780:	f000 f83c 	bl	80087fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	4a0f      	ldr	r2, [pc, #60]	; (80087c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800878a:	f023 0306 	bic.w	r3, r3, #6
 800878e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fc96 	bl	80070c8 <USBD_LL_Resume>
    break;
 800879c:	e010      	b.n	80087c0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fc79 	bl	800709c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	4a04      	ldr	r2, [pc, #16]	; (80087c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80087b8:	f043 0306 	orr.w	r3, r3, #6
 80087bc:	6113      	str	r3, [r2, #16]
    break;
 80087be:	bf00      	nop
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087d4:	4b03      	ldr	r3, [pc, #12]	; (80087e4 <USBD_static_malloc+0x18>)
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	200001ac 	.word	0x200001ac

080087e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]

}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008800:	f7f7 fd56 	bl	80002b0 <SystemClock_Config>
}
 8008804:	bf00      	nop
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d817      	bhi.n	800884c <USBD_Get_USB_Status+0x44>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBD_Get_USB_Status+0x1c>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008835 	.word	0x08008835
 8008828:	0800883b 	.word	0x0800883b
 800882c:	08008841 	.word	0x08008841
 8008830:	08008847 	.word	0x08008847
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
    break;
 8008838:	e00b      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800883a:	2303      	movs	r3, #3
 800883c:	73fb      	strb	r3, [r7, #15]
    break;
 800883e:	e008      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
    break;
 8008844:	e005      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008846:	2303      	movs	r3, #3
 8008848:	73fb      	strb	r3, [r7, #15]
    break;
 800884a:	e002      	b.n	8008852 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800884c:	2303      	movs	r3, #3
 800884e:	73fb      	strb	r3, [r7, #15]
    break;
 8008850:	bf00      	nop
  }
  return usb_status;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <__libc_init_array>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	4d0d      	ldr	r5, [pc, #52]	; (8008898 <__libc_init_array+0x38>)
 8008864:	4c0d      	ldr	r4, [pc, #52]	; (800889c <__libc_init_array+0x3c>)
 8008866:	1b64      	subs	r4, r4, r5
 8008868:	10a4      	asrs	r4, r4, #2
 800886a:	2600      	movs	r6, #0
 800886c:	42a6      	cmp	r6, r4
 800886e:	d109      	bne.n	8008884 <__libc_init_array+0x24>
 8008870:	4d0b      	ldr	r5, [pc, #44]	; (80088a0 <__libc_init_array+0x40>)
 8008872:	4c0c      	ldr	r4, [pc, #48]	; (80088a4 <__libc_init_array+0x44>)
 8008874:	f000 f82e 	bl	80088d4 <_init>
 8008878:	1b64      	subs	r4, r4, r5
 800887a:	10a4      	asrs	r4, r4, #2
 800887c:	2600      	movs	r6, #0
 800887e:	42a6      	cmp	r6, r4
 8008880:	d105      	bne.n	800888e <__libc_init_array+0x2e>
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	f855 3b04 	ldr.w	r3, [r5], #4
 8008888:	4798      	blx	r3
 800888a:	3601      	adds	r6, #1
 800888c:	e7ee      	b.n	800886c <__libc_init_array+0xc>
 800888e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008892:	4798      	blx	r3
 8008894:	3601      	adds	r6, #1
 8008896:	e7f2      	b.n	800887e <__libc_init_array+0x1e>
 8008898:	0800894c 	.word	0x0800894c
 800889c:	0800894c 	.word	0x0800894c
 80088a0:	0800894c 	.word	0x0800894c
 80088a4:	08008950 	.word	0x08008950

080088a8 <memcpy>:
 80088a8:	440a      	add	r2, r1
 80088aa:	4291      	cmp	r1, r2
 80088ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088b0:	d100      	bne.n	80088b4 <memcpy+0xc>
 80088b2:	4770      	bx	lr
 80088b4:	b510      	push	{r4, lr}
 80088b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088be:	4291      	cmp	r1, r2
 80088c0:	d1f9      	bne.n	80088b6 <memcpy+0xe>
 80088c2:	bd10      	pop	{r4, pc}

080088c4 <memset>:
 80088c4:	4402      	add	r2, r0
 80088c6:	4603      	mov	r3, r0
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d100      	bne.n	80088ce <memset+0xa>
 80088cc:	4770      	bx	lr
 80088ce:	f803 1b01 	strb.w	r1, [r3], #1
 80088d2:	e7f9      	b.n	80088c8 <memset+0x4>

080088d4 <_init>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr

080088e0 <_fini>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr
