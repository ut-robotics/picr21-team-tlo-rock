
usb 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007388  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b8  080075b8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080075b8  080075b8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075b8  080075b8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080075c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  20000184  08007744  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001364  08007744  00021364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153bb  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003031  00000000  00000000  0003556f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4ea  00000000  00000000  00039cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eed9  00000000  00000000  000591a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6bdc  00000000  00000000  0006807b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ec57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f54  00000000  00000000  0011ecac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007548 	.word	0x08007548

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08007548 	.word	0x08007548

08000218 <CDC_On_Receive>:
} Feedback;

Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0}; // (4)
volatile uint8_t isCommandReceived = 0; // (5)

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f007 f974 	bl	800751c <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001a0 	.word	0x200001a0
 8000254:	200001aa 	.word	0x200001aa

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 f922 	bl	80004a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f823 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f86d 	bl	8000344 <MX_GPIO_Init>
  MX_USB_Device_Init();
 800026a:	f006 fc23 	bl	8006ab4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
    Feedback feedback = { // (1)
 800026e:	2300      	movs	r3, #0
 8000270:	803b      	strh	r3, [r7, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	807b      	strh	r3, [r7, #2]
 8000276:	2300      	movs	r3, #0
 8000278:	80bb      	strh	r3, [r7, #4]
 800027a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800027e:	80fb      	strh	r3, [r7, #6]
    while (1)
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
      if (isCommandReceived) { // (2)
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <main+0x50>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0fa      	beq.n	8000280 <main+0x28>
        isCommandReceived = 0;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <main+0x50>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
        //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3)

        feedback.speed1 = 3; // (4)
 8000290:	2303      	movs	r3, #3
 8000292:	803b      	strh	r3, [r7, #0]
        feedback.speed2 = 4;
 8000294:	2304      	movs	r3, #4
 8000296:	807b      	strh	r3, [r7, #2]
        feedback.speed3 = 5;
 8000298:	2305      	movs	r3, #5
 800029a:	80bb      	strh	r3, [r7, #4]

        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 800029c:	463b      	mov	r3, r7
 800029e:	2108      	movs	r1, #8
 80002a0:	4618      	mov	r0, r3
 80002a2:	f006 fcc9 	bl	8006c38 <CDC_Transmit_FS>
      if (isCommandReceived) { // (2)
 80002a6:	e7eb      	b.n	8000280 <main+0x28>
 80002a8:	200001aa 	.word	0x200001aa

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b094      	sub	sp, #80	; 0x50
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2238      	movs	r2, #56	; 0x38
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f007 f93c 	bl	8007538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002d2:	f001 ff9b 	bl	800220c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	2340      	movs	r3, #64	; 0x40
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	2302      	movs	r3, #2
 80002e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e8:	2302      	movs	r3, #2
 80002ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ec:	2301      	movs	r3, #1
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80002f0:	230c      	movs	r3, #12
 80002f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80002f8:	2304      	movs	r3, #4
 80002fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f002 f835 	bl	8002374 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000310:	f000 f830 	bl	8000374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000318:	2301      	movs	r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f002 fb39 	bl	80029a4 <HAL_RCC_ClockConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000338:	f000 f81c 	bl	8000374 <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	3750      	adds	r7, #80	; 0x50
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_GPIO_Init+0x2c>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a08      	ldr	r2, [pc, #32]	; (8000370 <MX_GPIO_Init+0x2c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_GPIO_Init+0x2c>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	e7fe      	b.n	800037c <Error_Handler+0x8>
	...

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x44>)
 8000388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <HAL_MspInit+0x44>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6613      	str	r3, [r2, #96]	; 0x60
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x44>)
 8000394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <HAL_MspInit+0x44>)
 80003a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003a2:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <HAL_MspInit+0x44>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a8:	6593      	str	r3, [r2, #88]	; 0x58
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <HAL_MspInit+0x44>)
 80003ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003b6:	f001 ffcd 	bl	8002354 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <NMI_Handler+0x4>

080003ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <HardFault_Handler+0x4>

080003d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <MemManage_Handler+0x4>

080003da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <BusFault_Handler+0x4>

080003e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <UsageFault_Handler+0x4>

080003e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000414:	f000 f89a 	bl	800054c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <USB_LP_IRQHandler+0x10>)
 8000422:	f000 fac7 	bl	80009b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20001070 	.word	0x20001070

08000430 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <SystemInit+0x20>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SystemInit+0x20>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	; (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490e      	ldr	r1, [pc, #56]	; (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0b      	ldr	r4, [pc, #44]	; (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800047e:	f7ff ffd7 	bl	8000430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000482:	f007 f827 	bl	80074d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000486:	f7ff fee7 	bl	8000258 <main>

0800048a <LoopForever>:

LoopForever:
    b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000498:	080075c0 	.word	0x080075c0
  ldr r2, =_sbss
 800049c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80004a0:	20001364 	.word	0x20001364

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>

080004a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ac:	2300      	movs	r3, #0
 80004ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 f939 	bl	8000728 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004b6:	200f      	movs	r0, #15
 80004b8:	f000 f80e 	bl	80004d8 <HAL_InitTick>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d002      	beq.n	80004c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
 80004c4:	71fb      	strb	r3, [r7, #7]
 80004c6:	e001      	b.n	80004cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004c8:	f7ff ff5a 	bl	8000380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004cc:	79fb      	ldrb	r3, [r7, #7]

}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004e0:	2300      	movs	r3, #0
 80004e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <HAL_InitTick+0x68>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d022      	beq.n	8000532 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_InitTick+0x6c>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <HAL_InitTick+0x68>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f944 	bl	800078e <HAL_SYSTICK_Config>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d10f      	bne.n	800052c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b0f      	cmp	r3, #15
 8000510:	d809      	bhi.n	8000526 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000512:	2200      	movs	r2, #0
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800051a:	f000 f910 	bl	800073e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_InitTick+0x70>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	e007      	b.n	8000536 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	e004      	b.n	8000536 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e001      	b.n	8000536 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000536:	7bfb      	ldrb	r3, [r7, #15]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000008 	.word	0x20000008
 8000544:	20000000 	.word	0x20000000
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_IncTick+0x1c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_IncTick+0x20>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4413      	add	r3, r2
 800055a:	4a03      	ldr	r2, [pc, #12]	; (8000568 <HAL_IncTick+0x1c>)
 800055c:	6013      	str	r3, [r2, #0]
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	200003cc 	.word	0x200003cc
 800056c:	20000008 	.word	0x20000008

08000570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return uwTick;
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <HAL_GetTick+0x14>)
 8000576:	681b      	ldr	r3, [r3, #0]
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	200003cc 	.word	0x200003cc

08000588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ba:	4a04      	ldr	r2, [pc, #16]	; (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	60d3      	str	r3, [r2, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <__NVIC_GetPriorityGrouping+0x18>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	f003 0307 	and.w	r3, r3, #7
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db0b      	blt.n	8000616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 021f 	and.w	r2, r3, #31
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <__NVIC_EnableIRQ+0x38>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	095b      	lsrs	r3, r3, #5
 800060c:	2001      	movs	r0, #1
 800060e:	fa00 f202 	lsl.w	r2, r0, r2
 8000612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000e100 	.word	0xe000e100

08000628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	db0a      	blt.n	8000652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	490c      	ldr	r1, [pc, #48]	; (8000674 <__NVIC_SetPriority+0x4c>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	0112      	lsls	r2, r2, #4
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	440b      	add	r3, r1
 800064c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000650:	e00a      	b.n	8000668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4908      	ldr	r1, [pc, #32]	; (8000678 <__NVIC_SetPriority+0x50>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	3b04      	subs	r3, #4
 8000660:	0112      	lsls	r2, r2, #4
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	440b      	add	r3, r1
 8000666:	761a      	strb	r2, [r3, #24]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	f1c3 0307 	rsb	r3, r3, #7
 8000696:	2b04      	cmp	r3, #4
 8000698:	bf28      	it	cs
 800069a:	2304      	movcs	r3, #4
 800069c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3304      	adds	r3, #4
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d902      	bls.n	80006ac <NVIC_EncodePriority+0x30>
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3b03      	subs	r3, #3
 80006aa:	e000      	b.n	80006ae <NVIC_EncodePriority+0x32>
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	43da      	mvns	r2, r3
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	401a      	ands	r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43d9      	mvns	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	4313      	orrs	r3, r2
         );
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3724      	adds	r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f4:	d301      	bcc.n	80006fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00f      	b.n	800071a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <SysTick_Config+0x40>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000702:	210f      	movs	r1, #15
 8000704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000708:	f7ff ff8e 	bl	8000628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SysTick_Config+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <SysTick_Config+0x40>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff29 	bl	8000588 <__NVIC_SetPriorityGrouping>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800074c:	f7ff ff40 	bl	80005d0 <__NVIC_GetPriorityGrouping>
 8000750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	6978      	ldr	r0, [r7, #20]
 8000758:	f7ff ff90 	bl	800067c <NVIC_EncodePriority>
 800075c:	4602      	mov	r2, r0
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff5f 	bl	8000628 <__NVIC_SetPriority>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff33 	bl	80005ec <__NVIC_EnableIRQ>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffa4 	bl	80006e4 <SysTick_Config>
 800079c:	4603      	mov	r3, r0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a8:	b08b      	sub	sp, #44	; 0x2c
 80007aa:	af06      	add	r7, sp, #24
 80007ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e0d7      	b.n	8000968 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d106      	bne.n	80007d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f006 fb7b 	bl	8006ec8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2203      	movs	r2, #3
 80007d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fccb 	bl	800317a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e04c      	b.n	8000884 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	4613      	mov	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	440b      	add	r3, r1
 80007fa:	3301      	adds	r3, #1
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000814:	7bfa      	ldrb	r2, [r7, #15]
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	b298      	uxth	r0, r3
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	440b      	add	r3, r1
 8000826:	3336      	adds	r3, #54	; 0x36
 8000828:	4602      	mov	r2, r0
 800082a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3303      	adds	r3, #3
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3338      	adds	r3, #56	; 0x38
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000856:	7bfa      	ldrb	r2, [r7, #15]
 8000858:	6879      	ldr	r1, [r7, #4]
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	333c      	adds	r3, #60	; 0x3c
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	3340      	adds	r3, #64	; 0x40
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	3301      	adds	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	7bfa      	ldrb	r2, [r7, #15]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	429a      	cmp	r2, r3
 800088c:	d3ad      	bcc.n	80007ea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e044      	b.n	800091e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	440b      	add	r3, r1
 80008b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008c0:	7bfa      	ldrb	r2, [r7, #15]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	440b      	add	r3, r1
 80008fa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000902:	7bfa      	ldrb	r2, [r7, #15]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	3301      	adds	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	7bfa      	ldrb	r2, [r7, #15]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	d3b5      	bcc.n	8000894 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	687e      	ldr	r6, [r7, #4]
 8000930:	466d      	mov	r5, sp
 8000932:	f106 0410 	add.w	r4, r6, #16
 8000936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	602b      	str	r3, [r5, #0]
 800093e:	1d33      	adds	r3, r6, #4
 8000940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f002 fc34 	bl	80031b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2201      	movs	r2, #1
 8000954:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d102      	bne.n	8000966 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f001 fc29 	bl	80021b8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000970 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800097e:	2b01      	cmp	r3, #1
 8000980:	d101      	bne.n	8000986 <HAL_PCD_Start+0x16>
 8000982:	2302      	movs	r3, #2
 8000984:	e012      	b.n	80009ac <HAL_PCD_Start+0x3c>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2201      	movs	r2, #1
 800098a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fbda 	bl	800314c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f004 fb8f 	bl	80050c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f004 fb94 	bl	80050ee <USB_ReadInterrupts>
 80009c6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 fb26 	bl	8001024 <PCD_EP_ISR_Handler>

    return;
 80009d8:	e110      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d013      	beq.n	8000a0c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009f6:	b292      	uxth	r2, r2
 80009f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f006 faf4 	bl	8006fea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a02:	2100      	movs	r1, #0
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 f8fc 	bl	8000c02 <HAL_PCD_SetAddress>

    return;
 8000a0a:	e0f7      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00c      	beq.n	8000a30 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a28:	b292      	uxth	r2, r2
 8000a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a2e:	e0e5      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00c      	beq.n	8000a54 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a4c:	b292      	uxth	r2, r2
 8000a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a52:	e0d3      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d034      	beq.n	8000ac8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0204 	bic.w	r2, r2, #4
 8000a70:	b292      	uxth	r2, r2
 8000a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 0208 	bic.w	r2, r2, #8
 8000a88:	b292      	uxth	r2, r2
 8000a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d107      	bne.n	8000aa8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f006 fc96 	bl	80073d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f006 fad7 	bl	800705c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ac0:	b292      	uxth	r2, r2
 8000ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000ac6:	e099      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d027      	beq.n	8000b22 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f042 0208 	orr.w	r2, r2, #8
 8000ae4:	b292      	uxth	r2, r2
 8000ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000afc:	b292      	uxth	r2, r2
 8000afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 0204 	orr.w	r2, r2, #4
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f006 fa84 	bl	8007028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b20:	e06c      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d040      	beq.n	8000bae <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b3e:	b292      	uxth	r2, r2
 8000b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0204 	orr.w	r2, r2, #4
 8000b60:	b292      	uxth	r2, r2
 8000b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f042 0208 	orr.w	r2, r2, #8
 8000b78:	b292      	uxth	r2, r2
 8000b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f006 fc18 	bl	80073d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000ba4:	e02a      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f006 fa3e 	bl	8007028 <HAL_PCD_SuspendCallback>
    return;
 8000bac:	e026      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00f      	beq.n	8000bd8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bca:	b292      	uxth	r2, r2
 8000bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f006 f9fc 	bl	8006fce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000bd6:	e011      	b.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00c      	beq.n	8000bfc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bf4:	b292      	uxth	r2, r2
 8000bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000bfa:	bf00      	nop
  }
}
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d101      	bne.n	8000c1c <HAL_PCD_SetAddress+0x1a>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e013      	b.n	8000c44 <HAL_PCD_SetAddress+0x42>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	78fa      	ldrb	r2, [r7, #3]
 8000c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fa2f 	bl	8005098 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	70fb      	strb	r3, [r7, #3]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	803b      	strh	r3, [r7, #0]
 8000c62:	4613      	mov	r3, r2
 8000c64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da0e      	bge.n	8000c90 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	705a      	strb	r2, [r3, #1]
 8000c8e:	e00e      	b.n	8000cae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	f003 0207 	and.w	r2, r3, #7
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000cba:	883a      	ldrh	r2, [r7, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	78ba      	ldrb	r2, [r7, #2]
 8000cc4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d004      	beq.n	8000cd8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000cd8:	78bb      	ldrb	r3, [r7, #2]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d102      	bne.n	8000ce4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_PCD_EP_Open+0xa6>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e00e      	b.n	8000d10 <HAL_PCD_EP_Open+0xc4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68f9      	ldr	r1, [r7, #12]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fa77 	bl	80031f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da0e      	bge.n	8000d4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2201      	movs	r2, #1
 8000d46:	705a      	strb	r2, [r3, #1]
 8000d48:	e00e      	b.n	8000d68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	f003 0207 	and.w	r2, r3, #7
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d101      	bne.n	8000d82 <HAL_PCD_EP_Close+0x6a>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e00e      	b.n	8000da0 <HAL_PCD_EP_Close+0x88>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fdc3 	bl	800391c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	460b      	mov	r3, r1
 8000db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000db8:	7afb      	ldrb	r3, [r7, #11]
 8000dba:	f003 0207 	and.w	r2, r3, #7
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4413      	add	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2200      	movs	r2, #0
 8000de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d106      	bne.n	8000e0c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6979      	ldr	r1, [r7, #20]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 ff76 	bl	8003cf6 <USB_EPStartXfer>
 8000e0a:	e005      	b.n	8000e18 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6979      	ldr	r1, [r7, #20]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 ff6f 	bl	8003cf6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	f003 0207 	and.w	r2, r3, #7
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e44:	681b      	ldr	r3, [r3, #0]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4413      	add	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d106      	bne.n	8000ec2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6979      	ldr	r1, [r7, #20]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 ff1b 	bl	8003cf6 <USB_EPStartXfer>
 8000ec0:	e005      	b.n	8000ece <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6979      	ldr	r1, [r7, #20]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 ff14 	bl	8003cf6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	f003 0207 	and.w	r2, r3, #7
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d901      	bls.n	8000ef6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e03e      	b.n	8000f74 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	da0e      	bge.n	8000f1c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2201      	movs	r2, #1
 8000f18:	705a      	strb	r2, [r3, #1]
 8000f1a:	e00c      	b.n	8000f36 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d101      	bne.n	8000f56 <HAL_PCD_EP_SetStall+0x7e>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e00e      	b.n	8000f74 <HAL_PCD_EP_SetStall+0x9c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68f9      	ldr	r1, [r7, #12]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 ff98 	bl	8004e9a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	f003 020f 	and.w	r2, r3, #15
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d901      	bls.n	8000f9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e040      	b.n	800101c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da0e      	bge.n	8000fc0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	705a      	strb	r2, [r3, #1]
 8000fbe:	e00e      	b.n	8000fde <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	f003 0207 	and.w	r2, r3, #7
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_PCD_EP_ClrStall+0x82>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e00e      	b.n	800101c <HAL_PCD_EP_ClrStall+0xa0>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68f9      	ldr	r1, [r7, #12]
 800100c:	4618      	mov	r0, r3
 800100e:	f003 ff95 	bl	8004f3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b096      	sub	sp, #88	; 0x58
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800102c:	e39c      	b.n	8001768 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001036:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800103a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001048:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800104c:	2b00      	cmp	r3, #0
 800104e:	f040 815e 	bne.w	800130e <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001052:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d150      	bne.n	8001100 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800106a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800106e:	81fb      	strh	r3, [r7, #14]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800107a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800107e:	b29b      	uxth	r3, r3
 8001080:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3328      	adds	r3, #40	; 0x28
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	441a      	add	r2, r3
 80010ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010be:	2100      	movs	r1, #0
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f005 ff6a 	bl	8006f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 834a 	beq.w	8001768 <PCD_EP_ISR_Handler+0x744>
 80010d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 8345 	bne.w	8001768 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010fe:	e333      	b.n	8001768 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001112:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800111a:	2b00      	cmp	r3, #0
 800111c:	d032      	beq.n	8001184 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	4413      	add	r3, r2
 8001138:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001144:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001152:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001156:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001158:	b29b      	uxth	r3, r3
 800115a:	f004 f81a 	bl	8005192 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	b29a      	uxth	r2, r3
 8001166:	f640 738f 	movw	r3, #3983	; 0xf8f
 800116a:	4013      	ands	r3, r2
 800116c:	823b      	strh	r3, [r7, #16]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	8a3a      	ldrh	r2, [r7, #16]
 8001174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001178:	b292      	uxth	r2, r2
 800117a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f005 fedf 	bl	8006f40 <HAL_PCD_SetupStageCallback>
 8001182:	e2f1      	b.n	8001768 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001184:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001188:	2b00      	cmp	r3, #0
 800118a:	f280 82ed 	bge.w	8001768 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	f640 738f 	movw	r3, #3983	; 0xf8f
 800119a:	4013      	ands	r3, r2
 800119c:	83fb      	strh	r3, [r7, #30]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	8bfa      	ldrh	r2, [r7, #30]
 80011a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a8:	b292      	uxth	r2, r2
 80011aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80011d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d019      	beq.n	8001210 <PCD_EP_ISR_Handler+0x1ec>
 80011dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d015      	beq.n	8001210 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ea:	6959      	ldr	r1, [r3, #20]
 80011ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80011f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f003 ffcc 	bl	8005192 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80011fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	441a      	add	r2, r3
 8001204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001206:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001208:	2100      	movs	r1, #0
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f005 feaa 	bl	8006f64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800121c:	2b00      	cmp	r3, #0
 800121e:	f040 82a3 	bne.w	8001768 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001230:	b29b      	uxth	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	4413      	add	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b3e      	cmp	r3, #62	; 0x3e
 8001248:	d918      	bls.n	800127c <PCD_EP_ISR_Handler+0x258>
 800124a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
 8001252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <PCD_EP_ISR_Handler+0x240>
 800125e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001260:	3b01      	subs	r3, #1
 8001262:	647b      	str	r3, [r7, #68]	; 0x44
 8001264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001266:	b29b      	uxth	r3, r3
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	b29b      	uxth	r3, r3
 800126c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001274:	b29a      	uxth	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	e029      	b.n	80012d0 <PCD_EP_ISR_Handler+0x2ac>
 800127c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d112      	bne.n	80012aa <PCD_EP_ISR_Handler+0x286>
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800128e:	b29a      	uxth	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	801a      	strh	r2, [r3, #0]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800129e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	e012      	b.n	80012d0 <PCD_EP_ISR_Handler+0x2ac>
 80012aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	085b      	lsrs	r3, r3, #1
 80012b0:	647b      	str	r3, [r7, #68]	; 0x44
 80012b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <PCD_EP_ISR_Handler+0x2a0>
 80012be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c0:	3301      	adds	r3, #1
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44
 80012c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	029b      	lsls	r3, r3, #10
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012e0:	827b      	strh	r3, [r7, #18]
 80012e2:	8a7b      	ldrh	r3, [r7, #18]
 80012e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012e8:	827b      	strh	r3, [r7, #18]
 80012ea:	8a7b      	ldrh	r3, [r7, #18]
 80012ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012f0:	827b      	strh	r3, [r7, #18]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	8a7b      	ldrh	r3, [r7, #18]
 80012f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	b29b      	uxth	r3, r3
 800130a:	8013      	strh	r3, [r2, #0]
 800130c:	e22c      	b.n	8001768 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001322:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001326:	2b00      	cmp	r3, #0
 8001328:	f280 80f6 	bge.w	8001518 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b29a      	uxth	r2, r3
 800133e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001342:	4013      	ands	r3, r2
 8001344:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800135a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800135e:	b292      	uxth	r2, r2
 8001360:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001362:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137a:	7b1b      	ldrb	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d123      	bne.n	80013c8 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	4413      	add	r3, r2
 800139a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80013a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 808e 	beq.w	80014ce <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b8:	6959      	ldr	r1, [r3, #20]
 80013ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013bc:	88da      	ldrh	r2, [r3, #6]
 80013be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013c2:	f003 fee6 	bl	8005192 <USB_ReadPMA>
 80013c6:	e082      	b.n	80014ce <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d10a      	bne.n	80013e6 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80013d4:	461a      	mov	r2, r3
 80013d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f9d3 	bl	8001784 <HAL_PCD_EP_DB_Receive>
 80013de:	4603      	mov	r3, r0
 80013e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80013e4:	e073      	b.n	80014ce <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001400:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	441a      	add	r2, r3
 8001412:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800141a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800141e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001422:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001426:	b29b      	uxth	r3, r3
 8001428:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d022      	beq.n	800148a <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800144c:	b29b      	uxth	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4413      	add	r3, r2
 800145e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001468:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800146c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001470:	2b00      	cmp	r3, #0
 8001472:	d02c      	beq.n	80014ce <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800147a:	6959      	ldr	r1, [r3, #20]
 800147c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800147e:	891a      	ldrh	r2, [r3, #8]
 8001480:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001484:	f003 fe85 	bl	8005192 <USB_ReadPMA>
 8001488:	e021      	b.n	80014ce <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80014b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c0:	6959      	ldr	r1, [r3, #20]
 80014c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c4:	895a      	ldrh	r2, [r3, #10]
 80014c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014ca:	f003 fe62 	bl	8005192 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80014ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014d6:	441a      	add	r2, r3
 80014d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014e4:	441a      	add	r2, r3
 80014e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <PCD_EP_ISR_Handler+0x4da>
 80014f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80014f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d206      	bcs.n	800150c <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f005 fd2d 	bl	8006f64 <HAL_PCD_DataOutStageCallback>
 800150a:	e005      	b.n	8001518 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fbef 	bl	8003cf6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001518:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800151c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8121 	beq.w	8001768 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001526:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001554:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	441a      	add	r2, r3
 8001566:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800156a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800156e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001572:	b29b      	uxth	r3, r3
 8001574:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001578:	78db      	ldrb	r3, [r3, #3]
 800157a:	2b02      	cmp	r3, #2
 800157c:	f000 80a2 	beq.w	80016c4 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001588:	7b1b      	ldrb	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8093 	beq.w	80016b6 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001590:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d046      	beq.n	800162a <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800159c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d126      	bne.n	80015f2 <PCD_EP_ISR_Handler+0x5ce>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	4413      	add	r3, r2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	00da      	lsls	r2, r3, #3
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	4413      	add	r3, r2
 80015c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	801a      	strh	r2, [r3, #0]
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	801a      	strh	r2, [r3, #0]
 80015f0:	e061      	b.n	80016b6 <PCD_EP_ISR_Handler+0x692>
 80015f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d15d      	bne.n	80016b6 <PCD_EP_ISR_Handler+0x692>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	4413      	add	r3, r2
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	00da      	lsls	r2, r3, #3
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	4413      	add	r3, r2
 800161c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	2200      	movs	r2, #0
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	e045      	b.n	80016b6 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d126      	bne.n	8001686 <PCD_EP_ISR_Handler+0x662>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	4413      	add	r3, r2
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
 8001650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	00da      	lsls	r2, r3, #3
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	4413      	add	r3, r2
 800165a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
 8001660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800166a:	b29a      	uxth	r2, r3
 800166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166e:	801a      	strh	r2, [r3, #0]
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800167a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800167e:	b29a      	uxth	r2, r3
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	e017      	b.n	80016b6 <PCD_EP_ISR_Handler+0x692>
 8001686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d113      	bne.n	80016b6 <PCD_EP_ISR_Handler+0x692>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800169c:	4413      	add	r3, r2
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	00da      	lsls	r2, r3, #3
 80016a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a8:	4413      	add	r3, r2
 80016aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80016b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b2:	2200      	movs	r2, #0
 80016b4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f005 fc6c 	bl	8006f9a <HAL_PCD_DataInStageCallback>
 80016c2:	e051      	b.n	8001768 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d144      	bne.n	800175a <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016d8:	b29b      	uxth	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80016f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001700:	429a      	cmp	r2, r3
 8001702:	d907      	bls.n	8001714 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800170c:	1ad2      	subs	r2, r2, r3
 800170e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001710:	619a      	str	r2, [r3, #24]
 8001712:	e002      	b.n	800171a <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800171a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f005 fc36 	bl	8006f9a <HAL_PCD_DataInStageCallback>
 800172e:	e01b      	b.n	8001768 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001738:	441a      	add	r2, r3
 800173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800173c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800173e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001746:	441a      	add	r2, r3
 8001748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001752:	4618      	mov	r0, r3
 8001754:	f002 facf 	bl	8003cf6 <USB_EPStartXfer>
 8001758:	e006      	b.n	8001768 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800175a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800175e:	461a      	mov	r2, r3
 8001760:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f917 	bl	8001996 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001770:	b29b      	uxth	r3, r3
 8001772:	b21b      	sxth	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	f6ff ac5a 	blt.w	800102e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3758      	adds	r7, #88	; 0x58
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d07c      	beq.n	8001896 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	8b7b      	ldrh	r3, [r7, #26]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d306      	bcc.n	80017da <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	8b7b      	ldrh	r3, [r7, #26]
 80017d2:	1ad2      	subs	r2, r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	e002      	b.n	80017e0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d123      	bne.n	8001830 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001802:	833b      	strh	r3, [r7, #24]
 8001804:	8b3b      	ldrh	r3, [r7, #24]
 8001806:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800180a:	833b      	strh	r3, [r7, #24]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	441a      	add	r2, r3
 800181a:	8b3b      	ldrh	r3, [r7, #24]
 800181c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	b29b      	uxth	r3, r3
 800182e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01f      	beq.n	800187a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001854:	82fb      	strh	r3, [r7, #22]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	441a      	add	r2, r3
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800186a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001876:	b29b      	uxth	r3, r3
 8001878:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800187a:	8b7b      	ldrh	r3, [r7, #26]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8085 	beq.w	800198c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	891a      	ldrh	r2, [r3, #8]
 800188e:	8b7b      	ldrh	r3, [r7, #26]
 8001890:	f003 fc7f 	bl	8005192 <USB_ReadPMA>
 8001894:	e07a      	b.n	800198c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800189e:	b29b      	uxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	8b7b      	ldrh	r3, [r7, #26]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d306      	bcc.n	80018d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	8b7b      	ldrh	r3, [r7, #26]
 80018cc:	1ad2      	subs	r2, r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	e002      	b.n	80018da <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d123      	bne.n	800192a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018fc:	83fb      	strh	r3, [r7, #30]
 80018fe:	8bfb      	ldrh	r3, [r7, #30]
 8001900:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001904:	83fb      	strh	r3, [r7, #30]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	441a      	add	r2, r3
 8001914:	8bfb      	ldrh	r3, [r7, #30]
 8001916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800191a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800191e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001926:	b29b      	uxth	r3, r3
 8001928:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	d11f      	bne.n	8001974 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800194a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194e:	83bb      	strh	r3, [r7, #28]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	441a      	add	r2, r3
 800195e:	8bbb      	ldrh	r3, [r7, #28]
 8001960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001970:	b29b      	uxth	r3, r3
 8001972:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001974:	8b7b      	ldrh	r3, [r7, #26]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	6959      	ldr	r1, [r3, #20]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	895a      	ldrh	r2, [r3, #10]
 8001986:	8b7b      	ldrh	r3, [r7, #26]
 8001988:	f003 fc03 	bl	8005192 <USB_ReadPMA>
    }
  }

  return count;
 800198c:	8b7b      	ldrh	r3, [r7, #26]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b0a2      	sub	sp, #136	; 0x88
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	4613      	mov	r3, r2
 80019a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 81c5 	beq.w	8001d3a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d907      	bls.n	80019f4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019ec:	1ad2      	subs	r2, r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	e002      	b.n	80019fa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 80b9 	bne.w	8001b76 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	785b      	ldrb	r3, [r3, #1]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d126      	bne.n	8001a5a <HAL_PCD_EP_DB_Transmit+0xc4>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	4413      	add	r3, r2
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	00da      	lsls	r2, r3, #3
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	801a      	strh	r2, [r3, #0]
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	801a      	strh	r2, [r3, #0]
 8001a58:	e01a      	b.n	8001a90 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	785b      	ldrb	r3, [r3, #1]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d116      	bne.n	8001a90 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a76:	4413      	add	r3, r2
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	00da      	lsls	r2, r3, #3
 8001a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a82:	4413      	add	r3, r2
 8001a84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	785b      	ldrb	r3, [r3, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d126      	bne.n	8001aec <HAL_PCD_EP_DB_Transmit+0x156>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	801a      	strh	r2, [r3, #0]
 8001aea:	e017      	b.n	8001b1c <HAL_PCD_EP_DB_Transmit+0x186>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d113      	bne.n	8001b1c <HAL_PCD_EP_DB_Transmit+0x186>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	4413      	add	r3, r2
 8001b04:	623b      	str	r3, [r7, #32]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	00da      	lsls	r2, r3, #3
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f005 fa39 	bl	8006f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 82d2 	beq.w	80020d8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	827b      	strh	r3, [r7, #18]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	441a      	add	r2, r3
 8001b5e:	8a7b      	ldrh	r3, [r7, #18]
 8001b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	8013      	strh	r3, [r2, #0]
 8001b74:	e2b0      	b.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d021      	beq.n	8001bc4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	441a      	add	r2, r3
 8001bac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	f040 8284 	bne.w	80020d8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bd8:	441a      	add	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001be6:	441a      	add	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d309      	bcc.n	8001c0c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	6a1a      	ldr	r2, [r3, #32]
 8001c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	621a      	str	r2, [r3, #32]
 8001c0a:	e015      	b.n	8001c38 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001c14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c22:	e009      	b.n	8001c38 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d155      	bne.n	8001cec <HAL_PCD_EP_DB_Transmit+0x356>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c54:	4413      	add	r3, r2
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	00da      	lsls	r2, r3, #3
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c60:	4413      	add	r3, r2
 8001c62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
 8001c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c6c:	d916      	bls.n	8001c9c <HAL_PCD_EP_DB_Transmit+0x306>
 8001c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c80:	3b01      	subs	r3, #1
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	e043      	b.n	8001d24 <HAL_PCD_EP_DB_Transmit+0x38e>
 8001c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d112      	bne.n	8001cc8 <HAL_PCD_EP_DB_Transmit+0x332>
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	801a      	strh	r2, [r3, #0]
 8001cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	e02d      	b.n	8001d24 <HAL_PCD_EP_DB_Transmit+0x38e>
 8001cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_PCD_EP_DB_Transmit+0x348>
 8001cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cda:	3301      	adds	r3, #1
 8001cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	029b      	lsls	r3, r3, #10
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	e01b      	b.n	8001d24 <HAL_PCD_EP_DB_Transmit+0x38e>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d117      	bne.n	8001d24 <HAL_PCD_EP_DB_Transmit+0x38e>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d08:	4413      	add	r3, r2
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	00da      	lsls	r2, r3, #3
 8001d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d14:	4413      	add	r3, r2
 8001d16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6959      	ldr	r1, [r3, #20]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	891a      	ldrh	r2, [r3, #8]
 8001d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f003 f9eb 	bl	800510e <USB_WritePMA>
 8001d38:	e1ce      	b.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d307      	bcc.n	8001d7e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	619a      	str	r2, [r3, #24]
 8001d7c:	e002      	b.n	8001d84 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 80c4 	bne.w	8001f16 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d126      	bne.n	8001de4 <HAL_PCD_EP_DB_Transmit+0x44e>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001daa:	4413      	add	r3, r2
 8001dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db6:	4413      	add	r3, r2
 8001db8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8001dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	e01a      	b.n	8001e1a <HAL_PCD_EP_DB_Transmit+0x484>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d116      	bne.n	8001e1a <HAL_PCD_EP_DB_Transmit+0x484>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	673b      	str	r3, [r7, #112]	; 0x70
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e00:	4413      	add	r3, r2
 8001e02:	673b      	str	r3, [r7, #112]	; 0x70
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	00da      	lsls	r2, r3, #3
 8001e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e16:	2200      	movs	r2, #0
 8001e18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d12f      	bne.n	8001e88 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e40:	4413      	add	r3, r2
 8001e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e50:	4413      	add	r3, r2
 8001e52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e84:	801a      	strh	r2, [r3, #0]
 8001e86:	e017      	b.n	8001eb8 <HAL_PCD_EP_DB_Transmit+0x522>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d113      	bne.n	8001eb8 <HAL_PCD_EP_DB_Transmit+0x522>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e9e:	4413      	add	r3, r2
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	00da      	lsls	r2, r3, #3
 8001ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eaa:	4413      	add	r3, r2
 8001eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f005 f86b 	bl	8006f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 8104 	bne.w	80020d8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	441a      	add	r2, r3
 8001efc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	8013      	strh	r3, [r2, #0]
 8001f14:	e0e0      	b.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d121      	bne.n	8001f64 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	441a      	add	r2, r3
 8001f4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f040 80b4 	bne.w	80020d8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f78:	441a      	add	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f86:	441a      	add	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d309      	bcc.n	8001fac <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa4:	1ad2      	subs	r2, r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	621a      	str	r2, [r3, #32]
 8001faa:	e015      	b.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8001fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fc2:	e009      	b.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d155      	bne.n	8002092 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ffa:	4413      	add	r3, r2
 8001ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	00da      	lsls	r2, r3, #3
 8002004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002006:	4413      	add	r3, r2
 8002008:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	2b3e      	cmp	r3, #62	; 0x3e
 8002012:	d916      	bls.n	8002042 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	677b      	str	r3, [r7, #116]	; 0x74
 800201a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <HAL_PCD_EP_DB_Transmit+0x694>
 8002024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002026:	3b01      	subs	r3, #1
 8002028:	677b      	str	r3, [r7, #116]	; 0x74
 800202a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800202c:	b29b      	uxth	r3, r3
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	b29b      	uxth	r3, r3
 8002032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203a:	b29a      	uxth	r2, r3
 800203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203e:	801a      	strh	r2, [r3, #0]
 8002040:	e040      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002044:	2b00      	cmp	r3, #0
 8002046:	d112      	bne.n	800206e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002052:	b29a      	uxth	r2, r3
 8002054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002056:	801a      	strh	r2, [r3, #0]
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002066:	b29a      	uxth	r2, r3
 8002068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	e02a      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x72e>
 800206e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	677b      	str	r3, [r7, #116]	; 0x74
 8002074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800207e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002080:	3301      	adds	r3, #1
 8002082:	677b      	str	r3, [r7, #116]	; 0x74
 8002084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002086:	b29b      	uxth	r3, r3
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	b29a      	uxth	r2, r3
 800208c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208e:	801a      	strh	r2, [r3, #0]
 8002090:	e018      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d114      	bne.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x72e>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a8:	4413      	add	r3, r2
 80020aa:	663b      	str	r3, [r7, #96]	; 0x60
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	00da      	lsls	r2, r3, #3
 80020b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b4:	4413      	add	r3, r2
 80020b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6959      	ldr	r1, [r3, #20]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	895a      	ldrh	r2, [r3, #10]
 80020d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f003 f81b 	bl	800510e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020f2:	823b      	strh	r3, [r7, #16]
 80020f4:	8a3b      	ldrh	r3, [r7, #16]
 80020f6:	f083 0310 	eor.w	r3, r3, #16
 80020fa:	823b      	strh	r3, [r7, #16]
 80020fc:	8a3b      	ldrh	r3, [r7, #16]
 80020fe:	f083 0320 	eor.w	r3, r3, #32
 8002102:	823b      	strh	r3, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	441a      	add	r2, r3
 8002112:	8a3b      	ldrh	r3, [r7, #16]
 8002114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800211c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002124:	b29b      	uxth	r3, r3
 8002126:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3788      	adds	r7, #136	; 0x88
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002144:	897b      	ldrh	r3, [r7, #10]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00b      	beq.n	8002168 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002150:	897b      	ldrh	r3, [r7, #10]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e009      	b.n	800217c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002168:	897a      	ldrh	r2, [r7, #10]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800217c:	893b      	ldrh	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	b29a      	uxth	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	80da      	strh	r2, [r3, #6]
 8002190:	e00b      	b.n	80021aa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2201      	movs	r2, #1
 8002196:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	b29a      	uxth	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d141      	bne.n	800229e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d131      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002228:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222e:	4a46      	ldr	r2, [pc, #280]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002240:	4a41      	ldr	r2, [pc, #260]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002246:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2232      	movs	r2, #50	; 0x32
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0c9b      	lsrs	r3, r3, #18
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225e:	e002      	b.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3b01      	subs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002272:	d102      	bne.n	800227a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f2      	bne.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800227a:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002286:	d158      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e057      	b.n	800233c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800229c:	e04d      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a4:	d141      	bne.n	800232a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022a6:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b2:	d131      	bne.n	8002318 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ba:	4a23      	ldr	r2, [pc, #140]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2232      	movs	r2, #50	; 0x32
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ea:	e002      	b.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fe:	d102      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f2      	bne.n	80022ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002312:	d112      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e011      	b.n	800233c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002328:	e007      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002338:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40007000 	.word	0x40007000
 800234c:	20000000 	.word	0x20000000
 8002350:	431bde83 	.word	0x431bde83

08002354 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800235e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002362:	6093      	str	r3, [r2, #8]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e308      	b.n	8002998 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d075      	beq.n	800247e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4ba3      	ldr	r3, [pc, #652]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3e>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_OscConfig+0x44>
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	4b99      	ldr	r3, [pc, #612]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05b      	beq.n	800247c <HAL_RCC_OscConfig+0x108>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d157      	bne.n	800247c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e2e3      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x74>
 80023da:	4b91      	ldr	r3, [pc, #580]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a90      	ldr	r2, [pc, #576]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x98>
 80023f2:	4b8b      	ldr	r3, [pc, #556]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a8a      	ldr	r2, [pc, #552]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a87      	ldr	r2, [pc, #540]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a83      	ldr	r2, [pc, #524]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b81      	ldr	r3, [pc, #516]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a80      	ldr	r2, [pc, #512]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe f8a0 	bl	8000570 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe f89c 	bl	8000570 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e2a8      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xc0>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe f88c 	bl	8000570 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe f888 	bl	8000570 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e294      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246e:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0xe8>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d075      	beq.n	8002576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002494:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_OscConfig+0x136>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_OscConfig+0x13c>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11f      	bne.n	80024f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_OscConfig+0x154>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e267      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b55      	ldr	r3, [pc, #340]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	4952      	ldr	r1, [pc, #328]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024dc:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_RCC_OscConfig+0x2b0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd fff9 	bl	80004d8 <HAL_InitTick>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d043      	beq.n	8002574 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e253      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d023      	beq.n	8002540 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	4b49      	ldr	r3, [pc, #292]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe f834 	bl	8000570 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250c:	f7fe f830 	bl	8000570 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e23c      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	4939      	ldr	r1, [pc, #228]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
 800253e:	e01a      	b.n	8002576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a36      	ldr	r2, [pc, #216]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe f810 	bl	8000570 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002554:	f7fe f80c 	bl	8000570 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e218      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x1e0>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03c      	beq.n	80025fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fd ffe9 	bl	8000570 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a2:	f7fd ffe5 	bl	8000570 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1f1      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0ef      	beq.n	80025a2 <HAL_RCC_OscConfig+0x22e>
 80025c2:	e01b      	b.n	80025fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fd ffcc 	bl	8000570 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fd ffc8 	bl	8000570 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1d4      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ef      	bne.n	80025dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80ab 	beq.w	8002760 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2b4>
 800261a:	2301      	movs	r3, #1
 800261c:	e005      	b.n	800262a <HAL_RCC_OscConfig+0x2b6>
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	20000004 	.word	0x20000004
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4baf      	ldr	r3, [pc, #700]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4aae      	ldr	r2, [pc, #696]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
 800263a:	4bac      	ldr	r3, [pc, #688]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	4ba9      	ldr	r3, [pc, #676]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002656:	4ba6      	ldr	r3, [pc, #664]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4aa5      	ldr	r2, [pc, #660]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7fd ff85 	bl	8000570 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7fd ff81 	bl	8000570 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e18d      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267c:	4b9c      	ldr	r3, [pc, #624]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d108      	bne.n	80026a2 <HAL_RCC_OscConfig+0x32e>
 8002690:	4b96      	ldr	r3, [pc, #600]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a95      	ldr	r2, [pc, #596]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a0:	e024      	b.n	80026ec <HAL_RCC_OscConfig+0x378>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d110      	bne.n	80026cc <HAL_RCC_OscConfig+0x358>
 80026aa:	4b90      	ldr	r3, [pc, #576]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	4a8e      	ldr	r2, [pc, #568]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ba:	4b8c      	ldr	r3, [pc, #560]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	4a8a      	ldr	r2, [pc, #552]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_OscConfig+0x378>
 80026cc:	4b87      	ldr	r3, [pc, #540]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	4a86      	ldr	r2, [pc, #536]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026dc:	4b83      	ldr	r3, [pc, #524]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	4a82      	ldr	r2, [pc, #520]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d016      	beq.n	8002722 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fd ff3c 	bl	8000570 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fd ff38 	bl	8000570 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e142      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ed      	beq.n	80026fc <HAL_RCC_OscConfig+0x388>
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fd ff25 	bl	8000570 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fd ff21 	bl	8000570 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e12b      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ed      	bne.n	800272a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800274e:	7ffb      	ldrb	r3, [r7, #31]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002754:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4a64      	ldr	r2, [pc, #400]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800275a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01c      	beq.n	80027ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002774:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277a:	4a5c      	ldr	r2, [pc, #368]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fd fef4 	bl	8000570 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278c:	f7fd fef0 	bl	8000570 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0fc      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800279e:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCC_OscConfig+0x418>
 80027ac:	e01b      	b.n	80027e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027b4:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fd fed7 	bl	8000570 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c6:	f7fd fed3 	bl	8000570 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0df      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ef      	bne.n	80027c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80d3 	beq.w	8002996 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f0:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	f000 808d 	beq.w	8002918 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d15a      	bne.n	80028bc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a38      	ldr	r2, [pc, #224]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800280c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fd fead 	bl	8000570 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7fd fea9 	bl	8000570 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0b5      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_OscConfig+0x580>)
 800283e:	4013      	ands	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6a11      	ldr	r1, [r2, #32]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002848:	3a01      	subs	r2, #1
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002852:	0212      	lsls	r2, r2, #8
 8002854:	4311      	orrs	r1, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800285a:	0852      	lsrs	r2, r2, #1
 800285c:	3a01      	subs	r2, #1
 800285e:	0552      	lsls	r2, r2, #21
 8002860:	4311      	orrs	r1, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002866:	0852      	lsrs	r2, r2, #1
 8002868:	3a01      	subs	r2, #1
 800286a:	0652      	lsls	r2, r2, #25
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002872:	06d2      	lsls	r2, r2, #27
 8002874:	430a      	orrs	r2, r1
 8002876:	491d      	ldr	r1, [pc, #116]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002878:	4313      	orrs	r3, r2
 800287a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800288e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002892:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fd fe6c 	bl	8000570 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fd fe68 	bl	8000570 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e074      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x528>
 80028ba:	e06c      	b.n	8002996 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fd fe44 	bl	8000570 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ea:	e00e      	b.n	800290a <HAL_RCC_OscConfig+0x596>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
 80028f4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fd fe3a 	bl	8000570 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e046      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_OscConfig+0x62c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x584>
 8002916:	e03e      	b.n	8002996 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e039      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_OscConfig+0x62c>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	429a      	cmp	r2, r3
 8002936:	d12c      	bne.n	8002992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	3b01      	subs	r3, #1
 8002944:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d123      	bne.n	8002992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d11b      	bne.n	8002992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d113      	bne.n	8002992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d109      	bne.n	8002992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e11e      	b.n	8002bfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b91      	ldr	r3, [pc, #580]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b8e      	ldr	r3, [pc, #568]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 020f 	bic.w	r2, r3, #15
 80029d2:	498c      	ldr	r1, [pc, #560]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b8a      	ldr	r3, [pc, #552]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e106      	b.n	8002bfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d073      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d129      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a00:	4b81      	ldr	r3, [pc, #516]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0f4      	b.n	8002bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a10:	f000 f966 	bl	8002ce0 <RCC_GetSysClockFreqFromPLLSource>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4a7c      	ldr	r2, [pc, #496]	; (8002c0c <HAL_RCC_ClockConfig+0x268>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d93f      	bls.n	8002a9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a1e:	4b7a      	ldr	r3, [pc, #488]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d033      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d12f      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a3e:	4b72      	ldr	r3, [pc, #456]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	4a70      	ldr	r2, [pc, #448]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e024      	b.n	8002a9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0c6      	b.n	8002bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6c:	4b66      	ldr	r3, [pc, #408]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0be      	b.n	8002bfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a7c:	f000 f8ce 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4a61      	ldr	r2, [pc, #388]	; (8002c0c <HAL_RCC_ClockConfig+0x268>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d909      	bls.n	8002a9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a92:	4a5d      	ldr	r2, [pc, #372]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4957      	ldr	r1, [pc, #348]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab0:	f7fd fd5e 	bl	8000570 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fd fd5a 	bl	8000570 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e095      	b.n	8002bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d023      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a42      	ldr	r2, [pc, #264]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b10:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b18:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4936      	ldr	r1, [pc, #216]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d105      	bne.n	8002b46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b3a:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d21d      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 020f 	bic.w	r2, r3, #15
 8002b5c:	4929      	ldr	r1, [pc, #164]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b64:	f7fd fd04 	bl	8000570 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7fd fd00 	bl	8000570 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e03b      	b.n	8002bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1ed      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4917      	ldr	r1, [pc, #92]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490f      	ldr	r1, [pc, #60]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bce:	f000 f825 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490c      	ldr	r1, [pc, #48]	; (8002c10 <HAL_RCC_ClockConfig+0x26c>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x270>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x274>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc70 	bl	80004d8 <HAL_InitTick>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	04c4b400 	.word	0x04c4b400
 8002c10:	080075a8 	.word	0x080075a8
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c22:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	e047      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d102      	bne.n	8002c46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	e03e      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	d136      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3301      	adds	r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d10c      	bne.n	8002c8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c70:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7a:	68d2      	ldr	r2, [r2, #12]
 8002c7c:	0a12      	lsrs	r2, r2, #8
 8002c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
      break;
 8002c88:	e00c      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	0a12      	lsrs	r2, r2, #8
 8002c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
      break;
 8002ca2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0e5b      	lsrs	r3, r3, #25
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e001      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cc4:	693b      	ldr	r3, [r7, #16]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	007a1200 	.word	0x007a1200

08002ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d10c      	bne.n	8002d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d04:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d0e:	68d2      	ldr	r2, [r2, #12]
 8002d10:	0a12      	lsrs	r2, r2, #8
 8002d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
    break;
 8002d1c:	e00c      	b.n	8002d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	0a12      	lsrs	r2, r2, #8
 8002d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    break;
 8002d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0e5b      	lsrs	r3, r3, #25
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d52:	687b      	ldr	r3, [r7, #4]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	00f42400 	.word	0x00f42400

08002d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d74:	2300      	movs	r3, #0
 8002d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d78:	2300      	movs	r3, #0
 8002d7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8098 	beq.w	8002eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8e:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10d      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db6:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a39      	ldr	r2, [pc, #228]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc2:	f7fd fbd5 	bl	8000570 <HAL_GetTick>
 8002dc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc8:	e009      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fd fbd1 	bl	8000570 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d902      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	74fb      	strb	r3, [r7, #19]
        break;
 8002ddc:	e005      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dde:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ef      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d159      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01e      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d019      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fd fb91 	bl	8000570 <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e50:	e00b      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fd fb8d 	bl	8000570 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d902      	bls.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	74fb      	strb	r3, [r7, #19]
            break;
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ec      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	4903      	ldr	r1, [pc, #12]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e94:	e008      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	74bb      	strb	r3, [r7, #18]
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea8:	7c7b      	ldrb	r3, [r7, #17]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4ba6      	ldr	r3, [pc, #664]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4aa5      	ldr	r2, [pc, #660]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec6:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f023 0203 	bic.w	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	499c      	ldr	r1, [pc, #624]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee8:	4b97      	ldr	r3, [pc, #604]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 020c 	bic.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4994      	ldr	r1, [pc, #592]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f0a:	4b8f      	ldr	r3, [pc, #572]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	498b      	ldr	r1, [pc, #556]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f2c:	4b86      	ldr	r3, [pc, #536]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	4983      	ldr	r1, [pc, #524]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f4e:	4b7e      	ldr	r3, [pc, #504]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	497a      	ldr	r1, [pc, #488]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f70:	4b75      	ldr	r3, [pc, #468]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	4972      	ldr	r1, [pc, #456]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f92:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4969      	ldr	r1, [pc, #420]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fb4:	4b64      	ldr	r3, [pc, #400]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4961      	ldr	r1, [pc, #388]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	4958      	ldr	r1, [pc, #352]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	4950      	ldr	r1, [pc, #320]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003016:	d105      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003018:	4b4b      	ldr	r3, [pc, #300]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003030:	4b45      	ldr	r3, [pc, #276]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	4942      	ldr	r1, [pc, #264]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003068:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4934      	ldr	r1, [pc, #208]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a2e      	ldr	r2, [pc, #184]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a0:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	4926      	ldr	r1, [pc, #152]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	4918      	ldr	r1, [pc, #96]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	490a      	ldr	r1, [pc, #40]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800313c:	7cbb      	ldrb	r3, [r7, #18]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800315c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003160:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003182:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003186:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	b29b      	uxth	r3, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	b29b      	uxth	r3, r3
 8003198:	4013      	ands	r3, r2
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031b0:	b084      	sub	sp, #16
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	f107 0014 	add.w	r0, r7, #20
 80031be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	b004      	add	sp, #16
 80031f0:	4770      	bx	lr
	...

080031f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b09d      	sub	sp, #116	; 0x74
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	78db      	ldrb	r3, [r3, #3]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d81f      	bhi.n	8003266 <USB_ActivateEndpoint+0x72>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <USB_ActivateEndpoint+0x38>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	0800323d 	.word	0x0800323d
 8003230:	08003259 	.word	0x08003259
 8003234:	0800326f 	.word	0x0800326f
 8003238:	0800324b 	.word	0x0800324b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800323c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003244:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003248:	e012      	b.n	8003270 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800324a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800324e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003252:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003256:	e00b      	b.n	8003270 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003258:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800325c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003260:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003264:	e004      	b.n	8003270 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800326c:	e000      	b.n	8003270 <USB_ActivateEndpoint+0x7c>
      break;
 800326e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80032c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	7b1b      	ldrb	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 8149 	bne.w	8003578 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8084 	beq.w	80033f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4413      	add	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	00da      	lsls	r2, r3, #3
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	88db      	ldrh	r3, [r3, #6]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	827b      	strh	r3, [r7, #18]
 8003332:	8a7b      	ldrh	r3, [r7, #18]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <USB_ActivateEndpoint+0x180>
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	823b      	strh	r3, [r7, #16]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	8a3b      	ldrh	r3, [r7, #16]
 8003360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003370:	b29b      	uxth	r3, r3
 8003372:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	78db      	ldrb	r3, [r3, #3]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d020      	beq.n	80033be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	81bb      	strh	r3, [r7, #12]
 8003394:	89bb      	ldrh	r3, [r7, #12]
 8003396:	f083 0320 	eor.w	r3, r3, #32
 800339a:	81bb      	strh	r3, [r7, #12]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	89bb      	ldrh	r3, [r7, #12]
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
 80033bc:	e2a6      	b.n	800390c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d4:	81fb      	strh	r3, [r7, #14]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	441a      	add	r2, r3
 80033e0:	89fb      	ldrh	r3, [r7, #14]
 80033e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8013      	strh	r3, [r2, #0]
 80033f6:	e289      	b.n	800390c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	4413      	add	r3, r2
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	00da      	lsls	r2, r3, #3
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	4413      	add	r3, r2
 8003416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	88db      	ldrh	r3, [r3, #6]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	b29b      	uxth	r3, r3
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	4413      	add	r3, r2
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	00da      	lsls	r2, r3, #3
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	4413      	add	r3, r2
 800344a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b3e      	cmp	r3, #62	; 0x3e
 8003456:	d918      	bls.n	800348a <USB_ActivateEndpoint+0x296>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <USB_ActivateEndpoint+0x27e>
 800346c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800346e:	3b01      	subs	r3, #1
 8003470:	66bb      	str	r3, [r7, #104]	; 0x68
 8003472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003474:	b29b      	uxth	r3, r3
 8003476:	029b      	lsls	r3, r3, #10
 8003478:	b29b      	uxth	r3, r3
 800347a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003482:	b29a      	uxth	r2, r3
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	801a      	strh	r2, [r3, #0]
 8003488:	e029      	b.n	80034de <USB_ActivateEndpoint+0x2ea>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d112      	bne.n	80034b8 <USB_ActivateEndpoint+0x2c4>
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800349c:	b29a      	uxth	r2, r3
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	e012      	b.n	80034de <USB_ActivateEndpoint+0x2ea>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <USB_ActivateEndpoint+0x2de>
 80034cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ce:	3301      	adds	r3, #1
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	b29a      	uxth	r2, r3
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80034ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01b      	beq.n	800352e <USB_ActivateEndpoint+0x33a>
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	843b      	strh	r3, [r7, #32]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	8c3b      	ldrh	r3, [r7, #32]
 800351a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352a:	b29b      	uxth	r3, r3
 800352c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003544:	83fb      	strh	r3, [r7, #30]
 8003546:	8bfb      	ldrh	r3, [r7, #30]
 8003548:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800354c:	83fb      	strh	r3, [r7, #30]
 800354e:	8bfb      	ldrh	r3, [r7, #30]
 8003550:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003554:	83fb      	strh	r3, [r7, #30]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	441a      	add	r2, r3
 8003560:	8bfb      	ldrh	r3, [r7, #30]
 8003562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003572:	b29b      	uxth	r3, r3
 8003574:	8013      	strh	r3, [r2, #0]
 8003576:	e1c9      	b.n	800390c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	78db      	ldrb	r3, [r3, #3]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d11e      	bne.n	80035be <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	441a      	add	r2, r3
 80035a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80035a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80035b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8013      	strh	r3, [r2, #0]
 80035bc:	e01d      	b.n	80035fa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800360a:	4413      	add	r3, r2
 800360c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	00da      	lsls	r2, r3, #3
 8003614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003616:	4413      	add	r3, r2
 8003618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800361c:	65bb      	str	r3, [r7, #88]	; 0x58
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	891b      	ldrh	r3, [r3, #8]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	b29b      	uxth	r3, r3
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362c:	801a      	strh	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	657b      	str	r3, [r7, #84]	; 0x54
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363e:	4413      	add	r3, r2
 8003640:	657b      	str	r3, [r7, #84]	; 0x54
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	00da      	lsls	r2, r3, #3
 8003648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364a:	4413      	add	r3, r2
 800364c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003650:	653b      	str	r3, [r7, #80]	; 0x50
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	895b      	ldrh	r3, [r3, #10]
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	b29b      	uxth	r3, r3
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 8093 	bne.w	8003792 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800367c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <USB_ActivateEndpoint+0x4cc>
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	441a      	add	r2, r3
 80036aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80036ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036bc:	b29b      	uxth	r3, r3
 80036be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80036ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <USB_ActivateEndpoint+0x51c>
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80036fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800370c:	b29b      	uxth	r3, r3
 800370e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	873b      	strh	r3, [r7, #56]	; 0x38
 8003728:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800372a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800372e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003730:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003732:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003736:	873b      	strh	r3, [r7, #56]	; 0x38
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
 8003790:	e0bc      	b.n	800390c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80037a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01d      	beq.n	80037ea <USB_ActivateEndpoint+0x5f6>
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	441a      	add	r2, r3
 80037d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80037d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80037fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01d      	beq.n	8003842 <USB_ActivateEndpoint+0x64e>
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800382e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800383e:	b29b      	uxth	r3, r3
 8003840:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	78db      	ldrb	r3, [r3, #3]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d024      	beq.n	8003894 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003860:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003864:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003868:	f083 0320 	eor.w	r3, r3, #32
 800386c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800387e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388e:	b29b      	uxth	r3, r3
 8003890:	8013      	strh	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	441a      	add	r2, r3
 80038b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	441a      	add	r2, r3
 80038f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800390c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003910:	4618      	mov	r0, r3
 8003912:	3774      	adds	r7, #116	; 0x74
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800391c:	b480      	push	{r7}
 800391e:	b08d      	sub	sp, #52	; 0x34
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	7b1b      	ldrb	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 808e 	bne.w	8003a4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d044      	beq.n	80039c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	81bb      	strh	r3, [r7, #12]
 8003946:	89bb      	ldrh	r3, [r7, #12]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01b      	beq.n	8003988 <USB_DeactivateEndpoint+0x6c>
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	817b      	strh	r3, [r7, #10]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003984:	b29b      	uxth	r3, r3
 8003986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399e:	813b      	strh	r3, [r7, #8]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	893b      	ldrh	r3, [r7, #8]
 80039ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]
 80039c0:	e192      	b.n	8003ce8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	827b      	strh	r3, [r7, #18]
 80039d0:	8a7b      	ldrh	r3, [r7, #18]
 80039d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01b      	beq.n	8003a12 <USB_DeactivateEndpoint+0xf6>
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f0:	823b      	strh	r3, [r7, #16]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	441a      	add	r2, r3
 80039fc:	8a3b      	ldrh	r3, [r7, #16]
 80039fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a28:	81fb      	strh	r3, [r7, #14]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	441a      	add	r2, r3
 8003a34:	89fb      	ldrh	r3, [r7, #14]
 8003a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	8013      	strh	r3, [r2, #0]
 8003a4a:	e14d      	b.n	8003ce8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 80a5 	bne.w	8003ba0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	843b      	strh	r3, [r7, #32]
 8003a64:	8c3b      	ldrh	r3, [r7, #32]
 8003a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <USB_DeactivateEndpoint+0x18a>
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a84:	83fb      	strh	r3, [r7, #30]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	8bfb      	ldrh	r3, [r7, #30]
 8003a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	83bb      	strh	r3, [r7, #28]
 8003ab4:	8bbb      	ldrh	r3, [r7, #28]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01b      	beq.n	8003af6 <USB_DeactivateEndpoint+0x1da>
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	837b      	strh	r3, [r7, #26]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	441a      	add	r2, r3
 8003ae0:	8b7b      	ldrh	r3, [r7, #26]
 8003ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0c:	833b      	strh	r3, [r7, #24]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	441a      	add	r2, r3
 8003b18:	8b3b      	ldrh	r3, [r7, #24]
 8003b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	82fb      	strh	r3, [r7, #22]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	441a      	add	r2, r3
 8003b50:	8afb      	ldrh	r3, [r7, #22]
 8003b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7c:	82bb      	strh	r3, [r7, #20]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	8abb      	ldrh	r3, [r7, #20]
 8003b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]
 8003b9e:	e0a3      	b.n	8003ce8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003bae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01b      	beq.n	8003bf0 <USB_DeactivateEndpoint+0x2d4>
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003bfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01b      	beq.n	8003c40 <USB_DeactivateEndpoint+0x324>
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	441a      	add	r2, r3
 8003c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	441a      	add	r2, r3
 8003cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3734      	adds	r7, #52	; 0x34
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b0c2      	sub	sp, #264	; 0x108
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	6018      	str	r0, [r3, #0]
 8003d00:	463b      	mov	r3, r7
 8003d02:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d04:	463b      	mov	r3, r7
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	785b      	ldrb	r3, [r3, #1]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	f040 8509 	bne.w	8004722 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003d10:	463b      	mov	r3, r7
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	463b      	mov	r3, r7
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d905      	bls.n	8003d2c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003d20:	463b      	mov	r3, r7
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d2a:	e004      	b.n	8003d36 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003d36:	463b      	mov	r3, r7
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	7b1b      	ldrb	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d128      	bne.n	8003d92 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003d40:	463b      	mov	r3, r7
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6959      	ldr	r1, [r3, #20]
 8003d46:	463b      	mov	r3, r7
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	88da      	ldrh	r2, [r3, #6]
 8003d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	1d38      	adds	r0, r7, #4
 8003d54:	6800      	ldr	r0, [r0, #0]
 8003d56:	f001 f9da 	bl	800510e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	1d3b      	adds	r3, r7, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	463b      	mov	r3, r7
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	00da      	lsls	r2, r3, #3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	801a      	strh	r2, [r3, #0]
 8003d8e:	f000 bc9f 	b.w	80046d0 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d92:	463b      	mov	r3, r7
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	78db      	ldrb	r3, [r3, #3]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f040 8347 	bne.w	800442c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d9e:	463b      	mov	r3, r7
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	463b      	mov	r3, r7
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	f240 82eb 	bls.w	8004386 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	463b      	mov	r3, r7
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003dce:	1d3b      	adds	r3, r7, #4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	441a      	add	r2, r3
 8003ddc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003df4:	463b      	mov	r3, r7
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a1a      	ldr	r2, [r3, #32]
 8003dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	463b      	mov	r3, r7
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8159 	beq.w	80040d4 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
 8003e28:	463b      	mov	r3, r7
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d164      	bne.n	8003efc <USB_EPStartXfer+0x206>
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	4413      	add	r3, r2
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	00da      	lsls	r2, r3, #3
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	4413      	add	r3, r2
 8003e56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e60:	2b3e      	cmp	r3, #62	; 0x3e
 8003e62:	d91c      	bls.n	8003e9e <USB_EPStartXfer+0x1a8>
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <USB_EPStartXfer+0x18e>
 8003e7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	029b      	lsls	r3, r3, #10
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e04a      	b.n	8003f34 <USB_EPStartXfer+0x23e>
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d112      	bne.n	8003ecc <USB_EPStartXfer+0x1d6>
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	e033      	b.n	8003f34 <USB_EPStartXfer+0x23e>
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <USB_EPStartXfer+0x1f6>
 8003ee2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003eec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	e01b      	b.n	8003f34 <USB_EPStartXfer+0x23e>
 8003efc:	463b      	mov	r3, r7
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d116      	bne.n	8003f34 <USB_EPStartXfer+0x23e>
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	4413      	add	r3, r2
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
 8003f18:	463b      	mov	r3, r7
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	00da      	lsls	r2, r3, #3
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	4413      	add	r3, r2
 8003f24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f34:	463b      	mov	r3, r7
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	895b      	ldrh	r3, [r3, #10]
 8003f3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f3e:	463b      	mov	r3, r7
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6959      	ldr	r1, [r3, #20]
 8003f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f4e:	1d38      	adds	r0, r7, #4
 8003f50:	6800      	ldr	r0, [r0, #0]
 8003f52:	f001 f8dc 	bl	800510e <USB_WritePMA>
            ep->xfer_buff += len;
 8003f56:	463b      	mov	r3, r7
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f60:	441a      	add	r2, r3
 8003f62:	463b      	mov	r3, r7
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f68:	463b      	mov	r3, r7
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a1a      	ldr	r2, [r3, #32]
 8003f6e:	463b      	mov	r3, r7
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d909      	bls.n	8003f8c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8003f78:	463b      	mov	r3, r7
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	463b      	mov	r3, r7
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	621a      	str	r2, [r3, #32]
 8003f8a:	e008      	b.n	8003f9e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003f96:	463b      	mov	r3, r7
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f9e:	463b      	mov	r3, r7
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d164      	bne.n	8004072 <USB_EPStartXfer+0x37c>
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	00da      	lsls	r2, r3, #3
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8003fd8:	d91c      	bls.n	8004014 <USB_EPStartXfer+0x31e>
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <USB_EPStartXfer+0x304>
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	029b      	lsls	r3, r3, #10
 8004002:	b29b      	uxth	r3, r3
 8004004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400c:	b29a      	uxth	r2, r3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	e04d      	b.n	80040b0 <USB_EPStartXfer+0x3ba>
 8004014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004018:	2b00      	cmp	r3, #0
 800401a:	d112      	bne.n	8004042 <USB_EPStartXfer+0x34c>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004026:	b29a      	uxth	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800403a:	b29a      	uxth	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e036      	b.n	80040b0 <USB_EPStartXfer+0x3ba>
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <USB_EPStartXfer+0x36c>
 8004058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405c:	3301      	adds	r3, #1
 800405e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004066:	b29b      	uxth	r3, r3
 8004068:	029b      	lsls	r3, r3, #10
 800406a:	b29a      	uxth	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	e01e      	b.n	80040b0 <USB_EPStartXfer+0x3ba>
 8004072:	463b      	mov	r3, r7
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d119      	bne.n	80040b0 <USB_EPStartXfer+0x3ba>
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	4413      	add	r3, r2
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	463b      	mov	r3, r7
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	00da      	lsls	r2, r3, #3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	4413      	add	r3, r2
 80040a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80040b0:	463b      	mov	r3, r7
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	891b      	ldrh	r3, [r3, #8]
 80040b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040ba:	463b      	mov	r3, r7
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6959      	ldr	r1, [r3, #20]
 80040c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80040ca:	1d38      	adds	r0, r7, #4
 80040cc:	6800      	ldr	r0, [r0, #0]
 80040ce:	f001 f81e 	bl	800510e <USB_WritePMA>
 80040d2:	e2fd      	b.n	80046d0 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040d4:	463b      	mov	r3, r7
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d164      	bne.n	80041a8 <USB_EPStartXfer+0x4b2>
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f2:	4413      	add	r3, r2
 80040f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f6:	463b      	mov	r3, r7
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	00da      	lsls	r2, r3, #3
 80040fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004100:	4413      	add	r3, r2
 8004102:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004106:	647b      	str	r3, [r7, #68]	; 0x44
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410c:	2b3e      	cmp	r3, #62	; 0x3e
 800410e:	d91c      	bls.n	800414a <USB_EPStartXfer+0x454>
 8004110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800411a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <USB_EPStartXfer+0x43a>
 8004126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800412a:	3b01      	subs	r3, #1
 800412c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004130:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004134:	b29b      	uxth	r3, r3
 8004136:	029b      	lsls	r3, r3, #10
 8004138:	b29b      	uxth	r3, r3
 800413a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004142:	b29a      	uxth	r2, r3
 8004144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	e04d      	b.n	80041e6 <USB_EPStartXfer+0x4f0>
 800414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800414e:	2b00      	cmp	r3, #0
 8004150:	d112      	bne.n	8004178 <USB_EPStartXfer+0x482>
 8004152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800415c:	b29a      	uxth	r2, r3
 800415e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004170:	b29a      	uxth	r2, r3
 8004172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	e036      	b.n	80041e6 <USB_EPStartXfer+0x4f0>
 8004178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <USB_EPStartXfer+0x4a2>
 800418e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004192:	3301      	adds	r3, #1
 8004194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004198:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800419c:	b29b      	uxth	r3, r3
 800419e:	029b      	lsls	r3, r3, #10
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	e01e      	b.n	80041e6 <USB_EPStartXfer+0x4f0>
 80041a8:	463b      	mov	r3, r7
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	785b      	ldrb	r3, [r3, #1]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d119      	bne.n	80041e6 <USB_EPStartXfer+0x4f0>
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	653b      	str	r3, [r7, #80]	; 0x50
 80041b8:	1d3b      	adds	r3, r7, #4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c6:	4413      	add	r3, r2
 80041c8:	653b      	str	r3, [r7, #80]	; 0x50
 80041ca:	463b      	mov	r3, r7
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	00da      	lsls	r2, r3, #3
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80041e6:	463b      	mov	r3, r7
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	891b      	ldrh	r3, [r3, #8]
 80041ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041f0:	463b      	mov	r3, r7
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004200:	1d38      	adds	r0, r7, #4
 8004202:	6800      	ldr	r0, [r0, #0]
 8004204:	f000 ff83 	bl	800510e <USB_WritePMA>
            ep->xfer_buff += len;
 8004208:	463b      	mov	r3, r7
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004212:	441a      	add	r2, r3
 8004214:	463b      	mov	r3, r7
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	463b      	mov	r3, r7
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	429a      	cmp	r2, r3
 8004228:	d909      	bls.n	800423e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800422a:	463b      	mov	r3, r7
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004234:	1ad2      	subs	r2, r2, r3
 8004236:	463b      	mov	r3, r7
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	621a      	str	r2, [r3, #32]
 800423c:	e008      	b.n	8004250 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800423e:	463b      	mov	r3, r7
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004248:	463b      	mov	r3, r7
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	643b      	str	r3, [r7, #64]	; 0x40
 8004256:	463b      	mov	r3, r7
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d164      	bne.n	800432a <USB_EPStartXfer+0x634>
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426e:	b29b      	uxth	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	4413      	add	r3, r2
 8004276:	63bb      	str	r3, [r7, #56]	; 0x38
 8004278:	463b      	mov	r3, r7
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	00da      	lsls	r2, r3, #3
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	4413      	add	r3, r2
 8004284:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
 800428a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800428e:	2b3e      	cmp	r3, #62	; 0x3e
 8004290:	d91c      	bls.n	80042cc <USB_EPStartXfer+0x5d6>
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800429c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <USB_EPStartXfer+0x5bc>
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	3b01      	subs	r3, #1
 80042ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	e04a      	b.n	8004362 <USB_EPStartXfer+0x66c>
 80042cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d112      	bne.n	80042fa <USB_EPStartXfer+0x604>
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042de:	b29a      	uxth	r2, r3
 80042e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e2:	801a      	strh	r2, [r3, #0]
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e033      	b.n	8004362 <USB_EPStartXfer+0x66c>
 80042fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <USB_EPStartXfer+0x624>
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	3301      	adds	r3, #1
 8004316:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	b29b      	uxth	r3, r3
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	b29a      	uxth	r2, r3
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	801a      	strh	r2, [r3, #0]
 8004328:	e01b      	b.n	8004362 <USB_EPStartXfer+0x66c>
 800432a:	463b      	mov	r3, r7
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d116      	bne.n	8004362 <USB_EPStartXfer+0x66c>
 8004334:	1d3b      	adds	r3, r7, #4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433c:	b29b      	uxth	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004342:	4413      	add	r3, r2
 8004344:	643b      	str	r3, [r7, #64]	; 0x40
 8004346:	463b      	mov	r3, r7
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	00da      	lsls	r2, r3, #3
 800434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004350:	4413      	add	r3, r2
 8004352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800435c:	b29a      	uxth	r2, r3
 800435e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004362:	463b      	mov	r3, r7
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	895b      	ldrh	r3, [r3, #10]
 8004368:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800436c:	463b      	mov	r3, r7
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6959      	ldr	r1, [r3, #20]
 8004372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004376:	b29b      	uxth	r3, r3
 8004378:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800437c:	1d38      	adds	r0, r7, #4
 800437e:	6800      	ldr	r0, [r0, #0]
 8004380:	f000 fec5 	bl	800510e <USB_WritePMA>
 8004384:	e1a4      	b.n	80046d0 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004386:	463b      	mov	r3, r7
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	463b      	mov	r3, r7
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	463b      	mov	r3, r7
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e8:	4413      	add	r3, r2
 80043ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ec:	463b      	mov	r3, r7
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	00da      	lsls	r2, r3, #3
 80043f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f6:	4413      	add	r3, r2
 80043f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004402:	b29a      	uxth	r2, r3
 8004404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004406:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004408:	463b      	mov	r3, r7
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	891b      	ldrh	r3, [r3, #8]
 800440e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6959      	ldr	r1, [r3, #20]
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800441c:	b29b      	uxth	r3, r3
 800441e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004422:	1d38      	adds	r0, r7, #4
 8004424:	6800      	ldr	r0, [r0, #0]
 8004426:	f000 fe72 	bl	800510e <USB_WritePMA>
 800442a:	e151      	b.n	80046d0 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	463b      	mov	r3, r7
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800443e:	1d3b      	adds	r3, r7, #4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	463b      	mov	r3, r7
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 809b 	beq.w	8004590 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	673b      	str	r3, [r7, #112]	; 0x70
 8004460:	463b      	mov	r3, r7
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d164      	bne.n	8004534 <USB_EPStartXfer+0x83e>
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004478:	b29b      	uxth	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447e:	4413      	add	r3, r2
 8004480:	66bb      	str	r3, [r7, #104]	; 0x68
 8004482:	463b      	mov	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	00da      	lsls	r2, r3, #3
 800448a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800448c:	4413      	add	r3, r2
 800448e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
 8004494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004498:	2b3e      	cmp	r3, #62	; 0x3e
 800449a:	d91c      	bls.n	80044d6 <USB_EPStartXfer+0x7e0>
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <USB_EPStartXfer+0x7c6>
 80044b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80044bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e04a      	b.n	800456c <USB_EPStartXfer+0x876>
 80044d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d112      	bne.n	8004504 <USB_EPStartXfer+0x80e>
 80044de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	e033      	b.n	800456c <USB_EPStartXfer+0x876>
 8004504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800450e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <USB_EPStartXfer+0x82e>
 800451a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800451e:	3301      	adds	r3, #1
 8004520:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004524:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004528:	b29b      	uxth	r3, r3
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	b29a      	uxth	r2, r3
 800452e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	e01b      	b.n	800456c <USB_EPStartXfer+0x876>
 8004534:	463b      	mov	r3, r7
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	785b      	ldrb	r3, [r3, #1]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d116      	bne.n	800456c <USB_EPStartXfer+0x876>
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800454c:	4413      	add	r3, r2
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
 8004550:	463b      	mov	r3, r7
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	00da      	lsls	r2, r3, #3
 8004558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800455a:	4413      	add	r3, r2
 800455c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004566:	b29a      	uxth	r2, r3
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800456c:	463b      	mov	r3, r7
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	895b      	ldrh	r3, [r3, #10]
 8004572:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004576:	463b      	mov	r3, r7
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6959      	ldr	r1, [r3, #20]
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004580:	b29b      	uxth	r3, r3
 8004582:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004586:	1d38      	adds	r0, r7, #4
 8004588:	6800      	ldr	r0, [r0, #0]
 800458a:	f000 fdc0 	bl	800510e <USB_WritePMA>
 800458e:	e09f      	b.n	80046d0 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d164      	bne.n	8004664 <USB_EPStartXfer+0x96e>
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045ae:	4413      	add	r3, r2
 80045b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045b2:	463b      	mov	r3, r7
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	00da      	lsls	r2, r3, #3
 80045ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045bc:	4413      	add	r3, r2
 80045be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80045c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ca:	d91c      	bls.n	8004606 <USB_EPStartXfer+0x910>
 80045cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <USB_EPStartXfer+0x8f6>
 80045e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	029b      	lsls	r3, r3, #10
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e053      	b.n	80046ae <USB_EPStartXfer+0x9b8>
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800460a:	2b00      	cmp	r3, #0
 800460c:	d112      	bne.n	8004634 <USB_EPStartXfer+0x93e>
 800460e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004618:	b29a      	uxth	r2, r3
 800461a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462c:	b29a      	uxth	r2, r3
 800462e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	e03c      	b.n	80046ae <USB_EPStartXfer+0x9b8>
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800463e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <USB_EPStartXfer+0x95e>
 800464a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800464e:	3301      	adds	r3, #1
 8004650:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004654:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004658:	b29b      	uxth	r3, r3
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	b29a      	uxth	r2, r3
 800465e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e024      	b.n	80046ae <USB_EPStartXfer+0x9b8>
 8004664:	463b      	mov	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d11f      	bne.n	80046ae <USB_EPStartXfer+0x9b8>
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467e:	b29b      	uxth	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004686:	4413      	add	r3, r2
 8004688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	00da      	lsls	r2, r3, #3
 8004694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004698:	4413      	add	r3, r2
 800469a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800469e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	891b      	ldrh	r3, [r3, #8]
 80046b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046b8:	463b      	mov	r3, r7
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6959      	ldr	r1, [r3, #20]
 80046be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80046c8:	1d38      	adds	r0, r7, #4
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	f000 fd1f 	bl	800510e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80046d0:	1d3b      	adds	r3, r7, #4
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	463b      	mov	r3, r7
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ea:	817b      	strh	r3, [r7, #10]
 80046ec:	897b      	ldrh	r3, [r7, #10]
 80046ee:	f083 0310 	eor.w	r3, r3, #16
 80046f2:	817b      	strh	r3, [r7, #10]
 80046f4:	897b      	ldrh	r3, [r7, #10]
 80046f6:	f083 0320 	eor.w	r3, r3, #32
 80046fa:	817b      	strh	r3, [r7, #10]
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]
 8004720:	e3b5      	b.n	8004e8e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004722:	463b      	mov	r3, r7
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	7b1b      	ldrb	r3, [r3, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 8090 	bne.w	800484e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800472e:	463b      	mov	r3, r7
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	463b      	mov	r3, r7
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	429a      	cmp	r2, r3
 800473c:	d90e      	bls.n	800475c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800473e:	463b      	mov	r3, r7
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004748:	463b      	mov	r3, r7
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	619a      	str	r2, [r3, #24]
 800475a:	e008      	b.n	800476e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800475c:	463b      	mov	r3, r7
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004766:	463b      	mov	r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800476e:	1d3b      	adds	r3, r7, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004776:	1d3b      	adds	r3, r7, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004786:	4413      	add	r3, r2
 8004788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800478c:	463b      	mov	r3, r7
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00da      	lsls	r2, r3, #3
 8004794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004798:	4413      	add	r3, r2
 800479a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800479e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a6:	2b3e      	cmp	r3, #62	; 0x3e
 80047a8:	d91d      	bls.n	80047e6 <USB_EPStartXfer+0xaf0>
 80047aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <USB_EPStartXfer+0xad4>
 80047c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047c4:	3b01      	subs	r3, #1
 80047c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047dc:	b29a      	uxth	r2, r3
 80047de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	e325      	b.n	8004e32 <USB_EPStartXfer+0x113c>
 80047e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d116      	bne.n	800481c <USB_EPStartXfer+0xb26>
 80047ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004812:	b29a      	uxth	r2, r3
 8004814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e30a      	b.n	8004e32 <USB_EPStartXfer+0x113c>
 800481c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <USB_EPStartXfer+0xb46>
 8004832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004836:	3301      	adds	r3, #1
 8004838:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800483c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004840:	b29b      	uxth	r3, r3
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	b29a      	uxth	r2, r3
 8004846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	e2f1      	b.n	8004e32 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800484e:	463b      	mov	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	78db      	ldrb	r3, [r3, #3]
 8004854:	2b02      	cmp	r3, #2
 8004856:	f040 818f 	bne.w	8004b78 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800485a:	463b      	mov	r3, r7
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d175      	bne.n	8004950 <USB_EPStartXfer+0xc5a>
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004874:	b29b      	uxth	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800487c:	4413      	add	r3, r2
 800487e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004882:	463b      	mov	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	00da      	lsls	r2, r3, #3
 800488a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800488e:	4413      	add	r3, r2
 8004890:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b3e      	cmp	r3, #62	; 0x3e
 80048a0:	d91f      	bls.n	80048e2 <USB_EPStartXfer+0xbec>
 80048a2:	463b      	mov	r3, r7
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ae:	463b      	mov	r3, r7
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <USB_EPStartXfer+0xbd0>
 80048bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c0:	3b01      	subs	r3, #1
 80048c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	029b      	lsls	r3, r3, #10
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e05c      	b.n	800499c <USB_EPStartXfer+0xca6>
 80048e2:	463b      	mov	r3, r7
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d116      	bne.n	800491a <USB_EPStartXfer+0xc24>
 80048ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004910:	b29a      	uxth	r2, r3
 8004912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	e040      	b.n	800499c <USB_EPStartXfer+0xca6>
 800491a:	463b      	mov	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004926:	463b      	mov	r3, r7
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <USB_EPStartXfer+0xc48>
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004938:	3301      	adds	r3, #1
 800493a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004942:	b29b      	uxth	r3, r3
 8004944:	029b      	lsls	r3, r3, #10
 8004946:	b29a      	uxth	r2, r3
 8004948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	e025      	b.n	800499c <USB_EPStartXfer+0xca6>
 8004950:	463b      	mov	r3, r7
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d120      	bne.n	800499c <USB_EPStartXfer+0xca6>
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496a:	b29b      	uxth	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004972:	4413      	add	r3, r2
 8004974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004978:	463b      	mov	r3, r7
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	00da      	lsls	r2, r3, #3
 8004980:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004984:	4413      	add	r3, r2
 8004986:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800498a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800498e:	463b      	mov	r3, r7
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	b29a      	uxth	r2, r3
 8004996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049a4:	463b      	mov	r3, r7
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d175      	bne.n	8004a9a <USB_EPStartXfer+0xda4>
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049c6:	4413      	add	r3, r2
 80049c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	00da      	lsls	r2, r3, #3
 80049d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049d8:	4413      	add	r3, r2
 80049da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049e2:	463b      	mov	r3, r7
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b3e      	cmp	r3, #62	; 0x3e
 80049ea:	d91f      	bls.n	8004a2c <USB_EPStartXfer+0xd36>
 80049ec:	463b      	mov	r3, r7
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049f8:	463b      	mov	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <USB_EPStartXfer+0xd1a>
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a28:	801a      	strh	r2, [r3, #0]
 8004a2a:	e058      	b.n	8004ade <USB_EPStartXfer+0xde8>
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <USB_EPStartXfer+0xd6e>
 8004a36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	e03c      	b.n	8004ade <USB_EPStartXfer+0xde8>
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d004      	beq.n	8004a88 <USB_EPStartXfer+0xd92>
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a82:	3301      	adds	r3, #1
 8004a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	e021      	b.n	8004ade <USB_EPStartXfer+0xde8>
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d11c      	bne.n	8004ade <USB_EPStartXfer+0xde8>
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004aba:	463b      	mov	r3, r7
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	00da      	lsls	r2, r3, #3
 8004ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004adc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ade:	463b      	mov	r3, r7
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 81a4 	beq.w	8004e32 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	463b      	mov	r3, r7
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004afe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <USB_EPStartXfer+0xe20>
 8004b0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10d      	bne.n	8004b32 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 8187 	bne.w	8004e32 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 8180 	bne.w	8004e32 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	463b      	mov	r3, r7
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	463b      	mov	r3, r7
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]
 8004b76:	e15c      	b.n	8004e32 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	78db      	ldrb	r3, [r3, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	f040 8155 	bne.w	8004e2e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004b84:	463b      	mov	r3, r7
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d90e      	bls.n	8004bb2 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8004b94:	463b      	mov	r3, r7
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	463b      	mov	r3, r7
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	619a      	str	r2, [r3, #24]
 8004bb0:	e008      	b.n	8004bc4 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d16f      	bne.n	8004cae <USB_EPStartXfer+0xfb8>
 8004bce:	1d3b      	adds	r3, r7, #4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004be6:	4413      	add	r3, r2
 8004be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bec:	463b      	mov	r3, r7
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	00da      	lsls	r2, r3, #3
 8004bf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c06:	2b3e      	cmp	r3, #62	; 0x3e
 8004c08:	d91d      	bls.n	8004c46 <USB_EPStartXfer+0xf50>
 8004c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <USB_EPStartXfer+0xf34>
 8004c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c24:	3b01      	subs	r3, #1
 8004c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	029b      	lsls	r3, r3, #10
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	e058      	b.n	8004cf8 <USB_EPStartXfer+0x1002>
 8004c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d116      	bne.n	8004c7c <USB_EPStartXfer+0xf86>
 8004c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	e03d      	b.n	8004cf8 <USB_EPStartXfer+0x1002>
 8004c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <USB_EPStartXfer+0xfa6>
 8004c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c96:	3301      	adds	r3, #1
 8004c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e024      	b.n	8004cf8 <USB_EPStartXfer+0x1002>
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d11f      	bne.n	8004cf8 <USB_EPStartXfer+0x1002>
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004cc0:	1d3b      	adds	r3, r7, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	00da      	lsls	r2, r3, #3
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	1d3b      	adds	r3, r7, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d00:	463b      	mov	r3, r7
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d16f      	bne.n	8004dea <USB_EPStartXfer+0x10f4>
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d12:	1d3b      	adds	r3, r7, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d22:	4413      	add	r3, r2
 8004d24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d28:	463b      	mov	r3, r7
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	00da      	lsls	r2, r3, #3
 8004d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d34:	4413      	add	r3, r2
 8004d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d42:	2b3e      	cmp	r3, #62	; 0x3e
 8004d44:	d91d      	bls.n	8004d82 <USB_EPStartXfer+0x108c>
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <USB_EPStartXfer+0x1070>
 8004d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d60:	3b01      	subs	r3, #1
 8004d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	029b      	lsls	r3, r3, #10
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	e057      	b.n	8004e32 <USB_EPStartXfer+0x113c>
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d116      	bne.n	8004db8 <USB_EPStartXfer+0x10c2>
 8004d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	e03c      	b.n	8004e32 <USB_EPStartXfer+0x113c>
 8004db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <USB_EPStartXfer+0x10e2>
 8004dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	029b      	lsls	r3, r3, #10
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	e023      	b.n	8004e32 <USB_EPStartXfer+0x113c>
 8004dea:	463b      	mov	r3, r7
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	785b      	ldrb	r3, [r3, #1]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d11e      	bne.n	8004e32 <USB_EPStartXfer+0x113c>
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e04:	4413      	add	r3, r2
 8004e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00da      	lsls	r2, r3, #3
 8004e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e16:	4413      	add	r3, r2
 8004e18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	e001      	b.n	8004e32 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e02e      	b.n	8004e90 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	463b      	mov	r3, r7
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004e50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004e5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e64:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004e68:	1d3b      	adds	r3, r7, #4
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec2:	81bb      	strh	r3, [r7, #12]
 8004ec4:	89bb      	ldrh	r3, [r7, #12]
 8004ec6:	f083 0310 	eor.w	r3, r3, #16
 8004eca:	81bb      	strh	r3, [r7, #12]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	441a      	add	r2, r3
 8004ed6:	89bb      	ldrh	r3, [r7, #12]
 8004ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	8013      	strh	r3, [r2, #0]
 8004eec:	e01f      	b.n	8004f2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	81fb      	strh	r3, [r7, #14]
 8004f06:	89fb      	ldrh	r3, [r7, #14]
 8004f08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f0c:	81fb      	strh	r3, [r7, #14]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	89fb      	ldrh	r3, [r7, #14]
 8004f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	7b1b      	ldrb	r3, [r3, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 809d 	bne.w	800508a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d04c      	beq.n	8004ff2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	823b      	strh	r3, [r7, #16]
 8004f66:	8a3b      	ldrh	r3, [r7, #16]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01b      	beq.n	8004fa8 <USB_EPClearStall+0x6c>
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	81fb      	strh	r3, [r7, #14]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	78db      	ldrb	r3, [r3, #3]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d06c      	beq.n	800508a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc6:	81bb      	strh	r3, [r7, #12]
 8004fc8:	89bb      	ldrh	r3, [r7, #12]
 8004fca:	f083 0320 	eor.w	r3, r3, #32
 8004fce:	81bb      	strh	r3, [r7, #12]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	89bb      	ldrh	r3, [r7, #12]
 8004fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	8013      	strh	r3, [r2, #0]
 8004ff0:	e04b      	b.n	800508a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	82fb      	strh	r3, [r7, #22]
 8005000:	8afb      	ldrh	r3, [r7, #22]
 8005002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01b      	beq.n	8005042 <USB_EPClearStall+0x106>
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	82bb      	strh	r3, [r7, #20]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	8abb      	ldrh	r3, [r7, #20]
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	827b      	strh	r3, [r7, #18]
 800505a:	8a7b      	ldrh	r3, [r7, #18]
 800505c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005060:	827b      	strh	r3, [r7, #18]
 8005062:	8a7b      	ldrh	r3, [r7, #18]
 8005064:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005068:	827b      	strh	r3, [r7, #18]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005086:	b29b      	uxth	r3, r3
 8005088:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005100:	68fb      	ldr	r3, [r7, #12]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800510e:	b480      	push	{r7}
 8005110:	b08d      	sub	sp, #52	; 0x34
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	4611      	mov	r1, r2
 800511a:	461a      	mov	r2, r3
 800511c:	460b      	mov	r3, r1
 800511e:	80fb      	strh	r3, [r7, #6]
 8005120:	4613      	mov	r3, r2
 8005122:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005124:	88bb      	ldrh	r3, [r7, #4]
 8005126:	3301      	adds	r3, #1
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005144:	e01b      	b.n	800517e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	3301      	adds	r3, #1
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	b29b      	uxth	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	b29a      	uxth	r2, r3
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	3302      	adds	r3, #2
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	3301      	adds	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	3b01      	subs	r3, #1
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e0      	bne.n	8005146 <USB_WritePMA+0x38>
  }
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3734      	adds	r7, #52	; 0x34
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005192:	b480      	push	{r7}
 8005194:	b08b      	sub	sp, #44	; 0x2c
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	4611      	mov	r1, r2
 800519e:	461a      	mov	r2, r3
 80051a0:	460b      	mov	r3, r1
 80051a2:	80fb      	strh	r3, [r7, #6]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80051a8:	88bb      	ldrh	r3, [r7, #4]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
 80051c8:	e018      	b.n	80051fc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	3302      	adds	r3, #2
 80051d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3301      	adds	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	3b01      	subs	r3, #1
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e3      	bne.n	80051ca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005202:	88bb      	ldrh	r3, [r7, #4]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	701a      	strb	r2, [r3, #0]
  }
}
 800521e:	bf00      	nop
 8005220:	372c      	adds	r7, #44	; 0x2c
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005236:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800523a:	f002 f901 	bl	8007440 <USBD_static_malloc>
 800523e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800524e:	2302      	movs	r3, #2
 8005250:	e066      	b.n	8005320 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7c1b      	ldrb	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d119      	bne.n	8005296 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005266:	2202      	movs	r2, #2
 8005268:	2181      	movs	r1, #129	; 0x81
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f001 ff8d 	bl	800718a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527a:	2202      	movs	r2, #2
 800527c:	2101      	movs	r1, #1
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 ff83 	bl	800718a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2210      	movs	r2, #16
 8005290:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005294:	e016      	b.n	80052c4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005296:	2340      	movs	r3, #64	; 0x40
 8005298:	2202      	movs	r2, #2
 800529a:	2181      	movs	r1, #129	; 0x81
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 ff74 	bl	800718a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	2202      	movs	r2, #2
 80052ac:	2101      	movs	r1, #1
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 ff6b 	bl	800718a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2210      	movs	r2, #16
 80052c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052c4:	2308      	movs	r3, #8
 80052c6:	2203      	movs	r2, #3
 80052c8:	2182      	movs	r1, #130	; 0x82
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 ff5d 	bl	800718a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	7c1b      	ldrb	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005304:	2101      	movs	r1, #1
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f002 f82f 	bl	800736a <USBD_LL_PrepareReceive>
 800530c:	e007      	b.n	800531e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	2101      	movs	r1, #1
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f002 f826 	bl	800736a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005334:	2181      	movs	r1, #129	; 0x81
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 ff4d 	bl	80071d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005342:	2101      	movs	r1, #1
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 ff46 	bl	80071d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005352:	2182      	movs	r1, #130	; 0x82
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 ff3e 	bl	80071d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005384:	4618      	mov	r0, r3
 8005386:	f002 f869 	bl	800745c <USBD_static_free>
    pdev->pClassData = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e0af      	b.n	8005524 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d03f      	beq.n	8005450 <USBD_CDC_Setup+0xb4>
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	f040 809f 	bne.w	8005514 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	88db      	ldrh	r3, [r3, #6]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d02e      	beq.n	800543c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da16      	bge.n	8005416 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80053f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	88d2      	ldrh	r2, [r2, #6]
 80053fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	88db      	ldrh	r3, [r3, #6]
 8005400:	2b07      	cmp	r3, #7
 8005402:	bf28      	it	cs
 8005404:	2307      	movcs	r3, #7
 8005406:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	89fa      	ldrh	r2, [r7, #14]
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 facf 	bl	80069b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005414:	e085      	b.n	8005522 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	785a      	ldrb	r2, [r3, #1]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	88db      	ldrh	r3, [r3, #6]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800542c:	6939      	ldr	r1, [r7, #16]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	88db      	ldrh	r3, [r3, #6]
 8005432:	461a      	mov	r2, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fae8 	bl	8006a0a <USBD_CtlPrepareRx>
      break;
 800543a:	e072      	b.n	8005522 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	7850      	ldrb	r0, [r2, #1]
 8005448:	2200      	movs	r2, #0
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	4798      	blx	r3
      break;
 800544e:	e068      	b.n	8005522 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b0b      	cmp	r3, #11
 8005456:	d852      	bhi.n	80054fe <USBD_CDC_Setup+0x162>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <USBD_CDC_Setup+0xc4>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005491 	.word	0x08005491
 8005464:	0800550d 	.word	0x0800550d
 8005468:	080054ff 	.word	0x080054ff
 800546c:	080054ff 	.word	0x080054ff
 8005470:	080054ff 	.word	0x080054ff
 8005474:	080054ff 	.word	0x080054ff
 8005478:	080054ff 	.word	0x080054ff
 800547c:	080054ff 	.word	0x080054ff
 8005480:	080054ff 	.word	0x080054ff
 8005484:	080054ff 	.word	0x080054ff
 8005488:	080054bb 	.word	0x080054bb
 800548c:	080054e5 	.word	0x080054e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b03      	cmp	r3, #3
 800549a:	d107      	bne.n	80054ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800549c:	f107 030a 	add.w	r3, r7, #10
 80054a0:	2202      	movs	r2, #2
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 fa84 	bl	80069b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054aa:	e032      	b.n	8005512 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 fa0e 	bl	80068d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80054b4:	2303      	movs	r3, #3
 80054b6:	75fb      	strb	r3, [r7, #23]
          break;
 80054b8:	e02b      	b.n	8005512 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d107      	bne.n	80054d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054c6:	f107 030d 	add.w	r3, r7, #13
 80054ca:	2201      	movs	r2, #1
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f001 fa6f 	bl	80069b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054d4:	e01d      	b.n	8005512 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 f9f9 	bl	80068d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80054de:	2303      	movs	r3, #3
 80054e0:	75fb      	strb	r3, [r7, #23]
          break;
 80054e2:	e016      	b.n	8005512 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d00f      	beq.n	8005510 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 f9ec 	bl	80068d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80054f8:	2303      	movs	r3, #3
 80054fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80054fc:	e008      	b.n	8005510 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 f9e5 	bl	80068d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005506:	2303      	movs	r3, #3
 8005508:	75fb      	strb	r3, [r7, #23]
          break;
 800550a:	e002      	b.n	8005512 <USBD_CDC_Setup+0x176>
          break;
 800550c:	bf00      	nop
 800550e:	e008      	b.n	8005522 <USBD_CDC_Setup+0x186>
          break;
 8005510:	bf00      	nop
      }
      break;
 8005512:	e006      	b.n	8005522 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 f9da 	bl	80068d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800551c:	2303      	movs	r3, #3
 800551e:	75fb      	strb	r3, [r7, #23]
      break;
 8005520:	bf00      	nop
  }

  return (uint8_t)ret;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800553e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800554a:	2303      	movs	r3, #3
 800554c:	e04f      	b.n	80055ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005554:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3318      	adds	r3, #24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d029      	beq.n	80055c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	3318      	adds	r3, #24
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	78f9      	ldrb	r1, [r7, #3]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	460b      	mov	r3, r1
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4403      	add	r3, r0
 800558c:	3338      	adds	r3, #56	; 0x38
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	fbb2 f1f3 	udiv	r1, r2, r3
 8005594:	fb03 f301 	mul.w	r3, r3, r1
 8005598:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800559a:	2b00      	cmp	r3, #0
 800559c:	d110      	bne.n	80055c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800559e:	78fa      	ldrb	r2, [r7, #3]
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	3318      	adds	r3, #24
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055b2:	78f9      	ldrb	r1, [r7, #3]
 80055b4:	2300      	movs	r3, #0
 80055b6:	2200      	movs	r2, #0
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f001 feb5 	bl	8007328 <USBD_LL_Transmit>
 80055be:	e015      	b.n	80055ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	460b      	mov	r3, r1
 8005600:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005608:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005614:	2303      	movs	r3, #3
 8005616:	e015      	b.n	8005644 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fec5 	bl	80073ac <USBD_LL_GetRxDataSize>
 8005622:	4602      	mov	r2, r0
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800563e:	4611      	mov	r1, r2
 8005640:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800565a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005662:	2303      	movs	r3, #3
 8005664:	e01b      	b.n	800569e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <USBD_CDC_EP0_RxReady+0x50>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005676:	2bff      	cmp	r3, #255	; 0xff
 8005678:	d010      	beq.n	800569c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005688:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005690:	b292      	uxth	r2, r2
 8005692:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	22ff      	movs	r2, #255	; 0xff
 8005698:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2243      	movs	r2, #67	; 0x43
 80056b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80056b6:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	20000094 	.word	0x20000094

080056c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2243      	movs	r2, #67	; 0x43
 80056d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80056d6:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	20000050 	.word	0x20000050

080056e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2243      	movs	r2, #67	; 0x43
 80056f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80056f6:	4b03      	ldr	r3, [pc, #12]	; (8005704 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	200000d8 	.word	0x200000d8

08005708 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	220a      	movs	r2, #10
 8005714:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005716:	4b03      	ldr	r3, [pc, #12]	; (8005724 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	2000000c 	.word	0x2000000c

08005728 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005738:	2303      	movs	r3, #3
 800573a:	e004      	b.n	8005746 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005752:	b480      	push	{r7}
 8005754:	b087      	sub	sp, #28
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005764:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800576c:	2303      	movs	r3, #3
 800576e:	e008      	b.n	8005782 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e004      	b.n	80057b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057de:	2303      	movs	r3, #3
 80057e0:	e01a      	b.n	8005818 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d114      	bne.n	8005816 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800580a:	2181      	movs	r1, #129	; 0x81
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fd8b 	bl	8007328 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800582e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800583a:	2303      	movs	r3, #3
 800583c:	e016      	b.n	800586c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	7c1b      	ldrb	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800584c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005850:	2101      	movs	r1, #1
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 fd89 	bl	800736a <USBD_LL_PrepareReceive>
 8005858:	e007      	b.n	800586a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	2101      	movs	r1, #1
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fd80 	bl	800736a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005888:	2303      	movs	r3, #3
 800588a:	e01f      	b.n	80058cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	79fa      	ldrb	r2, [r7, #7]
 80058be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f001 fbe7 	bl	8007094 <USBD_LL_Init>
 80058c6:	4603      	mov	r3, r0
 80058c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e016      	b.n	800591a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	f107 020e 	add.w	r2, r7, #14
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 fc12 	bl	8007154 <USBD_LL_Start>
 8005930:	4603      	mov	r3, r0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	4611      	mov	r1, r2
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	4611      	mov	r1, r2
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
  }

  return USBD_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 ff46 	bl	800685c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d01a      	beq.n	8005a2a <USBD_LL_SetupStage+0x72>
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d822      	bhi.n	8005a3e <USBD_LL_SetupStage+0x86>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <USBD_LL_SetupStage+0x4a>
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d00a      	beq.n	8005a16 <USBD_LL_SetupStage+0x5e>
 8005a00:	e01d      	b.n	8005a3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9ee 	bl	8005dec <USBD_StdDevReq>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	e020      	b.n	8005a58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa52 	bl	8005ec8 <USBD_StdItfReq>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e016      	b.n	8005a58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa91 	bl	8005f5a <USBD_StdEPReq>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3c:	e00c      	b.n	8005a58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 fbe1 	bl	8007214 <USBD_LL_StallEP>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73fb      	strb	r3, [r7, #15]
      break;
 8005a56:	bf00      	nop
  }

  return ret;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b086      	sub	sp, #24
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a70:	7afb      	ldrb	r3, [r7, #11]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d138      	bne.n	8005ae8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d14a      	bne.n	8005b1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d913      	bls.n	8005abc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	bf28      	it	cs
 8005aae:	4613      	movcs	r3, r2
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 ffc5 	bl	8006a44 <USBD_CtlContinueRx>
 8005aba:	e030      	b.n	8005b1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d10b      	bne.n	8005ae0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 ffc0 	bl	8006a66 <USBD_CtlSendStatus>
 8005ae6:	e01a      	b.n	8005b1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d114      	bne.n	8005b1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	7afa      	ldrb	r2, [r7, #11]
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	4798      	blx	r3
 8005b10:	4603      	mov	r3, r0
 8005b12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	e000      	b.n	8005b20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	460b      	mov	r3, r1
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b36:	7afb      	ldrb	r3, [r7, #11]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d16b      	bne.n	8005c14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3314      	adds	r3, #20
 8005b40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d156      	bne.n	8005bfa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d914      	bls.n	8005b82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 ff3a 	bl	80069e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b74:	2300      	movs	r3, #0
 8005b76:	2200      	movs	r2, #0
 8005b78:	2100      	movs	r1, #0
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f001 fbf5 	bl	800736a <USBD_LL_PrepareReceive>
 8005b80:	e03b      	b.n	8005bfa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d11c      	bne.n	8005bc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d316      	bcc.n	8005bc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d20f      	bcs.n	8005bc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2100      	movs	r1, #0
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 ff1b 	bl	80069e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f001 fbd2 	bl	800736a <USBD_LL_PrepareReceive>
 8005bc6:	e018      	b.n	8005bfa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d10b      	bne.n	8005bec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f001 fb10 	bl	8007214 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 ff49 	bl	8006a8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d122      	bne.n	8005c4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fe98 	bl	800593a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c12:	e01a      	b.n	8005c4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d114      	bne.n	8005c4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00e      	beq.n	8005c4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	7afa      	ldrb	r2, [r7, #11]
 8005c36:	4611      	mov	r1, r2
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	4798      	blx	r3
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	e000      	b.n	8005c4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e02f      	b.n	8005ce8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00f      	beq.n	8005cb2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6852      	ldr	r2, [r2, #4]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	4611      	mov	r1, r2
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cb2:	2340      	movs	r3, #64	; 0x40
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fa66 	bl	800718a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2240      	movs	r2, #64	; 0x40
 8005cca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 fa58 	bl	800718a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2240      	movs	r2, #64	; 0x40
 8005ce4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d106      	bne.n	8005d5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e012      	b.n	8005da8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d10b      	bne.n	8005da6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005dce:	8a3b      	ldrh	r3, [r7, #16]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	b21a      	sxth	r2, r3
 8005dd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	b21b      	sxth	r3, r3
 8005ddc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005dde:	89fb      	ldrh	r3, [r7, #14]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d005      	beq.n	8005e12 <USBD_StdDevReq+0x26>
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d853      	bhi.n	8005eb2 <USBD_StdDevReq+0xc6>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <USBD_StdDevReq+0x3a>
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d14f      	bne.n	8005eb2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]
      break;
 8005e24:	e04a      	b.n	8005ebc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	2b09      	cmp	r3, #9
 8005e2c:	d83b      	bhi.n	8005ea6 <USBD_StdDevReq+0xba>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <USBD_StdDevReq+0x48>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005e9d 	.word	0x08005e9d
 8005e3c:	08005ea7 	.word	0x08005ea7
 8005e40:	08005e93 	.word	0x08005e93
 8005e44:	08005ea7 	.word	0x08005ea7
 8005e48:	08005e67 	.word	0x08005e67
 8005e4c:	08005e5d 	.word	0x08005e5d
 8005e50:	08005ea7 	.word	0x08005ea7
 8005e54:	08005e7f 	.word	0x08005e7f
 8005e58:	08005e71 	.word	0x08005e71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f9de 	bl	8006220 <USBD_GetDescriptor>
          break;
 8005e64:	e024      	b.n	8005eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fb6d 	bl	8006548 <USBD_SetAddress>
          break;
 8005e6e:	e01f      	b.n	8005eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fbac 	bl	80065d0 <USBD_SetConfig>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	73fb      	strb	r3, [r7, #15]
          break;
 8005e7c:	e018      	b.n	8005eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fc4b 	bl	800671c <USBD_GetConfig>
          break;
 8005e86:	e013      	b.n	8005eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fc7c 	bl	8006788 <USBD_GetStatus>
          break;
 8005e90:	e00e      	b.n	8005eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fcab 	bl	80067f0 <USBD_SetFeature>
          break;
 8005e9a:	e009      	b.n	8005eb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fcba 	bl	8006818 <USBD_ClrFeature>
          break;
 8005ea4:	e004      	b.n	8005eb0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fd11 	bl	80068d0 <USBD_CtlError>
          break;
 8005eae:	bf00      	nop
      }
      break;
 8005eb0:	e004      	b.n	8005ebc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fd0b 	bl	80068d0 <USBD_CtlError>
      break;
 8005eba:	bf00      	nop
  }

  return ret;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop

08005ec8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d005      	beq.n	8005eee <USBD_StdItfReq+0x26>
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d82f      	bhi.n	8005f46 <USBD_StdItfReq+0x7e>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <USBD_StdItfReq+0x26>
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d12b      	bne.n	8005f46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d81d      	bhi.n	8005f38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	889b      	ldrh	r3, [r3, #4]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d813      	bhi.n	8005f2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
 8005f14:	4603      	mov	r3, r0
 8005f16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	88db      	ldrh	r3, [r3, #6]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <USBD_StdItfReq+0x7a>
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10d      	bne.n	8005f42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fd9d 	bl	8006a66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f2c:	e009      	b.n	8005f42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fccd 	bl	80068d0 <USBD_CtlError>
          break;
 8005f36:	e004      	b.n	8005f42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fcc8 	bl	80068d0 <USBD_CtlError>
          break;
 8005f40:	e000      	b.n	8005f44 <USBD_StdItfReq+0x7c>
          break;
 8005f42:	bf00      	nop
      }
      break;
 8005f44:	e004      	b.n	8005f50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fcc1 	bl	80068d0 <USBD_CtlError>
      break;
 8005f4e:	bf00      	nop
  }

  return ret;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	889b      	ldrh	r3, [r3, #4]
 8005f6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d007      	beq.n	8005f8a <USBD_StdEPReq+0x30>
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	f200 8145 	bhi.w	800620a <USBD_StdEPReq+0x2b0>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00c      	beq.n	8005f9e <USBD_StdEPReq+0x44>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	f040 8140 	bne.w	800620a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e13a      	b.n	8006214 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d007      	beq.n	8005fb6 <USBD_StdEPReq+0x5c>
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	f300 8129 	bgt.w	80061fe <USBD_StdEPReq+0x2a4>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d07f      	beq.n	80060b0 <USBD_StdEPReq+0x156>
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d03c      	beq.n	800602e <USBD_StdEPReq+0xd4>
 8005fb4:	e123      	b.n	80061fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USBD_StdEPReq+0x6e>
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d016      	beq.n	8005ff4 <USBD_StdEPReq+0x9a>
 8005fc6:	e02c      	b.n	8006022 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <USBD_StdEPReq+0x90>
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	2b80      	cmp	r3, #128	; 0x80
 8005fd2:	d00a      	beq.n	8005fea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 f91b 	bl	8007214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f917 	bl	8007214 <USBD_LL_StallEP>
 8005fe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fe8:	e020      	b.n	800602c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fc6f 	bl	80068d0 <USBD_CtlError>
              break;
 8005ff2:	e01b      	b.n	800602c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	885b      	ldrh	r3, [r3, #2]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10e      	bne.n	800601a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <USBD_StdEPReq+0xc0>
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	d008      	beq.n	800601a <USBD_StdEPReq+0xc0>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	88db      	ldrh	r3, [r3, #6]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 f8fd 	bl	8007214 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fd23 	bl	8006a66 <USBD_CtlSendStatus>

              break;
 8006020:	e004      	b.n	800602c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fc53 	bl	80068d0 <USBD_CtlError>
              break;
 800602a:	bf00      	nop
          }
          break;
 800602c:	e0ec      	b.n	8006208 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d002      	beq.n	8006040 <USBD_StdEPReq+0xe6>
 800603a:	2b03      	cmp	r3, #3
 800603c:	d016      	beq.n	800606c <USBD_StdEPReq+0x112>
 800603e:	e030      	b.n	80060a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <USBD_StdEPReq+0x108>
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d00a      	beq.n	8006062 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f8df 	bl	8007214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 f8db 	bl	8007214 <USBD_LL_StallEP>
 800605e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006060:	e025      	b.n	80060ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fc33 	bl	80068d0 <USBD_CtlError>
              break;
 800606a:	e020      	b.n	80060ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	885b      	ldrh	r3, [r3, #2]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11b      	bne.n	80060ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 f8e5 	bl	8007252 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fcec 	bl	8006a66 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80060a0:	e004      	b.n	80060ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fc13 	bl	80068d0 <USBD_CtlError>
              break;
 80060aa:	e000      	b.n	80060ae <USBD_StdEPReq+0x154>
              break;
 80060ac:	bf00      	nop
          }
          break;
 80060ae:	e0ab      	b.n	8006208 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d002      	beq.n	80060c2 <USBD_StdEPReq+0x168>
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d032      	beq.n	8006126 <USBD_StdEPReq+0x1cc>
 80060c0:	e097      	b.n	80061f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <USBD_StdEPReq+0x17e>
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d004      	beq.n	80060d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fbfd 	bl	80068d0 <USBD_CtlError>
                break;
 80060d6:	e091      	b.n	80061fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da0b      	bge.n	80060f8 <USBD_StdEPReq+0x19e>
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	3310      	adds	r3, #16
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4413      	add	r3, r2
 80060f4:	3304      	adds	r3, #4
 80060f6:	e00b      	b.n	8006110 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2202      	movs	r2, #2
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fc47 	bl	80069b2 <USBD_CtlSendData>
              break;
 8006124:	e06a      	b.n	80061fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800612a:	2b00      	cmp	r3, #0
 800612c:	da11      	bge.n	8006152 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	f003 020f 	and.w	r2, r3, #15
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	440b      	add	r3, r1
 8006140:	3324      	adds	r3, #36	; 0x24
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d117      	bne.n	8006178 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fbc0 	bl	80068d0 <USBD_CtlError>
                  break;
 8006150:	e054      	b.n	80061fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fbad 	bl	80068d0 <USBD_CtlError>
                  break;
 8006176:	e041      	b.n	80061fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800617c:	2b00      	cmp	r3, #0
 800617e:	da0b      	bge.n	8006198 <USBD_StdEPReq+0x23e>
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	3310      	adds	r3, #16
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	3304      	adds	r3, #4
 8006196:	e00b      	b.n	80061b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	3304      	adds	r3, #4
 80061b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <USBD_StdEPReq+0x264>
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b80      	cmp	r3, #128	; 0x80
 80061bc:	d103      	bne.n	80061c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e00e      	b.n	80061e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 f860 	bl	8007290 <USBD_LL_IsStallEP>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	e002      	b.n	80061e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2202      	movs	r2, #2
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fbe1 	bl	80069b2 <USBD_CtlSendData>
              break;
 80061f0:	e004      	b.n	80061fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fb6b 	bl	80068d0 <USBD_CtlError>
              break;
 80061fa:	bf00      	nop
          }
          break;
 80061fc:	e004      	b.n	8006208 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fb65 	bl	80068d0 <USBD_CtlError>
          break;
 8006206:	bf00      	nop
      }
      break;
 8006208:	e004      	b.n	8006214 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fb5f 	bl	80068d0 <USBD_CtlError>
      break;
 8006212:	bf00      	nop
  }

  return ret;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	885b      	ldrh	r3, [r3, #2]
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	2b0e      	cmp	r3, #14
 8006242:	f200 8152 	bhi.w	80064ea <USBD_GetDescriptor+0x2ca>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <USBD_GetDescriptor+0x2c>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	080062bd 	.word	0x080062bd
 8006250:	080062d5 	.word	0x080062d5
 8006254:	08006315 	.word	0x08006315
 8006258:	080064eb 	.word	0x080064eb
 800625c:	080064eb 	.word	0x080064eb
 8006260:	0800648b 	.word	0x0800648b
 8006264:	080064b7 	.word	0x080064b7
 8006268:	080064eb 	.word	0x080064eb
 800626c:	080064eb 	.word	0x080064eb
 8006270:	080064eb 	.word	0x080064eb
 8006274:	080064eb 	.word	0x080064eb
 8006278:	080064eb 	.word	0x080064eb
 800627c:	080064eb 	.word	0x080064eb
 8006280:	080064eb 	.word	0x080064eb
 8006284:	08006289 	.word	0x08006289
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062aa:	e126      	b.n	80064fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb0e 	bl	80068d0 <USBD_CtlError>
        err++;
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	3301      	adds	r3, #1
 80062b8:	72fb      	strb	r3, [r7, #11]
      break;
 80062ba:	e11e      	b.n	80064fa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	7c12      	ldrb	r2, [r2, #16]
 80062c8:	f107 0108 	add.w	r1, r7, #8
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	60f8      	str	r0, [r7, #12]
      break;
 80062d2:	e112      	b.n	80064fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	7c1b      	ldrb	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10d      	bne.n	80062f8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	f107 0208 	add.w	r2, r7, #8
 80062e8:	4610      	mov	r0, r2
 80062ea:	4798      	blx	r3
 80062ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	2202      	movs	r2, #2
 80062f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062f6:	e100      	b.n	80064fa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	f107 0208 	add.w	r2, r7, #8
 8006304:	4610      	mov	r0, r2
 8006306:	4798      	blx	r3
 8006308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	2202      	movs	r2, #2
 8006310:	701a      	strb	r2, [r3, #0]
      break;
 8006312:	e0f2      	b.n	80064fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b05      	cmp	r3, #5
 800631c:	f200 80ac 	bhi.w	8006478 <USBD_GetDescriptor+0x258>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <USBD_GetDescriptor+0x108>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006341 	.word	0x08006341
 800632c:	08006375 	.word	0x08006375
 8006330:	080063a9 	.word	0x080063a9
 8006334:	080063dd 	.word	0x080063dd
 8006338:	08006411 	.word	0x08006411
 800633c:	08006445 	.word	0x08006445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	7c12      	ldrb	r2, [r2, #16]
 8006358:	f107 0108 	add.w	r1, r7, #8
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
 8006360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006362:	e091      	b.n	8006488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fab2 	bl	80068d0 <USBD_CtlError>
            err++;
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	3301      	adds	r3, #1
 8006370:	72fb      	strb	r3, [r7, #11]
          break;
 8006372:	e089      	b.n	8006488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	7c12      	ldrb	r2, [r2, #16]
 800638c:	f107 0108 	add.w	r1, r7, #8
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006396:	e077      	b.n	8006488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa98 	bl	80068d0 <USBD_CtlError>
            err++;
 80063a0:	7afb      	ldrb	r3, [r7, #11]
 80063a2:	3301      	adds	r3, #1
 80063a4:	72fb      	strb	r3, [r7, #11]
          break;
 80063a6:	e06f      	b.n	8006488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	7c12      	ldrb	r2, [r2, #16]
 80063c0:	f107 0108 	add.w	r1, r7, #8
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
 80063c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ca:	e05d      	b.n	8006488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa7e 	bl	80068d0 <USBD_CtlError>
            err++;
 80063d4:	7afb      	ldrb	r3, [r7, #11]
 80063d6:	3301      	adds	r3, #1
 80063d8:	72fb      	strb	r3, [r7, #11]
          break;
 80063da:	e055      	b.n	8006488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	7c12      	ldrb	r2, [r2, #16]
 80063f4:	f107 0108 	add.w	r1, r7, #8
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
 80063fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fe:	e043      	b.n	8006488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa64 	bl	80068d0 <USBD_CtlError>
            err++;
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	3301      	adds	r3, #1
 800640c:	72fb      	strb	r3, [r7, #11]
          break;
 800640e:	e03b      	b.n	8006488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	7c12      	ldrb	r2, [r2, #16]
 8006428:	f107 0108 	add.w	r1, r7, #8
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
 8006430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006432:	e029      	b.n	8006488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa4a 	bl	80068d0 <USBD_CtlError>
            err++;
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	3301      	adds	r3, #1
 8006440:	72fb      	strb	r3, [r7, #11]
          break;
 8006442:	e021      	b.n	8006488 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	7c12      	ldrb	r2, [r2, #16]
 800645c:	f107 0108 	add.w	r1, r7, #8
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
 8006464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006466:	e00f      	b.n	8006488 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa30 	bl	80068d0 <USBD_CtlError>
            err++;
 8006470:	7afb      	ldrb	r3, [r7, #11]
 8006472:	3301      	adds	r3, #1
 8006474:	72fb      	strb	r3, [r7, #11]
          break;
 8006476:	e007      	b.n	8006488 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa28 	bl	80068d0 <USBD_CtlError>
          err++;
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	3301      	adds	r3, #1
 8006484:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006486:	bf00      	nop
      }
      break;
 8006488:	e037      	b.n	80064fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7c1b      	ldrb	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	f107 0208 	add.w	r2, r7, #8
 800649e:	4610      	mov	r0, r2
 80064a0:	4798      	blx	r3
 80064a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064a4:	e029      	b.n	80064fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa11 	bl	80068d0 <USBD_CtlError>
        err++;
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	3301      	adds	r3, #1
 80064b2:	72fb      	strb	r3, [r7, #11]
      break;
 80064b4:	e021      	b.n	80064fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7c1b      	ldrb	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10d      	bne.n	80064da <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	f107 0208 	add.w	r2, r7, #8
 80064ca:	4610      	mov	r0, r2
 80064cc:	4798      	blx	r3
 80064ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	2207      	movs	r2, #7
 80064d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064d8:	e00f      	b.n	80064fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9f7 	bl	80068d0 <USBD_CtlError>
        err++;
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	3301      	adds	r3, #1
 80064e6:	72fb      	strb	r3, [r7, #11]
      break;
 80064e8:	e007      	b.n	80064fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9ef 	bl	80068d0 <USBD_CtlError>
      err++;
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	3301      	adds	r3, #1
 80064f6:	72fb      	strb	r3, [r7, #11]
      break;
 80064f8:	bf00      	nop
  }

  if (err != 0U)
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11e      	bne.n	800653e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	88db      	ldrh	r3, [r3, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d016      	beq.n	8006536 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006508:	893b      	ldrh	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	88da      	ldrh	r2, [r3, #6]
 8006512:	893b      	ldrh	r3, [r7, #8]
 8006514:	4293      	cmp	r3, r2
 8006516:	bf28      	it	cs
 8006518:	4613      	movcs	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800651e:	893b      	ldrh	r3, [r7, #8]
 8006520:	461a      	mov	r2, r3
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fa44 	bl	80069b2 <USBD_CtlSendData>
 800652a:	e009      	b.n	8006540 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f9ce 	bl	80068d0 <USBD_CtlError>
 8006534:	e004      	b.n	8006540 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa95 	bl	8006a66 <USBD_CtlSendStatus>
 800653c:	e000      	b.n	8006540 <USBD_GetDescriptor+0x320>
    return;
 800653e:	bf00      	nop
  }
}
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	889b      	ldrh	r3, [r3, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d131      	bne.n	80065be <USBD_SetAddress+0x76>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	88db      	ldrh	r3, [r3, #6]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d12d      	bne.n	80065be <USBD_SetAddress+0x76>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	885b      	ldrh	r3, [r3, #2]
 8006566:	2b7f      	cmp	r3, #127	; 0x7f
 8006568:	d829      	bhi.n	80065be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b03      	cmp	r3, #3
 8006580:	d104      	bne.n	800658c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f9a3 	bl	80068d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	e01d      	b.n	80065c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fea6 	bl	80072ea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa61 	bl	8006a66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b2:	e009      	b.n	80065c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065bc:	e004      	b.n	80065c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f985 	bl	80068d0 <USBD_CtlError>
  }
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b4c      	ldr	r3, [pc, #304]	; (8006718 <USBD_SetConfig+0x148>)
 80065e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065e8:	4b4b      	ldr	r3, [pc, #300]	; (8006718 <USBD_SetConfig+0x148>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d905      	bls.n	80065fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f96c 	bl	80068d0 <USBD_CtlError>
    return USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e088      	b.n	800670e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d002      	beq.n	800660e <USBD_SetConfig+0x3e>
 8006608:	2b03      	cmp	r3, #3
 800660a:	d025      	beq.n	8006658 <USBD_SetConfig+0x88>
 800660c:	e071      	b.n	80066f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800660e:	4b42      	ldr	r3, [pc, #264]	; (8006718 <USBD_SetConfig+0x148>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01c      	beq.n	8006650 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006616:	4b40      	ldr	r3, [pc, #256]	; (8006718 <USBD_SetConfig+0x148>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006620:	4b3d      	ldr	r3, [pc, #244]	; (8006718 <USBD_SetConfig+0x148>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff f992 	bl	8005950 <USBD_SetClassConfig>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f949 	bl	80068d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800663e:	e065      	b.n	800670c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fa10 	bl	8006a66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800664e:	e05d      	b.n	800670c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fa08 	bl	8006a66 <USBD_CtlSendStatus>
      break;
 8006656:	e059      	b.n	800670c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006658:	4b2f      	ldr	r3, [pc, #188]	; (8006718 <USBD_SetConfig+0x148>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d112      	bne.n	8006686 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <USBD_SetConfig+0x148>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006672:	4b29      	ldr	r3, [pc, #164]	; (8006718 <USBD_SetConfig+0x148>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff f985 	bl	8005988 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9f1 	bl	8006a66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006684:	e042      	b.n	800670c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <USBD_SetConfig+0x148>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d02a      	beq.n	80066ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff f973 	bl	8005988 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <USBD_SetConfig+0x148>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <USBD_SetConfig+0x148>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff f94c 	bl	8005950 <USBD_SetClassConfig>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00f      	beq.n	80066e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f903 	bl	80068d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff f958 	bl	8005988 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066e0:	e014      	b.n	800670c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9bf 	bl	8006a66 <USBD_CtlSendStatus>
      break;
 80066e8:	e010      	b.n	800670c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9bb 	bl	8006a66 <USBD_CtlSendStatus>
      break;
 80066f0:	e00c      	b.n	800670c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f8eb 	bl	80068d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <USBD_SetConfig+0x148>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff f941 	bl	8005988 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006706:	2303      	movs	r3, #3
 8006708:	73fb      	strb	r3, [r7, #15]
      break;
 800670a:	bf00      	nop
  }

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200001ab 	.word	0x200001ab

0800671c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	88db      	ldrh	r3, [r3, #6]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d004      	beq.n	8006738 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f8cd 	bl	80068d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006736:	e023      	b.n	8006780 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	dc02      	bgt.n	800674a <USBD_GetConfig+0x2e>
 8006744:	2b00      	cmp	r3, #0
 8006746:	dc03      	bgt.n	8006750 <USBD_GetConfig+0x34>
 8006748:	e015      	b.n	8006776 <USBD_GetConfig+0x5a>
 800674a:	2b03      	cmp	r3, #3
 800674c:	d00b      	beq.n	8006766 <USBD_GetConfig+0x4a>
 800674e:	e012      	b.n	8006776 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3308      	adds	r3, #8
 800675a:	2201      	movs	r2, #1
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f927 	bl	80069b2 <USBD_CtlSendData>
        break;
 8006764:	e00c      	b.n	8006780 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2201      	movs	r2, #1
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f91f 	bl	80069b2 <USBD_CtlSendData>
        break;
 8006774:	e004      	b.n	8006780 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f8a9 	bl	80068d0 <USBD_CtlError>
        break;
 800677e:	bf00      	nop
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006798:	b2db      	uxtb	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	2b02      	cmp	r3, #2
 800679e:	d81e      	bhi.n	80067de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	88db      	ldrh	r3, [r3, #6]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d004      	beq.n	80067b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f890 	bl	80068d0 <USBD_CtlError>
        break;
 80067b0:	e01a      	b.n	80067e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f043 0202 	orr.w	r2, r3, #2
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	330c      	adds	r3, #12
 80067d2:	2202      	movs	r2, #2
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8eb 	bl	80069b2 <USBD_CtlSendData>
      break;
 80067dc:	e004      	b.n	80067e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f875 	bl	80068d0 <USBD_CtlError>
      break;
 80067e6:	bf00      	nop
  }
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	885b      	ldrh	r3, [r3, #2]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d106      	bne.n	8006810 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f92b 	bl	8006a66 <USBD_CtlSendStatus>
  }
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006828:	b2db      	uxtb	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	2b02      	cmp	r3, #2
 800682e:	d80b      	bhi.n	8006848 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	885b      	ldrh	r3, [r3, #2]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10c      	bne.n	8006852 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f910 	bl	8006a66 <USBD_CtlSendStatus>
      }
      break;
 8006846:	e004      	b.n	8006852 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f840 	bl	80068d0 <USBD_CtlError>
      break;
 8006850:	e000      	b.n	8006854 <USBD_ClrFeature+0x3c>
      break;
 8006852:	bf00      	nop
  }
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	781a      	ldrb	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7ff fa92 	bl	8005db0 <SWAPBYTE>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fa85 	bl	8005db0 <SWAPBYTE>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461a      	mov	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff fa78 	bl	8005db0 <SWAPBYTE>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	80da      	strh	r2, [r3, #6]
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068da:	2180      	movs	r1, #128	; 0x80
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc99 	bl	8007214 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068e2:	2100      	movs	r1, #0
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fc95 	bl	8007214 <USBD_LL_StallEP>
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d036      	beq.n	8006976 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800690c:	6938      	ldr	r0, [r7, #16]
 800690e:	f000 f836 	bl	800697e <USBD_GetLen>
 8006912:	4603      	mov	r3, r0
 8006914:	3301      	adds	r3, #1
 8006916:	b29b      	uxth	r3, r3
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006920:	7dfb      	ldrb	r3, [r7, #23]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	4413      	add	r3, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	701a      	strb	r2, [r3, #0]
  idx++;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	3301      	adds	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	4413      	add	r3, r2
 8006938:	2203      	movs	r2, #3
 800693a:	701a      	strb	r2, [r3, #0]
  idx++;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	3301      	adds	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006942:	e013      	b.n	800696c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	4413      	add	r3, r2
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	7812      	ldrb	r2, [r2, #0]
 800694e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	3301      	adds	r3, #1
 8006954:	613b      	str	r3, [r7, #16]
    idx++;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	3301      	adds	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4413      	add	r3, r2
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
    idx++;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	3301      	adds	r3, #1
 800696a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e7      	bne.n	8006944 <USBD_GetString+0x52>
 8006974:	e000      	b.n	8006978 <USBD_GetString+0x86>
    return;
 8006976:	bf00      	nop
  }
}
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800698e:	e005      	b.n	800699c <USBD_GetLen+0x1e>
  {
    len++;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	3301      	adds	r3, #1
 8006994:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	3301      	adds	r3, #1
 800699a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f5      	bne.n	8006990 <USBD_GetLen+0x12>
  }

  return len;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	2100      	movs	r1, #0
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fca5 	bl	8007328 <USBD_LL_Transmit>

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	2100      	movs	r1, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fc94 	bl	8007328 <USBD_LL_Transmit>

  return USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	2100      	movs	r1, #0
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fc98 	bl	800736a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fc87 	bl	800736a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fc53 	bl	8007328 <USBD_LL_Transmit>

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2205      	movs	r2, #5
 8006a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fc61 	bl	800736a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4912      	ldr	r1, [pc, #72]	; (8006b04 <MX_USB_Device_Init+0x50>)
 8006abc:	4812      	ldr	r0, [pc, #72]	; (8006b08 <MX_USB_Device_Init+0x54>)
 8006abe:	f7fe fed9 	bl	8005874 <USBD_Init>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <MX_USB_Device_Init+0x18>
    Error_Handler();
 8006ac8:	f7f9 fc54 	bl	8000374 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8006acc:	490f      	ldr	r1, [pc, #60]	; (8006b0c <MX_USB_Device_Init+0x58>)
 8006ace:	480e      	ldr	r0, [pc, #56]	; (8006b08 <MX_USB_Device_Init+0x54>)
 8006ad0:	f7fe ff00 	bl	80058d4 <USBD_RegisterClass>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8006ada:	f7f9 fc4b 	bl	8000374 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8006ade:	490c      	ldr	r1, [pc, #48]	; (8006b10 <MX_USB_Device_Init+0x5c>)
 8006ae0:	4809      	ldr	r0, [pc, #36]	; (8006b08 <MX_USB_Device_Init+0x54>)
 8006ae2:	f7fe fe21 	bl	8005728 <USBD_CDC_RegisterInterface>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8006aec:	f7f9 fc42 	bl	8000374 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8006af0:	4805      	ldr	r0, [pc, #20]	; (8006b08 <MX_USB_Device_Init+0x54>)
 8006af2:	f7fe ff16 	bl	8005922 <USBD_Start>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8006afc:	f7f9 fc3a 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8006b00:	bf00      	nop
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000130 	.word	0x20000130
 8006b08:	200003d0 	.word	0x200003d0
 8006b0c:	20000018 	.word	0x20000018
 8006b10:	2000011c 	.word	0x2000011c

08006b14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4905      	ldr	r1, [pc, #20]	; (8006b30 <CDC_Init_FS+0x1c>)
 8006b1c:	4805      	ldr	r0, [pc, #20]	; (8006b34 <CDC_Init_FS+0x20>)
 8006b1e:	f7fe fe18 	bl	8005752 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b22:	4905      	ldr	r1, [pc, #20]	; (8006b38 <CDC_Init_FS+0x24>)
 8006b24:	4803      	ldr	r0, [pc, #12]	; (8006b34 <CDC_Init_FS+0x20>)
 8006b26:	f7fe fe32 	bl	800578e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000a88 	.word	0x20000a88
 8006b34:	200003d0 	.word	0x200003d0
 8006b38:	200006a0 	.word	0x200006a0

08006b3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	2b23      	cmp	r3, #35	; 0x23
 8006b60:	d84a      	bhi.n	8006bf8 <CDC_Control_FS+0xac>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <CDC_Control_FS+0x1c>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006bf9 	.word	0x08006bf9
 8006b6c:	08006bf9 	.word	0x08006bf9
 8006b70:	08006bf9 	.word	0x08006bf9
 8006b74:	08006bf9 	.word	0x08006bf9
 8006b78:	08006bf9 	.word	0x08006bf9
 8006b7c:	08006bf9 	.word	0x08006bf9
 8006b80:	08006bf9 	.word	0x08006bf9
 8006b84:	08006bf9 	.word	0x08006bf9
 8006b88:	08006bf9 	.word	0x08006bf9
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006bf9 	.word	0x08006bf9
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006bf9 	.word	0x08006bf9
 8006b9c:	08006bf9 	.word	0x08006bf9
 8006ba0:	08006bf9 	.word	0x08006bf9
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006bf9 	.word	0x08006bf9
 8006bac:	08006bf9 	.word	0x08006bf9
 8006bb0:	08006bf9 	.word	0x08006bf9
 8006bb4:	08006bf9 	.word	0x08006bf9
 8006bb8:	08006bf9 	.word	0x08006bf9
 8006bbc:	08006bf9 	.word	0x08006bf9
 8006bc0:	08006bf9 	.word	0x08006bf9
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006bf9 	.word	0x08006bf9
 8006bcc:	08006bf9 	.word	0x08006bf9
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006bf9 	.word	0x08006bf9
 8006bd8:	08006bf9 	.word	0x08006bf9
 8006bdc:	08006bf9 	.word	0x08006bf9
 8006be0:	08006bf9 	.word	0x08006bf9
 8006be4:	08006bf9 	.word	0x08006bf9
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006bf9 	.word	0x08006bf9
 8006bf0:	08006bf9 	.word	0x08006bf9
 8006bf4:	08006bf9 	.word	0x08006bf9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006bf8:	bf00      	nop
  }

  return (USBD_OK);
 8006bfa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7f9 faff 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4805      	ldr	r0, [pc, #20]	; (8006c34 <CDC_Receive_FS+0x2c>)
 8006c1e:	f7fe fdb6 	bl	800578e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c22:	4804      	ldr	r0, [pc, #16]	; (8006c34 <CDC_Receive_FS+0x2c>)
 8006c24:	f7fe fdfc 	bl	8005820 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200003d0 	.word	0x200003d0

08006c38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <CDC_Transmit_FS+0x48>)
 8006c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e00b      	b.n	8006c76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c5e:	887b      	ldrh	r3, [r7, #2]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4806      	ldr	r0, [pc, #24]	; (8006c80 <CDC_Transmit_FS+0x48>)
 8006c66:	f7fe fd74 	bl	8005752 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c6a:	4805      	ldr	r0, [pc, #20]	; (8006c80 <CDC_Transmit_FS+0x48>)
 8006c6c:	f7fe fda8 	bl	80057c0 <USBD_CDC_TransmitPacket>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	200003d0 	.word	0x200003d0

08006c84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	6039      	str	r1, [r7, #0]
 8006cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2212      	movs	r2, #18
 8006cb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8006cba:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000150 	.word	0x20000150

08006ccc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cde:	4b03      	ldr	r3, [pc, #12]	; (8006cec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20000164 	.word	0x20000164

08006cf0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	6039      	str	r1, [r7, #0]
 8006cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4907      	ldr	r1, [pc, #28]	; (8006d24 <USBD_CDC_ProductStrDescriptor+0x34>)
 8006d06:	4808      	ldr	r0, [pc, #32]	; (8006d28 <USBD_CDC_ProductStrDescriptor+0x38>)
 8006d08:	f7ff fdf3 	bl	80068f2 <USBD_GetString>
 8006d0c:	e004      	b.n	8006d18 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	4904      	ldr	r1, [pc, #16]	; (8006d24 <USBD_CDC_ProductStrDescriptor+0x34>)
 8006d12:	4805      	ldr	r0, [pc, #20]	; (8006d28 <USBD_CDC_ProductStrDescriptor+0x38>)
 8006d14:	f7ff fded 	bl	80068f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d18:	4b02      	ldr	r3, [pc, #8]	; (8006d24 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000e70 	.word	0x20000e70
 8006d28:	08007560 	.word	0x08007560

08006d2c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	6039      	str	r1, [r7, #0]
 8006d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	4904      	ldr	r1, [pc, #16]	; (8006d4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8006d3c:	4804      	ldr	r0, [pc, #16]	; (8006d50 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8006d3e:	f7ff fdd8 	bl	80068f2 <USBD_GetString>
  return USBD_StrDesc;
 8006d42:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20000e70 	.word	0x20000e70
 8006d50:	08007578 	.word	0x08007578

08006d54 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	221a      	movs	r2, #26
 8006d64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d66:	f000 f843 	bl	8006df0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8006d6a:	4b02      	ldr	r3, [pc, #8]	; (8006d74 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000168 	.word	0x20000168

08006d78 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	6039      	str	r1, [r7, #0]
 8006d82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	4907      	ldr	r1, [pc, #28]	; (8006dac <USBD_CDC_ConfigStrDescriptor+0x34>)
 8006d8e:	4808      	ldr	r0, [pc, #32]	; (8006db0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8006d90:	f7ff fdaf 	bl	80068f2 <USBD_GetString>
 8006d94:	e004      	b.n	8006da0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4904      	ldr	r1, [pc, #16]	; (8006dac <USBD_CDC_ConfigStrDescriptor+0x34>)
 8006d9a:	4805      	ldr	r0, [pc, #20]	; (8006db0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8006d9c:	f7ff fda9 	bl	80068f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006da0:	4b02      	ldr	r3, [pc, #8]	; (8006dac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000e70 	.word	0x20000e70
 8006db0:	0800758c 	.word	0x0800758c

08006db4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	6039      	str	r1, [r7, #0]
 8006dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d105      	bne.n	8006dd2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	4907      	ldr	r1, [pc, #28]	; (8006de8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8006dca:	4808      	ldr	r0, [pc, #32]	; (8006dec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8006dcc:	f7ff fd91 	bl	80068f2 <USBD_GetString>
 8006dd0:	e004      	b.n	8006ddc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	4904      	ldr	r1, [pc, #16]	; (8006de8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8006dd6:	4805      	ldr	r0, [pc, #20]	; (8006dec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8006dd8:	f7ff fd8b 	bl	80068f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000e70 	.word	0x20000e70
 8006dec:	08007598 	.word	0x08007598

08006df0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006df6:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <Get_SerialNum+0x44>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006dfc:	4b0e      	ldr	r3, [pc, #56]	; (8006e38 <Get_SerialNum+0x48>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <Get_SerialNum+0x4c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e16:	2208      	movs	r2, #8
 8006e18:	4909      	ldr	r1, [pc, #36]	; (8006e40 <Get_SerialNum+0x50>)
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f814 	bl	8006e48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e20:	2204      	movs	r2, #4
 8006e22:	4908      	ldr	r1, [pc, #32]	; (8006e44 <Get_SerialNum+0x54>)
 8006e24:	68b8      	ldr	r0, [r7, #8]
 8006e26:	f000 f80f 	bl	8006e48 <IntToUnicode>
  }
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	1fff7590 	.word	0x1fff7590
 8006e38:	1fff7594 	.word	0x1fff7594
 8006e3c:	1fff7598 	.word	0x1fff7598
 8006e40:	2000016a 	.word	0x2000016a
 8006e44:	2000017a 	.word	0x2000017a

08006e48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75fb      	strb	r3, [r7, #23]
 8006e5e:	e027      	b.n	8006eb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	0f1b      	lsrs	r3, r3, #28
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d80b      	bhi.n	8006e80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	0f1b      	lsrs	r3, r3, #28
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	4619      	mov	r1, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	440b      	add	r3, r1
 8006e78:	3230      	adds	r2, #48	; 0x30
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	e00a      	b.n	8006e96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	0f1b      	lsrs	r3, r3, #28
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	440b      	add	r3, r1
 8006e90:	3237      	adds	r2, #55	; 0x37
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	3301      	adds	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
 8006eb0:	7dfa      	ldrb	r2, [r7, #23]
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d3d3      	bcc.n	8006e60 <IntToUnicode+0x18>
  }
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b094      	sub	sp, #80	; 0x50
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ed0:	f107 030c 	add.w	r3, r7, #12
 8006ed4:	2244      	movs	r2, #68	; 0x44
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fb2d 	bl	8007538 <memset>
  if(pcdHandle->Instance==USB)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <HAL_PCD_MspInit+0x70>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d123      	bne.n	8006f30 <HAL_PCD_MspInit+0x68>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006eec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8006eee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ef2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fb ff37 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8006f04:	f7f9 fa36 	bl	8000374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <HAL_PCD_MspInit+0x74>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	4a0b      	ldr	r2, [pc, #44]	; (8006f3c <HAL_PCD_MspInit+0x74>)
 8006f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f12:	6593      	str	r3, [r2, #88]	; 0x58
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_PCD_MspInit+0x74>)
 8006f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8006f20:	2200      	movs	r2, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	2014      	movs	r0, #20
 8006f26:	f7f9 fc0a 	bl	800073e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8006f2a:	2014      	movs	r0, #20
 8006f2c:	f7f9 fc21 	bl	8000772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f30:	bf00      	nop
 8006f32:	3750      	adds	r7, #80	; 0x50
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40005c00 	.word	0x40005c00
 8006f3c:	40021000 	.word	0x40021000

08006f40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe fd2e 	bl	80059b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8006f76:	78fa      	ldrb	r2, [r7, #3]
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	440b      	add	r3, r1
 8006f84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f7fe fd68 	bl	8005a62 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8006fac:	78fa      	ldrb	r2, [r7, #3]
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	440b      	add	r3, r1
 8006fba:	333c      	adds	r3, #60	; 0x3c
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f7fe fdb1 	bl	8005b28 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe fec5 	bl	8005d6c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d001      	beq.n	8007002 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ffe:	f7f9 f9b9 	bl	8000374 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007008:	7bfa      	ldrb	r2, [r7, #15]
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe fe6f 	bl	8005cf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fe1b 	bl	8005c54 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fe6a 	bl	8005d10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <HAL_PCD_SuspendCallback+0x30>)
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	4a03      	ldr	r2, [pc, #12]	; (8007058 <HAL_PCD_SuspendCallback+0x30>)
 800704a:	f043 0306 	orr.w	r3, r3, #6
 800704e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	e000ed00 	.word	0xe000ed00

0800705c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800706c:	4b08      	ldr	r3, [pc, #32]	; (8007090 <HAL_PCD_ResumeCallback+0x34>)
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	4a07      	ldr	r2, [pc, #28]	; (8007090 <HAL_PCD_ResumeCallback+0x34>)
 8007072:	f023 0306 	bic.w	r3, r3, #6
 8007076:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007078:	f000 f9fa 	bl	8007470 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fe5a 	bl	8005d3c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	e000ed00 	.word	0xe000ed00

08007094 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <USBD_LL_Init+0xb8>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a29      	ldr	r2, [pc, #164]	; (800714c <USBD_LL_Init+0xb8>)
 80070a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80070ac:	4b27      	ldr	r3, [pc, #156]	; (800714c <USBD_LL_Init+0xb8>)
 80070ae:	4a28      	ldr	r2, [pc, #160]	; (8007150 <USBD_LL_Init+0xbc>)
 80070b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <USBD_LL_Init+0xb8>)
 80070b4:	2208      	movs	r2, #8
 80070b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80070b8:	4b24      	ldr	r3, [pc, #144]	; (800714c <USBD_LL_Init+0xb8>)
 80070ba:	2202      	movs	r2, #2
 80070bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80070be:	4b23      	ldr	r3, [pc, #140]	; (800714c <USBD_LL_Init+0xb8>)
 80070c0:	2202      	movs	r2, #2
 80070c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80070c4:	4b21      	ldr	r3, [pc, #132]	; (800714c <USBD_LL_Init+0xb8>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80070ca:	4b20      	ldr	r3, [pc, #128]	; (800714c <USBD_LL_Init+0xb8>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <USBD_LL_Init+0xb8>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80070d6:	4b1d      	ldr	r3, [pc, #116]	; (800714c <USBD_LL_Init+0xb8>)
 80070d8:	2200      	movs	r2, #0
 80070da:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80070dc:	481b      	ldr	r0, [pc, #108]	; (800714c <USBD_LL_Init+0xb8>)
 80070de:	f7f9 fb62 	bl	80007a6 <HAL_PCD_Init>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80070e8:	f7f9 f944 	bl	8000374 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070f2:	2318      	movs	r3, #24
 80070f4:	2200      	movs	r2, #0
 80070f6:	2100      	movs	r1, #0
 80070f8:	f7fb f81b 	bl	8002132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007102:	2358      	movs	r3, #88	; 0x58
 8007104:	2200      	movs	r2, #0
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	f7fb f813 	bl	8002132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007112:	23c0      	movs	r3, #192	; 0xc0
 8007114:	2200      	movs	r2, #0
 8007116:	2181      	movs	r1, #129	; 0x81
 8007118:	f7fb f80b 	bl	8002132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007122:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007126:	2200      	movs	r2, #0
 8007128:	2101      	movs	r1, #1
 800712a:	f7fb f802 	bl	8002132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007138:	2200      	movs	r2, #0
 800713a:	2182      	movs	r1, #130	; 0x82
 800713c:	f7fa fff9 	bl	8002132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20001070 	.word	0x20001070
 8007150:	40005c00 	.word	0x40005c00

08007154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 fc00 	bl	8000970 <HAL_PCD_Start>
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f980 	bl	800747c <USBD_Get_USB_Status>
 800717c:	4603      	mov	r3, r0
 800717e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007180:	7bbb      	ldrb	r3, [r7, #14]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	461a      	mov	r2, r3
 8007198:	4603      	mov	r3, r0
 800719a:	70fb      	strb	r3, [r7, #3]
 800719c:	460b      	mov	r3, r1
 800719e:	70bb      	strb	r3, [r7, #2]
 80071a0:	4613      	mov	r3, r2
 80071a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80071b2:	78bb      	ldrb	r3, [r7, #2]
 80071b4:	883a      	ldrh	r2, [r7, #0]
 80071b6:	78f9      	ldrb	r1, [r7, #3]
 80071b8:	f7f9 fd48 	bl	8000c4c <HAL_PCD_EP_Open>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f95a 	bl	800747c <USBD_Get_USB_Status>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071f0:	78fa      	ldrb	r2, [r7, #3]
 80071f2:	4611      	mov	r1, r2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7f9 fd8f 	bl	8000d18 <HAL_PCD_EP_Close>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f93b 	bl	800747c <USBD_Get_USB_Status>
 8007206:	4603      	mov	r3, r0
 8007208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800720a:	7bbb      	ldrb	r3, [r7, #14]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800722e:	78fa      	ldrb	r2, [r7, #3]
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7f9 fe50 	bl	8000ed8 <HAL_PCD_EP_SetStall>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f91c 	bl	800747c <USBD_Get_USB_Status>
 8007244:	4603      	mov	r3, r0
 8007246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007248:	7bbb      	ldrb	r3, [r7, #14]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800726c:	78fa      	ldrb	r2, [r7, #3]
 800726e:	4611      	mov	r1, r2
 8007270:	4618      	mov	r0, r3
 8007272:	f7f9 fe83 	bl	8000f7c <HAL_PCD_EP_ClrStall>
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 f8fd 	bl	800747c <USBD_Get_USB_Status>
 8007282:	4603      	mov	r3, r0
 8007284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007286:	7bbb      	ldrb	r3, [r7, #14]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	da0c      	bge.n	80072c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	440b      	add	r3, r1
 80072c0:	3302      	adds	r3, #2
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	e00b      	b.n	80072de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072cc:	68f9      	ldr	r1, [r7, #12]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	440b      	add	r3, r1
 80072d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80072dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007304:	78fa      	ldrb	r2, [r7, #3]
 8007306:	4611      	mov	r1, r2
 8007308:	4618      	mov	r0, r3
 800730a:	f7f9 fc7a 	bl	8000c02 <HAL_PCD_SetAddress>
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 f8b1 	bl	800747c <USBD_Get_USB_Status>
 800731a:	4603      	mov	r3, r0
 800731c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800731e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	460b      	mov	r3, r1
 8007336:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007346:	7af9      	ldrb	r1, [r7, #11]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	f7f9 fd81 	bl	8000e52 <HAL_PCD_EP_Transmit>
 8007350:	4603      	mov	r3, r0
 8007352:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f890 	bl	800747c <USBD_Get_USB_Status>
 800735c:	4603      	mov	r3, r0
 800735e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007360:	7dbb      	ldrb	r3, [r7, #22]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	460b      	mov	r3, r1
 8007378:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007388:	7af9      	ldrb	r1, [r7, #11]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	f7f9 fd0b 	bl	8000da8 <HAL_PCD_EP_Receive>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f86f 	bl	800747c <USBD_Get_USB_Status>
 800739e:	4603      	mov	r3, r0
 80073a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7f9 fd2d 	bl	8000e22 <HAL_PCD_EP_GetRxCount>
 80073c8:	4603      	mov	r3, r0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_PCDEx_LPM_Callback+0x18>
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d013      	beq.n	8007412 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80073ea:	e023      	b.n	8007434 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80073f4:	f000 f83c 	bl	8007470 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <HAL_PCDEx_LPM_Callback+0x68>)
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	4a0f      	ldr	r2, [pc, #60]	; (800743c <HAL_PCDEx_LPM_Callback+0x68>)
 80073fe:	f023 0306 	bic.w	r3, r3, #6
 8007402:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fc96 	bl	8005d3c <USBD_LL_Resume>
    break;
 8007410:	e010      	b.n	8007434 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe fc79 	bl	8005d10 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <HAL_PCDEx_LPM_Callback+0x68>)
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	4a04      	ldr	r2, [pc, #16]	; (800743c <HAL_PCDEx_LPM_Callback+0x68>)
 800742c:	f043 0306 	orr.w	r3, r3, #6
 8007430:	6113      	str	r3, [r2, #16]
    break;
 8007432:	bf00      	nop
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed00 	.word	0xe000ed00

08007440 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007448:	4b03      	ldr	r3, [pc, #12]	; (8007458 <USBD_static_malloc+0x18>)
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200001ac 	.word	0x200001ac

0800745c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]

}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007474:	f7f8 ff1a 	bl	80002ac <SystemClock_Config>
}
 8007478:	bf00      	nop
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b03      	cmp	r3, #3
 800748e:	d817      	bhi.n	80074c0 <USBD_Get_USB_Status+0x44>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <USBD_Get_USB_Status+0x1c>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074af 	.word	0x080074af
 80074a0:	080074b5 	.word	0x080074b5
 80074a4:	080074bb 	.word	0x080074bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
    break;
 80074ac:	e00b      	b.n	80074c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074ae:	2303      	movs	r3, #3
 80074b0:	73fb      	strb	r3, [r7, #15]
    break;
 80074b2:	e008      	b.n	80074c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
    break;
 80074b8:	e005      	b.n	80074c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074ba:	2303      	movs	r3, #3
 80074bc:	73fb      	strb	r3, [r7, #15]
    break;
 80074be:	e002      	b.n	80074c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	73fb      	strb	r3, [r7, #15]
    break;
 80074c4:	bf00      	nop
  }
  return usb_status;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <__libc_init_array>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4d0d      	ldr	r5, [pc, #52]	; (800750c <__libc_init_array+0x38>)
 80074d8:	4c0d      	ldr	r4, [pc, #52]	; (8007510 <__libc_init_array+0x3c>)
 80074da:	1b64      	subs	r4, r4, r5
 80074dc:	10a4      	asrs	r4, r4, #2
 80074de:	2600      	movs	r6, #0
 80074e0:	42a6      	cmp	r6, r4
 80074e2:	d109      	bne.n	80074f8 <__libc_init_array+0x24>
 80074e4:	4d0b      	ldr	r5, [pc, #44]	; (8007514 <__libc_init_array+0x40>)
 80074e6:	4c0c      	ldr	r4, [pc, #48]	; (8007518 <__libc_init_array+0x44>)
 80074e8:	f000 f82e 	bl	8007548 <_init>
 80074ec:	1b64      	subs	r4, r4, r5
 80074ee:	10a4      	asrs	r4, r4, #2
 80074f0:	2600      	movs	r6, #0
 80074f2:	42a6      	cmp	r6, r4
 80074f4:	d105      	bne.n	8007502 <__libc_init_array+0x2e>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fc:	4798      	blx	r3
 80074fe:	3601      	adds	r6, #1
 8007500:	e7ee      	b.n	80074e0 <__libc_init_array+0xc>
 8007502:	f855 3b04 	ldr.w	r3, [r5], #4
 8007506:	4798      	blx	r3
 8007508:	3601      	adds	r6, #1
 800750a:	e7f2      	b.n	80074f2 <__libc_init_array+0x1e>
 800750c:	080075b8 	.word	0x080075b8
 8007510:	080075b8 	.word	0x080075b8
 8007514:	080075b8 	.word	0x080075b8
 8007518:	080075bc 	.word	0x080075bc

0800751c <memcpy>:
 800751c:	440a      	add	r2, r1
 800751e:	4291      	cmp	r1, r2
 8007520:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007524:	d100      	bne.n	8007528 <memcpy+0xc>
 8007526:	4770      	bx	lr
 8007528:	b510      	push	{r4, lr}
 800752a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800752e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007532:	4291      	cmp	r1, r2
 8007534:	d1f9      	bne.n	800752a <memcpy+0xe>
 8007536:	bd10      	pop	{r4, pc}

08007538 <memset>:
 8007538:	4402      	add	r2, r0
 800753a:	4603      	mov	r3, r0
 800753c:	4293      	cmp	r3, r2
 800753e:	d100      	bne.n	8007542 <memset+0xa>
 8007540:	4770      	bx	lr
 8007542:	f803 1b01 	strb.w	r1, [r3], #1
 8007546:	e7f9      	b.n	800753c <memset+0x4>

08007548 <_init>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	bf00      	nop
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr

08007554 <_fini>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	bf00      	nop
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr
