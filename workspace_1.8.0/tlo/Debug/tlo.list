
tlo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b284  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4b4  0800b4b4  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4b4  0800b4b4  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b4  0800b4b4  0001b4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  200001a0  0800b65c  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016dc  0800b65c  000216dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205d6  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  000407a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00044560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00045b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002170d  00000000  00000000  00047038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a605  00000000  00000000  00068745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9970  00000000  00000000  00082d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c6ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f20  00000000  00000000  0014c710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b444 	.word	0x0800b444

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0800b444 	.word	0x0800b444

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <CDC_On_Receive>:
Feedback feedback = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .bools = 0, .deliminer = 0xAAAA};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) //uint8_t* Buf, uint32_t* Len
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)){
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	d104      	bne.n	8000b30 <CDC_On_Receive+0x1c>
		memcpy(&command, buffer, sizeof(Command));
 8000b26:	2210      	movs	r2, #16
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b2c:	f00a fc74 	bl	800b418 <memcpy>
	}
	if (command.delimiter == 0xAAAA){
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <CDC_On_Receive+0x2e>
		isCommandReceived = 1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <CDC_On_Receive+0x3c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
	}
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000227 	.word	0x20000227

08000b54 <throw>:

void throw(uint32_t speed)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (speed > 7500) speed = 7500;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d902      	bls.n	8000b6c <throw+0x18>
 8000b66:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000b6a:	607b      	str	r3, [r7, #4]
	if (speed < 2500) speed = 2500;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d802      	bhi.n	8000b7c <throw+0x28>
 8000b76:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b7a:	607b      	str	r3, [r7, #4]
	TIM16->CCR1 = speed;
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <throw+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(400);
 8000b82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b86:	f001 fcc5 	bl	8002514 <HAL_Delay>
	TIM17->CCR1 = 1000;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <throw+0x60>)
 8000b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(200);
 8000b92:	20c8      	movs	r0, #200	; 0xc8
 8000b94:	f001 fcbe 	bl	8002514 <HAL_Delay>
	TIM17->CCR1 = 0;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <throw+0x60>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = 2500;
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <throw+0x5c>)
 8000ba0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40014400 	.word	0x40014400
 8000bb4:	40014800 	.word	0x40014800

08000bb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b0a2      	sub	sp, #136	; 0x88
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	int16_t Cpos_M1 = (int16_t)TIM3->CNT;
 8000bc0:	4ba9      	ldr	r3, [pc, #676]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	//feedback.speed1  = Cpos_M1;
	double dif_M1 = Cpos_M1 - Lpos_M1;
 8000bc8:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc75 	bl	80004bc <__aeabi_i2d>
 8000bd2:	4ba6      	ldr	r3, [pc, #664]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fb22 	bl	8000220 <__aeabi_dsub>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	Lpos_M1 = Cpos_M1;
 8000be4:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fc67 	bl	80004bc <__aeabi_i2d>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	499e      	ldr	r1, [pc, #632]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bf4:	e9c1 2300 	strd	r2, r3, [r1]

	int16_t Cpos_M2 = (int16_t)TIM4->CNT;
 8000bf8:	4b9d      	ldr	r3, [pc, #628]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	//feedback.speed2  = Cpos_M2;
	double dif_M2 = Cpos_M2 - Lpos_M2;
 8000c00:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fc59 	bl	80004bc <__aeabi_i2d>
 8000c0a:	4b9a      	ldr	r3, [pc, #616]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f7ff fb06 	bl	8000220 <__aeabi_dsub>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	Lpos_M2 = Cpos_M2;
 8000c1c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fc4b 	bl	80004bc <__aeabi_i2d>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4992      	ldr	r1, [pc, #584]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c2c:	e9c1 2300 	strd	r2, r3, [r1]

	int16_t Cpos_M3 = (int16_t)TIM8->CNT;
 8000c30:	4b91      	ldr	r3, [pc, #580]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	//feedback.speed3  = Cpos_M3;
	double dif_M3 = Cpos_M3 - Lpos_M3;
 8000c38:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fc3d 	bl	80004bc <__aeabi_i2d>
 8000c42:	4b8e      	ldr	r3, [pc, #568]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c48:	f7ff faea 	bl	8000220 <__aeabi_dsub>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	Lpos_M3 = Cpos_M3;
 8000c54:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fc2f 	bl	80004bc <__aeabi_i2d>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4986      	ldr	r1, [pc, #536]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c64:	e9c1 2300 	strd	r2, r3, [r1]


	double Err1 = tgt_M1/15 - dif_M1;
 8000c68:	4b85      	ldr	r3, [pc, #532]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	4b84      	ldr	r3, [pc, #528]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c74:	f7ff fdb6 	bl	80007e4 <__aeabi_ddiv>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c84:	f7ff facc 	bl	8000220 <__aeabi_dsub>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double Err2 = tgt_M2/15 - dif_M2;
 8000c90:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	4b7a      	ldr	r3, [pc, #488]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c9c:	f7ff fda2 	bl	80007e4 <__aeabi_ddiv>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000cac:	f7ff fab8 	bl	8000220 <__aeabi_dsub>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double Err3 = tgt_M3/15 - dif_M3;
 8000cb8:	4b74      	ldr	r3, [pc, #464]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000cc4:	f7ff fd8e 	bl	80007e4 <__aeabi_ddiv>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000cd4:	f7ff faa4 	bl	8000220 <__aeabi_dsub>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double kp = 4000;
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ce6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double ki = 700;
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	4b69      	ldr	r3, [pc, #420]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cf0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double kd = 300;
 8000cf4:	a35a      	add	r3, pc, #360	; (adr r3, 8000e60 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	e9c7 2308 	strd	r2, r3, [r7, #32]

	integral_M1 += Err1;
 8000cfe:	4b66      	ldr	r3, [pc, #408]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d08:	f7ff fa8c 	bl	8000224 <__adddf3>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4961      	ldr	r1, [pc, #388]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d12:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M2 += Err2;
 8000d16:	4b61      	ldr	r3, [pc, #388]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d20:	f7ff fa80 	bl	8000224 <__adddf3>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	495c      	ldr	r1, [pc, #368]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d2a:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M3 += Err3;
 8000d2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000d38:	f7ff fa74 	bl	8000224 <__adddf3>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4957      	ldr	r1, [pc, #348]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d42:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M1 > 40) integral_M1 = 40;
 8000d46:	4b54      	ldr	r3, [pc, #336]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d52:	f7ff fead 	bl	8000ab0 <__aeabi_dcmpgt>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d005      	beq.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000d5c:	494e      	ldr	r1, [pc, #312]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b50      	ldr	r3, [pc, #320]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d64:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M1 < -40) integral_M1 = -40;
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d74:	f7ff fe7e 	bl	8000a74 <__aeabi_dcmplt>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x1d2>
 8000d7e:	4946      	ldr	r1, [pc, #280]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	4b48      	ldr	r3, [pc, #288]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d86:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M2 > 40) integral_M2 = 40;
 8000d8a:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d96:	f7ff fe8b 	bl	8000ab0 <__aeabi_dcmpgt>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d005      	beq.n	8000dac <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8000da0:	493e      	ldr	r1, [pc, #248]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000da8:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M2 < -40) integral_M2 = -40;
 8000dac:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000db8:	f7ff fe5c 	bl	8000a74 <__aeabi_dcmplt>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x216>
 8000dc2:	4936      	ldr	r1, [pc, #216]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dca:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M3 > 40) integral_M3 = 40;
 8000dce:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000dda:	f7ff fe69 	bl	8000ab0 <__aeabi_dcmpgt>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x238>
 8000de4:	492e      	ldr	r1, [pc, #184]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000dec:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M3 < -40) integral_M3 = -40;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dfc:	f7ff fe3a 	bl	8000a74 <__aeabi_dcmplt>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d005      	beq.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x25a>
 8000e06:	4926      	ldr	r1, [pc, #152]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e0e:	e9c1 2300 	strd	r2, r3, [r1]

	double derivative_M1 = (Err1 - last_err_M1);
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000e1c:	f7ff fa00 	bl	8000220 <__aeabi_dsub>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double derivative_M2 = (Err2 - last_err_M2);
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e32:	f7ff f9f5 	bl	8000220 <__aeabi_dsub>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double derivative_M3 = (Err3 - last_err_M3);
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000e48:	f7ff f9ea 	bl	8000220 <__aeabi_dsub>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	e9c7 2302 	strd	r2, r3, [r7, #8]

	last_err_M1 = Err1;
 8000e54:	4915      	ldr	r1, [pc, #84]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000e5a:	e9c1 2300 	strd	r2, r3, [r1]
 8000e5e:	e02b      	b.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x300>
 8000e60:	00000000 	.word	0x00000000
 8000e64:	4072c000 	.word	0x4072c000
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	200001c0 	.word	0x200001c0
 8000e70:	40000800 	.word	0x40000800
 8000e74:	200001c8 	.word	0x200001c8
 8000e78:	40013400 	.word	0x40013400
 8000e7c:	200001d0 	.word	0x200001d0
 8000e80:	200001d8 	.word	0x200001d8
 8000e84:	402e0000 	.word	0x402e0000
 8000e88:	200001e0 	.word	0x200001e0
 8000e8c:	200001e8 	.word	0x200001e8
 8000e90:	40af4000 	.word	0x40af4000
 8000e94:	4085e000 	.word	0x4085e000
 8000e98:	200001f0 	.word	0x200001f0
 8000e9c:	200001f8 	.word	0x200001f8
 8000ea0:	20000200 	.word	0x20000200
 8000ea4:	40440000 	.word	0x40440000
 8000ea8:	c0440000 	.word	0xc0440000
 8000eac:	20000208 	.word	0x20000208
 8000eb0:	20000210 	.word	0x20000210
 8000eb4:	20000218 	.word	0x20000218
	last_err_M2 = Err2;
 8000eb8:	4996      	ldr	r1, [pc, #600]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ebe:	e9c1 2300 	strd	r2, r3, [r1]
	last_err_M3 = Err3;
 8000ec2:	4995      	ldr	r1, [pc, #596]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]

	int32_t Speed_M1 = (int32_t) Err1 * kp + integral_M1 * ki + derivative_M1 * kd;
 8000ecc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000ed0:	f7ff fdf8 	bl	8000ac4 <__aeabi_d2iz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff faf0 	bl	80004bc <__aeabi_i2d>
 8000edc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ee0:	f7ff fb56 	bl	8000590 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4614      	mov	r4, r2
 8000eea:	461d      	mov	r5, r3
 8000eec:	4b8b      	ldr	r3, [pc, #556]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000ef6:	f7ff fb4b 	bl	8000590 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4620      	mov	r0, r4
 8000f00:	4629      	mov	r1, r5
 8000f02:	f7ff f98f 	bl	8000224 <__adddf3>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f16:	f7ff fb3b 	bl	8000590 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4620      	mov	r0, r4
 8000f20:	4629      	mov	r1, r5
 8000f22:	f7ff f97f 	bl	8000224 <__adddf3>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fdc9 	bl	8000ac4 <__aeabi_d2iz>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int32_t Speed_M2 = (int32_t) Err2 * kp + integral_M2 * ki + derivative_M2 * kd;
 8000f38:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000f3c:	f7ff fdc2 	bl	8000ac4 <__aeabi_d2iz>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff faba 	bl	80004bc <__aeabi_i2d>
 8000f48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f4c:	f7ff fb20 	bl	8000590 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4614      	mov	r4, r2
 8000f56:	461d      	mov	r5, r3
 8000f58:	4b71      	ldr	r3, [pc, #452]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f62:	f7ff fb15 	bl	8000590 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f7ff f959 	bl	8000224 <__adddf3>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4614      	mov	r4, r2
 8000f78:	461d      	mov	r5, r3
 8000f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f82:	f7ff fb05 	bl	8000590 <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	f7ff f949 	bl	8000224 <__adddf3>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd93 	bl	8000ac4 <__aeabi_d2iz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int32_t Speed_M3 = (int32_t) Err3 * kp + integral_M3 * ki + derivative_M3 * kd;
 8000fa4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000fa8:	f7ff fd8c 	bl	8000ac4 <__aeabi_d2iz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa84 	bl	80004bc <__aeabi_i2d>
 8000fb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fb8:	f7ff faea 	bl	8000590 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	4b57      	ldr	r3, [pc, #348]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fce:	f7ff fadf 	bl	8000590 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f7ff f923 	bl	8000224 <__adddf3>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4614      	mov	r4, r2
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fee:	f7ff facf 	bl	8000590 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	f7ff f913 	bl	8000224 <__adddf3>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fd5d 	bl	8000ac4 <__aeabi_d2iz>
 800100a:	4603      	mov	r3, r0
 800100c:	67fb      	str	r3, [r7, #124]	; 0x7c

	if (tgt_M1 == 0){
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	f7ff fd20 	bl	8000a60 <__aeabi_dcmpeq>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_TIM_PeriodElapsedCallback+0x474>
		Speed_M1 = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}
	if (tgt_M2 == 0){
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800102e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	f7ff fd11 	bl	8000a60 <__aeabi_dcmpeq>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_TIM_PeriodElapsedCallback+0x492>
			Speed_M2 = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		}
	if (tgt_M3 == 0){
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800104c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	f7ff fd02 	bl	8000a60 <__aeabi_dcmpeq>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x4ae>
			Speed_M3 = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	67fb      	str	r3, [r7, #124]	; 0x7c
		}
	if (Speed_M1 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 8001066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800106a:	2b00      	cmp	r3, #0
 800106c:	db06      	blt.n	800107c <HAL_TIM_PeriodElapsedCallback+0x4c4>
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f001 fd19 	bl	8002aac <HAL_GPIO_WritePin>
 800107a:	e005      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x4d0>
	else HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 fd12 	bl	8002aac <HAL_GPIO_WritePin>

	if (Speed_M2 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M2_DIR_Pin, 0);
 8001088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800108c:	2b00      	cmp	r3, #0
 800108e:	db07      	blt.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x4e8>
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f001 fd07 	bl	8002aac <HAL_GPIO_WritePin>
 800109e:	e006      	b.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x4f6>
	else HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f001 fcff 	bl	8002aac <HAL_GPIO_WritePin>

	if (Speed_M3 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80010ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db06      	blt.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x50a>
 80010b4:	2200      	movs	r2, #0
 80010b6:	2108      	movs	r1, #8
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f001 fcf6 	bl	8002aac <HAL_GPIO_WritePin>
 80010c0:	e005      	b.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x516>
	else HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2108      	movs	r1, #8
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f001 fcef 	bl	8002aac <HAL_GPIO_WritePin>

	TIM2->CCR1 = abs(Speed_M1);
 80010ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010d2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010d6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR3 = abs(Speed_M2);
 80010e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM15->CCR1 = abs(Speed_M3);
 80010f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34

	safety_iters++;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800110a:	701a      	strb	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	3788      	adds	r7, #136	; 0x88
 8001110:	46bd      	mov	sp, r7
 8001112:	bdb0      	pop	{r4, r5, r7, pc}
 8001114:	20000210 	.word	0x20000210
 8001118:	20000218 	.word	0x20000218
 800111c:	200001f0 	.word	0x200001f0
 8001120:	200001f8 	.word	0x200001f8
 8001124:	20000200 	.word	0x20000200
 8001128:	200001d8 	.word	0x200001d8
 800112c:	200001e0 	.word	0x200001e0
 8001130:	200001e8 	.word	0x200001e8
 8001134:	40014000 	.word	0x40014000
 8001138:	20000226 	.word	0x20000226

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f001 f976 	bl	8002432 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f94b 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 fdc1 	bl	8001cd0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800114e:	f000 faeb 	bl	8001728 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001152:	f000 fb3f 	bl	80017d4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001156:	f000 fb93 	bl	8001880 <MX_TIM6_Init>
  MX_TIM8_Init();
 800115a:	f000 fbc7 	bl	80018ec <MX_TIM8_Init>
  MX_TIM2_Init();
 800115e:	f000 fa57 	bl	8001610 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001162:	f000 fcc1 	bl	8001ae8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001166:	f000 fd39 	bl	8001bdc <MX_TIM17_Init>
  MX_TIM15_Init();
 800116a:	f000 fc19 	bl	80019a0 <MX_TIM15_Init>
  MX_I2C3_Init();
 800116e:	f000 f983 	bl	8001478 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001172:	f000 f9c1 	bl	80014f8 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001176:	f009 fc13 	bl	800a9a0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 800117a:	2201      	movs	r2, #1
 800117c:	2101      	movs	r1, #1
 800117e:	4882      	ldr	r0, [pc, #520]	; (8001388 <main+0x24c>)
 8001180:	f001 fc94 	bl	8002aac <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 800118c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800118e:	2104      	movs	r1, #4
 8001190:	487e      	ldr	r0, [pc, #504]	; (800138c <main+0x250>)
 8001192:	f004 fbb7 	bl	8005904 <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 8001196:	2064      	movs	r0, #100	; 0x64
 8001198:	f001 f9bc 	bl	8002514 <HAL_Delay>
  TIM2->CCR2 = 65536;
 800119c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38

  //motor speeds to zero
  TIM2->CCR1 = 0;
 80011a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011aa:	2200      	movs	r2, #0
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 80011ae:	4b78      	ldr	r3, [pc, #480]	; (8001390 <main+0x254>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 80011b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b8:	2200      	movs	r2, #0
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	4873      	ldr	r0, [pc, #460]	; (800138c <main+0x250>)
 80011c0:	f004 fba0 	bl	8005904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011c4:	2108      	movs	r1, #8
 80011c6:	4871      	ldr	r0, [pc, #452]	; (800138c <main+0x250>)
 80011c8:	f004 fb9c 	bl	8005904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80011cc:	2100      	movs	r1, #0
 80011ce:	4871      	ldr	r0, [pc, #452]	; (8001394 <main+0x258>)
 80011d0:	f004 fb98 	bl	8005904 <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80011d4:	2100      	movs	r1, #0
 80011d6:	4870      	ldr	r0, [pc, #448]	; (8001398 <main+0x25c>)
 80011d8:	f004 fb94 	bl	8005904 <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 80011dc:	4b6f      	ldr	r3, [pc, #444]	; (800139c <main+0x260>)
 80011de:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 80011e4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80011e8:	f001 f994 	bl	8002514 <HAL_Delay>

  //enable grabber and set its speed to zero
  TIM17->CCR1 = 0;
 80011ec:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <main+0x264>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80011f2:	2100      	movs	r1, #0
 80011f4:	486b      	ldr	r0, [pc, #428]	; (80013a4 <main+0x268>)
 80011f6:	f004 fb85 	bl	8005904 <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011fa:	2104      	movs	r1, #4
 80011fc:	486a      	ldr	r0, [pc, #424]	; (80013a8 <main+0x26c>)
 80011fe:	f004 fd27 	bl	8005c50 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001202:	2104      	movs	r1, #4
 8001204:	4869      	ldr	r0, [pc, #420]	; (80013ac <main+0x270>)
 8001206:	f004 fd23 	bl	8005c50 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800120a:	2104      	movs	r1, #4
 800120c:	4868      	ldr	r0, [pc, #416]	; (80013b0 <main+0x274>)
 800120e:	f004 fd1f 	bl	8005c50 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 8001212:	4868      	ldr	r0, [pc, #416]	; (80013b4 <main+0x278>)
 8001214:	f004 fab4 	bl	8005780 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  uint8_t n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8001218:	2120      	movs	r1, #32
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f001 fc2d 	bl	8002a7c <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	71bb      	strb	r3, [r7, #6]

	  if (isCommandReceived){
 8001226:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <main+0x27c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05f      	beq.n	80012f0 <main+0x1b4>
		  isCommandReceived = 0;
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <main+0x27c>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
		  tgt_M1 = command.speed1;
 8001236:	4b61      	ldr	r3, [pc, #388]	; (80013bc <main+0x280>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f93d 	bl	80004bc <__aeabi_i2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	495e      	ldr	r1, [pc, #376]	; (80013c0 <main+0x284>)
 8001248:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = command.speed2;
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <main+0x280>)
 800124e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f932 	bl	80004bc <__aeabi_i2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4959      	ldr	r1, [pc, #356]	; (80013c4 <main+0x288>)
 800125e:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = command.speed3;
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <main+0x280>)
 8001264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f927 	bl	80004bc <__aeabi_i2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4955      	ldr	r1, [pc, #340]	; (80013c8 <main+0x28c>)
 8001274:	e9c1 2300 	strd	r2, r3, [r1]
		  thrower_speed = command.thrower_speed;
 8001278:	4b50      	ldr	r3, [pc, #320]	; (80013bc <main+0x280>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4a53      	ldr	r2, [pc, #332]	; (80013cc <main+0x290>)
 800127e:	6013      	str	r3, [r2, #0]
		  uint8_t bools = command.bools;
 8001280:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <main+0x280>)
 8001282:	88db      	ldrh	r3, [r3, #6]
 8001284:	71fb      	strb	r3, [r7, #7]

		  if (bools >= 2)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d90c      	bls.n	80012a6 <main+0x16a>
		  {
		  	  bools -= 2;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	3b02      	subs	r3, #2
 8001290:	71fb      	strb	r3, [r7, #7]
		  	  grabber_on = 1;
 8001292:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <main+0x294>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
		  	  if (n) grabber_on = 0;
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <main+0x170>
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <main+0x294>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e002      	b.n	80012ac <main+0x170>
		  }

		  else
		  {
			  grabber_on = 0;
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <main+0x294>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
		  }

		  if (bools >= 1)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <main+0x182>
		  {
			  bools -= 1;
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	71fb      	strb	r3, [r7, #7]
			  thrower = 1;
 80012b8:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <main+0x298>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2101      	movs	r1, #1
 80012c2:	4831      	ldr	r0, [pc, #196]	; (8001388 <main+0x24c>)
 80012c4:	f001 fbf2 	bl	8002aac <HAL_GPIO_WritePin>

		  safety_iters = 0;
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <main+0x29c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]

		  feedback.bools = (uint8_t)HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80012ce:	2120      	movs	r1, #32
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f001 fbd2 	bl	8002a7c <HAL_GPIO_ReadPin>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <main+0x2a0>)
 80012de:	80da      	strh	r2, [r3, #6]
		  feedback.deliminer = 0xAAAA;
 80012e0:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <main+0x2a0>)
 80012e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80012e6:	609a      	str	r2, [r3, #8]
		  CDC_Transmit_FS(&feedback, sizeof(feedback));
 80012e8:	210c      	movs	r1, #12
 80012ea:	483c      	ldr	r0, [pc, #240]	; (80013dc <main+0x2a0>)
 80012ec:	f009 fc1a 	bl	800ab24 <CDC_Transmit_FS>

	  }



	  if (grabber_on){
 80012f0:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <main+0x294>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00e      	beq.n	8001316 <main+0x1da>

		  if (n)
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <main+0x1d0>
		  {
			  TIM17->CCR1 = 0;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <main+0x264>)
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	; 0x34
			  grabber_on = 0;
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <main+0x294>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e007      	b.n	800131c <main+0x1e0>

		  }
		  else TIM17->CCR1 = 1000;
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <main+0x264>)
 800130e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
 8001314:	e002      	b.n	800131c <main+0x1e0>

	  }

	  else TIM17->CCR1 = 0;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <main+0x264>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
	  if (n) grabber_on = 0;
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <main+0x1ec>
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <main+0x294>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

	  if(thrower && n){
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <main+0x298>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <main+0x206>
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <main+0x206>
		  throw(thrower_speed);
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <main+0x290>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fc0a 	bl	8000b54 <throw>
 8001340:	e002      	b.n	8001348 <main+0x20c>
	  }
	  else thrower = 0;
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <main+0x298>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]

	  if (safety_iters > 100){
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <main+0x29c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	f67f af63 	bls.w	8001218 <main+0xdc>
		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	2101      	movs	r1, #1
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <main+0x24c>)
 8001358:	f001 fba8 	bl	8002aac <HAL_GPIO_WritePin>
		  tgt_M1 = 0;
 800135c:	4918      	ldr	r1, [pc, #96]	; (80013c0 <main+0x284>)
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = 0;
 800136a:	4916      	ldr	r1, [pc, #88]	; (80013c4 <main+0x288>)
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = 0;
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <main+0x28c>)
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c1 2300 	strd	r2, r3, [r1]
  {
 8001386:	e747      	b.n	8001218 <main+0xdc>
 8001388:	48000400 	.word	0x48000400
 800138c:	200006ac 	.word	0x200006ac
 8001390:	40014000 	.word	0x40014000
 8001394:	20000530 	.word	0x20000530
 8001398:	200006f8 	.word	0x200006f8
 800139c:	40014400 	.word	0x40014400
 80013a0:	40014800 	.word	0x40014800
 80013a4:	2000057c 	.word	0x2000057c
 80013a8:	200005c8 	.word	0x200005c8
 80013ac:	200004e4 	.word	0x200004e4
 80013b0:	20000498 	.word	0x20000498
 80013b4:	20000614 	.word	0x20000614
 80013b8:	20000227 	.word	0x20000227
 80013bc:	20000000 	.word	0x20000000
 80013c0:	200001d8 	.word	0x200001d8
 80013c4:	200001e0 	.word	0x200001e0
 80013c8:	200001e8 	.word	0x200001e8
 80013cc:	20000220 	.word	0x20000220
 80013d0:	20000224 	.word	0x20000224
 80013d4:	20000225 	.word	0x20000225
 80013d8:	20000226 	.word	0x20000226
 80013dc:	20000010 	.word	0x20000010

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b094      	sub	sp, #80	; 0x50
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	2238      	movs	r2, #56	; 0x38
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00a f820 	bl	800b434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001402:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001406:	f003 f9c3 	bl	8004790 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2340      	movs	r3, #64	; 0x40
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001420:	2301      	movs	r3, #1
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001424:	230c      	movs	r3, #12
 8001426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800142c:	2304      	movs	r3, #4
 800142e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001430:	2302      	movs	r3, #2
 8001432:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fa5d 	bl	80048f8 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001444:	f000 fca6 	bl	8001d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800144c:	2301      	movs	r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fd61 	bl	8004f28 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800146c:	f000 fc92 	bl	8001d94 <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	3750      	adds	r7, #80	; 0x50
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_I2C3_Init+0x74>)
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <MX_I2C3_Init+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_I2C3_Init+0x74>)
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <MX_I2C3_Init+0x7c>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_I2C3_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_I2C3_Init+0x74>)
 8001490:	2201      	movs	r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_I2C3_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_I2C3_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C3_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C3_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C3_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MX_I2C3_Init+0x74>)
 80014b4:	f001 fb12 	bl	8002adc <HAL_I2C_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014be:	f000 fc69 	bl	8001d94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <MX_I2C3_Init+0x74>)
 80014c6:	f001 fb98 	bl	8002bfa <HAL_I2CEx_ConfigAnalogFilter>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f000 fc60 	bl	8001d94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_I2C3_Init+0x74>)
 80014d8:	f001 fbda 	bl	8002c90 <HAL_I2CEx_ConfigDigitalFilter>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014e2:	f000 fc57 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000044c 	.word	0x2000044c
 80014f0:	40007800 	.word	0x40007800
 80014f4:	00303d5b 	.word	0x00303d5b

080014f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b098      	sub	sp, #96	; 0x60
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2234      	movs	r2, #52	; 0x34
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f009 ff85 	bl	800b434 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <MX_TIM1_Init+0x110>)
 800152c:	4a37      	ldr	r2, [pc, #220]	; (800160c <MX_TIM1_Init+0x114>)
 800152e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <MX_TIM1_Init+0x110>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <MX_TIM1_Init+0x110>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <MX_TIM1_Init+0x110>)
 800153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <MX_TIM1_Init+0x110>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <MX_TIM1_Init+0x110>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <MX_TIM1_Init+0x110>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001556:	482c      	ldr	r0, [pc, #176]	; (8001608 <MX_TIM1_Init+0x110>)
 8001558:	f004 f97c 	bl	8005854 <HAL_TIM_PWM_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 fc17 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001572:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001576:	4619      	mov	r1, r3
 8001578:	4823      	ldr	r0, [pc, #140]	; (8001608 <MX_TIM1_Init+0x110>)
 800157a:	f005 fbf5 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001584:	f000 fc06 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001588:	2360      	movs	r3, #96	; 0x60
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 800159c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015a0:	2210      	movs	r2, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_TIM1_Init+0x110>)
 80015a6:	f004 fd61 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80015b0:	f000 fbf0 	bl	8001d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_TIM1_Init+0x110>)
 80015f2:	f005 fc3b 	bl	8006e6c <HAL_TIMEx_ConfigBreakDeadTime>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80015fc:	f000 fbca 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3760      	adds	r7, #96	; 0x60
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000660 	.word	0x20000660
 800160c:	40012c00 	.word	0x40012c00

08001610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <MX_TIM2_Init+0x114>)
 8001644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800164a:	4b36      	ldr	r3, [pc, #216]	; (8001724 <MX_TIM2_Init+0x114>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <MX_TIM2_Init+0x114>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <MX_TIM2_Init+0x114>)
 8001658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <MX_TIM2_Init+0x114>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <MX_TIM2_Init+0x114>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166a:	482e      	ldr	r0, [pc, #184]	; (8001724 <MX_TIM2_Init+0x114>)
 800166c:	f004 f830 	bl	80056d0 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001676:	f000 fb8d 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001684:	4619      	mov	r1, r3
 8001686:	4827      	ldr	r0, [pc, #156]	; (8001724 <MX_TIM2_Init+0x114>)
 8001688:	f004 fe04 	bl	8006294 <HAL_TIM_ConfigClockSource>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001692:	f000 fb7f 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_TIM2_Init+0x114>)
 8001698:	f004 f8dc 	bl	8005854 <HAL_TIM_PWM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016a2:	f000 fb77 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	481b      	ldr	r0, [pc, #108]	; (8001724 <MX_TIM2_Init+0x114>)
 80016b6:	f005 fb57 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016c0:	f000 fb68 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c4:	2360      	movs	r3, #96	; 0x60
 80016c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_TIM2_Init+0x114>)
 80016dc:	f004 fcc6 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016e6:	f000 fb55 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ea:	463b      	mov	r3, r7
 80016ec:	2204      	movs	r2, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <MX_TIM2_Init+0x114>)
 80016f2:	f004 fcbb 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80016fc:	f000 fb4a 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	2208      	movs	r2, #8
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM2_Init+0x114>)
 8001708:	f004 fcb0 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001712:	f000 fb3f 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM2_Init+0x114>)
 8001718:	f000 fd36 	bl	8002188 <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	; 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200006ac 	.word	0x200006ac

08001728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f009 fe7c 	bl	800b434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <MX_TIM3_Init+0xa4>)
 8001748:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <MX_TIM3_Init+0xa8>)
 800174a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_TIM3_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <MX_TIM3_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_TIM3_Init+0xa4>)
 800175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_TIM3_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MX_TIM3_Init+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800176c:	2301      	movs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001774:	2301      	movs	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001784:	2301      	movs	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <MX_TIM3_Init+0xa4>)
 8001798:	f004 f9b4 	bl	8005b04 <HAL_TIM_Encoder_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017a2:	f000 faf7 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ae:	463b      	mov	r3, r7
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <MX_TIM3_Init+0xa4>)
 80017b4:	f005 fad8 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017be:	f000 fae9 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	3730      	adds	r7, #48	; 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200005c8 	.word	0x200005c8
 80017d0:	40000400 	.word	0x40000400

080017d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f009 fe26 	bl	800b434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_TIM4_Init+0xa4>)
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_TIM4_Init+0xa8>)
 80017f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_TIM4_Init+0xa4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_TIM4_Init+0xa4>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_TIM4_Init+0xa4>)
 8001806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_TIM4_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_TIM4_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001818:	2301      	movs	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001830:	2301      	movs	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4619      	mov	r1, r3
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_TIM4_Init+0xa4>)
 8001844:	f004 f95e 	bl	8005b04 <HAL_TIM_Encoder_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800184e:	f000 faa1 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800185a:	463b      	mov	r3, r7
 800185c:	4619      	mov	r1, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_TIM4_Init+0xa4>)
 8001860:	f005 fa82 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800186a:	f000 fa93 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200004e4 	.word	0x200004e4
 800187c:	40000800 	.word	0x40000800

08001880 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_TIM6_Init+0x64>)
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <MX_TIM6_Init+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_TIM6_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_TIM6_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_TIM6_Init+0x64>)
 80018a4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80018a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_TIM6_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_TIM6_Init+0x64>)
 80018b2:	f003 ff0d 	bl	80056d0 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018bc:	f000 fa6a 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_TIM6_Init+0x64>)
 80018ce:	f005 fa4b 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018d8:	f000 fa5c 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000614 	.word	0x20000614
 80018e8:	40001000 	.word	0x40001000

080018ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2224      	movs	r2, #36	; 0x24
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f009 fd9a 	bl	800b434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <MX_TIM8_Init+0xac>)
 800190c:	4a23      	ldr	r2, [pc, #140]	; (800199c <MX_TIM8_Init+0xb0>)
 800190e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <MX_TIM8_Init+0xac>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <MX_TIM8_Init+0xac>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_TIM8_Init+0xac>)
 800191e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001922:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_TIM8_Init+0xac>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_TIM8_Init+0xac>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_TIM8_Init+0xac>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001936:	2301      	movs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800194e:	2301      	movs	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_TIM8_Init+0xac>)
 8001962:	f004 f8cf 	bl	8005b04 <HAL_TIM_Encoder_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800196c:	f000 fa12 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_TIM8_Init+0xac>)
 8001982:	f005 f9f1 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800198c:	f000 fa02 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3730      	adds	r7, #48	; 0x30
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000498 	.word	0x20000498
 800199c:	40013400 	.word	0x40013400

080019a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b09c      	sub	sp, #112	; 0x70
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2234      	movs	r2, #52	; 0x34
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f009 fd2a 	bl	800b434 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <MX_TIM15_Init+0x140>)
 80019e2:	4a40      	ldr	r2, [pc, #256]	; (8001ae4 <MX_TIM15_Init+0x144>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80019e6:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <MX_TIM15_Init+0x140>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <MX_TIM15_Init+0x140>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <MX_TIM15_Init+0x140>)
 80019f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <MX_TIM15_Init+0x140>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a0c:	4834      	ldr	r0, [pc, #208]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001a0e:	f003 fe5f 	bl	80056d0 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a18:	f000 f9bc 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a26:	4619      	mov	r1, r3
 8001a28:	482d      	ldr	r0, [pc, #180]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001a2a:	f004 fc33 	bl	8006294 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a34:	f000 f9ae 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a38:	4829      	ldr	r0, [pc, #164]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001a3a:	f003 ff0b 	bl	8005854 <HAL_TIM_PWM_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a44:	f000 f9a6 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a54:	4619      	mov	r1, r3
 8001a56:	4822      	ldr	r0, [pc, #136]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001a58:	f005 f986 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a62:	f000 f997 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	; 0x60
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a72:	2300      	movs	r3, #0
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001a8c:	f004 faee 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001a96:	f000 f97d 	bl	8001d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001ac2:	f005 f9d3 	bl	8006e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001acc:	f000 f962 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <MX_TIM15_Init+0x140>)
 8001ad2:	f000 fb59 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001ad6:	bf00      	nop
 8001ad8:	3770      	adds	r7, #112	; 0x70
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000530 	.word	0x20000530
 8001ae4:	40014000 	.word	0x40014000

08001ae8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b094      	sub	sp, #80	; 0x50
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b02:	463b      	mov	r3, r7
 8001b04:	2234      	movs	r2, #52	; 0x34
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f009 fc93 	bl	800b434 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b10:	4a31      	ldr	r2, [pc, #196]	; (8001bd8 <MX_TIM16_Init+0xf0>)
 8001b12:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b16:	2204      	movs	r2, #4
 8001b18:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b22:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001b26:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b2e:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b3a:	4826      	ldr	r0, [pc, #152]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b3c:	f003 fdc8 	bl	80056d0 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b46:	f000 f925 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b4a:	4822      	ldr	r0, [pc, #136]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b4c:	f003 fe82 	bl	8005854 <HAL_TIM_PWM_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b56:	f000 f91d 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5a:	2360      	movs	r3, #96	; 0x60
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b62:	2300      	movs	r3, #0
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b66:	2300      	movs	r3, #0
 8001b68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001b80:	f004 fa74 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001b8a:	f000 f903 	bl	8001d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001bb6:	f005 f959 	bl	8006e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001bc0:	f000 f8e8 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM16_Init+0xec>)
 8001bc6:	f000 fadf 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001bca:	bf00      	nop
 8001bcc:	3750      	adds	r7, #80	; 0x50
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200006f8 	.word	0x200006f8
 8001bd8:	40014400 	.word	0x40014400

08001bdc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	615a      	str	r2, [r3, #20]
 8001bf4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2234      	movs	r2, #52	; 0x34
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f009 fc19 	bl	800b434 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c04:	4a31      	ldr	r2, [pc, #196]	; (8001ccc <MX_TIM17_Init+0xf0>)
 8001c06:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c16:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001c1a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c22:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c2e:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c30:	f003 fd4e 	bl	80056d0 <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001c3a:	f000 f8ab 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001c3e:	4822      	ldr	r0, [pc, #136]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c40:	f003 fe08 	bl	8005854 <HAL_TIM_PWM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001c4a:	f000 f8a3 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4e:	2360      	movs	r3, #96	; 0x60
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001c74:	f004 f9fa 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001c7e:	f000 f889 	bl	8001d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001caa:	f005 f8df 	bl	8006e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001cb4:	f000 f86e 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM17_Init+0xec>)
 8001cba:	f000 fa65 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001cbe:	bf00      	nop
 8001cc0:	3750      	adds	r7, #80	; 0x50
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000057c 	.word	0x2000057c
 8001ccc:	40014800 	.word	0x40014800

08001cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	f240 410a 	movw	r1, #1034	; 0x40a
 8001d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d20:	f000 fec4 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2101      	movs	r1, #1
 8001d28:	4819      	ldr	r0, [pc, #100]	; (8001d90 <MX_GPIO_Init+0xc0>)
 8001d2a:	f000 febf 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8001d2e:	f240 430a 	movw	r3, #1034	; 0x40a
 8001d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f000 fd15 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d64:	f000 fd08 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_GPIO_Init+0xc0>)
 8001d80:	f000 fcfa 	bl	8002778 <HAL_GPIO_Init>

}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000400 	.word	0x48000400

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x8>
	...

08001da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_MspInit+0x44>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_MspInit+0x44>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6613      	str	r3, [r2, #96]	; 0x60
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_MspInit+0x44>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_MspInit+0x44>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_MspInit+0x44>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_MspInit+0x44>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dd6:	f002 fd7f 	bl	80048d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b09c      	sub	sp, #112	; 0x70
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	2244      	movs	r2, #68	; 0x44
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f009 fb13 	bl	800b434 <memset>
  if(hi2c->Instance==I2C3)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <HAL_I2C_MspInit+0xe4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d154      	bne.n	8001ec2 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e22:	f107 0318 	add.w	r3, r7, #24
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fa62 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e32:	f7ff ffaf 	bl	8001d94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e80:	4619      	mov	r1, r3
 8001e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e86:	f000 fc77 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8e:	2312      	movs	r3, #18
 8001e90:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <HAL_I2C_MspInit+0xec>)
 8001ea6:	f000 fc67 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_I2C_MspInit+0xe8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3770      	adds	r7, #112	; 0x70
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40007800 	.word	0x40007800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	48000400 	.word	0x48000400

08001ed8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_TIM_PWM_MspInit+0x38>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10b      	bne.n	8001f02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d10c      	bne.n	8001f44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f42:	e04e      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <HAL_TIM_Base_MspInit+0xd8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d114      	bne.n	8001f78 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2036      	movs	r0, #54	; 0x36
 8001f6c:	f000 fbcf 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f70:	2036      	movs	r0, #54	; 0x36
 8001f72:	f000 fbe6 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 8001f76:	e034      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <HAL_TIM_Base_MspInit+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10c      	bne.n	8001f9c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]
}
 8001f9a:	e022      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <HAL_TIM_Base_MspInit+0xe0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
}
 8001fbe:	e010      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_TIM_Base_MspInit+0xe4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_TIM_Base_MspInit+0xd4>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	bf00      	nop
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40001000 	.word	0x40001000
 8001ff4:	40014000 	.word	0x40014000
 8001ff8:	40014400 	.word	0x40014400
 8001ffc:	40014800 	.word	0x40014800

08002000 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	; 0x38
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a55      	ldr	r2, [pc, #340]	; (8002174 <HAL_TIM_Encoder_MspInit+0x174>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d129      	bne.n	8002076 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002022:	4b55      	ldr	r3, [pc, #340]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a54      	ldr	r2, [pc, #336]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
 800202e:	4b52      	ldr	r3, [pc, #328]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a4e      	ldr	r2, [pc, #312]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 8002052:	2350      	movs	r3, #80	; 0x50
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002062:	2302      	movs	r3, #2
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f000 fb82 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002074:	e079      	b.n	800216a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a40      	ldr	r2, [pc, #256]	; (800217c <HAL_TIM_Encoder_MspInit+0x17c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d128      	bne.n	80020d2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002080:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a4:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020c0:	2302      	movs	r3, #2
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	482d      	ldr	r0, [pc, #180]	; (8002180 <HAL_TIM_Encoder_MspInit+0x180>)
 80020cc:	f000 fb54 	bl	8002778 <HAL_GPIO_Init>
}
 80020d0:	e04b      	b.n	800216a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_TIM_Encoder_MspInit+0x184>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d146      	bne.n	800216a <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e0:	4a25      	ldr	r2, [pc, #148]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 80020e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e6:	6613      	str	r3, [r2, #96]	; 0x60
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 80020ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_TIM_Encoder_MspInit+0x178>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002136:	2302      	movs	r3, #2
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002144:	f000 fb18 	bl	8002778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800215a:	230a      	movs	r3, #10
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	4619      	mov	r1, r3
 8002164:	4806      	ldr	r0, [pc, #24]	; (8002180 <HAL_TIM_Encoder_MspInit+0x180>)
 8002166:	f000 fb07 	bl	8002778 <HAL_GPIO_Init>
}
 800216a:	bf00      	nop
 800216c:	3738      	adds	r7, #56	; 0x38
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40000400 	.word	0x40000400
 8002178:	40021000 	.word	0x40021000
 800217c:	40000800 	.word	0x40000800
 8002180:	48000400 	.word	0x48000400
 8002184:	40013400 	.word	0x40013400

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d14b      	bne.n	8002242 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b6:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	4a54      	ldr	r2, [pc, #336]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ce:	4b52      	ldr	r3, [pc, #328]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_VH1_M1_PWM_Pin;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ea:	2301      	movs	r3, #1
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_VH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f8:	f000 fabe 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800220e:	230a      	movs	r3, #10
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221c:	f000 faac 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 8002220:	2308      	movs	r3, #8
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002230:	2301      	movs	r3, #1
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4838      	ldr	r0, [pc, #224]	; (800231c <HAL_TIM_MspPostInit+0x194>)
 800223c:	f000 fa9c 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002240:	e066      	b.n	8002310 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a36      	ldr	r2, [pc, #216]	; (8002320 <HAL_TIM_MspPostInit+0x198>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d11d      	bne.n	8002288 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002264:	2304      	movs	r3, #4
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002274:	2309      	movs	r3, #9
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f000 fa79 	bl	8002778 <HAL_GPIO_Init>
}
 8002286:	e043      	b.n	8002310 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <HAL_TIM_MspPostInit+0x19c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11c      	bne.n	80022cc <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 80022aa:	2310      	movs	r3, #16
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80022ba:	2301      	movs	r3, #1
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	4815      	ldr	r0, [pc, #84]	; (800231c <HAL_TIM_MspPostInit+0x194>)
 80022c6:	f000 fa57 	bl	8002778 <HAL_GPIO_Init>
}
 80022ca:	e021      	b.n	8002310 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <HAL_TIM_MspPostInit+0x1a0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11c      	bne.n	8002310 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_TIM_MspPostInit+0x190>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80022fe:	2301      	movs	r3, #1
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230c:	f000 fa34 	bl	8002778 <HAL_GPIO_Init>
}
 8002310:	bf00      	nop
 8002312:	3730      	adds	r7, #48	; 0x30
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	48000400 	.word	0x48000400
 8002320:	40014000 	.word	0x40014000
 8002324:	40014400 	.word	0x40014400
 8002328:	40014800 	.word	0x40014800

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <NMI_Handler+0x4>

08002332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <MemManage_Handler+0x4>

0800233e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002342:	e7fe      	b.n	8002342 <BusFault_Handler+0x4>

08002344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <UsageFault_Handler+0x4>

0800234a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002378:	f000 f8ae 	bl	80024d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}

08002380 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <USB_HP_IRQHandler+0x10>)
 8002386:	f000 fdd6 	bl	8002f36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200013e8 	.word	0x200013e8

08002394 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <USB_LP_IRQHandler+0x10>)
 800239a:	f000 fdcc 	bl	8002f36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200013e8 	.word	0x200013e8

080023a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <TIM6_DAC_IRQHandler+0x10>)
 80023ae:	f003 fcdd 	bl	8005d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000614 	.word	0x20000614

080023bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <SystemInit+0x20>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <SystemInit+0x20>)
 80023c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e4:	480d      	ldr	r0, [pc, #52]	; (800241c <LoopForever+0x6>)
  ldr r1, =_edata
 80023e6:	490e      	ldr	r1, [pc, #56]	; (8002420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <LoopForever+0xe>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023fc:	4c0b      	ldr	r4, [pc, #44]	; (800242c <LoopForever+0x16>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240a:	f7ff ffd7 	bl	80023bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240e:	f008 ffdf 	bl	800b3d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002412:	f7fe fe93 	bl	800113c <main>

08002416 <LoopForever>:

LoopForever:
    b LoopForever
 8002416:	e7fe      	b.n	8002416 <LoopForever>
  ldr   r0, =_estack
 8002418:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002420:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002424:	0800b4bc 	.word	0x0800b4bc
  ldr r2, =_sbss
 8002428:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 800242c:	200016dc 	.word	0x200016dc

08002430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC1_2_IRQHandler>

08002432 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f95b 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002442:	200f      	movs	r0, #15
 8002444:	f000 f80e 	bl	8002464 <HAL_InitTick>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	e001      	b.n	8002458 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002454:	f7ff fca4 	bl	8001da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002458:	79fb      	ldrb	r3, [r7, #7]

}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_InitTick+0x68>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d022      	beq.n	80024be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_InitTick+0x6c>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_InitTick+0x68>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002484:	fbb1 f3f3 	udiv	r3, r1, r3
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f966 	bl	800275e <HAL_SYSTICK_Config>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10f      	bne.n	80024b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b0f      	cmp	r3, #15
 800249c:	d809      	bhi.n	80024b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249e:	2200      	movs	r2, #0
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a6:	f000 f932 	bl	800270e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_InitTick+0x70>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e007      	b.n	80024c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e004      	b.n	80024c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e001      	b.n	80024c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000024 	.word	0x20000024
 80024d0:	2000001c 	.word	0x2000001c
 80024d4:	20000020 	.word	0x20000020

080024d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_IncTick+0x1c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_IncTick+0x20>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <HAL_IncTick+0x1c>)
 80024e8:	6013      	str	r3, [r2, #0]
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	20000744 	.word	0x20000744
 80024f8:	20000024 	.word	0x20000024

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000744 	.word	0x20000744

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800252c:	d004      	beq.n	8002538 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_Delay+0x40>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002538:	bf00      	nop
 800253a:	f7ff ffdf 	bl	80024fc <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	429a      	cmp	r2, r3
 8002548:	d8f7      	bhi.n	800253a <HAL_Delay+0x26>
  {
  }
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000024 	.word	0x20000024

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <__NVIC_EnableIRQ+0x38>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	; (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	; (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d8:	f7ff ff8e 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff29 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff40 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff90 	bl	800264c <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5f 	bl	80025f8 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff33 	bl	80025bc <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa4 	bl	80026b4 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002786:	e15a      	b.n	8002a3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	4013      	ands	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 814c 	beq.w	8002a38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d005      	beq.n	80027b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d130      	bne.n	800281a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ee:	2201      	movs	r2, #1
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 0201 	and.w	r2, r3, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b03      	cmp	r3, #3
 8002824:	d017      	beq.n	8002856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d123      	bne.n	80028aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	08da      	lsrs	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3208      	adds	r2, #8
 800286a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	6939      	ldr	r1, [r7, #16]
 80028a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0203 	and.w	r2, r3, #3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80a6 	beq.w	8002a38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ec:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <HAL_GPIO_Init+0x2e4>)
 80028ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f0:	4a5a      	ldr	r2, [pc, #360]	; (8002a5c <HAL_GPIO_Init+0x2e4>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6613      	str	r3, [r2, #96]	; 0x60
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_GPIO_Init+0x2e4>)
 80028fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002904:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	220f      	movs	r2, #15
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800292e:	d01f      	beq.n	8002970 <HAL_GPIO_Init+0x1f8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a4c      	ldr	r2, [pc, #304]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d019      	beq.n	800296c <HAL_GPIO_Init+0x1f4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4b      	ldr	r2, [pc, #300]	; (8002a68 <HAL_GPIO_Init+0x2f0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_GPIO_Init+0x1f0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4a      	ldr	r2, [pc, #296]	; (8002a6c <HAL_GPIO_Init+0x2f4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <HAL_GPIO_Init+0x1ec>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a49      	ldr	r2, [pc, #292]	; (8002a70 <HAL_GPIO_Init+0x2f8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x1e8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <HAL_GPIO_Init+0x2fc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_GPIO_Init+0x1e4>
 8002958:	2305      	movs	r3, #5
 800295a:	e00a      	b.n	8002972 <HAL_GPIO_Init+0x1fa>
 800295c:	2306      	movs	r3, #6
 800295e:	e008      	b.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002960:	2304      	movs	r3, #4
 8002962:	e006      	b.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002964:	2303      	movs	r3, #3
 8002966:	e004      	b.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002968:	2302      	movs	r3, #2
 800296a:	e002      	b.n	8002972 <HAL_GPIO_Init+0x1fa>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002970:	2300      	movs	r3, #0
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	f002 0203 	and.w	r2, r2, #3
 8002978:	0092      	lsls	r2, r2, #2
 800297a:	4093      	lsls	r3, r2
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002982:	4937      	ldr	r1, [pc, #220]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002990:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b4:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029ba:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029de:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a32:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f ae9d 	bne.w	8002788 <HAL_GPIO_Init+0x10>
  }
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010000 	.word	0x40010000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	48000800 	.word	0x48000800
 8002a6c:	48000c00 	.word	0x48000c00
 8002a70:	48001000 	.word	0x48001000
 8002a74:	48001400 	.word	0x48001400
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e001      	b.n	8002a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e081      	b.n	8002bf2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff f970 	bl	8001de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	e006      	b.n	8002b64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d104      	bne.n	8002b76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d138      	bne.n	8002c82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e032      	b.n	8002c84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2224      	movs	r2, #36	; 0x24
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d139      	bne.n	8002d1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e033      	b.n	8002d1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ce2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b08b      	sub	sp, #44	; 0x2c
 8002d2c:	af06      	add	r7, sp, #24
 8002d2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0d7      	b.n	8002eea <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f008 f830 	bl	800adb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2203      	movs	r2, #3
 8002d58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f004 f980 	bl	8007066 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e04c      	b.n	8002e06 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	b298      	uxth	r0, r3
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	3336      	adds	r3, #54	; 0x36
 8002daa:	4602      	mov	r2, r0
 8002dac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3338      	adds	r3, #56	; 0x38
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	333c      	adds	r3, #60	; 0x3c
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3340      	adds	r3, #64	; 0x40
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	3301      	adds	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3ad      	bcc.n	8002d6c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e044      	b.n	8002ea0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3b5      	bcc.n	8002e16 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	687e      	ldr	r6, [r7, #4]
 8002eb2:	466d      	mov	r5, sp
 8002eb4:	f106 0410 	add.w	r4, r6, #16
 8002eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	602b      	str	r3, [r5, #0]
 8002ec0:	1d33      	adds	r3, r6, #4
 8002ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f004 f8e9 	bl	800709c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f001 fc29 	bl	800473a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_Start+0x16>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e012      	b.n	8002f2e <HAL_PCD_Start+0x3c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 f88f 	bl	8007038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f006 f844 	bl	8008fac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f006 f849 	bl	8008fda <USB_ReadInterrupts>
 8002f48:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fb26 	bl	80035a6 <PCD_EP_ISR_Handler>

    return;
 8002f5a:	e110      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d013      	beq.n	8002f8e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f007 ffb1 	bl	800aee6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f84:	2100      	movs	r1, #0
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8fc 	bl	8003184 <HAL_PCD_SetAddress>

    return;
 8002f8c:	e0f7      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00c      	beq.n	8002fb2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002faa:	b292      	uxth	r2, r2
 8002fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fb0:	e0e5      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fce:	b292      	uxth	r2, r2
 8002fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fd4:	e0d3      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d034      	beq.n	800304a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0204 	bic.w	r2, r2, #4
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0208 	bic.w	r2, r2, #8
 800300a:	b292      	uxth	r2, r2
 800300c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003022:	2100      	movs	r1, #0
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f008 f953 	bl	800b2d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f007 ff94 	bl	800af58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003042:	b292      	uxth	r2, r2
 8003044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003048:	e099      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d027      	beq.n	80030a4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	b292      	uxth	r2, r2
 8003068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307e:	b292      	uxth	r2, r2
 8003080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800308c:	b29a      	uxth	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0204 	orr.w	r2, r2, #4
 8003096:	b292      	uxth	r2, r2
 8003098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f007 ff41 	bl	800af24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030a2:	e06c      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d040      	beq.n	8003130 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c0:	b292      	uxth	r2, r2
 80030c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d12b      	bne.n	8003128 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0204 	orr.w	r2, r2, #4
 80030e2:	b292      	uxth	r2, r2
 80030e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	b292      	uxth	r2, r2
 80030fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003110:	b29b      	uxth	r3, r3
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800311e:	2101      	movs	r1, #1
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f008 f8d5 	bl	800b2d0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003126:	e02a      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f007 fefb 	bl	800af24 <HAL_PCD_SuspendCallback>
    return;
 800312e:	e026      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00f      	beq.n	800315a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800314c:	b292      	uxth	r2, r2
 800314e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f007 feb9 	bl	800aeca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003158:	e011      	b.n	800317e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800316c:	b29a      	uxth	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003176:	b292      	uxth	r2, r2
 8003178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800317c:	bf00      	nop
  }
}
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_PCD_SetAddress+0x1a>
 800319a:	2302      	movs	r3, #2
 800319c:	e013      	b.n	80031c6 <HAL_PCD_SetAddress+0x42>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f005 fee4 	bl	8008f84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	4608      	mov	r0, r1
 80031d8:	4611      	mov	r1, r2
 80031da:	461a      	mov	r2, r3
 80031dc:	4603      	mov	r3, r0
 80031de:	70fb      	strb	r3, [r7, #3]
 80031e0:	460b      	mov	r3, r1
 80031e2:	803b      	strh	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da0e      	bge.n	8003212 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	705a      	strb	r2, [r3, #1]
 8003210:	e00e      	b.n	8003230 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	f003 0207 	and.w	r2, r3, #7
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800323c:	883a      	ldrh	r2, [r7, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	78ba      	ldrb	r2, [r7, #2]
 8003246:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800325a:	78bb      	ldrb	r3, [r7, #2]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d102      	bne.n	8003266 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_PCD_EP_Open+0xa6>
 8003270:	2302      	movs	r3, #2
 8003272:	e00e      	b.n	8003292 <HAL_PCD_EP_Open+0xc4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	4618      	mov	r0, r3
 8003284:	f003 ff2c 	bl	80070e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003290:	7afb      	ldrb	r3, [r7, #11]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	da0e      	bge.n	80032cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
 80032ca:	e00e      	b.n	80032ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_EP_Close+0x6a>
 8003300:	2302      	movs	r3, #2
 8003302:	e00e      	b.n	8003322 <HAL_PCD_EP_Close+0x88>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 fa78 	bl	8007808 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	460b      	mov	r3, r1
 8003338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	f003 0207 	and.w	r2, r3, #7
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2200      	movs	r2, #0
 8003368:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	b2da      	uxtb	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6979      	ldr	r1, [r7, #20]
 8003386:	4618      	mov	r0, r3
 8003388:	f004 fc2b 	bl	8007be2 <USB_EPStartXfer>
 800338c:	e005      	b.n	800339a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6979      	ldr	r1, [r7, #20]
 8003394:	4618      	mov	r0, r3
 8003396:	f004 fc24 	bl	8007be2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 0207 	and.w	r2, r3, #7
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	460b      	mov	r3, r1
 80033e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2201      	movs	r2, #1
 800341e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	b2da      	uxtb	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800342c:	7afb      	ldrb	r3, [r7, #11]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6979      	ldr	r1, [r7, #20]
 800343c:	4618      	mov	r0, r3
 800343e:	f004 fbd0 	bl	8007be2 <USB_EPStartXfer>
 8003442:	e005      	b.n	8003450 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6979      	ldr	r1, [r7, #20]
 800344a:	4618      	mov	r0, r3
 800344c:	f004 fbc9 	bl	8007be2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 0207 	and.w	r2, r3, #7
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d901      	bls.n	8003478 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e03e      	b.n	80034f6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347c:	2b00      	cmp	r3, #0
 800347e:	da0e      	bge.n	800349e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	705a      	strb	r2, [r3, #1]
 800349c:	e00c      	b.n	80034b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_PCD_EP_SetStall+0x7e>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e00e      	b.n	80034f6 <HAL_PCD_EP_SetStall+0x9c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68f9      	ldr	r1, [r7, #12]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f005 fc4d 	bl	8008d86 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	460b      	mov	r3, r1
 8003508:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d901      	bls.n	800351c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e040      	b.n	800359e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800351c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da0e      	bge.n	8003542 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	705a      	strb	r2, [r3, #1]
 8003540:	e00e      	b.n	8003560 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 0207 	and.w	r2, r3, #7
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_PCD_EP_ClrStall+0x82>
 800357c:	2302      	movs	r3, #2
 800357e:	e00e      	b.n	800359e <HAL_PCD_EP_ClrStall+0xa0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	4618      	mov	r0, r3
 8003590:	f005 fc4a 	bl	8008e28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b096      	sub	sp, #88	; 0x58
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035ae:	e39c      	b.n	8003cea <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80035ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 815e 	bne.w	8003890 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d150      	bne.n	8003682 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f0:	81fb      	strh	r3, [r7, #14]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003600:	b29b      	uxth	r3, r3
 8003602:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3328      	adds	r3, #40	; 0x28
 8003608:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003612:	b29b      	uxth	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	4413      	add	r3, r2
 8003624:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	441a      	add	r2, r3
 800363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003640:	2100      	movs	r1, #0
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f007 fc27 	bl	800ae96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 834a 	beq.w	8003cea <PCD_EP_ISR_Handler+0x744>
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 8345 	bne.w	8003cea <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800366c:	b2da      	uxtb	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b292      	uxth	r2, r2
 8003674:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003680:	e333      	b.n	8003cea <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003688:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003694:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	2b00      	cmp	r3, #0
 800369e:	d032      	beq.n	8003706 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f005 fccf 	bl	800907e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036ec:	4013      	ands	r3, r2
 80036ee:	823b      	strh	r3, [r7, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	8a3a      	ldrh	r2, [r7, #16]
 80036f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036fa:	b292      	uxth	r2, r2
 80036fc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f007 fb9c 	bl	800ae3c <HAL_PCD_SetupStageCallback>
 8003704:	e2f1      	b.n	8003cea <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003706:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800370a:	2b00      	cmp	r3, #0
 800370c:	f280 82ed 	bge.w	8003cea <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29a      	uxth	r2, r3
 8003718:	f640 738f 	movw	r3, #3983	; 0xf8f
 800371c:	4013      	ands	r3, r2
 800371e:	83fb      	strh	r3, [r7, #30]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	8bfa      	ldrh	r2, [r7, #30]
 8003726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800372a:	b292      	uxth	r2, r2
 800372c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003736:	b29b      	uxth	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	4413      	add	r3, r2
 8003748:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003754:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d019      	beq.n	8003792 <PCD_EP_ISR_Handler+0x1ec>
 800375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376c:	6959      	ldr	r1, [r3, #20]
 800376e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003770:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003776:	b29b      	uxth	r3, r3
 8003778:	f005 fc81 	bl	800907e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	441a      	add	r2, r3
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800378a:	2100      	movs	r1, #0
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f007 fb67 	bl	800ae60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 82a3 	bne.w	8003cea <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4413      	add	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b3e      	cmp	r3, #62	; 0x3e
 80037ca:	d918      	bls.n	80037fe <PCD_EP_ISR_Handler+0x258>
 80037cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	647b      	str	r3, [r7, #68]	; 0x44
 80037d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <PCD_EP_ISR_Handler+0x240>
 80037e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e2:	3b01      	subs	r3, #1
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
 80037e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	e029      	b.n	8003852 <PCD_EP_ISR_Handler+0x2ac>
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d112      	bne.n	800382c <PCD_EP_ISR_Handler+0x286>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003810:	b29a      	uxth	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003824:	b29a      	uxth	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	e012      	b.n	8003852 <PCD_EP_ISR_Handler+0x2ac>
 800382c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
 8003834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <PCD_EP_ISR_Handler+0x2a0>
 8003840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003842:	3301      	adds	r3, #1
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
 8003846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003848:	b29b      	uxth	r3, r3
 800384a:	029b      	lsls	r3, r3, #10
 800384c:	b29a      	uxth	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	827b      	strh	r3, [r7, #18]
 8003864:	8a7b      	ldrh	r3, [r7, #18]
 8003866:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800386a:	827b      	strh	r3, [r7, #18]
 800386c:	8a7b      	ldrh	r3, [r7, #18]
 800386e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003872:	827b      	strh	r3, [r7, #18]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	8a7b      	ldrh	r3, [r7, #18]
 800387a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800387e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388a:	b29b      	uxth	r3, r3
 800388c:	8013      	strh	r3, [r2, #0]
 800388e:	e22c      	b.n	8003cea <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038a4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f280 80f6 	bge.w	8003a9a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038c4:	4013      	ands	r3, r2
 80038c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80038dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038e0:	b292      	uxth	r2, r2
 80038e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038e4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	7b1b      	ldrb	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d123      	bne.n	800394a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	4413      	add	r3, r2
 800391c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003926:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800392a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 808e 	beq.w	8003a50 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393a:	6959      	ldr	r1, [r3, #20]
 800393c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393e:	88da      	ldrh	r2, [r3, #6]
 8003940:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003944:	f005 fb9b 	bl	800907e <USB_ReadPMA>
 8003948:	e082      	b.n	8003a50 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800394a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394c:	78db      	ldrb	r3, [r3, #3]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d10a      	bne.n	8003968 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003952:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003956:	461a      	mov	r2, r3
 8003958:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9d3 	bl	8003d06 <HAL_PCD_EP_DB_Receive>
 8003960:	4603      	mov	r3, r0
 8003962:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003966:	e073      	b.n	8003a50 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800399c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d022      	beq.n	8003a0c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80039ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02c      	beq.n	8003a50 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a00:	891a      	ldrh	r2, [r3, #8]
 8003a02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a06:	f005 fb3a 	bl	800907e <USB_ReadPMA>
 8003a0a:	e021      	b.n	8003a50 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a30:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a42:	6959      	ldr	r1, [r3, #20]
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	895a      	ldrh	r2, [r3, #10]
 8003a48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a4c:	f005 fb17 	bl	800907e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a58:	441a      	add	r2, r3
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a66:	441a      	add	r2, r3
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <PCD_EP_ISR_Handler+0x4da>
 8003a74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d206      	bcs.n	8003a8e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f007 f9ea 	bl	800ae60 <HAL_PCD_DataOutStageCallback>
 8003a8c:	e005      	b.n	8003a9a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a94:	4618      	mov	r0, r3
 8003a96:	f004 f8a4 	bl	8007be2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a9a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8121 	beq.w	8003cea <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003aa8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	441a      	add	r2, r3
 8003ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afa:	78db      	ldrb	r3, [r3, #3]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	f000 80a2 	beq.w	8003c46 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0a:	7b1b      	ldrb	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8093 	beq.w	8003c38 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b12:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d046      	beq.n	8003bac <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d126      	bne.n	8003b74 <PCD_EP_ISR_Handler+0x5ce>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	4413      	add	r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	00da      	lsls	r2, r3, #3
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	4413      	add	r3, r2
 8003b48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	e061      	b.n	8003c38 <PCD_EP_ISR_Handler+0x692>
 8003b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d15d      	bne.n	8003c38 <PCD_EP_ISR_Handler+0x692>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	4413      	add	r3, r2
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	00da      	lsls	r2, r3, #3
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	e045      	b.n	8003c38 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d126      	bne.n	8003c08 <PCD_EP_ISR_Handler+0x662>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	4413      	add	r3, r2
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	00da      	lsls	r2, r3, #3
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bda:	4413      	add	r3, r2
 8003bdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003be0:	633b      	str	r3, [r7, #48]	; 0x30
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	e017      	b.n	8003c38 <PCD_EP_ISR_Handler+0x692>
 8003c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d113      	bne.n	8003c38 <PCD_EP_ISR_Handler+0x692>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1e:	4413      	add	r3, r2
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	00da      	lsls	r2, r3, #3
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	2200      	movs	r2, #0
 8003c36:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f007 f929 	bl	800ae96 <HAL_PCD_DataInStageCallback>
 8003c44:	e051      	b.n	8003cea <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d144      	bne.n	8003cdc <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d907      	bls.n	8003c96 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c92:	619a      	str	r2, [r3, #24]
 8003c94:	e002      	b.n	8003c9c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f007 f8f3 	bl	800ae96 <HAL_PCD_DataInStageCallback>
 8003cb0:	e01b      	b.n	8003cea <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cba:	441a      	add	r2, r3
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cc8:	441a      	add	r2, r3
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f003 ff84 	bl	8007be2 <USB_EPStartXfer>
 8003cda:	e006      	b.n	8003cea <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003cdc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f917 	bl	8003f18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f6ff ac5a 	blt.w	80035b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3758      	adds	r7, #88	; 0x58
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b088      	sub	sp, #32
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d07c      	beq.n	8003e18 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	8b7b      	ldrh	r3, [r7, #26]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d306      	bcc.n	8003d5c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	8b7b      	ldrh	r3, [r7, #26]
 8003d54:	1ad2      	subs	r2, r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	619a      	str	r2, [r3, #24]
 8003d5a:	e002      	b.n	8003d62 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d123      	bne.n	8003db2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	833b      	strh	r3, [r7, #24]
 8003d86:	8b3b      	ldrh	r3, [r7, #24]
 8003d88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d8c:	833b      	strh	r3, [r7, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	8b3b      	ldrh	r3, [r7, #24]
 8003d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01f      	beq.n	8003dfc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	82fb      	strh	r3, [r7, #22]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	441a      	add	r2, r3
 8003de6:	8afb      	ldrh	r3, [r7, #22]
 8003de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003dfc:	8b7b      	ldrh	r3, [r7, #26]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8085 	beq.w	8003f0e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6959      	ldr	r1, [r3, #20]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	891a      	ldrh	r2, [r3, #8]
 8003e10:	8b7b      	ldrh	r3, [r7, #26]
 8003e12:	f005 f934 	bl	800907e <USB_ReadPMA>
 8003e16:	e07a      	b.n	8003f0e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	8b7b      	ldrh	r3, [r7, #26]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d306      	bcc.n	8003e56 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	8b7b      	ldrh	r3, [r7, #26]
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	619a      	str	r2, [r3, #24]
 8003e54:	e002      	b.n	8003e5c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d123      	bne.n	8003eac <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	83fb      	strh	r3, [r7, #30]
 8003e80:	8bfb      	ldrh	r3, [r7, #30]
 8003e82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e86:	83fb      	strh	r3, [r7, #30]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	8bfb      	ldrh	r3, [r7, #30]
 8003e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11f      	bne.n	8003ef6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed0:	83bb      	strh	r3, [r7, #28]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	441a      	add	r2, r3
 8003ee0:	8bbb      	ldrh	r3, [r7, #28]
 8003ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ef6:	8b7b      	ldrh	r3, [r7, #26]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6959      	ldr	r1, [r3, #20]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	895a      	ldrh	r2, [r3, #10]
 8003f08:	8b7b      	ldrh	r3, [r7, #26]
 8003f0a:	f005 f8b8 	bl	800907e <USB_ReadPMA>
    }
  }

  return count;
 8003f0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b0a2      	sub	sp, #136	; 0x88
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 81c5 	beq.w	80042bc <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d907      	bls.n	8003f76 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	619a      	str	r2, [r3, #24]
 8003f74:	e002      	b.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f040 80b9 	bne.w	80040f8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d126      	bne.n	8003fdc <HAL_PCD_EP_DB_Transmit+0xc4>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	4413      	add	r3, r2
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	00da      	lsls	r2, r3, #3
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	4413      	add	r3, r2
 8003fb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e01a      	b.n	8004012 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d116      	bne.n	8004012 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	4413      	add	r3, r2
 8003ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	00da      	lsls	r2, r3, #3
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	4413      	add	r3, r2
 8004006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	2200      	movs	r2, #0
 8004010:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	623b      	str	r3, [r7, #32]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d126      	bne.n	800406e <HAL_PCD_EP_DB_Transmit+0x156>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402e:	b29b      	uxth	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	00da      	lsls	r2, r3, #3
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	4413      	add	r3, r2
 8004042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004052:	b29a      	uxth	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004066:	b29a      	uxth	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e017      	b.n	800409e <HAL_PCD_EP_DB_Transmit+0x186>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d113      	bne.n	800409e <HAL_PCD_EP_DB_Transmit+0x186>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407e:	b29b      	uxth	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	4413      	add	r3, r2
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	00da      	lsls	r2, r3, #3
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	4413      	add	r3, r2
 8004092:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2200      	movs	r2, #0
 800409c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f006 fef6 	bl	800ae96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 82d2 	beq.w	800465a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	827b      	strh	r3, [r7, #18]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	8a7b      	ldrh	r3, [r7, #18]
 80040e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8013      	strh	r3, [r2, #0]
 80040f6:	e2b0      	b.n	800465a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d021      	beq.n	8004146 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800413e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004142:	b29b      	uxth	r3, r3
 8004144:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 8284 	bne.w	800465a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800415a:	441a      	add	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004168:	441a      	add	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	429a      	cmp	r2, r3
 8004178:	d309      	bcc.n	800418e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004186:	1ad2      	subs	r2, r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	621a      	str	r2, [r3, #32]
 800418c:	e015      	b.n	80041ba <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d107      	bne.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004196:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800419a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041a4:	e009      	b.n	80041ba <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d155      	bne.n	800426e <HAL_PCD_EP_DB_Transmit+0x356>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	4413      	add	r3, r2
 80041d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	00da      	lsls	r2, r3, #3
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	4413      	add	r3, r2
 80041e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ec:	2b3e      	cmp	r3, #62	; 0x3e
 80041ee:	d916      	bls.n	800421e <HAL_PCD_EP_DB_Transmit+0x306>
 80041f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004202:	3b01      	subs	r3, #1
 8004204:	64bb      	str	r3, [r7, #72]	; 0x48
 8004206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004208:	b29b      	uxth	r3, r3
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	b29b      	uxth	r3, r3
 800420e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004216:	b29a      	uxth	r2, r3
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	e043      	b.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800421e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004220:	2b00      	cmp	r3, #0
 8004222:	d112      	bne.n	800424a <HAL_PCD_EP_DB_Transmit+0x332>
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800422e:	b29a      	uxth	r2, r3
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800423e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004242:	b29a      	uxth	r2, r3
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	e02d      	b.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_PCD_EP_DB_Transmit+0x348>
 800425a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425c:	3301      	adds	r3, #1
 800425e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004262:	b29b      	uxth	r3, r3
 8004264:	029b      	lsls	r3, r3, #10
 8004266:	b29a      	uxth	r2, r3
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	e01b      	b.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d117      	bne.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	643b      	str	r3, [r7, #64]	; 0x40
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428a:	4413      	add	r3, r2
 800428c:	643b      	str	r3, [r7, #64]	; 0x40
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	00da      	lsls	r2, r3, #3
 8004294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004296:	4413      	add	r3, r2
 8004298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6959      	ldr	r1, [r3, #20]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	891a      	ldrh	r2, [r3, #8]
 80042b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f004 fea0 	bl	8008ffa <USB_WritePMA>
 80042ba:	e1ce      	b.n	800465a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	4413      	add	r3, r2
 80042d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d307      	bcc.n	8004300 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042f8:	1ad2      	subs	r2, r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	619a      	str	r2, [r3, #24]
 80042fe:	e002      	b.n	8004306 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2200      	movs	r2, #0
 8004304:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 80c4 	bne.w	8004498 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d126      	bne.n	8004366 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	66bb      	str	r3, [r7, #104]	; 0x68
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800432c:	4413      	add	r3, r2
 800432e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	00da      	lsls	r2, r3, #3
 8004336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004338:	4413      	add	r3, r2
 800433a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800433e:	667b      	str	r3, [r7, #100]	; 0x64
 8004340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800434a:	b29a      	uxth	r2, r3
 800434c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800435a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800435e:	b29a      	uxth	r2, r3
 8004360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	e01a      	b.n	800439c <HAL_PCD_EP_DB_Transmit+0x484>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	785b      	ldrb	r3, [r3, #1]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d116      	bne.n	800439c <HAL_PCD_EP_DB_Transmit+0x484>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	673b      	str	r3, [r7, #112]	; 0x70
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004382:	4413      	add	r3, r2
 8004384:	673b      	str	r3, [r7, #112]	; 0x70
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	00da      	lsls	r2, r3, #3
 800438c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800438e:	4413      	add	r3, r2
 8004390:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	2200      	movs	r2, #0
 800439a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d12f      	bne.n	800440a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043c2:	4413      	add	r3, r2
 80043c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00da      	lsls	r2, r3, #3
 80043ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043d2:	4413      	add	r3, r2
 80043d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004400:	b29a      	uxth	r2, r3
 8004402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	e017      	b.n	800443a <HAL_PCD_EP_DB_Transmit+0x522>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d113      	bne.n	800443a <HAL_PCD_EP_DB_Transmit+0x522>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004420:	4413      	add	r3, r2
 8004422:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	00da      	lsls	r2, r3, #3
 800442a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800442c:	4413      	add	r3, r2
 800442e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004432:	67bb      	str	r3, [r7, #120]	; 0x78
 8004434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004436:	2200      	movs	r2, #0
 8004438:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	4619      	mov	r1, r3
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f006 fd28 	bl	800ae96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444c:	2b00      	cmp	r3, #0
 800444e:	f040 8104 	bne.w	800465a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800448a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800448e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004492:	b29b      	uxth	r3, r3
 8004494:	8013      	strh	r3, [r2, #0]
 8004496:	e0e0      	b.n	800465a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d121      	bne.n	80044e6 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	441a      	add	r2, r3
 80044ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f040 80b4 	bne.w	800465a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044fa:	441a      	add	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004508:	441a      	add	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d309      	bcc.n	800452e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004526:	1ad2      	subs	r2, r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	621a      	str	r2, [r3, #32]
 800452c:	e015      	b.n	800455a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004544:	e009      	b.n	800455a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	663b      	str	r3, [r7, #96]	; 0x60
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d155      	bne.n	8004614 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	65bb      	str	r3, [r7, #88]	; 0x58
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457c:	4413      	add	r3, r2
 800457e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	00da      	lsls	r2, r3, #3
 8004586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004588:	4413      	add	r3, r2
 800458a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800458e:	657b      	str	r3, [r7, #84]	; 0x54
 8004590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004592:	2b3e      	cmp	r3, #62	; 0x3e
 8004594:	d916      	bls.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	677b      	str	r3, [r7, #116]	; 0x74
 800459c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <HAL_PCD_EP_DB_Transmit+0x694>
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	3b01      	subs	r3, #1
 80045aa:	677b      	str	r3, [r7, #116]	; 0x74
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	029b      	lsls	r3, r3, #10
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	e040      	b.n	8004646 <HAL_PCD_EP_DB_Transmit+0x72e>
 80045c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d112      	bne.n	80045f0 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80045ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	e02a      	b.n	8004646 <HAL_PCD_EP_DB_Transmit+0x72e>
 80045f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
 80045f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004602:	3301      	adds	r3, #1
 8004604:	677b      	str	r3, [r7, #116]	; 0x74
 8004606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004608:	b29b      	uxth	r3, r3
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	b29a      	uxth	r2, r3
 800460e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	e018      	b.n	8004646 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d114      	bne.n	8004646 <HAL_PCD_EP_DB_Transmit+0x72e>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462a:	4413      	add	r3, r2
 800462c:	663b      	str	r3, [r7, #96]	; 0x60
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	00da      	lsls	r2, r3, #3
 8004634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004636:	4413      	add	r3, r2
 8004638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800463c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800463e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004640:	b29a      	uxth	r2, r3
 8004642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004644:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6959      	ldr	r1, [r3, #20]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	895a      	ldrh	r2, [r3, #10]
 8004652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004654:	b29b      	uxth	r3, r3
 8004656:	f004 fcd0 	bl	8008ffa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004674:	823b      	strh	r3, [r7, #16]
 8004676:	8a3b      	ldrh	r3, [r7, #16]
 8004678:	f083 0310 	eor.w	r3, r3, #16
 800467c:	823b      	strh	r3, [r7, #16]
 800467e:	8a3b      	ldrh	r3, [r7, #16]
 8004680:	f083 0320 	eor.w	r3, r3, #32
 8004684:	823b      	strh	r3, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	8a3b      	ldrh	r3, [r7, #16]
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3788      	adds	r7, #136	; 0x88
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	817b      	strh	r3, [r7, #10]
 80046c2:	4613      	mov	r3, r2
 80046c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	e009      	b.n	80046fe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046ea:	897a      	ldrh	r2, [r7, #10]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80046fe:	893b      	ldrh	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2200      	movs	r2, #0
 8004708:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	b29a      	uxth	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	80da      	strh	r2, [r3, #6]
 8004712:	e00b      	b.n	800472c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2201      	movs	r2, #1
 8004718:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	b29a      	uxth	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	b29a      	uxth	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800475e:	b29b      	uxth	r3, r3
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004772:	b29b      	uxth	r3, r3
 8004774:	f043 0302 	orr.w	r3, r3, #2
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d141      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800479e:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047aa:	d131      	bne.n	8004810 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047ac:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b2:	4a46      	ldr	r2, [pc, #280]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047bc:	4b43      	ldr	r3, [pc, #268]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047c4:	4a41      	ldr	r2, [pc, #260]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047cc:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2232      	movs	r2, #50	; 0x32
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	4a3f      	ldr	r2, [pc, #252]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	0c9b      	lsrs	r3, r3, #18
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e2:	e002      	b.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ea:	4b38      	ldr	r3, [pc, #224]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f6:	d102      	bne.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f2      	bne.n	80047e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047fe:	4b33      	ldr	r3, [pc, #204]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480a:	d158      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e057      	b.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004810:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004816:	4a2d      	ldr	r2, [pc, #180]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800481c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004820:	e04d      	b.n	80048be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004828:	d141      	bne.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800482a:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d131      	bne.n	800489c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004838:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800483e:	4a23      	ldr	r2, [pc, #140]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004844:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004848:	4b20      	ldr	r3, [pc, #128]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004850:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004856:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004858:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2232      	movs	r2, #50	; 0x32
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	0c9b      	lsrs	r3, r3, #18
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800486e:	e002      	b.n	8004876 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3b01      	subs	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004882:	d102      	bne.n	800488a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f2      	bne.n	8004870 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004896:	d112      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e011      	b.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048ac:	e007      	b.n	80048be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048b6:	4a05      	ldr	r2, [pc, #20]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40007000 	.word	0x40007000
 80048d0:	2000001c 	.word	0x2000001c
 80048d4:	431bde83 	.word	0x431bde83

080048d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048e6:	6093      	str	r3, [r2, #8]
}
 80048e8:	bf00      	nop
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40007000 	.word	0x40007000

080048f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e308      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d075      	beq.n	8004a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004916:	4ba3      	ldr	r3, [pc, #652]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004920:	4ba0      	ldr	r3, [pc, #640]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b0c      	cmp	r3, #12
 800492e:	d102      	bne.n	8004936 <HAL_RCC_OscConfig+0x3e>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2b03      	cmp	r3, #3
 8004934:	d002      	beq.n	800493c <HAL_RCC_OscConfig+0x44>
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d10b      	bne.n	8004954 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493c:	4b99      	ldr	r3, [pc, #612]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d05b      	beq.n	8004a00 <HAL_RCC_OscConfig+0x108>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d157      	bne.n	8004a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e2e3      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d106      	bne.n	800496c <HAL_RCC_OscConfig+0x74>
 800495e:	4b91      	ldr	r3, [pc, #580]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a90      	ldr	r2, [pc, #576]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e01d      	b.n	80049a8 <HAL_RCC_OscConfig+0xb0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004974:	d10c      	bne.n	8004990 <HAL_RCC_OscConfig+0x98>
 8004976:	4b8b      	ldr	r3, [pc, #556]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a8a      	ldr	r2, [pc, #552]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4b88      	ldr	r3, [pc, #544]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a87      	ldr	r2, [pc, #540]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e00b      	b.n	80049a8 <HAL_RCC_OscConfig+0xb0>
 8004990:	4b84      	ldr	r3, [pc, #528]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a83      	ldr	r2, [pc, #524]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	4b81      	ldr	r3, [pc, #516]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a80      	ldr	r2, [pc, #512]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d013      	beq.n	80049d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fd fda4 	bl	80024fc <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fd fda0 	bl	80024fc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	; 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e2a8      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ca:	4b76      	ldr	r3, [pc, #472]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0xc0>
 80049d6:	e014      	b.n	8004a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd fd90 	bl	80024fc <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e0:	f7fd fd8c 	bl	80024fc <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e294      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049f2:	4b6c      	ldr	r3, [pc, #432]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0xe8>
 80049fe:	e000      	b.n	8004a02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d075      	beq.n	8004afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0e:	4b65      	ldr	r3, [pc, #404]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a18:	4b62      	ldr	r3, [pc, #392]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	d102      	bne.n	8004a2e <HAL_RCC_OscConfig+0x136>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_OscConfig+0x13c>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d11f      	bne.n	8004a74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a34:	4b5b      	ldr	r3, [pc, #364]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_OscConfig+0x154>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e267      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4c:	4b55      	ldr	r3, [pc, #340]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	061b      	lsls	r3, r3, #24
 8004a5a:	4952      	ldr	r1, [pc, #328]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a60:	4b51      	ldr	r3, [pc, #324]	; (8004ba8 <HAL_RCC_OscConfig+0x2b0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd fcfd 	bl	8002464 <HAL_InitTick>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d043      	beq.n	8004af8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e253      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d023      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7c:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a48      	ldr	r2, [pc, #288]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd fd38 	bl	80024fc <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fd fd34 	bl	80024fc <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e23c      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa2:	4b40      	ldr	r3, [pc, #256]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	061b      	lsls	r3, r3, #24
 8004abc:	4939      	ldr	r1, [pc, #228]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]
 8004ac2:	e01a      	b.n	8004afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac4:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a36      	ldr	r2, [pc, #216]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fd14 	bl	80024fc <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fd fd10 	bl	80024fc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e218      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1e0>
 8004af6:	e000      	b.n	8004afa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d03c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01c      	beq.n	8004b48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0e:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b14:	4a23      	ldr	r2, [pc, #140]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fd fced 	bl	80024fc <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b26:	f7fd fce9 	bl	80024fc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1f1      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b38:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ef      	beq.n	8004b26 <HAL_RCC_OscConfig+0x22e>
 8004b46:	e01b      	b.n	8004b80 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b48:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	f023 0301 	bic.w	r3, r3, #1
 8004b54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fd fcd0 	bl	80024fc <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b60:	f7fd fccc 	bl	80024fc <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e1d4      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b72:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ef      	bne.n	8004b60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80ab 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b92:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_RCC_OscConfig+0x2b4>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e005      	b.n	8004bae <HAL_RCC_OscConfig+0x2b6>
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	20000020 	.word	0x20000020
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb2:	4baf      	ldr	r3, [pc, #700]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	4aae      	ldr	r2, [pc, #696]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbe:	4bac      	ldr	r3, [pc, #688]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bce:	4ba9      	ldr	r3, [pc, #676]	; (8004e74 <HAL_RCC_OscConfig+0x57c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d118      	bne.n	8004c0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bda:	4ba6      	ldr	r3, [pc, #664]	; (8004e74 <HAL_RCC_OscConfig+0x57c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4aa5      	ldr	r2, [pc, #660]	; (8004e74 <HAL_RCC_OscConfig+0x57c>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be6:	f7fd fc89 	bl	80024fc <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bee:	f7fd fc85 	bl	80024fc <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e18d      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	4b9c      	ldr	r3, [pc, #624]	; (8004e74 <HAL_RCC_OscConfig+0x57c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d108      	bne.n	8004c26 <HAL_RCC_OscConfig+0x32e>
 8004c14:	4b96      	ldr	r3, [pc, #600]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	4a95      	ldr	r2, [pc, #596]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c24:	e024      	b.n	8004c70 <HAL_RCC_OscConfig+0x378>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d110      	bne.n	8004c50 <HAL_RCC_OscConfig+0x358>
 8004c2e:	4b90      	ldr	r3, [pc, #576]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	4a8e      	ldr	r2, [pc, #568]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c36:	f043 0304 	orr.w	r3, r3, #4
 8004c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c3e:	4b8c      	ldr	r3, [pc, #560]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	4a8a      	ldr	r2, [pc, #552]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c4e:	e00f      	b.n	8004c70 <HAL_RCC_OscConfig+0x378>
 8004c50:	4b87      	ldr	r3, [pc, #540]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	4a86      	ldr	r2, [pc, #536]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c60:	4b83      	ldr	r3, [pc, #524]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a82      	ldr	r2, [pc, #520]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c68:	f023 0304 	bic.w	r3, r3, #4
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d016      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fd fc40 	bl	80024fc <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c80:	f7fd fc3c 	bl	80024fc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e142      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c96:	4b76      	ldr	r3, [pc, #472]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ed      	beq.n	8004c80 <HAL_RCC_OscConfig+0x388>
 8004ca4:	e015      	b.n	8004cd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fd fc29 	bl	80024fc <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fd fc25 	bl	80024fc <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e12b      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1ed      	bne.n	8004cae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cd2:	7ffb      	ldrb	r3, [r7, #31]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd8:	4b65      	ldr	r3, [pc, #404]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	4a64      	ldr	r2, [pc, #400]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01c      	beq.n	8004d32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cf8:	4b5d      	ldr	r3, [pc, #372]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cfe:	4a5c      	ldr	r2, [pc, #368]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fd fbf8 	bl	80024fc <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d10:	f7fd fbf4 	bl	80024fc <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0fc      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d22:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ef      	beq.n	8004d10 <HAL_RCC_OscConfig+0x418>
 8004d30:	e01b      	b.n	8004d6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d32:	4b4f      	ldr	r3, [pc, #316]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d38:	4a4d      	ldr	r2, [pc, #308]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d42:	f7fd fbdb 	bl	80024fc <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d4a:	f7fd fbd7 	bl	80024fc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0df      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d5c:	4b44      	ldr	r3, [pc, #272]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ef      	bne.n	8004d4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80d3 	beq.w	8004f1a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d74:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	f000 808d 	beq.w	8004e9c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d15a      	bne.n	8004e40 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8a:	4b39      	ldr	r3, [pc, #228]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a38      	ldr	r2, [pc, #224]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fd fbb1 	bl	80024fc <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9e:	f7fd fbad 	bl	80024fc <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0b5      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	4b2f      	ldr	r3, [pc, #188]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dbc:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_OscConfig+0x580>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6a11      	ldr	r1, [r2, #32]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dcc:	3a01      	subs	r2, #1
 8004dce:	0112      	lsls	r2, r2, #4
 8004dd0:	4311      	orrs	r1, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004dd6:	0212      	lsls	r2, r2, #8
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dde:	0852      	lsrs	r2, r2, #1
 8004de0:	3a01      	subs	r2, #1
 8004de2:	0552      	lsls	r2, r2, #21
 8004de4:	4311      	orrs	r1, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dea:	0852      	lsrs	r2, r2, #1
 8004dec:	3a01      	subs	r2, #1
 8004dee:	0652      	lsls	r2, r2, #25
 8004df0:	4311      	orrs	r1, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004df6:	06d2      	lsls	r2, r2, #27
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	491d      	ldr	r1, [pc, #116]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e0c:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd fb70 	bl	80024fc <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fd fb6c 	bl	80024fc <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e074      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x528>
 8004e3e:	e06c      	b.n	8004f1a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0a      	ldr	r2, [pc, #40]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a07      	ldr	r2, [pc, #28]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <HAL_RCC_OscConfig+0x578>)
 8004e5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fb48 	bl	80024fc <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6e:	e00e      	b.n	8004e8e <HAL_RCC_OscConfig+0x596>
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40007000 	.word	0x40007000
 8004e78:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fd fb3e 	bl	80024fc <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e046      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8e:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <HAL_RCC_OscConfig+0x62c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x584>
 8004e9a:	e03e      	b.n	8004f1a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e039      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	; (8004f24 <HAL_RCC_OscConfig+0x62c>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0203 	and.w	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d12c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d123      	bne.n	8004f16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11b      	bne.n	8004f16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d113      	bne.n	8004f16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	3b01      	subs	r3, #1
 8004efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d109      	bne.n	8004f16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000

08004f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e11e      	b.n	800517e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f40:	4b91      	ldr	r3, [pc, #580]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d910      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4e:	4b8e      	ldr	r3, [pc, #568]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 020f 	bic.w	r2, r3, #15
 8004f56:	498c      	ldr	r1, [pc, #560]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b8a      	ldr	r3, [pc, #552]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e106      	b.n	800517e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d073      	beq.n	8005064 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d129      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f84:	4b81      	ldr	r3, [pc, #516]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0f4      	b.n	800517e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f94:	f000 f966 	bl	8005264 <RCC_GetSysClockFreqFromPLLSource>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4a7c      	ldr	r2, [pc, #496]	; (8005190 <HAL_RCC_ClockConfig+0x268>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d93f      	bls.n	8005022 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fa2:	4b7a      	ldr	r3, [pc, #488]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d033      	beq.n	8005022 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d12f      	bne.n	8005022 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fc2:	4b72      	ldr	r3, [pc, #456]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fca:	4a70      	ldr	r2, [pc, #448]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e024      	b.n	8005022 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe0:	4b6a      	ldr	r3, [pc, #424]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0c6      	b.n	800517e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff0:	4b66      	ldr	r3, [pc, #408]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0be      	b.n	800517e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005000:	f000 f8ce 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8005004:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4a61      	ldr	r2, [pc, #388]	; (8005190 <HAL_RCC_ClockConfig+0x268>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d909      	bls.n	8005022 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800500e:	4b5f      	ldr	r3, [pc, #380]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005016:	4a5d      	ldr	r2, [pc, #372]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005022:	4b5a      	ldr	r3, [pc, #360]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 0203 	bic.w	r2, r3, #3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4957      	ldr	r1, [pc, #348]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005030:	4313      	orrs	r3, r2
 8005032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005034:	f7fd fa62 	bl	80024fc <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503a:	e00a      	b.n	8005052 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800503c:	f7fd fa5e 	bl	80024fc <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	; 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e095      	b.n	800517e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	4b4e      	ldr	r3, [pc, #312]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 020c 	and.w	r2, r3, #12
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	429a      	cmp	r2, r3
 8005062:	d1eb      	bne.n	800503c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d023      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800507c:	4b43      	ldr	r3, [pc, #268]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a42      	ldr	r2, [pc, #264]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005086:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005094:	4b3d      	ldr	r3, [pc, #244]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800509c:	4a3b      	ldr	r2, [pc, #236]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 800509e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a4:	4b39      	ldr	r3, [pc, #228]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4936      	ldr	r1, [pc, #216]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
 80050b6:	e008      	b.n	80050ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d105      	bne.n	80050ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050be:	4b33      	ldr	r3, [pc, #204]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	4a32      	ldr	r2, [pc, #200]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 80050c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ca:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d21d      	bcs.n	8005114 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 020f 	bic.w	r2, r3, #15
 80050e0:	4929      	ldr	r1, [pc, #164]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050e8:	f7fd fa08 	bl	80024fc <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f0:	f7fd fa04 	bl	80024fc <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e03b      	b.n	800517e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCC_ClockConfig+0x260>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d1ed      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4917      	ldr	r1, [pc, #92]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	490f      	ldr	r1, [pc, #60]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005152:	f000 f825 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8005156:	4602      	mov	r2, r0
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <HAL_RCC_ClockConfig+0x264>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	490c      	ldr	r1, [pc, #48]	; (8005194 <HAL_RCC_ClockConfig+0x26c>)
 8005164:	5ccb      	ldrb	r3, [r1, r3]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	fa22 f303 	lsr.w	r3, r2, r3
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <HAL_RCC_ClockConfig+0x270>)
 8005170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_RCC_ClockConfig+0x274>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fd f974 	bl	8002464 <HAL_InitTick>
 800517c:	4603      	mov	r3, r0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40022000 	.word	0x40022000
 800518c:	40021000 	.word	0x40021000
 8005190:	04c4b400 	.word	0x04c4b400
 8005194:	0800b4a4 	.word	0x0800b4a4
 8005198:	2000001c 	.word	0x2000001c
 800519c:	20000020 	.word	0x20000020

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051a6:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d102      	bne.n	80051b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051b2:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e047      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d102      	bne.n	80051ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051c4:	4b26      	ldr	r3, [pc, #152]	; (8005260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e03e      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051ca:	4b23      	ldr	r3, [pc, #140]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d136      	bne.n	8005244 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051e0:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	3301      	adds	r3, #1
 80051ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d10c      	bne.n	800520e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f4:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	4a16      	ldr	r2, [pc, #88]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fe:	68d2      	ldr	r2, [r2, #12]
 8005200:	0a12      	lsrs	r2, r2, #8
 8005202:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	617b      	str	r3, [r7, #20]
      break;
 800520c:	e00c      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800520e:	4a13      	ldr	r2, [pc, #76]	; (800525c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005218:	68d2      	ldr	r2, [r2, #12]
 800521a:	0a12      	lsrs	r2, r2, #8
 800521c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005220:	fb02 f303 	mul.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
      break;
 8005226:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0e5b      	lsrs	r3, r3, #25
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	3301      	adds	r3, #1
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e001      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005248:	693b      	ldr	r3, [r7, #16]
}
 800524a:	4618      	mov	r0, r3
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	00f42400 	.word	0x00f42400
 8005260:	007a1200 	.word	0x007a1200

08005264 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800526a:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d10c      	bne.n	80052a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005292:	68d2      	ldr	r2, [r2, #12]
 8005294:	0a12      	lsrs	r2, r2, #8
 8005296:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
    break;
 80052a0:	e00c      	b.n	80052bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052a2:	4a12      	ldr	r2, [pc, #72]	; (80052ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ac:	68d2      	ldr	r2, [r2, #12]
 80052ae:	0a12      	lsrs	r2, r2, #8
 80052b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]
    break;
 80052ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	0e5b      	lsrs	r3, r3, #25
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052d6:	687b      	ldr	r3, [r7, #4]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40021000 	.word	0x40021000
 80052e8:	007a1200 	.word	0x007a1200
 80052ec:	00f42400 	.word	0x00f42400

080052f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052f8:	2300      	movs	r3, #0
 80052fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052fc:	2300      	movs	r3, #0
 80052fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8098 	beq.w	800543e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005312:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10d      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	4b40      	ldr	r3, [pc, #256]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005328:	6593      	str	r3, [r2, #88]	; 0x58
 800532a:	4b3d      	ldr	r3, [pc, #244]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005336:	2301      	movs	r3, #1
 8005338:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800533a:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a39      	ldr	r2, [pc, #228]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005346:	f7fd f8d9 	bl	80024fc <HAL_GetTick>
 800534a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800534c:	e009      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534e:	f7fd f8d5 	bl	80024fc <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d902      	bls.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	74fb      	strb	r3, [r7, #19]
        break;
 8005360:	e005      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ef      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800536e:	7cfb      	ldrb	r3, [r7, #19]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d159      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005374:	4b2a      	ldr	r3, [pc, #168]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01e      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	429a      	cmp	r2, r3
 800538e:	d019      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800539c:	4b20      	ldr	r3, [pc, #128]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ac:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ce:	f7fd f895 	bl	80024fc <HAL_GetTick>
 80053d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d4:	e00b      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d6:	f7fd f891 	bl	80024fc <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d902      	bls.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	74fb      	strb	r3, [r7, #19]
            break;
 80053ec:	e006      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ec      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	4903      	ldr	r1, [pc, #12]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005418:	e008      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800541a:	7cfb      	ldrb	r3, [r7, #19]
 800541c:	74bb      	strb	r3, [r7, #18]
 800541e:	e005      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005420:	40021000 	.word	0x40021000
 8005424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542c:	7c7b      	ldrb	r3, [r7, #17]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d105      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005432:	4ba6      	ldr	r3, [pc, #664]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	4aa5      	ldr	r2, [pc, #660]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800544a:	4ba0      	ldr	r3, [pc, #640]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f023 0203 	bic.w	r2, r3, #3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	499c      	ldr	r1, [pc, #624]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800546c:	4b97      	ldr	r3, [pc, #604]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f023 020c 	bic.w	r2, r3, #12
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	4994      	ldr	r1, [pc, #592]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800548e:	4b8f      	ldr	r3, [pc, #572]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	498b      	ldr	r1, [pc, #556]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054b0:	4b86      	ldr	r3, [pc, #536]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4983      	ldr	r1, [pc, #524]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054d2:	4b7e      	ldr	r3, [pc, #504]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	497a      	ldr	r1, [pc, #488]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f4:	4b75      	ldr	r3, [pc, #468]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	4972      	ldr	r1, [pc, #456]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005516:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4969      	ldr	r1, [pc, #420]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005538:	4b64      	ldr	r3, [pc, #400]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	4961      	ldr	r1, [pc, #388]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800555a:	4b5c      	ldr	r3, [pc, #368]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	4958      	ldr	r1, [pc, #352]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800557c:	4b53      	ldr	r3, [pc, #332]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	4950      	ldr	r1, [pc, #320]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559a:	d105      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559c:	4b4b      	ldr	r3, [pc, #300]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a4a      	ldr	r2, [pc, #296]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d015      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055b4:	4b45      	ldr	r3, [pc, #276]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	4942      	ldr	r1, [pc, #264]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d2:	d105      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d4:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4a3c      	ldr	r2, [pc, #240]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d015      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055ec:	4b37      	ldr	r3, [pc, #220]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	4934      	ldr	r1, [pc, #208]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800560a:	d105      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560c:	4b2f      	ldr	r3, [pc, #188]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a2e      	ldr	r2, [pc, #184]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005616:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d015      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005624:	4b29      	ldr	r3, [pc, #164]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	4926      	ldr	r1, [pc, #152]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4a20      	ldr	r2, [pc, #128]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d015      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	4918      	ldr	r1, [pc, #96]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4a12      	ldr	r2, [pc, #72]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005686:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005694:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	490a      	ldr	r1, [pc, #40]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b2:	d105      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000

080056d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e049      	b.n	8005776 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fc0e 	bl	8001f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f000 fee2 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d001      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e04a      	b.n	800582e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_TIM_Base_Start_IT+0xbc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x6c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c2:	d013      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x6c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1d      	ldr	r2, [pc, #116]	; (8005840 <HAL_TIM_Base_Start_IT+0xc0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x6c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <HAL_TIM_Base_Start_IT+0xc4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x6c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <HAL_TIM_Base_Start_IT+0xc8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x6c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a19      	ldr	r2, [pc, #100]	; (800584c <HAL_TIM_Base_Start_IT+0xcc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d115      	bne.n	8005818 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	4b17      	ldr	r3, [pc, #92]	; (8005850 <HAL_TIM_Base_Start_IT+0xd0>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d015      	beq.n	800582a <HAL_TIM_Base_Start_IT+0xaa>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d011      	beq.n	800582a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005816:	e008      	b.n	800582a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e000      	b.n	800582c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40013400 	.word	0x40013400
 800584c:	40014000 	.word	0x40014000
 8005850:	00010007 	.word	0x00010007

08005854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e049      	b.n	80058fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fc fb2c 	bl	8001ed8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f000 fe20 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_TIM_PWM_Start+0x24>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e03c      	b.n	80059a2 <HAL_TIM_PWM_Start+0x9e>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b04      	cmp	r3, #4
 800592c:	d109      	bne.n	8005942 <HAL_TIM_PWM_Start+0x3e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	bf14      	ite	ne
 800593a:	2301      	movne	r3, #1
 800593c:	2300      	moveq	r3, #0
 800593e:	b2db      	uxtb	r3, r3
 8005940:	e02f      	b.n	80059a2 <HAL_TIM_PWM_Start+0x9e>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d109      	bne.n	800595c <HAL_TIM_PWM_Start+0x58>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e022      	b.n	80059a2 <HAL_TIM_PWM_Start+0x9e>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d109      	bne.n	8005976 <HAL_TIM_PWM_Start+0x72>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	e015      	b.n	80059a2 <HAL_TIM_PWM_Start+0x9e>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b10      	cmp	r3, #16
 800597a:	d109      	bne.n	8005990 <HAL_TIM_PWM_Start+0x8c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e008      	b.n	80059a2 <HAL_TIM_PWM_Start+0x9e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e097      	b.n	8005ada <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0xb6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b8:	e023      	b.n	8005a02 <HAL_TIM_PWM_Start+0xfe>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0xc6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c8:	e01b      	b.n	8005a02 <HAL_TIM_PWM_Start+0xfe>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d104      	bne.n	80059da <HAL_TIM_PWM_Start+0xd6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d8:	e013      	b.n	8005a02 <HAL_TIM_PWM_Start+0xfe>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xe6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059e8:	e00b      	b.n	8005a02 <HAL_TIM_PWM_Start+0xfe>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0xf6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f8:	e003      	b.n	8005a02 <HAL_TIM_PWM_Start+0xfe>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2201      	movs	r2, #1
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f001 f986 	bl	8006d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <HAL_TIM_PWM_Start+0x1e0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x13e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a32      	ldr	r2, [pc, #200]	; (8005ae8 <HAL_TIM_PWM_Start+0x1e4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x13e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a30      	ldr	r2, [pc, #192]	; (8005aec <HAL_TIM_PWM_Start+0x1e8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x13e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <HAL_TIM_PWM_Start+0x1ec>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x13e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <HAL_TIM_PWM_Start+0x1f0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_Start+0x142>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_TIM_PWM_Start+0x144>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a20      	ldr	r2, [pc, #128]	; (8005ae4 <HAL_TIM_PWM_Start+0x1e0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d018      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x194>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6e:	d013      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x194>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <HAL_TIM_PWM_Start+0x1f4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x194>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <HAL_TIM_PWM_Start+0x1f8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d009      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x194>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <HAL_TIM_PWM_Start+0x1e4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x194>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a16      	ldr	r2, [pc, #88]	; (8005aec <HAL_TIM_PWM_Start+0x1e8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d115      	bne.n	8005ac4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <HAL_TIM_PWM_Start+0x1fc>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d015      	beq.n	8005ad6 <HAL_TIM_PWM_Start+0x1d2>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab0:	d011      	beq.n	8005ad6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac2:	e008      	b.n	8005ad6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e000      	b.n	8005ad8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	00010007 	.word	0x00010007

08005b04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e097      	b.n	8005c48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fc fa67 	bl	8002000 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005b48:	f023 0307 	bic.w	r3, r3, #7
 8005b4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4619      	mov	r1, r3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	f000 fcbd 	bl	80064d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	4313      	orrs	r3, r2
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ba4:	f023 030c 	bic.w	r3, r3, #12
 8005ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	011a      	lsls	r2, r3, #4
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	031b      	lsls	r3, r3, #12
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d110      	bne.n	8005ca2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d102      	bne.n	8005c8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c86:	7b7b      	ldrb	r3, [r7, #13]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e069      	b.n	8005d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca0:	e031      	b.n	8005d06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d110      	bne.n	8005cca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d102      	bne.n	8005cb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cae:	7b3b      	ldrb	r3, [r7, #12]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d001      	beq.n	8005cb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e055      	b.n	8005d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc8:	e01d      	b.n	8005d06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d108      	bne.n	8005ce2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd6:	7b7b      	ldrb	r3, [r7, #13]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d102      	bne.n	8005ce2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cdc:	7b3b      	ldrb	r3, [r7, #12]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d001      	beq.n	8005ce6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e03e      	b.n	8005d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_Encoder_Start+0xc4>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d008      	beq.n	8005d24 <HAL_TIM_Encoder_Start+0xd4>
 8005d12:	e00f      	b.n	8005d34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fffd 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8005d22:	e016      	b.n	8005d52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	2104      	movs	r1, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fff5 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8005d32:	e00e      	b.n	8005d52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 ffed 	bl	8006d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2201      	movs	r2, #1
 8005d48:	2104      	movs	r1, #4
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 ffe6 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8005d50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0201 	orr.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d122      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0202 	mvn.w	r2, #2
 8005d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb74 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fb66 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb77 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d122      	bne.n	8005e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d11b      	bne.n	8005e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0204 	mvn.w	r2, #4
 8005dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fb4a 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fb3c 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fb4d 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d122      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d11b      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0208 	mvn.w	r2, #8
 8005e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2204      	movs	r2, #4
 8005e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb20 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fb12 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fb23 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d122      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0210 	mvn.w	r2, #16
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 faf6 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fae8 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 faf9 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0201 	mvn.w	r2, #1
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fa fe64 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b80      	cmp	r3, #128	; 0x80
 8005efc:	d10e      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d107      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 f852 	bl	8006fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2a:	d10e      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f845 	bl	8006fd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 faa7 	bl	80064c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d10e      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f06f 0220 	mvn.w	r2, #32
 8005f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 f805 	bl	8006fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc0:	d107      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 f80b 	bl	8006fe8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fe0:	d10f      	bne.n	8006002 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff0:	d107      	bne.n	8006002 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fffd 	bl	8006ffc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006010:	d10f      	bne.n	8006032 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006020:	d107      	bne.n	8006032 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800602a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 ffef 	bl	8007010 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800603c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006040:	d10f      	bne.n	8006062 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800604c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006050:	d107      	bne.n	8006062 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 ffe1 	bl	8007024 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006086:	2302      	movs	r3, #2
 8006088:	e0ff      	b.n	800628a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b14      	cmp	r3, #20
 8006096:	f200 80f0 	bhi.w	800627a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	0800627b 	.word	0x0800627b
 80060a8:	0800627b 	.word	0x0800627b
 80060ac:	0800627b 	.word	0x0800627b
 80060b0:	08006135 	.word	0x08006135
 80060b4:	0800627b 	.word	0x0800627b
 80060b8:	0800627b 	.word	0x0800627b
 80060bc:	0800627b 	.word	0x0800627b
 80060c0:	08006177 	.word	0x08006177
 80060c4:	0800627b 	.word	0x0800627b
 80060c8:	0800627b 	.word	0x0800627b
 80060cc:	0800627b 	.word	0x0800627b
 80060d0:	080061b7 	.word	0x080061b7
 80060d4:	0800627b 	.word	0x0800627b
 80060d8:	0800627b 	.word	0x0800627b
 80060dc:	0800627b 	.word	0x0800627b
 80060e0:	080061f9 	.word	0x080061f9
 80060e4:	0800627b 	.word	0x0800627b
 80060e8:	0800627b 	.word	0x0800627b
 80060ec:	0800627b 	.word	0x0800627b
 80060f0:	08006239 	.word	0x08006239
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fa7c 	bl	80065f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0204 	bic.w	r2, r2, #4
 800611e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	619a      	str	r2, [r3, #24]
      break;
 8006132:	e0a5      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 faec 	bl	8006718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	619a      	str	r2, [r3, #24]
      break;
 8006174:	e084      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fb55 	bl	800682c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0208 	orr.w	r2, r2, #8
 8006190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0204 	bic.w	r2, r2, #4
 80061a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	61da      	str	r2, [r3, #28]
      break;
 80061b4:	e064      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fbbd 	bl	800693c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	021a      	lsls	r2, r3, #8
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	61da      	str	r2, [r3, #28]
      break;
 80061f6:	e043      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fc26 	bl	8006a50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0208 	orr.w	r2, r2, #8
 8006212:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0204 	bic.w	r2, r2, #4
 8006222:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006236:	e023      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fc6a 	bl	8006b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006252:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006262:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	021a      	lsls	r2, r3, #8
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006278:	e002      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
      break;
 800627e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIM_ConfigClockSource+0x1c>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e0de      	b.n	800646e <HAL_TIM_ConfigClockSource+0x1da>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a63      	ldr	r2, [pc, #396]	; (8006478 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f000 80a9 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 80062f0:	4a61      	ldr	r2, [pc, #388]	; (8006478 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f200 80ae 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 80062f8:	4a60      	ldr	r2, [pc, #384]	; (800647c <HAL_TIM_ConfigClockSource+0x1e8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f000 80a1 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 8006300:	4a5e      	ldr	r2, [pc, #376]	; (800647c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f200 80a6 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006308:	4a5d      	ldr	r2, [pc, #372]	; (8006480 <HAL_TIM_ConfigClockSource+0x1ec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f000 8099 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 8006310:	4a5b      	ldr	r2, [pc, #364]	; (8006480 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f200 809e 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006318:	4a5a      	ldr	r2, [pc, #360]	; (8006484 <HAL_TIM_ConfigClockSource+0x1f0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f000 8091 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 8006320:	4a58      	ldr	r2, [pc, #352]	; (8006484 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	f200 8096 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006328:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800632c:	f000 8089 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 8006330:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006334:	f200 808e 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633c:	d03e      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0x128>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	f200 8087 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	f000 8086 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x1c6>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d87f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006354:	2b70      	cmp	r3, #112	; 0x70
 8006356:	d01a      	beq.n	800638e <HAL_TIM_ConfigClockSource+0xfa>
 8006358:	2b70      	cmp	r3, #112	; 0x70
 800635a:	d87b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 800635c:	2b60      	cmp	r3, #96	; 0x60
 800635e:	d050      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x16e>
 8006360:	2b60      	cmp	r3, #96	; 0x60
 8006362:	d877      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006364:	2b50      	cmp	r3, #80	; 0x50
 8006366:	d03c      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x14e>
 8006368:	2b50      	cmp	r3, #80	; 0x50
 800636a:	d873      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d058      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x18e>
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d86f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006374:	2b30      	cmp	r3, #48	; 0x30
 8006376:	d064      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 8006378:	2b30      	cmp	r3, #48	; 0x30
 800637a:	d86b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 800637c:	2b20      	cmp	r3, #32
 800637e:	d060      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 8006380:	2b20      	cmp	r3, #32
 8006382:	d867      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d05c      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 8006388:	2b10      	cmp	r3, #16
 800638a:	d05a      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1ae>
 800638c:	e062      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f000 fc9d 	bl	8006cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
      break;
 80063ba:	e04f      	b.n	800645c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6899      	ldr	r1, [r3, #8]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f000 fc86 	bl	8006cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063de:	609a      	str	r2, [r3, #8]
      break;
 80063e0:	e03c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 fbf8 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2150      	movs	r1, #80	; 0x50
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fc51 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006400:	e02c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fc17 	bl	8006c42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2160      	movs	r1, #96	; 0x60
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fc41 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006420:	e01c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	461a      	mov	r2, r3
 8006430:	f000 fbd8 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2140      	movs	r1, #64	; 0x40
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fc31 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006440:	e00c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f000 fc28 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006452:	e003      	b.n	800645c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      break;
 8006458:	e000      	b.n	800645c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800645a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	00100070 	.word	0x00100070
 800647c:	00100040 	.word	0x00100040
 8006480:	00100030 	.word	0x00100030
 8006484:	00100020 	.word	0x00100020

08006488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <TIM_Base_SetConfig+0x104>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f6:	d00b      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a39      	ldr	r2, [pc, #228]	; (80065e0 <TIM_Base_SetConfig+0x108>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a38      	ldr	r2, [pc, #224]	; (80065e4 <TIM_Base_SetConfig+0x10c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a37      	ldr	r2, [pc, #220]	; (80065e8 <TIM_Base_SetConfig+0x110>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d108      	bne.n	8006522 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <TIM_Base_SetConfig+0x104>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01b      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006530:	d017      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <TIM_Base_SetConfig+0x108>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <TIM_Base_SetConfig+0x10c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00f      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <TIM_Base_SetConfig+0x110>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00b      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a27      	ldr	r2, [pc, #156]	; (80065ec <TIM_Base_SetConfig+0x114>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d007      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <TIM_Base_SetConfig+0x118>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <TIM_Base_SetConfig+0x11c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d108      	bne.n	8006574 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a10      	ldr	r2, [pc, #64]	; (80065dc <TIM_Base_SetConfig+0x104>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00f      	beq.n	80065c0 <TIM_Base_SetConfig+0xe8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <TIM_Base_SetConfig+0x110>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00b      	beq.n	80065c0 <TIM_Base_SetConfig+0xe8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a10      	ldr	r2, [pc, #64]	; (80065ec <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d007      	beq.n	80065c0 <TIM_Base_SetConfig+0xe8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <TIM_Base_SetConfig+0x118>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_Base_SetConfig+0xe8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a0e      	ldr	r2, [pc, #56]	; (80065f4 <TIM_Base_SetConfig+0x11c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d103      	bne.n	80065c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	615a      	str	r2, [r3, #20]
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40000400 	.word	0x40000400
 80065e4:	40000800 	.word	0x40000800
 80065e8:	40013400 	.word	0x40013400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800

080065f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0302 	bic.w	r3, r3, #2
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2c      	ldr	r2, [pc, #176]	; (8006704 <TIM_OC1_SetConfig+0x10c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00f      	beq.n	8006678 <TIM_OC1_SetConfig+0x80>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <TIM_OC1_SetConfig+0x110>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_OC1_SetConfig+0x80>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <TIM_OC1_SetConfig+0x114>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_OC1_SetConfig+0x80>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a29      	ldr	r2, [pc, #164]	; (8006710 <TIM_OC1_SetConfig+0x118>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_OC1_SetConfig+0x80>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a28      	ldr	r2, [pc, #160]	; (8006714 <TIM_OC1_SetConfig+0x11c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d10c      	bne.n	8006692 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0308 	bic.w	r3, r3, #8
 800667e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0304 	bic.w	r3, r3, #4
 8006690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <TIM_OC1_SetConfig+0x10c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00f      	beq.n	80066ba <TIM_OC1_SetConfig+0xc2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1a      	ldr	r2, [pc, #104]	; (8006708 <TIM_OC1_SetConfig+0x110>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00b      	beq.n	80066ba <TIM_OC1_SetConfig+0xc2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a19      	ldr	r2, [pc, #100]	; (800670c <TIM_OC1_SetConfig+0x114>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d007      	beq.n	80066ba <TIM_OC1_SetConfig+0xc2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <TIM_OC1_SetConfig+0x118>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d003      	beq.n	80066ba <TIM_OC1_SetConfig+0xc2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a17      	ldr	r2, [pc, #92]	; (8006714 <TIM_OC1_SetConfig+0x11c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d111      	bne.n	80066de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	621a      	str	r2, [r3, #32]
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40013400 	.word	0x40013400
 800670c:	40014000 	.word	0x40014000
 8006710:	40014400 	.word	0x40014400
 8006714:	40014800 	.word	0x40014800

08006718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f023 0210 	bic.w	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0320 	bic.w	r3, r3, #32
 8006766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a28      	ldr	r2, [pc, #160]	; (8006818 <TIM_OC2_SetConfig+0x100>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC2_SetConfig+0x6c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a27      	ldr	r2, [pc, #156]	; (800681c <TIM_OC2_SetConfig+0x104>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d10d      	bne.n	80067a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a1d      	ldr	r2, [pc, #116]	; (8006818 <TIM_OC2_SetConfig+0x100>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00f      	beq.n	80067c8 <TIM_OC2_SetConfig+0xb0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a1c      	ldr	r2, [pc, #112]	; (800681c <TIM_OC2_SetConfig+0x104>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00b      	beq.n	80067c8 <TIM_OC2_SetConfig+0xb0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <TIM_OC2_SetConfig+0x108>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d007      	beq.n	80067c8 <TIM_OC2_SetConfig+0xb0>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a1a      	ldr	r2, [pc, #104]	; (8006824 <TIM_OC2_SetConfig+0x10c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_OC2_SetConfig+0xb0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a19      	ldr	r2, [pc, #100]	; (8006828 <TIM_OC2_SetConfig+0x110>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d113      	bne.n	80067f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40013400 	.word	0x40013400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a27      	ldr	r2, [pc, #156]	; (8006928 <TIM_OC3_SetConfig+0xfc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC3_SetConfig+0x6a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <TIM_OC3_SetConfig+0x100>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d10d      	bne.n	80068b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1c      	ldr	r2, [pc, #112]	; (8006928 <TIM_OC3_SetConfig+0xfc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00f      	beq.n	80068da <TIM_OC3_SetConfig+0xae>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1b      	ldr	r2, [pc, #108]	; (800692c <TIM_OC3_SetConfig+0x100>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00b      	beq.n	80068da <TIM_OC3_SetConfig+0xae>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1a      	ldr	r2, [pc, #104]	; (8006930 <TIM_OC3_SetConfig+0x104>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <TIM_OC3_SetConfig+0xae>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a19      	ldr	r2, [pc, #100]	; (8006934 <TIM_OC3_SetConfig+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC3_SetConfig+0xae>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a18      	ldr	r2, [pc, #96]	; (8006938 <TIM_OC3_SetConfig+0x10c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d113      	bne.n	8006902 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40013400 	.word	0x40013400
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800

0800693c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800698a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	031b      	lsls	r3, r3, #12
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a28      	ldr	r2, [pc, #160]	; (8006a3c <TIM_OC4_SetConfig+0x100>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_OC4_SetConfig+0x6c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a27      	ldr	r2, [pc, #156]	; (8006a40 <TIM_OC4_SetConfig+0x104>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d10d      	bne.n	80069c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	031b      	lsls	r3, r3, #12
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <TIM_OC4_SetConfig+0x100>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00f      	beq.n	80069ec <TIM_OC4_SetConfig+0xb0>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a1c      	ldr	r2, [pc, #112]	; (8006a40 <TIM_OC4_SetConfig+0x104>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00b      	beq.n	80069ec <TIM_OC4_SetConfig+0xb0>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <TIM_OC4_SetConfig+0x108>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <TIM_OC4_SetConfig+0xb0>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a1a      	ldr	r2, [pc, #104]	; (8006a48 <TIM_OC4_SetConfig+0x10c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_OC4_SetConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <TIM_OC4_SetConfig+0x110>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d113      	bne.n	8006a14 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	019b      	lsls	r3, r3, #6
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	019b      	lsls	r3, r3, #6
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40012c00 	.word	0x40012c00
 8006a40:	40013400 	.word	0x40013400
 8006a44:	40014000 	.word	0x40014000
 8006a48:	40014400 	.word	0x40014400
 8006a4c:	40014800 	.word	0x40014800

08006a50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <TIM_OC5_SetConfig+0xb4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00f      	beq.n	8006aca <TIM_OC5_SetConfig+0x7a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <TIM_OC5_SetConfig+0xb8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00b      	beq.n	8006aca <TIM_OC5_SetConfig+0x7a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <TIM_OC5_SetConfig+0xbc>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d007      	beq.n	8006aca <TIM_OC5_SetConfig+0x7a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a14      	ldr	r2, [pc, #80]	; (8006b10 <TIM_OC5_SetConfig+0xc0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d003      	beq.n	8006aca <TIM_OC5_SetConfig+0x7a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <TIM_OC5_SetConfig+0xc4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d109      	bne.n	8006ade <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	621a      	str	r2, [r3, #32]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800

08006b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	021b      	lsls	r3, r3, #8
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	051b      	lsls	r3, r3, #20
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a18      	ldr	r2, [pc, #96]	; (8006bd0 <TIM_OC6_SetConfig+0xb8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00f      	beq.n	8006b94 <TIM_OC6_SetConfig+0x7c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a17      	ldr	r2, [pc, #92]	; (8006bd4 <TIM_OC6_SetConfig+0xbc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00b      	beq.n	8006b94 <TIM_OC6_SetConfig+0x7c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <TIM_OC6_SetConfig+0xc0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d007      	beq.n	8006b94 <TIM_OC6_SetConfig+0x7c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <TIM_OC6_SetConfig+0xc4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d003      	beq.n	8006b94 <TIM_OC6_SetConfig+0x7c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <TIM_OC6_SetConfig+0xc8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d109      	bne.n	8006ba8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	029b      	lsls	r3, r3, #10
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40013400 	.word	0x40013400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 0201 	bic.w	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 030a 	bic.w	r3, r3, #10
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0210 	bic.w	r2, r3, #16
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f043 0307 	orr.w	r3, r3, #7
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2201      	movs	r2, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	401a      	ands	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e065      	b.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2c      	ldr	r2, [pc, #176]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d108      	bne.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1b      	ldr	r2, [pc, #108]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df6:	d013      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a18      	ldr	r2, [pc, #96]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a12      	ldr	r2, [pc, #72]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10c      	bne.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40013400 	.word	0x40013400
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40014000 	.word	0x40014000

08006e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e087      	b.n	8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a27      	ldr	r2, [pc, #156]	; (8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a25      	ldr	r2, [pc, #148]	; (8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d106      	bne.n	8006f24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d126      	bne.n	8006f86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	051b      	lsls	r3, r3, #20
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a0d      	ldr	r2, [pc, #52]	; (8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d106      	bne.n	8006f86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	40012c00 	.word	0x40012c00
 8006fa8:	40013400 	.word	0x40013400

08006fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007048:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800704c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	b29a      	uxth	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800706e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007072:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	b29b      	uxth	r3, r3
 8007080:	43db      	mvns	r3, r3
 8007082:	b29b      	uxth	r3, r3
 8007084:	4013      	ands	r3, r2
 8007086:	b29a      	uxth	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800709c:	b084      	sub	sp, #16
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	f107 0014 	add.w	r0, r7, #20
 80070aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	b004      	add	sp, #16
 80070dc:	4770      	bx	lr
	...

080070e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b09d      	sub	sp, #116	; 0x74
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	78db      	ldrb	r3, [r3, #3]
 800710e:	2b03      	cmp	r3, #3
 8007110:	d81f      	bhi.n	8007152 <USB_ActivateEndpoint+0x72>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <USB_ActivateEndpoint+0x38>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007129 	.word	0x08007129
 800711c:	08007145 	.word	0x08007145
 8007120:	0800715b 	.word	0x0800715b
 8007124:	08007137 	.word	0x08007137
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007128:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800712c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007130:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007134:	e012      	b.n	800715c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007136:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800713a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800713e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007142:	e00b      	b.n	800715c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007144:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800714c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007150:	e004      	b.n	800715c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007158:	e000      	b.n	800715c <USB_ActivateEndpoint+0x7c>
      break;
 800715a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800716a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717a:	b29b      	uxth	r3, r3
 800717c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	b21b      	sxth	r3, r3
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	b21a      	sxth	r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b21b      	sxth	r3, r3
 800719e:	4313      	orrs	r3, r2
 80071a0:	b21b      	sxth	r3, r3
 80071a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	441a      	add	r2, r3
 80071b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80071b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	7b1b      	ldrb	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8149 	bne.w	8007464 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8084 	beq.w	80072e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	4413      	add	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	00da      	lsls	r2, r3, #3
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	88db      	ldrh	r3, [r3, #6]
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	b29b      	uxth	r3, r3
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	827b      	strh	r3, [r7, #18]
 800721e:	8a7b      	ldrh	r3, [r7, #18]
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01b      	beq.n	8007260 <USB_ActivateEndpoint+0x180>
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	823b      	strh	r3, [r7, #16]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	441a      	add	r2, r3
 800724a:	8a3b      	ldrh	r3, [r7, #16]
 800724c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007258:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800725c:	b29b      	uxth	r3, r3
 800725e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d020      	beq.n	80072aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727e:	81bb      	strh	r3, [r7, #12]
 8007280:	89bb      	ldrh	r3, [r7, #12]
 8007282:	f083 0320 	eor.w	r3, r3, #32
 8007286:	81bb      	strh	r3, [r7, #12]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	89bb      	ldrh	r3, [r7, #12]
 8007294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8013      	strh	r3, [r2, #0]
 80072a8:	e2a6      	b.n	80077f8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c0:	81fb      	strh	r3, [r7, #14]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	441a      	add	r2, r3
 80072cc:	89fb      	ldrh	r3, [r7, #14]
 80072ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072de:	b29b      	uxth	r3, r3
 80072e0:	8013      	strh	r3, [r2, #0]
 80072e2:	e289      	b.n	80077f8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	4413      	add	r3, r2
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	00da      	lsls	r2, r3, #3
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	4413      	add	r3, r2
 8007302:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	085b      	lsrs	r3, r3, #1
 800730e:	b29b      	uxth	r3, r3
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62bb      	str	r3, [r7, #40]	; 0x28
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007322:	b29b      	uxth	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	4413      	add	r3, r2
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	00da      	lsls	r2, r3, #3
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	4413      	add	r3, r2
 8007336:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b3e      	cmp	r3, #62	; 0x3e
 8007342:	d918      	bls.n	8007376 <USB_ActivateEndpoint+0x296>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	66bb      	str	r3, [r7, #104]	; 0x68
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <USB_ActivateEndpoint+0x27e>
 8007358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800735a:	3b01      	subs	r3, #1
 800735c:	66bb      	str	r3, [r7, #104]	; 0x68
 800735e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007360:	b29b      	uxth	r3, r3
 8007362:	029b      	lsls	r3, r3, #10
 8007364:	b29b      	uxth	r3, r3
 8007366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736e:	b29a      	uxth	r2, r3
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	e029      	b.n	80073ca <USB_ActivateEndpoint+0x2ea>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d112      	bne.n	80073a4 <USB_ActivateEndpoint+0x2c4>
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007388:	b29a      	uxth	r2, r3
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	801a      	strh	r2, [r3, #0]
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739c:	b29a      	uxth	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	801a      	strh	r2, [r3, #0]
 80073a2:	e012      	b.n	80073ca <USB_ActivateEndpoint+0x2ea>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <USB_ActivateEndpoint+0x2de>
 80073b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073ba:	3301      	adds	r3, #1
 80073bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80073be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	029b      	lsls	r3, r3, #10
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80073d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01b      	beq.n	800741a <USB_ActivateEndpoint+0x33a>
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f8:	843b      	strh	r3, [r7, #32]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	441a      	add	r2, r3
 8007404:	8c3b      	ldrh	r3, [r7, #32]
 8007406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	b29b      	uxth	r3, r3
 8007418:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	83fb      	strh	r3, [r7, #30]
 8007432:	8bfb      	ldrh	r3, [r7, #30]
 8007434:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007438:	83fb      	strh	r3, [r7, #30]
 800743a:	8bfb      	ldrh	r3, [r7, #30]
 800743c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007440:	83fb      	strh	r3, [r7, #30]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8bfb      	ldrh	r3, [r7, #30]
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]
 8007462:	e1c9      	b.n	80077f8 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	78db      	ldrb	r3, [r3, #3]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d11e      	bne.n	80074aa <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007482:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	8013      	strh	r3, [r2, #0]
 80074a8:	e01d      	b.n	80074e6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	441a      	add	r2, r3
 80074ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80074d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f6:	4413      	add	r3, r2
 80074f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	00da      	lsls	r2, r3, #3
 8007500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007502:	4413      	add	r3, r2
 8007504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007508:	65bb      	str	r3, [r7, #88]	; 0x58
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	891b      	ldrh	r3, [r3, #8]
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	b29b      	uxth	r3, r3
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007518:	801a      	strh	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	657b      	str	r3, [r7, #84]	; 0x54
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007524:	b29b      	uxth	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800752a:	4413      	add	r3, r2
 800752c:	657b      	str	r3, [r7, #84]	; 0x54
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	00da      	lsls	r2, r3, #3
 8007534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007536:	4413      	add	r3, r2
 8007538:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800753c:	653b      	str	r3, [r7, #80]	; 0x50
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	895b      	ldrh	r3, [r3, #10]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800754c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f040 8093 	bne.w	800767e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007568:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800756c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01b      	beq.n	80075ac <USB_ActivateEndpoint+0x4cc>
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800759c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80075ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01b      	beq.n	80075fc <USB_ActivateEndpoint+0x51c>
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075da:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	441a      	add	r2, r3
 80075e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80075e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	873b      	strh	r3, [r7, #56]	; 0x38
 8007614:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007616:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800761a:	873b      	strh	r3, [r7, #56]	; 0x38
 800761c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800761e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007622:	873b      	strh	r3, [r7, #56]	; 0x38
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	441a      	add	r2, r3
 800762e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007640:	b29b      	uxth	r3, r3
 8007642:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800765a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	441a      	add	r2, r3
 8007666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007678:	b29b      	uxth	r3, r3
 800767a:	8013      	strh	r3, [r2, #0]
 800767c:	e0bc      	b.n	80077f8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800768e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d01d      	beq.n	80076d6 <USB_ActivateEndpoint+0x5f6>
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01d      	beq.n	800772e <USB_ActivateEndpoint+0x64e>
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007708:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	441a      	add	r2, r3
 8007716:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007726:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	78db      	ldrb	r3, [r3, #3]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d024      	beq.n	8007780 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800774c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007750:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007754:	f083 0320 	eor.w	r3, r3, #32
 8007758:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800776a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	b29b      	uxth	r3, r3
 800777c:	8013      	strh	r3, [r2, #0]
 800777e:	e01d      	b.n	80077bc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007796:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	441a      	add	r2, r3
 80077a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80077a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	441a      	add	r2, r3
 80077e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80077e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80077f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3774      	adds	r7, #116	; 0x74
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007808:	b480      	push	{r7}
 800780a:	b08d      	sub	sp, #52	; 0x34
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	7b1b      	ldrb	r3, [r3, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f040 808e 	bne.w	8007938 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d044      	beq.n	80078ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	81bb      	strh	r3, [r7, #12]
 8007832:	89bb      	ldrh	r3, [r7, #12]
 8007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01b      	beq.n	8007874 <USB_DeactivateEndpoint+0x6c>
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	817b      	strh	r3, [r7, #10]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	897b      	ldrh	r3, [r7, #10]
 8007860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007870:	b29b      	uxth	r3, r3
 8007872:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788a:	813b      	strh	r3, [r7, #8]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	441a      	add	r2, r3
 8007896:	893b      	ldrh	r3, [r7, #8]
 8007898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]
 80078ac:	e192      	b.n	8007bd4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	827b      	strh	r3, [r7, #18]
 80078bc:	8a7b      	ldrh	r3, [r7, #18]
 80078be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01b      	beq.n	80078fe <USB_DeactivateEndpoint+0xf6>
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078dc:	823b      	strh	r3, [r7, #16]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	8a3b      	ldrh	r3, [r7, #16]
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007914:	81fb      	strh	r3, [r7, #14]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	441a      	add	r2, r3
 8007920:	89fb      	ldrh	r3, [r7, #14]
 8007922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800792e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007932:	b29b      	uxth	r3, r3
 8007934:	8013      	strh	r3, [r2, #0]
 8007936:	e14d      	b.n	8007bd4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 80a5 	bne.w	8007a8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	843b      	strh	r3, [r7, #32]
 8007950:	8c3b      	ldrh	r3, [r7, #32]
 8007952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01b      	beq.n	8007992 <USB_DeactivateEndpoint+0x18a>
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007970:	83fb      	strh	r3, [r7, #30]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	441a      	add	r2, r3
 800797c:	8bfb      	ldrh	r3, [r7, #30]
 800797e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	b29b      	uxth	r3, r3
 8007990:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	83bb      	strh	r3, [r7, #28]
 80079a0:	8bbb      	ldrh	r3, [r7, #28]
 80079a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d01b      	beq.n	80079e2 <USB_DeactivateEndpoint+0x1da>
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c0:	837b      	strh	r3, [r7, #26]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	441a      	add	r2, r3
 80079cc:	8b7b      	ldrh	r3, [r7, #26]
 80079ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079de:	b29b      	uxth	r3, r3
 80079e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f8:	833b      	strh	r3, [r7, #24]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	441a      	add	r2, r3
 8007a04:	8b3b      	ldrh	r3, [r7, #24]
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a30:	82fb      	strh	r3, [r7, #22]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	441a      	add	r2, r3
 8007a3c:	8afb      	ldrh	r3, [r7, #22]
 8007a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a68:	82bb      	strh	r3, [r7, #20]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	441a      	add	r2, r3
 8007a74:	8abb      	ldrh	r3, [r7, #20]
 8007a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	8013      	strh	r3, [r2, #0]
 8007a8a:	e0a3      	b.n	8007bd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01b      	beq.n	8007adc <USB_DeactivateEndpoint+0x2d4>
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01b      	beq.n	8007b2c <USB_DeactivateEndpoint+0x324>
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	441a      	add	r2, r3
 8007b16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	441a      	add	r2, r3
 8007b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	441a      	add	r2, r3
 8007bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3734      	adds	r7, #52	; 0x34
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b0c2      	sub	sp, #264	; 0x108
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	1d3b      	adds	r3, r7, #4
 8007bea:	6018      	str	r0, [r3, #0]
 8007bec:	463b      	mov	r3, r7
 8007bee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	f040 8509 	bne.w	800860e <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	463b      	mov	r3, r7
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d905      	bls.n	8007c18 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c16:	e004      	b.n	8007c22 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007c18:	463b      	mov	r3, r7
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c22:	463b      	mov	r3, r7
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	7b1b      	ldrb	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d128      	bne.n	8007c7e <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6959      	ldr	r1, [r3, #20]
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	88da      	ldrh	r2, [r3, #6]
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	1d38      	adds	r0, r7, #4
 8007c40:	6800      	ldr	r0, [r0, #0]
 8007c42:	f001 f9da 	bl	8008ffa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c46:	1d3b      	adds	r3, r7, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	1d3b      	adds	r3, r7, #4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	463b      	mov	r3, r7
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	00da      	lsls	r2, r3, #3
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	f000 bc9f 	b.w	80085bc <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007c7e:	463b      	mov	r3, r7
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	78db      	ldrb	r3, [r3, #3]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	f040 8347 	bne.w	8008318 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6a1a      	ldr	r2, [r3, #32]
 8007c90:	463b      	mov	r3, r7
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	f240 82eb 	bls.w	8008272 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c9c:	1d3b      	adds	r3, r7, #4
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007cba:	1d3b      	adds	r3, r7, #4
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6a1a      	ldr	r2, [r3, #32]
 8007ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	463b      	mov	r3, r7
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007cf2:	1d3b      	adds	r3, r7, #4
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 8159 	beq.w	8007fc0 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d0e:	1d3b      	adds	r3, r7, #4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	633b      	str	r3, [r7, #48]	; 0x30
 8007d14:	463b      	mov	r3, r7
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d164      	bne.n	8007de8 <USB_EPStartXfer+0x206>
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	4413      	add	r3, r2
 8007d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d36:	463b      	mov	r3, r7
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	00da      	lsls	r2, r3, #3
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	4413      	add	r3, r2
 8007d42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d4e:	d91c      	bls.n	8007d8a <USB_EPStartXfer+0x1a8>
 8007d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5e:	f003 031f 	and.w	r3, r3, #31
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d104      	bne.n	8007d70 <USB_EPStartXfer+0x18e>
 8007d66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	029b      	lsls	r3, r3, #10
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	801a      	strh	r2, [r3, #0]
 8007d88:	e04a      	b.n	8007e20 <USB_EPStartXfer+0x23e>
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d112      	bne.n	8007db8 <USB_EPStartXfer+0x1d6>
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	801a      	strh	r2, [r3, #0]
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	e033      	b.n	8007e20 <USB_EPStartXfer+0x23e>
 8007db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <USB_EPStartXfer+0x1f6>
 8007dce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	029b      	lsls	r3, r3, #10
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	e01b      	b.n	8007e20 <USB_EPStartXfer+0x23e>
 8007de8:	463b      	mov	r3, r7
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d116      	bne.n	8007e20 <USB_EPStartXfer+0x23e>
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	4413      	add	r3, r2
 8007e02:	633b      	str	r3, [r7, #48]	; 0x30
 8007e04:	463b      	mov	r3, r7
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	00da      	lsls	r2, r3, #3
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	4413      	add	r3, r2
 8007e10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e20:	463b      	mov	r3, r7
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	895b      	ldrh	r3, [r3, #10]
 8007e26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6959      	ldr	r1, [r3, #20]
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e3a:	1d38      	adds	r0, r7, #4
 8007e3c:	6800      	ldr	r0, [r0, #0]
 8007e3e:	f001 f8dc 	bl	8008ffa <USB_WritePMA>
            ep->xfer_buff += len;
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695a      	ldr	r2, [r3, #20]
 8007e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4c:	441a      	add	r2, r3
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e54:	463b      	mov	r3, r7
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6a1a      	ldr	r2, [r3, #32]
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d909      	bls.n	8007e78 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007e64:	463b      	mov	r3, r7
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6a1a      	ldr	r2, [r3, #32]
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	463b      	mov	r3, r7
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	621a      	str	r2, [r3, #32]
 8007e76:	e008      	b.n	8007e8a <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e78:	463b      	mov	r3, r7
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e82:	463b      	mov	r3, r7
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d164      	bne.n	8007f5e <USB_EPStartXfer+0x37c>
 8007e94:	1d3b      	adds	r3, r7, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	1d3b      	adds	r3, r7, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
 8007eac:	463b      	mov	r3, r7
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	00da      	lsls	r2, r3, #3
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ec4:	d91c      	bls.n	8007f00 <USB_EPStartXfer+0x31e>
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	f003 031f 	and.w	r3, r3, #31
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d104      	bne.n	8007ee6 <USB_EPStartXfer+0x304>
 8007edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	029b      	lsls	r3, r3, #10
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	e04d      	b.n	8007f9c <USB_EPStartXfer+0x3ba>
 8007f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d112      	bne.n	8007f2e <USB_EPStartXfer+0x34c>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	e036      	b.n	8007f9c <USB_EPStartXfer+0x3ba>
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d004      	beq.n	8007f4e <USB_EPStartXfer+0x36c>
 8007f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f48:	3301      	adds	r3, #1
 8007f4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	029b      	lsls	r3, r3, #10
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	e01e      	b.n	8007f9c <USB_EPStartXfer+0x3ba>
 8007f5e:	463b      	mov	r3, r7
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	785b      	ldrb	r3, [r3, #1]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d119      	bne.n	8007f9c <USB_EPStartXfer+0x3ba>
 8007f68:	1d3b      	adds	r3, r7, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	623b      	str	r3, [r7, #32]
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	623b      	str	r3, [r7, #32]
 8007f80:	463b      	mov	r3, r7
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	00da      	lsls	r2, r3, #3
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	891b      	ldrh	r3, [r3, #8]
 8007fa2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fa6:	463b      	mov	r3, r7
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6959      	ldr	r1, [r3, #20]
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fb6:	1d38      	adds	r0, r7, #4
 8007fb8:	6800      	ldr	r0, [r0, #0]
 8007fba:	f001 f81e 	bl	8008ffa <USB_WritePMA>
 8007fbe:	e2fd      	b.n	80085bc <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	785b      	ldrb	r3, [r3, #1]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d164      	bne.n	8008094 <USB_EPStartXfer+0x4b2>
 8007fca:	1d3b      	adds	r3, r7, #4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fde:	4413      	add	r3, r2
 8007fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	00da      	lsls	r2, r3, #3
 8007fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fec:	4413      	add	r3, r2
 8007fee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8007ffa:	d91c      	bls.n	8008036 <USB_EPStartXfer+0x454>
 8007ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800a:	f003 031f 	and.w	r3, r3, #31
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <USB_EPStartXfer+0x43a>
 8008012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008016:	3b01      	subs	r3, #1
 8008018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800801c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008020:	b29b      	uxth	r3, r3
 8008022:	029b      	lsls	r3, r3, #10
 8008024:	b29b      	uxth	r3, r3
 8008026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802e:	b29a      	uxth	r2, r3
 8008030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	e04d      	b.n	80080d2 <USB_EPStartXfer+0x4f0>
 8008036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803a:	2b00      	cmp	r3, #0
 800803c:	d112      	bne.n	8008064 <USB_EPStartXfer+0x482>
 800803e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008048:	b29a      	uxth	r2, r3
 800804a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805c:	b29a      	uxth	r2, r3
 800805e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	e036      	b.n	80080d2 <USB_EPStartXfer+0x4f0>
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <USB_EPStartXfer+0x4a2>
 800807a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800807e:	3301      	adds	r3, #1
 8008080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008084:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008088:	b29b      	uxth	r3, r3
 800808a:	029b      	lsls	r3, r3, #10
 800808c:	b29a      	uxth	r2, r3
 800808e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	e01e      	b.n	80080d2 <USB_EPStartXfer+0x4f0>
 8008094:	463b      	mov	r3, r7
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d119      	bne.n	80080d2 <USB_EPStartXfer+0x4f0>
 800809e:	1d3b      	adds	r3, r7, #4
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	653b      	str	r3, [r7, #80]	; 0x50
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b2:	4413      	add	r3, r2
 80080b4:	653b      	str	r3, [r7, #80]	; 0x50
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	00da      	lsls	r2, r3, #3
 80080be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080c0:	4413      	add	r3, r2
 80080c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080dc:	463b      	mov	r3, r7
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6959      	ldr	r1, [r3, #20]
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080ec:	1d38      	adds	r0, r7, #4
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	f000 ff83 	bl	8008ffa <USB_WritePMA>
            ep->xfer_buff += len;
 80080f4:	463b      	mov	r3, r7
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695a      	ldr	r2, [r3, #20]
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fe:	441a      	add	r2, r3
 8008100:	463b      	mov	r3, r7
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008106:	463b      	mov	r3, r7
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6a1a      	ldr	r2, [r3, #32]
 800810c:	463b      	mov	r3, r7
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	429a      	cmp	r2, r3
 8008114:	d909      	bls.n	800812a <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8008116:	463b      	mov	r3, r7
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6a1a      	ldr	r2, [r3, #32]
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008120:	1ad2      	subs	r2, r2, r3
 8008122:	463b      	mov	r3, r7
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	621a      	str	r2, [r3, #32]
 8008128:	e008      	b.n	800813c <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800812a:	463b      	mov	r3, r7
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2200      	movs	r2, #0
 800813a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800813c:	1d3b      	adds	r3, r7, #4
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	643b      	str	r3, [r7, #64]	; 0x40
 8008142:	463b      	mov	r3, r7
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d164      	bne.n	8008216 <USB_EPStartXfer+0x634>
 800814c:	1d3b      	adds	r3, r7, #4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	63bb      	str	r3, [r7, #56]	; 0x38
 8008152:	1d3b      	adds	r3, r7, #4
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800815a:	b29b      	uxth	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	4413      	add	r3, r2
 8008162:	63bb      	str	r3, [r7, #56]	; 0x38
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	00da      	lsls	r2, r3, #3
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	4413      	add	r3, r2
 8008170:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
 8008176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800817a:	2b3e      	cmp	r3, #62	; 0x3e
 800817c:	d91c      	bls.n	80081b8 <USB_EPStartXfer+0x5d6>
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <USB_EPStartXfer+0x5bc>
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008198:	3b01      	subs	r3, #1
 800819a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800819e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	029b      	lsls	r3, r3, #10
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	e04a      	b.n	800824e <USB_EPStartXfer+0x66c>
 80081b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d112      	bne.n	80081e6 <USB_EPStartXfer+0x604>
 80081c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081de:	b29a      	uxth	r2, r3
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	801a      	strh	r2, [r3, #0]
 80081e4:	e033      	b.n	800824e <USB_EPStartXfer+0x66c>
 80081e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <USB_EPStartXfer+0x624>
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008200:	3301      	adds	r3, #1
 8008202:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	b29b      	uxth	r3, r3
 800820c:	029b      	lsls	r3, r3, #10
 800820e:	b29a      	uxth	r2, r3
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e01b      	b.n	800824e <USB_EPStartXfer+0x66c>
 8008216:	463b      	mov	r3, r7
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d116      	bne.n	800824e <USB_EPStartXfer+0x66c>
 8008220:	1d3b      	adds	r3, r7, #4
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008228:	b29b      	uxth	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822e:	4413      	add	r3, r2
 8008230:	643b      	str	r3, [r7, #64]	; 0x40
 8008232:	463b      	mov	r3, r7
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	00da      	lsls	r2, r3, #3
 800823a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823c:	4413      	add	r3, r2
 800823e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008248:	b29a      	uxth	r2, r3
 800824a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800824e:	463b      	mov	r3, r7
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	895b      	ldrh	r3, [r3, #10]
 8008254:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008258:	463b      	mov	r3, r7
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6959      	ldr	r1, [r3, #20]
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008262:	b29b      	uxth	r3, r3
 8008264:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008268:	1d38      	adds	r0, r7, #4
 800826a:	6800      	ldr	r0, [r0, #0]
 800826c:	f000 fec5 	bl	8008ffa <USB_WritePMA>
 8008270:	e1a4      	b.n	80085bc <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008272:	463b      	mov	r3, r7
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800827c:	1d3b      	adds	r3, r7, #4
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	463b      	mov	r3, r7
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	463b      	mov	r3, r7
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	441a      	add	r2, r3
 80082a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80082ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082c6:	1d3b      	adds	r3, r7, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082d4:	4413      	add	r3, r2
 80082d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	00da      	lsls	r2, r3, #3
 80082e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082e2:	4413      	add	r3, r2
 80082e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082f4:	463b      	mov	r3, r7
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	891b      	ldrh	r3, [r3, #8]
 80082fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082fe:	463b      	mov	r3, r7
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6959      	ldr	r1, [r3, #20]
 8008304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008308:	b29b      	uxth	r3, r3
 800830a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800830e:	1d38      	adds	r0, r7, #4
 8008310:	6800      	ldr	r0, [r0, #0]
 8008312:	f000 fe72 	bl	8008ffa <USB_WritePMA>
 8008316:	e151      	b.n	80085bc <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008318:	463b      	mov	r3, r7
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6a1a      	ldr	r2, [r3, #32]
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008322:	1ad2      	subs	r2, r2, r3
 8008324:	463b      	mov	r3, r7
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800832a:	1d3b      	adds	r3, r7, #4
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	463b      	mov	r3, r7
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 809b 	beq.w	800847c <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	673b      	str	r3, [r7, #112]	; 0x70
 800834c:	463b      	mov	r3, r7
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	785b      	ldrb	r3, [r3, #1]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d164      	bne.n	8008420 <USB_EPStartXfer+0x83e>
 8008356:	1d3b      	adds	r3, r7, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	66bb      	str	r3, [r7, #104]	; 0x68
 800835c:	1d3b      	adds	r3, r7, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008364:	b29b      	uxth	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800836a:	4413      	add	r3, r2
 800836c:	66bb      	str	r3, [r7, #104]	; 0x68
 800836e:	463b      	mov	r3, r7
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	00da      	lsls	r2, r3, #3
 8008376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008378:	4413      	add	r3, r2
 800837a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800837e:	667b      	str	r3, [r7, #100]	; 0x64
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008384:	2b3e      	cmp	r3, #62	; 0x3e
 8008386:	d91c      	bls.n	80083c2 <USB_EPStartXfer+0x7e0>
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <USB_EPStartXfer+0x7c6>
 800839e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083a2:	3b01      	subs	r3, #1
 80083a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	029b      	lsls	r3, r3, #10
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	e04a      	b.n	8008458 <USB_EPStartXfer+0x876>
 80083c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d112      	bne.n	80083f0 <USB_EPStartXfer+0x80e>
 80083ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	e033      	b.n	8008458 <USB_EPStartXfer+0x876>
 80083f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <USB_EPStartXfer+0x82e>
 8008406:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800840a:	3301      	adds	r3, #1
 800840c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008410:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008414:	b29b      	uxth	r3, r3
 8008416:	029b      	lsls	r3, r3, #10
 8008418:	b29a      	uxth	r2, r3
 800841a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e01b      	b.n	8008458 <USB_EPStartXfer+0x876>
 8008420:	463b      	mov	r3, r7
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d116      	bne.n	8008458 <USB_EPStartXfer+0x876>
 800842a:	1d3b      	adds	r3, r7, #4
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008432:	b29b      	uxth	r3, r3
 8008434:	461a      	mov	r2, r3
 8008436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008438:	4413      	add	r3, r2
 800843a:	673b      	str	r3, [r7, #112]	; 0x70
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	00da      	lsls	r2, r3, #3
 8008444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008446:	4413      	add	r3, r2
 8008448:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800844c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008452:	b29a      	uxth	r2, r3
 8008454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008456:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008458:	463b      	mov	r3, r7
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	895b      	ldrh	r3, [r3, #10]
 800845e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008462:	463b      	mov	r3, r7
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6959      	ldr	r1, [r3, #20]
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846c:	b29b      	uxth	r3, r3
 800846e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008472:	1d38      	adds	r0, r7, #4
 8008474:	6800      	ldr	r0, [r0, #0]
 8008476:	f000 fdc0 	bl	8008ffa <USB_WritePMA>
 800847a:	e09f      	b.n	80085bc <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800847c:	463b      	mov	r3, r7
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d164      	bne.n	8008550 <USB_EPStartXfer+0x96e>
 8008486:	1d3b      	adds	r3, r7, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800848c:	1d3b      	adds	r3, r7, #4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008494:	b29b      	uxth	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800849a:	4413      	add	r3, r2
 800849c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800849e:	463b      	mov	r3, r7
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	00da      	lsls	r2, r3, #3
 80084a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084a8:	4413      	add	r3, r2
 80084aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b4:	2b3e      	cmp	r3, #62	; 0x3e
 80084b6:	d91c      	bls.n	80084f2 <USB_EPStartXfer+0x910>
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <USB_EPStartXfer+0x8f6>
 80084ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084d2:	3b01      	subs	r3, #1
 80084d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084dc:	b29b      	uxth	r3, r3
 80084de:	029b      	lsls	r3, r3, #10
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ee:	801a      	strh	r2, [r3, #0]
 80084f0:	e053      	b.n	800859a <USB_EPStartXfer+0x9b8>
 80084f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d112      	bne.n	8008520 <USB_EPStartXfer+0x93e>
 80084fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008504:	b29a      	uxth	r2, r3
 8008506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008508:	801a      	strh	r2, [r3, #0]
 800850a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	b29b      	uxth	r3, r3
 8008510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008518:	b29a      	uxth	r2, r3
 800851a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	e03c      	b.n	800859a <USB_EPStartXfer+0x9b8>
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008524:	085b      	lsrs	r3, r3, #1
 8008526:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800852a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d004      	beq.n	8008540 <USB_EPStartXfer+0x95e>
 8008536:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800853a:	3301      	adds	r3, #1
 800853c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008544:	b29b      	uxth	r3, r3
 8008546:	029b      	lsls	r3, r3, #10
 8008548:	b29a      	uxth	r2, r3
 800854a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854c:	801a      	strh	r2, [r3, #0]
 800854e:	e024      	b.n	800859a <USB_EPStartXfer+0x9b8>
 8008550:	463b      	mov	r3, r7
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d11f      	bne.n	800859a <USB_EPStartXfer+0x9b8>
 800855a:	1d3b      	adds	r3, r7, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008562:	1d3b      	adds	r3, r7, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800856a:	b29b      	uxth	r3, r3
 800856c:	461a      	mov	r2, r3
 800856e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008572:	4413      	add	r3, r2
 8008574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008578:	463b      	mov	r3, r7
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	00da      	lsls	r2, r3, #3
 8008580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008584:	4413      	add	r3, r2
 8008586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800858a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800858e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008592:	b29a      	uxth	r2, r3
 8008594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008598:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800859a:	463b      	mov	r3, r7
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	891b      	ldrh	r3, [r3, #8]
 80085a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085a4:	463b      	mov	r3, r7
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6959      	ldr	r1, [r3, #20]
 80085aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085b4:	1d38      	adds	r0, r7, #4
 80085b6:	6800      	ldr	r0, [r0, #0]
 80085b8:	f000 fd1f 	bl	8008ffa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80085bc:	1d3b      	adds	r3, r7, #4
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085d6:	817b      	strh	r3, [r7, #10]
 80085d8:	897b      	ldrh	r3, [r7, #10]
 80085da:	f083 0310 	eor.w	r3, r3, #16
 80085de:	817b      	strh	r3, [r7, #10]
 80085e0:	897b      	ldrh	r3, [r7, #10]
 80085e2:	f083 0320 	eor.w	r3, r3, #32
 80085e6:	817b      	strh	r3, [r7, #10]
 80085e8:	1d3b      	adds	r3, r7, #4
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	463b      	mov	r3, r7
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	897b      	ldrh	r3, [r7, #10]
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]
 800860c:	e3b5      	b.n	8008d7a <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800860e:	463b      	mov	r3, r7
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	7b1b      	ldrb	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	f040 8090 	bne.w	800873a <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800861a:	463b      	mov	r3, r7
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	463b      	mov	r3, r7
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	d90e      	bls.n	8008648 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800862a:	463b      	mov	r3, r7
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008634:	463b      	mov	r3, r7
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	619a      	str	r2, [r3, #24]
 8008646:	e008      	b.n	800865a <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008652:	463b      	mov	r3, r7
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008662:	1d3b      	adds	r3, r7, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800866a:	b29b      	uxth	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008672:	4413      	add	r3, r2
 8008674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008678:	463b      	mov	r3, r7
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	00da      	lsls	r2, r3, #3
 8008680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008684:	4413      	add	r3, r2
 8008686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800868a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008692:	2b3e      	cmp	r3, #62	; 0x3e
 8008694:	d91d      	bls.n	80086d2 <USB_EPStartXfer+0xaf0>
 8008696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d104      	bne.n	80086b6 <USB_EPStartXfer+0xad4>
 80086ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086b0:	3b01      	subs	r3, #1
 80086b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	b29b      	uxth	r3, r3
 80086c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	e325      	b.n	8008d1e <USB_EPStartXfer+0x113c>
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d116      	bne.n	8008708 <USB_EPStartXfer+0xb26>
 80086da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fe:	b29a      	uxth	r2, r3
 8008700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008704:	801a      	strh	r2, [r3, #0]
 8008706:	e30a      	b.n	8008d1e <USB_EPStartXfer+0x113c>
 8008708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <USB_EPStartXfer+0xb46>
 800871e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008722:	3301      	adds	r3, #1
 8008724:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008728:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800872c:	b29b      	uxth	r3, r3
 800872e:	029b      	lsls	r3, r3, #10
 8008730:	b29a      	uxth	r2, r3
 8008732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	e2f1      	b.n	8008d1e <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800873a:	463b      	mov	r3, r7
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	78db      	ldrb	r3, [r3, #3]
 8008740:	2b02      	cmp	r3, #2
 8008742:	f040 818f 	bne.w	8008a64 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008746:	463b      	mov	r3, r7
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d175      	bne.n	800883c <USB_EPStartXfer+0xc5a>
 8008750:	1d3b      	adds	r3, r7, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008760:	b29b      	uxth	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008768:	4413      	add	r3, r2
 800876a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800876e:	463b      	mov	r3, r7
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	00da      	lsls	r2, r3, #3
 8008776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800877a:	4413      	add	r3, r2
 800877c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008784:	463b      	mov	r3, r7
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b3e      	cmp	r3, #62	; 0x3e
 800878c:	d91f      	bls.n	80087ce <USB_EPStartXfer+0xbec>
 800878e:	463b      	mov	r3, r7
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800879a:	463b      	mov	r3, r7
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f003 031f 	and.w	r3, r3, #31
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <USB_EPStartXfer+0xbd0>
 80087a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ac:	3b01      	subs	r3, #1
 80087ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	029b      	lsls	r3, r3, #10
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ca:	801a      	strh	r2, [r3, #0]
 80087cc:	e05c      	b.n	8008888 <USB_EPStartXfer+0xca6>
 80087ce:	463b      	mov	r3, r7
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d116      	bne.n	8008806 <USB_EPStartXfer+0xc24>
 80087d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ea:	801a      	strh	r2, [r3, #0]
 80087ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	e040      	b.n	8008888 <USB_EPStartXfer+0xca6>
 8008806:	463b      	mov	r3, r7
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	085b      	lsrs	r3, r3, #1
 800880e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008812:	463b      	mov	r3, r7
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <USB_EPStartXfer+0xc48>
 8008820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008824:	3301      	adds	r3, #1
 8008826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800882a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882e:	b29b      	uxth	r3, r3
 8008830:	029b      	lsls	r3, r3, #10
 8008832:	b29a      	uxth	r2, r3
 8008834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	e025      	b.n	8008888 <USB_EPStartXfer+0xca6>
 800883c:	463b      	mov	r3, r7
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d120      	bne.n	8008888 <USB_EPStartXfer+0xca6>
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008856:	b29b      	uxth	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800885e:	4413      	add	r3, r2
 8008860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008864:	463b      	mov	r3, r7
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	00da      	lsls	r2, r3, #3
 800886c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008870:	4413      	add	r3, r2
 8008872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	b29a      	uxth	r2, r3
 8008882:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008886:	801a      	strh	r2, [r3, #0]
 8008888:	1d3b      	adds	r3, r7, #4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008890:	463b      	mov	r3, r7
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d175      	bne.n	8008986 <USB_EPStartXfer+0xda4>
 800889a:	1d3b      	adds	r3, r7, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088a2:	1d3b      	adds	r3, r7, #4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088b2:	4413      	add	r3, r2
 80088b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088b8:	463b      	mov	r3, r7
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	00da      	lsls	r2, r3, #3
 80088c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088c4:	4413      	add	r3, r2
 80088c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088ce:	463b      	mov	r3, r7
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b3e      	cmp	r3, #62	; 0x3e
 80088d6:	d91f      	bls.n	8008918 <USB_EPStartXfer+0xd36>
 80088d8:	463b      	mov	r3, r7
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088e4:	463b      	mov	r3, r7
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 031f 	and.w	r3, r3, #31
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d104      	bne.n	80088fc <USB_EPStartXfer+0xd1a>
 80088f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f6:	3b01      	subs	r3, #1
 80088f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008900:	b29b      	uxth	r3, r3
 8008902:	029b      	lsls	r3, r3, #10
 8008904:	b29b      	uxth	r3, r3
 8008906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890e:	b29a      	uxth	r2, r3
 8008910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008914:	801a      	strh	r2, [r3, #0]
 8008916:	e058      	b.n	80089ca <USB_EPStartXfer+0xde8>
 8008918:	463b      	mov	r3, r7
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d116      	bne.n	8008950 <USB_EPStartXfer+0xd6e>
 8008922:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29b      	uxth	r3, r3
 800892a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800892e:	b29a      	uxth	r2, r3
 8008930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008934:	801a      	strh	r2, [r3, #0]
 8008936:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	b29b      	uxth	r3, r3
 800893e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008946:	b29a      	uxth	r2, r3
 8008948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	e03c      	b.n	80089ca <USB_EPStartXfer+0xde8>
 8008950:	463b      	mov	r3, r7
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800895c:	463b      	mov	r3, r7
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <USB_EPStartXfer+0xd92>
 800896a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800896e:	3301      	adds	r3, #1
 8008970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008978:	b29b      	uxth	r3, r3
 800897a:	029b      	lsls	r3, r3, #10
 800897c:	b29a      	uxth	r2, r3
 800897e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008982:	801a      	strh	r2, [r3, #0]
 8008984:	e021      	b.n	80089ca <USB_EPStartXfer+0xde8>
 8008986:	463b      	mov	r3, r7
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d11c      	bne.n	80089ca <USB_EPStartXfer+0xde8>
 8008990:	1d3b      	adds	r3, r7, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008998:	b29b      	uxth	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089a0:	4413      	add	r3, r2
 80089a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089a6:	463b      	mov	r3, r7
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	00da      	lsls	r2, r3, #3
 80089ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089b2:	4413      	add	r3, r2
 80089b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089bc:	463b      	mov	r3, r7
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089ca:	463b      	mov	r3, r7
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 81a4 	beq.w	8008d1e <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	463b      	mov	r3, r7
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <USB_EPStartXfer+0xe20>
 80089f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10d      	bne.n	8008a1e <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f040 8187 	bne.w	8008d1e <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 8180 	bne.w	8008d1e <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a1e:	1d3b      	adds	r3, r7, #4
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a3c:	1d3b      	adds	r3, r7, #4
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	441a      	add	r2, r3
 8008a4a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]
 8008a62:	e15c      	b.n	8008d1e <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a64:	463b      	mov	r3, r7
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	78db      	ldrb	r3, [r3, #3]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	f040 8155 	bne.w	8008d1a <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a70:	463b      	mov	r3, r7
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	463b      	mov	r3, r7
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d90e      	bls.n	8008a9e <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008a80:	463b      	mov	r3, r7
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008a8a:	463b      	mov	r3, r7
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699a      	ldr	r2, [r3, #24]
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a94:	1ad2      	subs	r2, r2, r3
 8008a96:	463b      	mov	r3, r7
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	619a      	str	r2, [r3, #24]
 8008a9c:	e008      	b.n	8008ab0 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2200      	movs	r2, #0
 8008aae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d16f      	bne.n	8008b9a <USB_EPStartXfer+0xfb8>
 8008aba:	1d3b      	adds	r3, r7, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ad8:	463b      	mov	r3, r7
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	00da      	lsls	r2, r3, #3
 8008ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af2:	2b3e      	cmp	r3, #62	; 0x3e
 8008af4:	d91d      	bls.n	8008b32 <USB_EPStartXfer+0xf50>
 8008af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <USB_EPStartXfer+0xf34>
 8008b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b10:	3b01      	subs	r3, #1
 8008b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	029b      	lsls	r3, r3, #10
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	e058      	b.n	8008be4 <USB_EPStartXfer+0x1002>
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d116      	bne.n	8008b68 <USB_EPStartXfer+0xf86>
 8008b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b4c:	801a      	strh	r2, [r3, #0]
 8008b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b64:	801a      	strh	r2, [r3, #0]
 8008b66:	e03d      	b.n	8008be4 <USB_EPStartXfer+0x1002>
 8008b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <USB_EPStartXfer+0xfa6>
 8008b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b82:	3301      	adds	r3, #1
 8008b84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	029b      	lsls	r3, r3, #10
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	e024      	b.n	8008be4 <USB_EPStartXfer+0x1002>
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d11f      	bne.n	8008be4 <USB_EPStartXfer+0x1002>
 8008ba4:	1d3b      	adds	r3, r7, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bac:	1d3b      	adds	r3, r7, #4
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	00da      	lsls	r2, r3, #3
 8008bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bce:	4413      	add	r3, r2
 8008bd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008be2:	801a      	strh	r2, [r3, #0]
 8008be4:	1d3b      	adds	r3, r7, #4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bec:	463b      	mov	r3, r7
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d16f      	bne.n	8008cd6 <USB_EPStartXfer+0x10f4>
 8008bf6:	1d3b      	adds	r3, r7, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008bfe:	1d3b      	adds	r3, r7, #4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c0e:	4413      	add	r3, r2
 8008c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c14:	463b      	mov	r3, r7
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00da      	lsls	r2, r3, #3
 8008c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c20:	4413      	add	r3, r2
 8008c22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008c30:	d91d      	bls.n	8008c6e <USB_EPStartXfer+0x108c>
 8008c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c40:	f003 031f 	and.w	r3, r3, #31
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <USB_EPStartXfer+0x1070>
 8008c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	029b      	lsls	r3, r3, #10
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	e057      	b.n	8008d1e <USB_EPStartXfer+0x113c>
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d116      	bne.n	8008ca4 <USB_EPStartXfer+0x10c2>
 8008c76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ca0:	801a      	strh	r2, [r3, #0]
 8008ca2:	e03c      	b.n	8008d1e <USB_EPStartXfer+0x113c>
 8008ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d004      	beq.n	8008cc4 <USB_EPStartXfer+0x10e2>
 8008cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	029b      	lsls	r3, r3, #10
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cd2:	801a      	strh	r2, [r3, #0]
 8008cd4:	e023      	b.n	8008d1e <USB_EPStartXfer+0x113c>
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d11e      	bne.n	8008d1e <USB_EPStartXfer+0x113c>
 8008ce0:	1d3b      	adds	r3, r7, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cf6:	463b      	mov	r3, r7
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	00da      	lsls	r2, r3, #3
 8008cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d02:	4413      	add	r3, r2
 8008d04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	e001      	b.n	8008d1e <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e02e      	b.n	8008d7c <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	463b      	mov	r3, r7
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d54:	1d3b      	adds	r3, r7, #4
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	463b      	mov	r3, r7
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	785b      	ldrb	r3, [r3, #1]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d020      	beq.n	8008dda <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dae:	81bb      	strh	r3, [r7, #12]
 8008db0:	89bb      	ldrh	r3, [r7, #12]
 8008db2:	f083 0310 	eor.w	r3, r3, #16
 8008db6:	81bb      	strh	r3, [r7, #12]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	441a      	add	r2, r3
 8008dc2:	89bb      	ldrh	r3, [r7, #12]
 8008dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	8013      	strh	r3, [r2, #0]
 8008dd8:	e01f      	b.n	8008e1a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df0:	81fb      	strh	r3, [r7, #14]
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008df8:	81fb      	strh	r3, [r7, #14]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	441a      	add	r2, r3
 8008e04:	89fb      	ldrh	r3, [r7, #14]
 8008e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	7b1b      	ldrb	r3, [r3, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f040 809d 	bne.w	8008f76 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d04c      	beq.n	8008ede <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	823b      	strh	r3, [r7, #16]
 8008e52:	8a3b      	ldrh	r3, [r7, #16]
 8008e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01b      	beq.n	8008e94 <USB_EPClearStall+0x6c>
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e72:	81fb      	strh	r3, [r7, #14]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	441a      	add	r2, r3
 8008e7e:	89fb      	ldrh	r3, [r7, #14]
 8008e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	78db      	ldrb	r3, [r3, #3]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d06c      	beq.n	8008f76 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eb2:	81bb      	strh	r3, [r7, #12]
 8008eb4:	89bb      	ldrh	r3, [r7, #12]
 8008eb6:	f083 0320 	eor.w	r3, r3, #32
 8008eba:	81bb      	strh	r3, [r7, #12]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	89bb      	ldrh	r3, [r7, #12]
 8008ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	8013      	strh	r3, [r2, #0]
 8008edc:	e04b      	b.n	8008f76 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	82fb      	strh	r3, [r7, #22]
 8008eec:	8afb      	ldrh	r3, [r7, #22]
 8008eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d01b      	beq.n	8008f2e <USB_EPClearStall+0x106>
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0c:	82bb      	strh	r3, [r7, #20]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	441a      	add	r2, r3
 8008f18:	8abb      	ldrh	r3, [r7, #20]
 8008f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f44:	827b      	strh	r3, [r7, #18]
 8008f46:	8a7b      	ldrh	r3, [r7, #18]
 8008f48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f4c:	827b      	strh	r3, [r7, #18]
 8008f4e:	8a7b      	ldrh	r3, [r7, #18]
 8008f50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f54:	827b      	strh	r3, [r7, #18]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	441a      	add	r2, r3
 8008f60:	8a7b      	ldrh	r3, [r7, #18]
 8008f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d103      	bne.n	8008f9e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2280      	movs	r2, #128	; 0x80
 8008f9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fec:	68fb      	ldr	r3, [r7, #12]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b08d      	sub	sp, #52	; 0x34
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	4611      	mov	r1, r2
 8009006:	461a      	mov	r2, r3
 8009008:	460b      	mov	r3, r1
 800900a:	80fb      	strh	r3, [r7, #6]
 800900c:	4613      	mov	r3, r2
 800900e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009010:	88bb      	ldrh	r3, [r7, #4]
 8009012:	3301      	adds	r3, #1
 8009014:	085b      	lsrs	r3, r3, #1
 8009016:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009020:	88fa      	ldrh	r2, [r7, #6]
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009030:	e01b      	b.n	800906a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	3301      	adds	r3, #1
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	b29b      	uxth	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	b29a      	uxth	r2, r3
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	3302      	adds	r3, #2
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	3301      	adds	r3, #1
 8009062:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	3b01      	subs	r3, #1
 8009068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e0      	bne.n	8009032 <USB_WritePMA+0x38>
  }
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	3734      	adds	r7, #52	; 0x34
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800907e:	b480      	push	{r7}
 8009080:	b08b      	sub	sp, #44	; 0x2c
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	4611      	mov	r1, r2
 800908a:	461a      	mov	r2, r3
 800908c:	460b      	mov	r3, r1
 800908e:	80fb      	strh	r3, [r7, #6]
 8009090:	4613      	mov	r3, r2
 8009092:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009094:	88bb      	ldrh	r3, [r7, #4]
 8009096:	085b      	lsrs	r3, r3, #1
 8009098:	b29b      	uxth	r3, r3
 800909a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090a4:	88fa      	ldrh	r2, [r7, #6]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ae:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
 80090b4:	e018      	b.n	80090e8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	3302      	adds	r3, #2
 80090c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	3301      	adds	r3, #1
 80090d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	0a1b      	lsrs	r3, r3, #8
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	3301      	adds	r3, #1
 80090e0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	3b01      	subs	r3, #1
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e3      	bne.n	80090b6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090ee:	88bb      	ldrh	r3, [r7, #4]
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d007      	beq.n	800910a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	b2da      	uxtb	r2, r3
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	701a      	strb	r2, [r3, #0]
  }
}
 800910a:	bf00      	nop
 800910c:	372c      	adds	r7, #44	; 0x2c
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009122:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009126:	f002 f909 	bl	800b33c <USBD_static_malloc>
 800912a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d105      	bne.n	800913e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800913a:	2302      	movs	r3, #2
 800913c:	e066      	b.n	800920c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7c1b      	ldrb	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d119      	bne.n	8009182 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800914e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009152:	2202      	movs	r2, #2
 8009154:	2181      	movs	r1, #129	; 0x81
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 ff95 	bl	800b086 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009166:	2202      	movs	r2, #2
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 ff8b 	bl	800b086 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2210      	movs	r2, #16
 800917c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009180:	e016      	b.n	80091b0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009182:	2340      	movs	r3, #64	; 0x40
 8009184:	2202      	movs	r2, #2
 8009186:	2181      	movs	r1, #129	; 0x81
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f001 ff7c 	bl	800b086 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009194:	2340      	movs	r3, #64	; 0x40
 8009196:	2202      	movs	r2, #2
 8009198:	2101      	movs	r1, #1
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 ff73 	bl	800b086 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2210      	movs	r2, #16
 80091ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091b0:	2308      	movs	r3, #8
 80091b2:	2203      	movs	r2, #3
 80091b4:	2182      	movs	r1, #130	; 0x82
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 ff65 	bl	800b086 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7c1b      	ldrb	r3, [r3, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f0:	2101      	movs	r1, #1
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f002 f837 	bl	800b266 <USBD_LL_PrepareReceive>
 80091f8:	e007      	b.n	800920a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009200:	2340      	movs	r3, #64	; 0x40
 8009202:	2101      	movs	r1, #1
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f002 f82e 	bl	800b266 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009220:	2181      	movs	r1, #129	; 0x81
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 ff55 	bl	800b0d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800922e:	2101      	movs	r1, #1
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 ff4e 	bl	800b0d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800923e:	2182      	movs	r1, #130	; 0x82
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 ff46 	bl	800b0d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00e      	beq.n	800927e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009270:	4618      	mov	r0, r3
 8009272:	f002 f871 	bl	800b358 <USBD_static_free>
    pdev->pClassData = NULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009298:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e0af      	b.n	8009410 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d03f      	beq.n	800933c <USBD_CDC_Setup+0xb4>
 80092bc:	2b20      	cmp	r3, #32
 80092be:	f040 809f 	bne.w	8009400 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d02e      	beq.n	8009328 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	b25b      	sxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	da16      	bge.n	8009302 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	88d2      	ldrh	r2, [r2, #6]
 80092e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	88db      	ldrh	r3, [r3, #6]
 80092ec:	2b07      	cmp	r3, #7
 80092ee:	bf28      	it	cs
 80092f0:	2307      	movcs	r3, #7
 80092f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	89fa      	ldrh	r2, [r7, #14]
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 facf 	bl	800a89e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009300:	e085      	b.n	800940e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	785a      	ldrb	r2, [r3, #1]
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	88db      	ldrh	r3, [r3, #6]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009318:	6939      	ldr	r1, [r7, #16]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	88db      	ldrh	r3, [r3, #6]
 800931e:	461a      	mov	r2, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 fae8 	bl	800a8f6 <USBD_CtlPrepareRx>
      break;
 8009326:	e072      	b.n	800940e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	7850      	ldrb	r0, [r2, #1]
 8009334:	2200      	movs	r2, #0
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	4798      	blx	r3
      break;
 800933a:	e068      	b.n	800940e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	785b      	ldrb	r3, [r3, #1]
 8009340:	2b0b      	cmp	r3, #11
 8009342:	d852      	bhi.n	80093ea <USBD_CDC_Setup+0x162>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <USBD_CDC_Setup+0xc4>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	0800937d 	.word	0x0800937d
 8009350:	080093f9 	.word	0x080093f9
 8009354:	080093eb 	.word	0x080093eb
 8009358:	080093eb 	.word	0x080093eb
 800935c:	080093eb 	.word	0x080093eb
 8009360:	080093eb 	.word	0x080093eb
 8009364:	080093eb 	.word	0x080093eb
 8009368:	080093eb 	.word	0x080093eb
 800936c:	080093eb 	.word	0x080093eb
 8009370:	080093eb 	.word	0x080093eb
 8009374:	080093a7 	.word	0x080093a7
 8009378:	080093d1 	.word	0x080093d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b03      	cmp	r3, #3
 8009386:	d107      	bne.n	8009398 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009388:	f107 030a 	add.w	r3, r7, #10
 800938c:	2202      	movs	r2, #2
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 fa84 	bl	800a89e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009396:	e032      	b.n	80093fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fa0e 	bl	800a7bc <USBD_CtlError>
            ret = USBD_FAIL;
 80093a0:	2303      	movs	r3, #3
 80093a2:	75fb      	strb	r3, [r7, #23]
          break;
 80093a4:	e02b      	b.n	80093fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d107      	bne.n	80093c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093b2:	f107 030d 	add.w	r3, r7, #13
 80093b6:	2201      	movs	r2, #1
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 fa6f 	bl	800a89e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093c0:	e01d      	b.n	80093fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 f9f9 	bl	800a7bc <USBD_CtlError>
            ret = USBD_FAIL;
 80093ca:	2303      	movs	r3, #3
 80093cc:	75fb      	strb	r3, [r7, #23]
          break;
 80093ce:	e016      	b.n	80093fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d00f      	beq.n	80093fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 f9ec 	bl	800a7bc <USBD_CtlError>
            ret = USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093e8:	e008      	b.n	80093fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 f9e5 	bl	800a7bc <USBD_CtlError>
          ret = USBD_FAIL;
 80093f2:	2303      	movs	r3, #3
 80093f4:	75fb      	strb	r3, [r7, #23]
          break;
 80093f6:	e002      	b.n	80093fe <USBD_CDC_Setup+0x176>
          break;
 80093f8:	bf00      	nop
 80093fa:	e008      	b.n	800940e <USBD_CDC_Setup+0x186>
          break;
 80093fc:	bf00      	nop
      }
      break;
 80093fe:	e006      	b.n	800940e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 f9da 	bl	800a7bc <USBD_CtlError>
      ret = USBD_FAIL;
 8009408:	2303      	movs	r3, #3
 800940a:	75fb      	strb	r3, [r7, #23]
      break;
 800940c:	bf00      	nop
  }

  return (uint8_t)ret;
 800940e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800942a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009436:	2303      	movs	r3, #3
 8009438:	e04f      	b.n	80094da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009442:	78fa      	ldrb	r2, [r7, #3]
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	440b      	add	r3, r1
 8009450:	3318      	adds	r3, #24
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d029      	beq.n	80094ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	3318      	adds	r3, #24
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	78f9      	ldrb	r1, [r7, #3]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	460b      	mov	r3, r1
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	4403      	add	r3, r0
 8009478:	3338      	adds	r3, #56	; 0x38
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009480:	fb03 f301 	mul.w	r3, r3, r1
 8009484:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009486:	2b00      	cmp	r3, #0
 8009488:	d110      	bne.n	80094ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800948a:	78fa      	ldrb	r2, [r7, #3]
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	3318      	adds	r3, #24
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800949e:	78f9      	ldrb	r1, [r7, #3]
 80094a0:	2300      	movs	r3, #0
 80094a2:	2200      	movs	r2, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 febd 	bl	800b224 <USBD_LL_Transmit>
 80094aa:	e015      	b.n	80094d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009500:	2303      	movs	r3, #3
 8009502:	e015      	b.n	8009530 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 fecd 	bl	800b2a8 <USBD_LL_GetRxDataSize>
 800950e:	4602      	mov	r2, r0
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800952a:	4611      	mov	r1, r2
 800952c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009546:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800954e:	2303      	movs	r3, #3
 8009550:	e01b      	b.n	800958a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d015      	beq.n	8009588 <USBD_CDC_EP0_RxReady+0x50>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009562:	2bff      	cmp	r3, #255	; 0xff
 8009564:	d010      	beq.n	8009588 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009574:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800957c:	b292      	uxth	r2, r2
 800957e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	22ff      	movs	r2, #255	; 0xff
 8009584:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2243      	movs	r2, #67	; 0x43
 80095a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80095a2:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	200000b0 	.word	0x200000b0

080095b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2243      	movs	r2, #67	; 0x43
 80095c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80095c2:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	2000006c 	.word	0x2000006c

080095d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2243      	movs	r2, #67	; 0x43
 80095e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095e2:	4b03      	ldr	r3, [pc, #12]	; (80095f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	200000f4 	.word	0x200000f4

080095f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	220a      	movs	r2, #10
 8009600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009602:	4b03      	ldr	r3, [pc, #12]	; (8009610 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	20000028 	.word	0x20000028

08009614 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009624:	2303      	movs	r3, #3
 8009626:	e004      	b.n	8009632 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800963e:	b480      	push	{r7}
 8009640:	b087      	sub	sp, #28
 8009642:	af00      	add	r7, sp, #0
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	60b9      	str	r1, [r7, #8]
 8009648:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009650:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	e008      	b.n	800966e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800968a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009692:	2303      	movs	r3, #3
 8009694:	e004      	b.n	80096a0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80096bc:	2301      	movs	r3, #1
 80096be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e01a      	b.n	8009704 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d114      	bne.n	8009702 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2201      	movs	r2, #1
 80096dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80096f6:	2181      	movs	r1, #129	; 0x81
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fd93 	bl	800b224 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800971a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009726:	2303      	movs	r3, #3
 8009728:	e016      	b.n	8009758 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	7c1b      	ldrb	r3, [r3, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800973c:	2101      	movs	r1, #1
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 fd91 	bl	800b266 <USBD_LL_PrepareReceive>
 8009744:	e007      	b.n	8009756 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	2101      	movs	r1, #1
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fd88 	bl	800b266 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	4613      	mov	r3, r2
 800976c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009774:	2303      	movs	r3, #3
 8009776:	e01f      	b.n	80097b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	79fa      	ldrb	r2, [r7, #7]
 80097aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f001 fbef 	bl	800af90 <USBD_LL_Init>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e016      	b.n	8009806 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	f107 020e 	add.w	r2, r7, #14
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
 80097fc:	4602      	mov	r2, r0
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 fc1a 	bl	800b050 <USBD_LL_Start>
 800981c:	4603      	mov	r3, r0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009848:	2303      	movs	r3, #3
 800984a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009852:	2b00      	cmp	r3, #0
 8009854:	d009      	beq.n	800986a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	78fa      	ldrb	r2, [r7, #3]
 8009860:	4611      	mov	r1, r2
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	4611      	mov	r1, r2
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
  }

  return USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 ff46 	bl	800a748 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80098ca:	461a      	mov	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098d8:	f003 031f 	and.w	r3, r3, #31
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d01a      	beq.n	8009916 <USBD_LL_SetupStage+0x72>
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d822      	bhi.n	800992a <USBD_LL_SetupStage+0x86>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <USBD_LL_SetupStage+0x4a>
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d00a      	beq.n	8009902 <USBD_LL_SetupStage+0x5e>
 80098ec:	e01d      	b.n	800992a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9ee 	bl	8009cd8 <USBD_StdDevReq>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009900:	e020      	b.n	8009944 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa52 	bl	8009db4 <USBD_StdItfReq>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
      break;
 8009914:	e016      	b.n	8009944 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa91 	bl	8009e46 <USBD_StdEPReq>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]
      break;
 8009928:	e00c      	b.n	8009944 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009930:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009934:	b2db      	uxtb	r3, r3
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 fbe9 	bl	800b110 <USBD_LL_StallEP>
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]
      break;
 8009942:	bf00      	nop
  }

  return ret;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	460b      	mov	r3, r1
 8009958:	607a      	str	r2, [r7, #4]
 800995a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d138      	bne.n	80099d4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009968:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009970:	2b03      	cmp	r3, #3
 8009972:	d14a      	bne.n	8009a0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	429a      	cmp	r2, r3
 800997e:	d913      	bls.n	80099a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	1ad2      	subs	r2, r2, r3
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	4293      	cmp	r3, r2
 8009998:	bf28      	it	cs
 800999a:	4613      	movcs	r3, r2
 800999c:	461a      	mov	r2, r3
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 ffc5 	bl	800a930 <USBD_CtlContinueRx>
 80099a6:	e030      	b.n	8009a0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b03      	cmp	r3, #3
 80099b2:	d10b      	bne.n	80099cc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 ffc0 	bl	800a952 <USBD_CtlSendStatus>
 80099d2:	e01a      	b.n	8009a0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d114      	bne.n	8009a0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00e      	beq.n	8009a0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	7afa      	ldrb	r2, [r7, #11]
 80099f6:	4611      	mov	r1, r2
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	4798      	blx	r3
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	e000      	b.n	8009a0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a22:	7afb      	ldrb	r3, [r7, #11]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d16b      	bne.n	8009b00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3314      	adds	r3, #20
 8009a2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d156      	bne.n	8009ae6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d914      	bls.n	8009a6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	1ad2      	subs	r2, r2, r3
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	461a      	mov	r2, r3
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 ff3a 	bl	800a8d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a60:	2300      	movs	r3, #0
 8009a62:	2200      	movs	r2, #0
 8009a64:	2100      	movs	r1, #0
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f001 fbfd 	bl	800b266 <USBD_LL_PrepareReceive>
 8009a6c:	e03b      	b.n	8009ae6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d11c      	bne.n	8009ab4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d316      	bcc.n	8009ab4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d20f      	bcs.n	8009ab4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a94:	2200      	movs	r2, #0
 8009a96:	2100      	movs	r1, #0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 ff1b 	bl	800a8d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2100      	movs	r1, #0
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f001 fbda 	bl	800b266 <USBD_LL_PrepareReceive>
 8009ab2:	e018      	b.n	8009ae6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d10b      	bne.n	8009ad8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ad8:	2180      	movs	r1, #128	; 0x80
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f001 fb18 	bl	800b110 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 ff49 	bl	800a978 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d122      	bne.n	8009b36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7ff fe98 	bl	8009826 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009afe:	e01a      	b.n	8009b36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d114      	bne.n	8009b36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00e      	beq.n	8009b36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	7afa      	ldrb	r2, [r7, #11]
 8009b22:	4611      	mov	r1, r2
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	4798      	blx	r3
 8009b28:	4603      	mov	r3, r0
 8009b2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	e000      	b.n	8009b38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e02f      	b.n	8009bd4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00f      	beq.n	8009b9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6852      	ldr	r2, [r2, #4]
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	4611      	mov	r1, r2
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 fa6e 	bl	800b086 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2240      	movs	r2, #64	; 0x40
 8009bb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bba:	2340      	movs	r3, #64	; 0x40
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2180      	movs	r1, #128	; 0x80
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 fa60 	bl	800b086 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2240      	movs	r2, #64	; 0x40
 8009bd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	78fa      	ldrb	r2, [r7, #3]
 8009bec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2204      	movs	r2, #4
 8009c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d106      	bne.n	8009c4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e012      	b.n	8009c94 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d10b      	bne.n	8009c92 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8c:	69db      	ldr	r3, [r3, #28]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cba:	8a3b      	ldrh	r3, [r7, #16]
 8009cbc:	021b      	lsls	r3, r3, #8
 8009cbe:	b21a      	sxth	r2, r3
 8009cc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	b21b      	sxth	r3, r3
 8009cc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009cca:	89fb      	ldrh	r3, [r7, #14]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cee:	2b40      	cmp	r3, #64	; 0x40
 8009cf0:	d005      	beq.n	8009cfe <USBD_StdDevReq+0x26>
 8009cf2:	2b40      	cmp	r3, #64	; 0x40
 8009cf4:	d853      	bhi.n	8009d9e <USBD_StdDevReq+0xc6>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00b      	beq.n	8009d12 <USBD_StdDevReq+0x3a>
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	d14f      	bne.n	8009d9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4798      	blx	r3
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d10:	e04a      	b.n	8009da8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d83b      	bhi.n	8009d92 <USBD_StdDevReq+0xba>
 8009d1a:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <USBD_StdDevReq+0x48>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d75 	.word	0x08009d75
 8009d24:	08009d89 	.word	0x08009d89
 8009d28:	08009d93 	.word	0x08009d93
 8009d2c:	08009d7f 	.word	0x08009d7f
 8009d30:	08009d93 	.word	0x08009d93
 8009d34:	08009d53 	.word	0x08009d53
 8009d38:	08009d49 	.word	0x08009d49
 8009d3c:	08009d93 	.word	0x08009d93
 8009d40:	08009d6b 	.word	0x08009d6b
 8009d44:	08009d5d 	.word	0x08009d5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f9de 	bl	800a10c <USBD_GetDescriptor>
          break;
 8009d50:	e024      	b.n	8009d9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fb6d 	bl	800a434 <USBD_SetAddress>
          break;
 8009d5a:	e01f      	b.n	8009d9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fbac 	bl	800a4bc <USBD_SetConfig>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
          break;
 8009d68:	e018      	b.n	8009d9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fc4b 	bl	800a608 <USBD_GetConfig>
          break;
 8009d72:	e013      	b.n	8009d9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fc7c 	bl	800a674 <USBD_GetStatus>
          break;
 8009d7c:	e00e      	b.n	8009d9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fcab 	bl	800a6dc <USBD_SetFeature>
          break;
 8009d86:	e009      	b.n	8009d9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fcba 	bl	800a704 <USBD_ClrFeature>
          break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fd11 	bl	800a7bc <USBD_CtlError>
          break;
 8009d9a:	bf00      	nop
      }
      break;
 8009d9c:	e004      	b.n	8009da8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fd0b 	bl	800a7bc <USBD_CtlError>
      break;
 8009da6:	bf00      	nop
  }

  return ret;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop

08009db4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dca:	2b40      	cmp	r3, #64	; 0x40
 8009dcc:	d005      	beq.n	8009dda <USBD_StdItfReq+0x26>
 8009dce:	2b40      	cmp	r3, #64	; 0x40
 8009dd0:	d82f      	bhi.n	8009e32 <USBD_StdItfReq+0x7e>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <USBD_StdItfReq+0x26>
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d12b      	bne.n	8009e32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	3b01      	subs	r3, #1
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d81d      	bhi.n	8009e24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	889b      	ldrh	r3, [r3, #4]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d813      	bhi.n	8009e1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	4798      	blx	r3
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	88db      	ldrh	r3, [r3, #6]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d110      	bne.n	8009e2e <USBD_StdItfReq+0x7a>
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10d      	bne.n	8009e2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fd9d 	bl	800a952 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e18:	e009      	b.n	8009e2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fccd 	bl	800a7bc <USBD_CtlError>
          break;
 8009e22:	e004      	b.n	8009e2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fcc8 	bl	800a7bc <USBD_CtlError>
          break;
 8009e2c:	e000      	b.n	8009e30 <USBD_StdItfReq+0x7c>
          break;
 8009e2e:	bf00      	nop
      }
      break;
 8009e30:	e004      	b.n	8009e3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fcc1 	bl	800a7bc <USBD_CtlError>
      break;
 8009e3a:	bf00      	nop
  }

  return ret;
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	889b      	ldrh	r3, [r3, #4]
 8009e58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e62:	2b40      	cmp	r3, #64	; 0x40
 8009e64:	d007      	beq.n	8009e76 <USBD_StdEPReq+0x30>
 8009e66:	2b40      	cmp	r3, #64	; 0x40
 8009e68:	f200 8145 	bhi.w	800a0f6 <USBD_StdEPReq+0x2b0>
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00c      	beq.n	8009e8a <USBD_StdEPReq+0x44>
 8009e70:	2b20      	cmp	r3, #32
 8009e72:	f040 8140 	bne.w	800a0f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	4798      	blx	r3
 8009e84:	4603      	mov	r3, r0
 8009e86:	73fb      	strb	r3, [r7, #15]
      break;
 8009e88:	e13a      	b.n	800a100 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d007      	beq.n	8009ea2 <USBD_StdEPReq+0x5c>
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	f300 8129 	bgt.w	800a0ea <USBD_StdEPReq+0x2a4>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d07f      	beq.n	8009f9c <USBD_StdEPReq+0x156>
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d03c      	beq.n	8009f1a <USBD_StdEPReq+0xd4>
 8009ea0:	e123      	b.n	800a0ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d002      	beq.n	8009eb4 <USBD_StdEPReq+0x6e>
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d016      	beq.n	8009ee0 <USBD_StdEPReq+0x9a>
 8009eb2:	e02c      	b.n	8009f0e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00d      	beq.n	8009ed6 <USBD_StdEPReq+0x90>
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b80      	cmp	r3, #128	; 0x80
 8009ebe:	d00a      	beq.n	8009ed6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 f923 	bl	800b110 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eca:	2180      	movs	r1, #128	; 0x80
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 f91f 	bl	800b110 <USBD_LL_StallEP>
 8009ed2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ed4:	e020      	b.n	8009f18 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fc6f 	bl	800a7bc <USBD_CtlError>
              break;
 8009ede:	e01b      	b.n	8009f18 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	885b      	ldrh	r3, [r3, #2]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10e      	bne.n	8009f06 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00b      	beq.n	8009f06 <USBD_StdEPReq+0xc0>
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b80      	cmp	r3, #128	; 0x80
 8009ef2:	d008      	beq.n	8009f06 <USBD_StdEPReq+0xc0>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	88db      	ldrh	r3, [r3, #6]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d104      	bne.n	8009f06 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 f905 	bl	800b110 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fd23 	bl	800a952 <USBD_CtlSendStatus>

              break;
 8009f0c:	e004      	b.n	8009f18 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fc53 	bl	800a7bc <USBD_CtlError>
              break;
 8009f16:	bf00      	nop
          }
          break;
 8009f18:	e0ec      	b.n	800a0f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d002      	beq.n	8009f2c <USBD_StdEPReq+0xe6>
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d016      	beq.n	8009f58 <USBD_StdEPReq+0x112>
 8009f2a:	e030      	b.n	8009f8e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00d      	beq.n	8009f4e <USBD_StdEPReq+0x108>
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b80      	cmp	r3, #128	; 0x80
 8009f36:	d00a      	beq.n	8009f4e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f8e7 	bl	800b110 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f42:	2180      	movs	r1, #128	; 0x80
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 f8e3 	bl	800b110 <USBD_LL_StallEP>
 8009f4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f4c:	e025      	b.n	8009f9a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fc33 	bl	800a7bc <USBD_CtlError>
              break;
 8009f56:	e020      	b.n	8009f9a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	885b      	ldrh	r3, [r3, #2]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d11b      	bne.n	8009f98 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d004      	beq.n	8009f74 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 f8ed 	bl	800b14e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fcec 	bl	800a952 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	4798      	blx	r3
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f8c:	e004      	b.n	8009f98 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fc13 	bl	800a7bc <USBD_CtlError>
              break;
 8009f96:	e000      	b.n	8009f9a <USBD_StdEPReq+0x154>
              break;
 8009f98:	bf00      	nop
          }
          break;
 8009f9a:	e0ab      	b.n	800a0f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d002      	beq.n	8009fae <USBD_StdEPReq+0x168>
 8009fa8:	2b03      	cmp	r3, #3
 8009faa:	d032      	beq.n	800a012 <USBD_StdEPReq+0x1cc>
 8009fac:	e097      	b.n	800a0de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <USBD_StdEPReq+0x17e>
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	2b80      	cmp	r3, #128	; 0x80
 8009fb8:	d004      	beq.n	8009fc4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fbfd 	bl	800a7bc <USBD_CtlError>
                break;
 8009fc2:	e091      	b.n	800a0e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	da0b      	bge.n	8009fe4 <USBD_StdEPReq+0x19e>
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	3310      	adds	r3, #16
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	4413      	add	r3, r2
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	e00b      	b.n	8009ffc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2200      	movs	r2, #0
 800a002:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2202      	movs	r2, #2
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fc47 	bl	800a89e <USBD_CtlSendData>
              break;
 800a010:	e06a      	b.n	800a0e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a016:	2b00      	cmp	r3, #0
 800a018:	da11      	bge.n	800a03e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	f003 020f 	and.w	r2, r3, #15
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	3324      	adds	r3, #36	; 0x24
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d117      	bne.n	800a064 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fbc0 	bl	800a7bc <USBD_CtlError>
                  break;
 800a03c:	e054      	b.n	800a0e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a03e:	7bbb      	ldrb	r3, [r7, #14]
 800a040:	f003 020f 	and.w	r2, r3, #15
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	440b      	add	r3, r1
 800a050:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d104      	bne.n	800a064 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fbad 	bl	800a7bc <USBD_CtlError>
                  break;
 800a062:	e041      	b.n	800a0e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	da0b      	bge.n	800a084 <USBD_StdEPReq+0x23e>
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a072:	4613      	mov	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	3310      	adds	r3, #16
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	3304      	adds	r3, #4
 800a082:	e00b      	b.n	800a09c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	4413      	add	r3, r2
 800a09a:	3304      	adds	r3, #4
 800a09c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <USBD_StdEPReq+0x264>
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	2b80      	cmp	r3, #128	; 0x80
 800a0a8:	d103      	bne.n	800a0b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	e00e      	b.n	800a0d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f001 f868 	bl	800b18c <USBD_LL_IsStallEP>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	e002      	b.n	800a0d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fbe1 	bl	800a89e <USBD_CtlSendData>
              break;
 800a0dc:	e004      	b.n	800a0e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fb6b 	bl	800a7bc <USBD_CtlError>
              break;
 800a0e6:	bf00      	nop
          }
          break;
 800a0e8:	e004      	b.n	800a0f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fb65 	bl	800a7bc <USBD_CtlError>
          break;
 800a0f2:	bf00      	nop
      }
      break;
 800a0f4:	e004      	b.n	800a100 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb5f 	bl	800a7bc <USBD_CtlError>
      break;
 800a0fe:	bf00      	nop
  }

  return ret;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	885b      	ldrh	r3, [r3, #2]
 800a126:	0a1b      	lsrs	r3, r3, #8
 800a128:	b29b      	uxth	r3, r3
 800a12a:	3b01      	subs	r3, #1
 800a12c:	2b0e      	cmp	r3, #14
 800a12e:	f200 8152 	bhi.w	800a3d6 <USBD_GetDescriptor+0x2ca>
 800a132:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <USBD_GetDescriptor+0x2c>)
 800a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a138:	0800a1a9 	.word	0x0800a1a9
 800a13c:	0800a1c1 	.word	0x0800a1c1
 800a140:	0800a201 	.word	0x0800a201
 800a144:	0800a3d7 	.word	0x0800a3d7
 800a148:	0800a3d7 	.word	0x0800a3d7
 800a14c:	0800a377 	.word	0x0800a377
 800a150:	0800a3a3 	.word	0x0800a3a3
 800a154:	0800a3d7 	.word	0x0800a3d7
 800a158:	0800a3d7 	.word	0x0800a3d7
 800a15c:	0800a3d7 	.word	0x0800a3d7
 800a160:	0800a3d7 	.word	0x0800a3d7
 800a164:	0800a3d7 	.word	0x0800a3d7
 800a168:	0800a3d7 	.word	0x0800a3d7
 800a16c:	0800a3d7 	.word	0x0800a3d7
 800a170:	0800a175 	.word	0x0800a175
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a186:	69db      	ldr	r3, [r3, #28]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	7c12      	ldrb	r2, [r2, #16]
 800a18c:	f107 0108 	add.w	r1, r7, #8
 800a190:	4610      	mov	r0, r2
 800a192:	4798      	blx	r3
 800a194:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a196:	e126      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fb0e 	bl	800a7bc <USBD_CtlError>
        err++;
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	72fb      	strb	r3, [r7, #11]
      break;
 800a1a6:	e11e      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	7c12      	ldrb	r2, [r2, #16]
 800a1b4:	f107 0108 	add.w	r1, r7, #8
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4798      	blx	r3
 800a1bc:	60f8      	str	r0, [r7, #12]
      break;
 800a1be:	e112      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	7c1b      	ldrb	r3, [r3, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10d      	bne.n	800a1e4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d0:	f107 0208 	add.w	r2, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	2202      	movs	r2, #2
 800a1e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1e2:	e100      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	f107 0208 	add.w	r2, r7, #8
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	701a      	strb	r2, [r3, #0]
      break;
 800a1fe:	e0f2      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	885b      	ldrh	r3, [r3, #2]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b05      	cmp	r3, #5
 800a208:	f200 80ac 	bhi.w	800a364 <USBD_GetDescriptor+0x258>
 800a20c:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <USBD_GetDescriptor+0x108>)
 800a20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a22d 	.word	0x0800a22d
 800a218:	0800a261 	.word	0x0800a261
 800a21c:	0800a295 	.word	0x0800a295
 800a220:	0800a2c9 	.word	0x0800a2c9
 800a224:	0800a2fd 	.word	0x0800a2fd
 800a228:	0800a331 	.word	0x0800a331
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00b      	beq.n	800a250 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	7c12      	ldrb	r2, [r2, #16]
 800a244:	f107 0108 	add.w	r1, r7, #8
 800a248:	4610      	mov	r0, r2
 800a24a:	4798      	blx	r3
 800a24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24e:	e091      	b.n	800a374 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fab2 	bl	800a7bc <USBD_CtlError>
            err++;
 800a258:	7afb      	ldrb	r3, [r7, #11]
 800a25a:	3301      	adds	r3, #1
 800a25c:	72fb      	strb	r3, [r7, #11]
          break;
 800a25e:	e089      	b.n	800a374 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	7c12      	ldrb	r2, [r2, #16]
 800a278:	f107 0108 	add.w	r1, r7, #8
 800a27c:	4610      	mov	r0, r2
 800a27e:	4798      	blx	r3
 800a280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a282:	e077      	b.n	800a374 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa98 	bl	800a7bc <USBD_CtlError>
            err++;
 800a28c:	7afb      	ldrb	r3, [r7, #11]
 800a28e:	3301      	adds	r3, #1
 800a290:	72fb      	strb	r3, [r7, #11]
          break;
 800a292:	e06f      	b.n	800a374 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00b      	beq.n	800a2b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	7c12      	ldrb	r2, [r2, #16]
 800a2ac:	f107 0108 	add.w	r1, r7, #8
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	4798      	blx	r3
 800a2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2b6:	e05d      	b.n	800a374 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa7e 	bl	800a7bc <USBD_CtlError>
            err++;
 800a2c0:	7afb      	ldrb	r3, [r7, #11]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2c6:	e055      	b.n	800a374 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00b      	beq.n	800a2ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	7c12      	ldrb	r2, [r2, #16]
 800a2e0:	f107 0108 	add.w	r1, r7, #8
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	4798      	blx	r3
 800a2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ea:	e043      	b.n	800a374 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa64 	bl	800a7bc <USBD_CtlError>
            err++;
 800a2f4:	7afb      	ldrb	r3, [r7, #11]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2fa:	e03b      	b.n	800a374 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	7c12      	ldrb	r2, [r2, #16]
 800a314:	f107 0108 	add.w	r1, r7, #8
 800a318:	4610      	mov	r0, r2
 800a31a:	4798      	blx	r3
 800a31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a31e:	e029      	b.n	800a374 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa4a 	bl	800a7bc <USBD_CtlError>
            err++;
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	3301      	adds	r3, #1
 800a32c:	72fb      	strb	r3, [r7, #11]
          break;
 800a32e:	e021      	b.n	800a374 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00b      	beq.n	800a354 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	7c12      	ldrb	r2, [r2, #16]
 800a348:	f107 0108 	add.w	r1, r7, #8
 800a34c:	4610      	mov	r0, r2
 800a34e:	4798      	blx	r3
 800a350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a352:	e00f      	b.n	800a374 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa30 	bl	800a7bc <USBD_CtlError>
            err++;
 800a35c:	7afb      	ldrb	r3, [r7, #11]
 800a35e:	3301      	adds	r3, #1
 800a360:	72fb      	strb	r3, [r7, #11]
          break;
 800a362:	e007      	b.n	800a374 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fa28 	bl	800a7bc <USBD_CtlError>
          err++;
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	3301      	adds	r3, #1
 800a370:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a372:	bf00      	nop
      }
      break;
 800a374:	e037      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	7c1b      	ldrb	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d109      	bne.n	800a392 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a386:	f107 0208 	add.w	r2, r7, #8
 800a38a:	4610      	mov	r0, r2
 800a38c:	4798      	blx	r3
 800a38e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a390:	e029      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fa11 	bl	800a7bc <USBD_CtlError>
        err++;
 800a39a:	7afb      	ldrb	r3, [r7, #11]
 800a39c:	3301      	adds	r3, #1
 800a39e:	72fb      	strb	r3, [r7, #11]
      break;
 800a3a0:	e021      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	7c1b      	ldrb	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10d      	bne.n	800a3c6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	f107 0208 	add.w	r2, r7, #8
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	4798      	blx	r3
 800a3ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	2207      	movs	r2, #7
 800a3c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3c4:	e00f      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f9f7 	bl	800a7bc <USBD_CtlError>
        err++;
 800a3ce:	7afb      	ldrb	r3, [r7, #11]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3d4:	e007      	b.n	800a3e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f9ef 	bl	800a7bc <USBD_CtlError>
      err++;
 800a3de:	7afb      	ldrb	r3, [r7, #11]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3e4:	bf00      	nop
  }

  if (err != 0U)
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d11e      	bne.n	800a42a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	88db      	ldrh	r3, [r3, #6]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d016      	beq.n	800a422 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3f4:	893b      	ldrh	r3, [r7, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00e      	beq.n	800a418 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	88da      	ldrh	r2, [r3, #6]
 800a3fe:	893b      	ldrh	r3, [r7, #8]
 800a400:	4293      	cmp	r3, r2
 800a402:	bf28      	it	cs
 800a404:	4613      	movcs	r3, r2
 800a406:	b29b      	uxth	r3, r3
 800a408:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a40a:	893b      	ldrh	r3, [r7, #8]
 800a40c:	461a      	mov	r2, r3
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fa44 	bl	800a89e <USBD_CtlSendData>
 800a416:	e009      	b.n	800a42c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f9ce 	bl	800a7bc <USBD_CtlError>
 800a420:	e004      	b.n	800a42c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fa95 	bl	800a952 <USBD_CtlSendStatus>
 800a428:	e000      	b.n	800a42c <USBD_GetDescriptor+0x320>
    return;
 800a42a:	bf00      	nop
  }
}
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop

0800a434 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	889b      	ldrh	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d131      	bne.n	800a4aa <USBD_SetAddress+0x76>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	88db      	ldrh	r3, [r3, #6]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d12d      	bne.n	800a4aa <USBD_SetAddress+0x76>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	885b      	ldrh	r3, [r3, #2]
 800a452:	2b7f      	cmp	r3, #127	; 0x7f
 800a454:	d829      	bhi.n	800a4aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	885b      	ldrh	r3, [r3, #2]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d104      	bne.n	800a478 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f9a3 	bl	800a7bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a476:	e01d      	b.n	800a4b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	7bfa      	ldrb	r2, [r7, #15]
 800a47c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 feae 	bl	800b1e6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fa61 	bl	800a952 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d004      	beq.n	800a4a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2202      	movs	r2, #2
 800a49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49e:	e009      	b.n	800a4b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a8:	e004      	b.n	800a4b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f985 	bl	800a7bc <USBD_CtlError>
  }
}
 800a4b2:	bf00      	nop
 800a4b4:	bf00      	nop
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	885b      	ldrh	r3, [r3, #2]
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	4b4c      	ldr	r3, [pc, #304]	; (800a604 <USBD_SetConfig+0x148>)
 800a4d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4d4:	4b4b      	ldr	r3, [pc, #300]	; (800a604 <USBD_SetConfig+0x148>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d905      	bls.n	800a4e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f96c 	bl	800a7bc <USBD_CtlError>
    return USBD_FAIL;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e088      	b.n	800a5fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d002      	beq.n	800a4fa <USBD_SetConfig+0x3e>
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d025      	beq.n	800a544 <USBD_SetConfig+0x88>
 800a4f8:	e071      	b.n	800a5de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4fa:	4b42      	ldr	r3, [pc, #264]	; (800a604 <USBD_SetConfig+0x148>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d01c      	beq.n	800a53c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a502:	4b40      	ldr	r3, [pc, #256]	; (800a604 <USBD_SetConfig+0x148>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a50c:	4b3d      	ldr	r3, [pc, #244]	; (800a604 <USBD_SetConfig+0x148>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff f992 	bl	800983c <USBD_SetClassConfig>
 800a518:	4603      	mov	r3, r0
 800a51a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d004      	beq.n	800a52c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f949 	bl	800a7bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a52a:	e065      	b.n	800a5f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fa10 	bl	800a952 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2203      	movs	r2, #3
 800a536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a53a:	e05d      	b.n	800a5f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fa08 	bl	800a952 <USBD_CtlSendStatus>
      break;
 800a542:	e059      	b.n	800a5f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a544:	4b2f      	ldr	r3, [pc, #188]	; (800a604 <USBD_SetConfig+0x148>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d112      	bne.n	800a572 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a554:	4b2b      	ldr	r3, [pc, #172]	; (800a604 <USBD_SetConfig+0x148>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	461a      	mov	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a55e:	4b29      	ldr	r3, [pc, #164]	; (800a604 <USBD_SetConfig+0x148>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff f985 	bl	8009874 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f9f1 	bl	800a952 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a570:	e042      	b.n	800a5f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a572:	4b24      	ldr	r3, [pc, #144]	; (800a604 <USBD_SetConfig+0x148>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d02a      	beq.n	800a5d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff f973 	bl	8009874 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a58e:	4b1d      	ldr	r3, [pc, #116]	; (800a604 <USBD_SetConfig+0x148>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a598:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <USBD_SetConfig+0x148>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff f94c 	bl	800983c <USBD_SetClassConfig>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00f      	beq.n	800a5ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f903 	bl	800a7bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff f958 	bl	8009874 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a5cc:	e014      	b.n	800a5f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f9bf 	bl	800a952 <USBD_CtlSendStatus>
      break;
 800a5d4:	e010      	b.n	800a5f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f9bb 	bl	800a952 <USBD_CtlSendStatus>
      break;
 800a5dc:	e00c      	b.n	800a5f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f8eb 	bl	800a7bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5e6:	4b07      	ldr	r3, [pc, #28]	; (800a604 <USBD_SetConfig+0x148>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff f941 	bl	8009874 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f6:	bf00      	nop
  }

  return ret;
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000228 	.word	0x20000228

0800a608 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	88db      	ldrh	r3, [r3, #6]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d004      	beq.n	800a624 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f8cd 	bl	800a7bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a622:	e023      	b.n	800a66c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	dc02      	bgt.n	800a636 <USBD_GetConfig+0x2e>
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc03      	bgt.n	800a63c <USBD_GetConfig+0x34>
 800a634:	e015      	b.n	800a662 <USBD_GetConfig+0x5a>
 800a636:	2b03      	cmp	r3, #3
 800a638:	d00b      	beq.n	800a652 <USBD_GetConfig+0x4a>
 800a63a:	e012      	b.n	800a662 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	3308      	adds	r3, #8
 800a646:	2201      	movs	r2, #1
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f927 	bl	800a89e <USBD_CtlSendData>
        break;
 800a650:	e00c      	b.n	800a66c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	3304      	adds	r3, #4
 800a656:	2201      	movs	r2, #1
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f91f 	bl	800a89e <USBD_CtlSendData>
        break;
 800a660:	e004      	b.n	800a66c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f8a9 	bl	800a7bc <USBD_CtlError>
        break;
 800a66a:	bf00      	nop
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a684:	b2db      	uxtb	r3, r3
 800a686:	3b01      	subs	r3, #1
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d81e      	bhi.n	800a6ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	88db      	ldrh	r3, [r3, #6]
 800a690:	2b02      	cmp	r3, #2
 800a692:	d004      	beq.n	800a69e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f890 	bl	800a7bc <USBD_CtlError>
        break;
 800a69c:	e01a      	b.n	800a6d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d005      	beq.n	800a6ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	f043 0202 	orr.w	r2, r3, #2
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	330c      	adds	r3, #12
 800a6be:	2202      	movs	r2, #2
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f8eb 	bl	800a89e <USBD_CtlSendData>
      break;
 800a6c8:	e004      	b.n	800a6d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f875 	bl	800a7bc <USBD_CtlError>
      break;
 800a6d2:	bf00      	nop
  }
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	885b      	ldrh	r3, [r3, #2]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d106      	bne.n	800a6fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f92b 	bl	800a952 <USBD_CtlSendStatus>
  }
}
 800a6fc:	bf00      	nop
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a714:	b2db      	uxtb	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d80b      	bhi.n	800a734 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	885b      	ldrh	r3, [r3, #2]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d10c      	bne.n	800a73e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f910 	bl	800a952 <USBD_CtlSendStatus>
      }
      break;
 800a732:	e004      	b.n	800a73e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f840 	bl	800a7bc <USBD_CtlError>
      break;
 800a73c:	e000      	b.n	800a740 <USBD_ClrFeature+0x3c>
      break;
 800a73e:	bf00      	nop
  }
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	781a      	ldrb	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3301      	adds	r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7ff fa92 	bl	8009c9c <SWAPBYTE>
 800a778:	4603      	mov	r3, r0
 800a77a:	461a      	mov	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3301      	adds	r3, #1
 800a784:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3301      	adds	r3, #1
 800a78a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff fa85 	bl	8009c9c <SWAPBYTE>
 800a792:	4603      	mov	r3, r0
 800a794:	461a      	mov	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3301      	adds	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fa78 	bl	8009c9c <SWAPBYTE>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	80da      	strh	r2, [r3, #6]
}
 800a7b4:	bf00      	nop
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7c6:	2180      	movs	r1, #128	; 0x80
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fca1 	bl	800b110 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fc9d 	bl	800b110 <USBD_LL_StallEP>
}
 800a7d6:	bf00      	nop
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b086      	sub	sp, #24
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d036      	beq.n	800a862 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7f8:	6938      	ldr	r0, [r7, #16]
 800a7fa:	f000 f836 	bl	800a86a <USBD_GetLen>
 800a7fe:	4603      	mov	r3, r0
 800a800:	3301      	adds	r3, #1
 800a802:	b29b      	uxth	r3, r3
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	4413      	add	r3, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	7812      	ldrb	r2, [r2, #0]
 800a816:	701a      	strb	r2, [r3, #0]
  idx++;
 800a818:	7dfb      	ldrb	r3, [r7, #23]
 800a81a:	3301      	adds	r3, #1
 800a81c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	4413      	add	r3, r2
 800a824:	2203      	movs	r2, #3
 800a826:	701a      	strb	r2, [r3, #0]
  idx++;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	3301      	adds	r3, #1
 800a82c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a82e:	e013      	b.n	800a858 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	4413      	add	r3, r2
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	7812      	ldrb	r2, [r2, #0]
 800a83a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	3301      	adds	r3, #1
 800a840:	613b      	str	r3, [r7, #16]
    idx++;
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	3301      	adds	r3, #1
 800a846:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	701a      	strb	r2, [r3, #0]
    idx++;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	3301      	adds	r3, #1
 800a856:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e7      	bne.n	800a830 <USBD_GetString+0x52>
 800a860:	e000      	b.n	800a864 <USBD_GetString+0x86>
    return;
 800a862:	bf00      	nop
  }
}
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b085      	sub	sp, #20
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a87a:	e005      	b.n	800a888 <USBD_GetLen+0x1e>
  {
    len++;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	3301      	adds	r3, #1
 800a880:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	3301      	adds	r3, #1
 800a886:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1f5      	bne.n	800a87c <USBD_GetLen+0x12>
  }

  return len;
 800a890:	7bfb      	ldrb	r3, [r7, #15]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fcad 	bl	800b224 <USBD_LL_Transmit>

  return USBD_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f000 fc9c 	bl	800b224 <USBD_LL_Transmit>

  return USBD_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2203      	movs	r2, #3
 800a906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	2100      	movs	r1, #0
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 fca0 	bl	800b266 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	2100      	movs	r1, #0
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 fc8f 	bl	800b266 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2204      	movs	r2, #4
 800a95e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a962:	2300      	movs	r3, #0
 800a964:	2200      	movs	r2, #0
 800a966:	2100      	movs	r1, #0
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fc5b 	bl	800b224 <USBD_LL_Transmit>

  return USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2205      	movs	r2, #5
 800a984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a988:	2300      	movs	r3, #0
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fc69 	bl	800b266 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
	...

0800a9a0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4912      	ldr	r1, [pc, #72]	; (800a9f0 <MX_USB_Device_Init+0x50>)
 800a9a8:	4812      	ldr	r0, [pc, #72]	; (800a9f4 <MX_USB_Device_Init+0x54>)
 800a9aa:	f7fe fed9 	bl	8009760 <USBD_Init>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a9b4:	f7f7 f9ee 	bl	8001d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a9b8:	490f      	ldr	r1, [pc, #60]	; (800a9f8 <MX_USB_Device_Init+0x58>)
 800a9ba:	480e      	ldr	r0, [pc, #56]	; (800a9f4 <MX_USB_Device_Init+0x54>)
 800a9bc:	f7fe ff00 	bl	80097c0 <USBD_RegisterClass>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a9c6:	f7f7 f9e5 	bl	8001d94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a9ca:	490c      	ldr	r1, [pc, #48]	; (800a9fc <MX_USB_Device_Init+0x5c>)
 800a9cc:	4809      	ldr	r0, [pc, #36]	; (800a9f4 <MX_USB_Device_Init+0x54>)
 800a9ce:	f7fe fe21 	bl	8009614 <USBD_CDC_RegisterInterface>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a9d8:	f7f7 f9dc 	bl	8001d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9dc:	4805      	ldr	r0, [pc, #20]	; (800a9f4 <MX_USB_Device_Init+0x54>)
 800a9de:	f7fe ff16 	bl	800980e <USBD_Start>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a9e8:	f7f7 f9d4 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a9ec:	bf00      	nop
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	2000014c 	.word	0x2000014c
 800a9f4:	20000748 	.word	0x20000748
 800a9f8:	20000034 	.word	0x20000034
 800a9fc:	20000138 	.word	0x20000138

0800aa00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa04:	2200      	movs	r2, #0
 800aa06:	4905      	ldr	r1, [pc, #20]	; (800aa1c <CDC_Init_FS+0x1c>)
 800aa08:	4805      	ldr	r0, [pc, #20]	; (800aa20 <CDC_Init_FS+0x20>)
 800aa0a:	f7fe fe18 	bl	800963e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa0e:	4905      	ldr	r1, [pc, #20]	; (800aa24 <CDC_Init_FS+0x24>)
 800aa10:	4803      	ldr	r0, [pc, #12]	; (800aa20 <CDC_Init_FS+0x20>)
 800aa12:	f7fe fe32 	bl	800967a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000e00 	.word	0x20000e00
 800aa20:	20000748 	.word	0x20000748
 800aa24:	20000a18 	.word	0x20000a18

0800aa28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	6039      	str	r1, [r7, #0]
 800aa42:	71fb      	strb	r3, [r7, #7]
 800aa44:	4613      	mov	r3, r2
 800aa46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	2b23      	cmp	r3, #35	; 0x23
 800aa4c:	d84a      	bhi.n	800aae4 <CDC_Control_FS+0xac>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <CDC_Control_FS+0x1c>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aae5 	.word	0x0800aae5
 800aa58:	0800aae5 	.word	0x0800aae5
 800aa5c:	0800aae5 	.word	0x0800aae5
 800aa60:	0800aae5 	.word	0x0800aae5
 800aa64:	0800aae5 	.word	0x0800aae5
 800aa68:	0800aae5 	.word	0x0800aae5
 800aa6c:	0800aae5 	.word	0x0800aae5
 800aa70:	0800aae5 	.word	0x0800aae5
 800aa74:	0800aae5 	.word	0x0800aae5
 800aa78:	0800aae5 	.word	0x0800aae5
 800aa7c:	0800aae5 	.word	0x0800aae5
 800aa80:	0800aae5 	.word	0x0800aae5
 800aa84:	0800aae5 	.word	0x0800aae5
 800aa88:	0800aae5 	.word	0x0800aae5
 800aa8c:	0800aae5 	.word	0x0800aae5
 800aa90:	0800aae5 	.word	0x0800aae5
 800aa94:	0800aae5 	.word	0x0800aae5
 800aa98:	0800aae5 	.word	0x0800aae5
 800aa9c:	0800aae5 	.word	0x0800aae5
 800aaa0:	0800aae5 	.word	0x0800aae5
 800aaa4:	0800aae5 	.word	0x0800aae5
 800aaa8:	0800aae5 	.word	0x0800aae5
 800aaac:	0800aae5 	.word	0x0800aae5
 800aab0:	0800aae5 	.word	0x0800aae5
 800aab4:	0800aae5 	.word	0x0800aae5
 800aab8:	0800aae5 	.word	0x0800aae5
 800aabc:	0800aae5 	.word	0x0800aae5
 800aac0:	0800aae5 	.word	0x0800aae5
 800aac4:	0800aae5 	.word	0x0800aae5
 800aac8:	0800aae5 	.word	0x0800aae5
 800aacc:	0800aae5 	.word	0x0800aae5
 800aad0:	0800aae5 	.word	0x0800aae5
 800aad4:	0800aae5 	.word	0x0800aae5
 800aad8:	0800aae5 	.word	0x0800aae5
 800aadc:	0800aae5 	.word	0x0800aae5
 800aae0:	0800aae5 	.word	0x0800aae5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aae4:	bf00      	nop
  }

  return (USBD_OK);
 800aae6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7f6 f807 	bl	8000b14 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	4805      	ldr	r0, [pc, #20]	; (800ab20 <CDC_Receive_FS+0x2c>)
 800ab0a:	f7fe fdb6 	bl	800967a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab0e:	4804      	ldr	r0, [pc, #16]	; (800ab20 <CDC_Receive_FS+0x2c>)
 800ab10:	f7fe fdfc 	bl	800970c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	20000748 	.word	0x20000748

0800ab24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab34:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <CDC_Transmit_FS+0x48>)
 800ab36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e00b      	b.n	800ab62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab4a:	887b      	ldrh	r3, [r7, #2]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	4806      	ldr	r0, [pc, #24]	; (800ab6c <CDC_Transmit_FS+0x48>)
 800ab52:	f7fe fd74 	bl	800963e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab56:	4805      	ldr	r0, [pc, #20]	; (800ab6c <CDC_Transmit_FS+0x48>)
 800ab58:	f7fe fda8 	bl	80096ac <USBD_CDC_TransmitPacket>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000748 	.word	0x20000748

0800ab70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	371c      	adds	r7, #28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	6039      	str	r1, [r7, #0]
 800ab9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2212      	movs	r2, #18
 800aba4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800aba6:	4b03      	ldr	r3, [pc, #12]	; (800abb4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	2000016c 	.word	0x2000016c

0800abb8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	6039      	str	r1, [r7, #0]
 800abc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2204      	movs	r2, #4
 800abc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abca:	4b03      	ldr	r3, [pc, #12]	; (800abd8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800abcc:	4618      	mov	r0, r3
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	20000180 	.word	0x20000180

0800abdc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	6039      	str	r1, [r7, #0]
 800abe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d105      	bne.n	800abfa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	4907      	ldr	r1, [pc, #28]	; (800ac10 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abf2:	4808      	ldr	r0, [pc, #32]	; (800ac14 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abf4:	f7ff fdf3 	bl	800a7de <USBD_GetString>
 800abf8:	e004      	b.n	800ac04 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	4904      	ldr	r1, [pc, #16]	; (800ac10 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abfe:	4805      	ldr	r0, [pc, #20]	; (800ac14 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac00:	f7ff fded 	bl	800a7de <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac04:	4b02      	ldr	r3, [pc, #8]	; (800ac10 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	200011e8 	.word	0x200011e8
 800ac14:	0800b45c 	.word	0x0800b45c

0800ac18 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	6039      	str	r1, [r7, #0]
 800ac22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	4904      	ldr	r1, [pc, #16]	; (800ac38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac28:	4804      	ldr	r0, [pc, #16]	; (800ac3c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac2a:	f7ff fdd8 	bl	800a7de <USBD_GetString>
  return USBD_StrDesc;
 800ac2e:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	200011e8 	.word	0x200011e8
 800ac3c:	0800b474 	.word	0x0800b474

0800ac40 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	221a      	movs	r2, #26
 800ac50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac52:	f000 f843 	bl	800acdc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac56:	4b02      	ldr	r3, [pc, #8]	; (800ac60 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20000184 	.word	0x20000184

0800ac64 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	6039      	str	r1, [r7, #0]
 800ac6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	4907      	ldr	r1, [pc, #28]	; (800ac98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac7a:	4808      	ldr	r0, [pc, #32]	; (800ac9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac7c:	f7ff fdaf 	bl	800a7de <USBD_GetString>
 800ac80:	e004      	b.n	800ac8c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	4904      	ldr	r1, [pc, #16]	; (800ac98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac86:	4805      	ldr	r0, [pc, #20]	; (800ac9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac88:	f7ff fda9 	bl	800a7de <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac8c:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200011e8 	.word	0x200011e8
 800ac9c:	0800b488 	.word	0x0800b488

0800aca0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	4603      	mov	r3, r0
 800aca8:	6039      	str	r1, [r7, #0]
 800acaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d105      	bne.n	800acbe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	4907      	ldr	r1, [pc, #28]	; (800acd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acb6:	4808      	ldr	r0, [pc, #32]	; (800acd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acb8:	f7ff fd91 	bl	800a7de <USBD_GetString>
 800acbc:	e004      	b.n	800acc8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	4904      	ldr	r1, [pc, #16]	; (800acd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acc2:	4805      	ldr	r0, [pc, #20]	; (800acd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acc4:	f7ff fd8b 	bl	800a7de <USBD_GetString>
  }
  return USBD_StrDesc;
 800acc8:	4b02      	ldr	r3, [pc, #8]	; (800acd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	200011e8 	.word	0x200011e8
 800acd8:	0800b494 	.word	0x0800b494

0800acdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ace2:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <Get_SerialNum+0x44>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ace8:	4b0e      	ldr	r3, [pc, #56]	; (800ad24 <Get_SerialNum+0x48>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acee:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <Get_SerialNum+0x4c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4413      	add	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad02:	2208      	movs	r2, #8
 800ad04:	4909      	ldr	r1, [pc, #36]	; (800ad2c <Get_SerialNum+0x50>)
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 f814 	bl	800ad34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	4908      	ldr	r1, [pc, #32]	; (800ad30 <Get_SerialNum+0x54>)
 800ad10:	68b8      	ldr	r0, [r7, #8]
 800ad12:	f000 f80f 	bl	800ad34 <IntToUnicode>
  }
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	1fff7590 	.word	0x1fff7590
 800ad24:	1fff7594 	.word	0x1fff7594
 800ad28:	1fff7598 	.word	0x1fff7598
 800ad2c:	20000186 	.word	0x20000186
 800ad30:	20000196 	.word	0x20000196

0800ad34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]
 800ad4a:	e027      	b.n	800ad9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	0f1b      	lsrs	r3, r3, #28
 800ad50:	2b09      	cmp	r3, #9
 800ad52:	d80b      	bhi.n	800ad6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	0f1b      	lsrs	r3, r3, #28
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	005b      	lsls	r3, r3, #1
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	440b      	add	r3, r1
 800ad64:	3230      	adds	r2, #48	; 0x30
 800ad66:	b2d2      	uxtb	r2, r2
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	e00a      	b.n	800ad82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	0f1b      	lsrs	r3, r3, #28
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	4619      	mov	r1, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	440b      	add	r3, r1
 800ad7c:	3237      	adds	r2, #55	; 0x37
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	4413      	add	r3, r2
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	75fb      	strb	r3, [r7, #23]
 800ad9c:	7dfa      	ldrb	r2, [r7, #23]
 800ad9e:	79fb      	ldrb	r3, [r7, #7]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d3d3      	bcc.n	800ad4c <IntToUnicode+0x18>
  }
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
	...

0800adb4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b094      	sub	sp, #80	; 0x50
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800adbc:	f107 030c 	add.w	r3, r7, #12
 800adc0:	2244      	movs	r2, #68	; 0x44
 800adc2:	2100      	movs	r1, #0
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 fb35 	bl	800b434 <memset>
  if(pcdHandle->Instance==USB)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <HAL_PCD_MspInit+0x80>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d12b      	bne.n	800ae2c <HAL_PCD_MspInit+0x78>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800add4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800add8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800adda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adde:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ade0:	f107 030c 	add.w	r3, r7, #12
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fa fa83 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800adf0:	f7f6 ffd0 	bl	8001d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800adf4:	4b10      	ldr	r3, [pc, #64]	; (800ae38 <HAL_PCD_MspInit+0x84>)
 800adf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf8:	4a0f      	ldr	r2, [pc, #60]	; (800ae38 <HAL_PCD_MspInit+0x84>)
 800adfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800adfe:	6593      	str	r3, [r2, #88]	; 0x58
 800ae00:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <HAL_PCD_MspInit+0x84>)
 800ae02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae08:	60bb      	str	r3, [r7, #8]
 800ae0a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2100      	movs	r1, #0
 800ae10:	2013      	movs	r0, #19
 800ae12:	f7f7 fc7c 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800ae16:	2013      	movs	r0, #19
 800ae18:	f7f7 fc93 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	2100      	movs	r1, #0
 800ae20:	2014      	movs	r0, #20
 800ae22:	f7f7 fc74 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae26:	2014      	movs	r0, #20
 800ae28:	f7f7 fc8b 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae2c:	bf00      	nop
 800ae2e:	3750      	adds	r7, #80	; 0x50
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	40005c00 	.word	0x40005c00
 800ae38:	40021000 	.word	0x40021000

0800ae3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f7fe fd26 	bl	80098a4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae72:	78fa      	ldrb	r2, [r7, #3]
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	440b      	add	r3, r1
 800ae80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	f7fe fd60 	bl	800994e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800aea8:	78fa      	ldrb	r2, [r7, #3]
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	440b      	add	r3, r1
 800aeb6:	333c      	adds	r3, #60	; 0x3c
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	4619      	mov	r1, r3
 800aebe:	f7fe fda9 	bl	8009a14 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe febd 	bl	8009c58 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aeee:	2301      	movs	r3, #1
 800aef0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d001      	beq.n	800aefe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aefa:	f7f6 ff4b 	bl	8001d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af04:	7bfa      	ldrb	r2, [r7, #15]
 800af06:	4611      	mov	r1, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe fe67 	bl	8009bdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fe13 	bl	8009b40 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fe62 	bl	8009bfc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d005      	beq.n	800af4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af40:	4b04      	ldr	r3, [pc, #16]	; (800af54 <HAL_PCD_SuspendCallback+0x30>)
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	4a03      	ldr	r2, [pc, #12]	; (800af54 <HAL_PCD_SuspendCallback+0x30>)
 800af46:	f043 0306 	orr.w	r3, r3, #6
 800af4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	e000ed00 	.word	0xe000ed00

0800af58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af68:	4b08      	ldr	r3, [pc, #32]	; (800af8c <HAL_PCD_ResumeCallback+0x34>)
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	4a07      	ldr	r2, [pc, #28]	; (800af8c <HAL_PCD_ResumeCallback+0x34>)
 800af6e:	f023 0306 	bic.w	r3, r3, #6
 800af72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af74:	f000 f9fa 	bl	800b36c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fe52 	bl	8009c28 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	e000ed00 	.word	0xe000ed00

0800af90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800af98:	4a2b      	ldr	r2, [pc, #172]	; (800b048 <USBD_LL_Init+0xb8>)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a29      	ldr	r2, [pc, #164]	; (800b048 <USBD_LL_Init+0xb8>)
 800afa4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800afa8:	4b27      	ldr	r3, [pc, #156]	; (800b048 <USBD_LL_Init+0xb8>)
 800afaa:	4a28      	ldr	r2, [pc, #160]	; (800b04c <USBD_LL_Init+0xbc>)
 800afac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afae:	4b26      	ldr	r3, [pc, #152]	; (800b048 <USBD_LL_Init+0xb8>)
 800afb0:	2208      	movs	r2, #8
 800afb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afb4:	4b24      	ldr	r3, [pc, #144]	; (800b048 <USBD_LL_Init+0xb8>)
 800afb6:	2202      	movs	r2, #2
 800afb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afba:	4b23      	ldr	r3, [pc, #140]	; (800b048 <USBD_LL_Init+0xb8>)
 800afbc:	2202      	movs	r2, #2
 800afbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afc0:	4b21      	ldr	r3, [pc, #132]	; (800b048 <USBD_LL_Init+0xb8>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afc6:	4b20      	ldr	r3, [pc, #128]	; (800b048 <USBD_LL_Init+0xb8>)
 800afc8:	2200      	movs	r2, #0
 800afca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afcc:	4b1e      	ldr	r3, [pc, #120]	; (800b048 <USBD_LL_Init+0xb8>)
 800afce:	2200      	movs	r2, #0
 800afd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afd2:	4b1d      	ldr	r3, [pc, #116]	; (800b048 <USBD_LL_Init+0xb8>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afd8:	481b      	ldr	r0, [pc, #108]	; (800b048 <USBD_LL_Init+0xb8>)
 800afda:	f7f7 fea5 	bl	8002d28 <HAL_PCD_Init>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800afe4:	f7f6 fed6 	bl	8001d94 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afee:	2318      	movs	r3, #24
 800aff0:	2200      	movs	r2, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	f7f9 fb5e 	bl	80046b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800affe:	2358      	movs	r3, #88	; 0x58
 800b000:	2200      	movs	r2, #0
 800b002:	2180      	movs	r1, #128	; 0x80
 800b004:	f7f9 fb56 	bl	80046b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b00e:	23c0      	movs	r3, #192	; 0xc0
 800b010:	2200      	movs	r2, #0
 800b012:	2181      	movs	r1, #129	; 0x81
 800b014:	f7f9 fb4e 	bl	80046b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b01e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b022:	2200      	movs	r2, #0
 800b024:	2101      	movs	r1, #1
 800b026:	f7f9 fb45 	bl	80046b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b030:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b034:	2200      	movs	r2, #0
 800b036:	2182      	movs	r1, #130	; 0x82
 800b038:	f7f9 fb3c 	bl	80046b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	200013e8 	.word	0x200013e8
 800b04c:	40005c00 	.word	0x40005c00

0800b050 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b066:	4618      	mov	r0, r3
 800b068:	f7f7 ff43 	bl	8002ef2 <HAL_PCD_Start>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f980 	bl	800b378 <USBD_Get_USB_Status>
 800b078:	4603      	mov	r3, r0
 800b07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	4608      	mov	r0, r1
 800b090:	4611      	mov	r1, r2
 800b092:	461a      	mov	r2, r3
 800b094:	4603      	mov	r3, r0
 800b096:	70fb      	strb	r3, [r7, #3]
 800b098:	460b      	mov	r3, r1
 800b09a:	70bb      	strb	r3, [r7, #2]
 800b09c:	4613      	mov	r3, r2
 800b09e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0ae:	78bb      	ldrb	r3, [r7, #2]
 800b0b0:	883a      	ldrh	r2, [r7, #0]
 800b0b2:	78f9      	ldrb	r1, [r7, #3]
 800b0b4:	f7f8 f88b 	bl	80031ce <HAL_PCD_EP_Open>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 f95a 	bl	800b378 <USBD_Get_USB_Status>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0ec:	78fa      	ldrb	r2, [r7, #3]
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f8 f8d2 	bl	800329a <HAL_PCD_EP_Close>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f93b 	bl	800b378 <USBD_Get_USB_Status>
 800b102:	4603      	mov	r3, r0
 800b104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b106:	7bbb      	ldrb	r3, [r7, #14]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b12a:	78fa      	ldrb	r2, [r7, #3]
 800b12c:	4611      	mov	r1, r2
 800b12e:	4618      	mov	r0, r3
 800b130:	f7f8 f993 	bl	800345a <HAL_PCD_EP_SetStall>
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 f91c 	bl	800b378 <USBD_Get_USB_Status>
 800b140:	4603      	mov	r3, r0
 800b142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b144:	7bbb      	ldrb	r3, [r7, #14]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b168:	78fa      	ldrb	r2, [r7, #3]
 800b16a:	4611      	mov	r1, r2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7f8 f9c6 	bl	80034fe <HAL_PCD_EP_ClrStall>
 800b172:	4603      	mov	r3, r0
 800b174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f8fd 	bl	800b378 <USBD_Get_USB_Status>
 800b17e:	4603      	mov	r3, r0
 800b180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b182:	7bbb      	ldrb	r3, [r7, #14]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b19e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da0c      	bge.n	800b1c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1a8:	78fb      	ldrb	r3, [r7, #3]
 800b1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ae:	68f9      	ldr	r1, [r7, #12]
 800b1b0:	1c5a      	adds	r2, r3, #1
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	440b      	add	r3, r1
 800b1bc:	3302      	adds	r3, #2
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	e00b      	b.n	800b1da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1c2:	78fb      	ldrb	r3, [r7, #3]
 800b1c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1c8:	68f9      	ldr	r1, [r7, #12]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	00db      	lsls	r3, r3, #3
 800b1d2:	440b      	add	r3, r1
 800b1d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b1d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b200:	78fa      	ldrb	r2, [r7, #3]
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f7f7 ffbd 	bl	8003184 <HAL_PCD_SetAddress>
 800b20a:	4603      	mov	r3, r0
 800b20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	4618      	mov	r0, r3
 800b212:	f000 f8b1 	bl	800b378 <USBD_Get_USB_Status>
 800b216:	4603      	mov	r3, r0
 800b218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	460b      	mov	r3, r1
 800b232:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b242:	7af9      	ldrb	r1, [r7, #11]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	f7f8 f8c4 	bl	80033d4 <HAL_PCD_EP_Transmit>
 800b24c:	4603      	mov	r3, r0
 800b24e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b250:	7dfb      	ldrb	r3, [r7, #23]
 800b252:	4618      	mov	r0, r3
 800b254:	f000 f890 	bl	800b378 <USBD_Get_USB_Status>
 800b258:	4603      	mov	r3, r0
 800b25a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b25c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b086      	sub	sp, #24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	460b      	mov	r3, r1
 800b274:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b284:	7af9      	ldrb	r1, [r7, #11]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	f7f8 f84e 	bl	800332a <HAL_PCD_EP_Receive>
 800b28e:	4603      	mov	r3, r0
 800b290:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	4618      	mov	r0, r3
 800b296:	f000 f86f 	bl	800b378 <USBD_Get_USB_Status>
 800b29a:	4603      	mov	r3, r0
 800b29c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b29e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3718      	adds	r7, #24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2ba:	78fa      	ldrb	r2, [r7, #3]
 800b2bc:	4611      	mov	r1, r2
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7f8 f870 	bl	80033a4 <HAL_PCD_EP_GetRxCount>
 800b2c4:	4603      	mov	r3, r0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2dc:	78fb      	ldrb	r3, [r7, #3]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <HAL_PCDEx_LPM_Callback+0x18>
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d013      	beq.n	800b30e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2e6:	e023      	b.n	800b330 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d007      	beq.n	800b300 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2f0:	f000 f83c 	bl	800b36c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2f4:	4b10      	ldr	r3, [pc, #64]	; (800b338 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	4a0f      	ldr	r2, [pc, #60]	; (800b338 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2fa:	f023 0306 	bic.w	r3, r3, #6
 800b2fe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe fc8e 	bl	8009c28 <USBD_LL_Resume>
    break;
 800b30c:	e010      	b.n	800b330 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b314:	4618      	mov	r0, r3
 800b316:	f7fe fc71 	bl	8009bfc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d005      	beq.n	800b32e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b322:	4b05      	ldr	r3, [pc, #20]	; (800b338 <HAL_PCDEx_LPM_Callback+0x68>)
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	4a04      	ldr	r2, [pc, #16]	; (800b338 <HAL_PCDEx_LPM_Callback+0x68>)
 800b328:	f043 0306 	orr.w	r3, r3, #6
 800b32c:	6113      	str	r3, [r2, #16]
    break;
 800b32e:	bf00      	nop
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	e000ed00 	.word	0xe000ed00

0800b33c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b344:	4b03      	ldr	r3, [pc, #12]	; (800b354 <USBD_static_malloc+0x18>)
}
 800b346:	4618      	mov	r0, r3
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	2000022c 	.word	0x2000022c

0800b358 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]

}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b370:	f7f6 f836 	bl	80013e0 <SystemClock_Config>
}
 800b374:	bf00      	nop
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4603      	mov	r3, r0
 800b380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d817      	bhi.n	800b3bc <USBD_Get_USB_Status+0x44>
 800b38c:	a201      	add	r2, pc, #4	; (adr r2, 800b394 <USBD_Get_USB_Status+0x1c>)
 800b38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b392:	bf00      	nop
 800b394:	0800b3a5 	.word	0x0800b3a5
 800b398:	0800b3ab 	.word	0x0800b3ab
 800b39c:	0800b3b1 	.word	0x0800b3b1
 800b3a0:	0800b3b7 	.word	0x0800b3b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a8:	e00b      	b.n	800b3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ae:	e008      	b.n	800b3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b4:	e005      	b.n	800b3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ba:	e002      	b.n	800b3c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c0:	bf00      	nop
  }
  return usb_status;
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <__libc_init_array>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	4d0d      	ldr	r5, [pc, #52]	; (800b408 <__libc_init_array+0x38>)
 800b3d4:	4c0d      	ldr	r4, [pc, #52]	; (800b40c <__libc_init_array+0x3c>)
 800b3d6:	1b64      	subs	r4, r4, r5
 800b3d8:	10a4      	asrs	r4, r4, #2
 800b3da:	2600      	movs	r6, #0
 800b3dc:	42a6      	cmp	r6, r4
 800b3de:	d109      	bne.n	800b3f4 <__libc_init_array+0x24>
 800b3e0:	4d0b      	ldr	r5, [pc, #44]	; (800b410 <__libc_init_array+0x40>)
 800b3e2:	4c0c      	ldr	r4, [pc, #48]	; (800b414 <__libc_init_array+0x44>)
 800b3e4:	f000 f82e 	bl	800b444 <_init>
 800b3e8:	1b64      	subs	r4, r4, r5
 800b3ea:	10a4      	asrs	r4, r4, #2
 800b3ec:	2600      	movs	r6, #0
 800b3ee:	42a6      	cmp	r6, r4
 800b3f0:	d105      	bne.n	800b3fe <__libc_init_array+0x2e>
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f8:	4798      	blx	r3
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	e7ee      	b.n	800b3dc <__libc_init_array+0xc>
 800b3fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b402:	4798      	blx	r3
 800b404:	3601      	adds	r6, #1
 800b406:	e7f2      	b.n	800b3ee <__libc_init_array+0x1e>
 800b408:	0800b4b4 	.word	0x0800b4b4
 800b40c:	0800b4b4 	.word	0x0800b4b4
 800b410:	0800b4b4 	.word	0x0800b4b4
 800b414:	0800b4b8 	.word	0x0800b4b8

0800b418 <memcpy>:
 800b418:	440a      	add	r2, r1
 800b41a:	4291      	cmp	r1, r2
 800b41c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b420:	d100      	bne.n	800b424 <memcpy+0xc>
 800b422:	4770      	bx	lr
 800b424:	b510      	push	{r4, lr}
 800b426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b42a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b42e:	4291      	cmp	r1, r2
 800b430:	d1f9      	bne.n	800b426 <memcpy+0xe>
 800b432:	bd10      	pop	{r4, pc}

0800b434 <memset>:
 800b434:	4402      	add	r2, r0
 800b436:	4603      	mov	r3, r0
 800b438:	4293      	cmp	r3, r2
 800b43a:	d100      	bne.n	800b43e <memset+0xa>
 800b43c:	4770      	bx	lr
 800b43e:	f803 1b01 	strb.w	r1, [r3], #1
 800b442:	e7f9      	b.n	800b438 <memset+0x4>

0800b444 <_init>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr

0800b450 <_fini>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr
