
tlo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b490  0800b490  0001b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4e8  0800b4e8  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4e8  0800b4e8  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4e8  0800b4e8  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e8  0800b4e8  0001b4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4ec  0800b4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  200001a0  0800b690  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016dc  0800b690  000216dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205e3  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  000407b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021719  00000000  00000000  00047048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a613  00000000  00000000  00068761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c99b3  00000000  00000000  00082d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f20  00000000  00000000  0014c77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b478 	.word	0x0800b478

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0800b478 	.word	0x0800b478

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <CDC_On_Receive>:
Feedback feedback = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .bools = 0, .deliminer = 0xAAAA};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) //uint8_t* Buf, uint32_t* Len
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)){
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	d104      	bne.n	8000b30 <CDC_On_Receive+0x1c>
		memcpy(&command, buffer, sizeof(Command));
 8000b26:	2210      	movs	r2, #16
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b2c:	f00a fc8e 	bl	800b44c <memcpy>
	}
	if (command.delimiter == 0xAAAA){
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <CDC_On_Receive+0x2e>
		isCommandReceived = 1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <CDC_On_Receive+0x3c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
	}
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000227 	.word	0x20000227

08000b54 <throw>:

void throw(uint32_t speed)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (speed > 7500) speed = 7500;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d902      	bls.n	8000b6c <throw+0x18>
 8000b66:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000b6a:	607b      	str	r3, [r7, #4]
	if (speed < 2500) speed = 2500;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d802      	bhi.n	8000b7c <throw+0x28>
 8000b76:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b7a:	607b      	str	r3, [r7, #4]
	TIM16->CCR1 = speed;
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <throw+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(400);
 8000b82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b86:	f001 fcdf 	bl	8002548 <HAL_Delay>
	TIM17->CCR1 = 1000;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <throw+0x78>)
 8000b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
	int n = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
	while (n)
 8000b96:	e009      	b.n	8000bac <throw+0x58>
	{
		n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8000b98:	2120      	movs	r1, #32
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 ff87 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(200);
 8000ba6:	20c8      	movs	r0, #200	; 0xc8
 8000ba8:	f001 fcce 	bl	8002548 <HAL_Delay>
	while (n)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f2      	bne.n	8000b98 <throw+0x44>
	}
	TIM17->CCR1 = 0;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <throw+0x78>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = 2500;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <throw+0x74>)
 8000bba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40014400 	.word	0x40014400
 8000bcc:	40014800 	.word	0x40014800

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b0a2      	sub	sp, #136	; 0x88
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	int16_t Cpos_M1 = (int16_t)TIM3->CNT;
 8000bd8:	4bab      	ldr	r3, [pc, #684]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	feedback.speed1  = Cpos_M1;
 8000be0:	4aaa      	ldr	r2, [pc, #680]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000be2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000be6:	8013      	strh	r3, [r2, #0]
	double dif_M1 = Cpos_M1 - Lpos_M1;
 8000be8:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc65 	bl	80004bc <__aeabi_i2d>
 8000bf2:	4ba7      	ldr	r3, [pc, #668]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf8:	f7ff fb12 	bl	8000220 <__aeabi_dsub>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	Lpos_M1 = Cpos_M1;
 8000c04:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc57 	bl	80004bc <__aeabi_i2d>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	499f      	ldr	r1, [pc, #636]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c14:	e9c1 2300 	strd	r2, r3, [r1]

	int16_t Cpos_M2 = (int16_t)TIM4->CNT;
 8000c18:	4b9e      	ldr	r3, [pc, #632]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	feedback.speed2  = Cpos_M2;
 8000c20:	4a9a      	ldr	r2, [pc, #616]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000c26:	8053      	strh	r3, [r2, #2]
	double dif_M2 = Cpos_M2 - Lpos_M2;
 8000c28:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fc45 	bl	80004bc <__aeabi_i2d>
 8000c32:	4b99      	ldr	r3, [pc, #612]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	f7ff faf2 	bl	8000220 <__aeabi_dsub>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	Lpos_M2 = Cpos_M2;
 8000c44:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fc37 	bl	80004bc <__aeabi_i2d>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4991      	ldr	r1, [pc, #580]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c54:	e9c1 2300 	strd	r2, r3, [r1]

	int16_t Cpos_M3 = (int16_t)TIM8->CNT;
 8000c58:	4b90      	ldr	r3, [pc, #576]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	feedback.speed3  = Cpos_M3;
 8000c60:	4a8a      	ldr	r2, [pc, #552]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c62:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c66:	8093      	strh	r3, [r2, #4]
	double dif_M3 = Cpos_M3 - Lpos_M3;
 8000c68:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc25 	bl	80004bc <__aeabi_i2d>
 8000c72:	4b8b      	ldr	r3, [pc, #556]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fad2 	bl	8000220 <__aeabi_dsub>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	Lpos_M3 = Cpos_M3;
 8000c84:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc17 	bl	80004bc <__aeabi_i2d>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4983      	ldr	r1, [pc, #524]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c94:	e9c1 2300 	strd	r2, r3, [r1]


	double Err1 = tgt_M1/15 - dif_M1;
 8000c98:	4b82      	ldr	r3, [pc, #520]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ca4:	f7ff fd9e 	bl	80007e4 <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000cb4:	f7ff fab4 	bl	8000220 <__aeabi_dsub>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double Err2 = tgt_M2/15 - dif_M2;
 8000cc0:	4b7a      	ldr	r3, [pc, #488]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ccc:	f7ff fd8a 	bl	80007e4 <__aeabi_ddiv>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000cdc:	f7ff faa0 	bl	8000220 <__aeabi_dsub>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double Err3 = tgt_M3/15 - dif_M3;
 8000ce8:	4b71      	ldr	r3, [pc, #452]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	4b6d      	ldr	r3, [pc, #436]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cf4:	f7ff fd76 	bl	80007e4 <__aeabi_ddiv>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000d04:	f7ff fa8c 	bl	8000220 <__aeabi_dsub>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double kp = 4000;
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	4b67      	ldr	r3, [pc, #412]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d16:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double ki = 700;
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b66      	ldr	r3, [pc, #408]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double kd = 300;
 8000d24:	a356      	add	r3, pc, #344	; (adr r3, 8000e80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	integral_M1 += Err1;
 8000d2e:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d38:	f7ff fa74 	bl	8000224 <__adddf3>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	495e      	ldr	r1, [pc, #376]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d42:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M2 += Err2;
 8000d46:	4b5e      	ldr	r3, [pc, #376]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d50:	f7ff fa68 	bl	8000224 <__adddf3>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4959      	ldr	r1, [pc, #356]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d5a:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M3 += Err3;
 8000d5e:	4b59      	ldr	r3, [pc, #356]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000d68:	f7ff fa5c 	bl	8000224 <__adddf3>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4954      	ldr	r1, [pc, #336]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d72:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M1 > 40) integral_M1 = 40;
 8000d76:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000d82:	f7ff fe95 	bl	8000ab0 <__aeabi_dcmpgt>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000d8c:	494b      	ldr	r1, [pc, #300]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000d94:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M1 < -40) integral_M1 = -40;
 8000d98:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000da4:	f7ff fe66 	bl	8000a74 <__aeabi_dcmplt>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8000dae:	4943      	ldr	r1, [pc, #268]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000db6:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M2 > 40) integral_M2 = 40;
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000dc6:	f7ff fe73 	bl	8000ab0 <__aeabi_dcmpgt>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x20c>
 8000dd0:	493b      	ldr	r1, [pc, #236]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M2 < -40) integral_M2 = -40;
 8000ddc:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000de8:	f7ff fe44 	bl	8000a74 <__aeabi_dcmplt>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x22e>
 8000df2:	4933      	ldr	r1, [pc, #204]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000dfa:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M3 > 40) integral_M3 = 40;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e0a:	f7ff fe51 	bl	8000ab0 <__aeabi_dcmpgt>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x250>
 8000e14:	492b      	ldr	r1, [pc, #172]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e1c:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M3 < -40) integral_M3 = -40;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e2c:	f7ff fe22 	bl	8000a74 <__aeabi_dcmplt>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x272>
 8000e36:	4923      	ldr	r1, [pc, #140]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e3e:	e9c1 2300 	strd	r2, r3, [r1]

	double derivative_M1 = (Err1 - last_err_M1);
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000e4c:	f7ff f9e8 	bl	8000220 <__aeabi_dsub>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double derivative_M2 = (Err2 - last_err_M2);
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e62:	f7ff f9dd 	bl	8000220 <__aeabi_dsub>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double derivative_M3 = (Err3 - last_err_M3);
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000e78:	e030      	b.n	8000edc <HAL_TIM_PeriodElapsedCallback+0x30c>
 8000e7a:	bf00      	nop
 8000e7c:	f3af 8000 	nop.w
 8000e80:	00000000 	.word	0x00000000
 8000e84:	4072c000 	.word	0x4072c000
 8000e88:	40000400 	.word	0x40000400
 8000e8c:	20000010 	.word	0x20000010
 8000e90:	200001c0 	.word	0x200001c0
 8000e94:	40000800 	.word	0x40000800
 8000e98:	200001c8 	.word	0x200001c8
 8000e9c:	40013400 	.word	0x40013400
 8000ea0:	200001d0 	.word	0x200001d0
 8000ea4:	200001d8 	.word	0x200001d8
 8000ea8:	402e0000 	.word	0x402e0000
 8000eac:	200001e0 	.word	0x200001e0
 8000eb0:	200001e8 	.word	0x200001e8
 8000eb4:	40af4000 	.word	0x40af4000
 8000eb8:	4085e000 	.word	0x4085e000
 8000ebc:	200001f0 	.word	0x200001f0
 8000ec0:	200001f8 	.word	0x200001f8
 8000ec4:	20000200 	.word	0x20000200
 8000ec8:	40440000 	.word	0x40440000
 8000ecc:	c0440000 	.word	0xc0440000
 8000ed0:	20000208 	.word	0x20000208
 8000ed4:	20000210 	.word	0x20000210
 8000ed8:	20000218 	.word	0x20000218
 8000edc:	f7ff f9a0 	bl	8000220 <__aeabi_dsub>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	last_err_M1 = Err1;
 8000ee8:	4999      	ldr	r1, [pc, #612]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000eea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000eee:	e9c1 2300 	strd	r2, r3, [r1]
	last_err_M2 = Err2;
 8000ef2:	4998      	ldr	r1, [pc, #608]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000ef4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ef8:	e9c1 2300 	strd	r2, r3, [r1]
	last_err_M3 = Err3;
 8000efc:	4996      	ldr	r1, [pc, #600]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000efe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f02:	e9c1 2300 	strd	r2, r3, [r1]

	int32_t Speed_M1 = (int32_t) Err1 * kp + integral_M1 * ki + derivative_M1 * kd;
 8000f06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000f0a:	f7ff fddb 	bl	8000ac4 <__aeabi_d2iz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fad3 	bl	80004bc <__aeabi_i2d>
 8000f16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f1a:	f7ff fb39 	bl	8000590 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4614      	mov	r4, r2
 8000f24:	461d      	mov	r5, r3
 8000f26:	4b8d      	ldr	r3, [pc, #564]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f30:	f7ff fb2e 	bl	8000590 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4620      	mov	r0, r4
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	f7ff f972 	bl	8000224 <__adddf3>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f50:	f7ff fb1e 	bl	8000590 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff f962 	bl	8000224 <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fdac 	bl	8000ac4 <__aeabi_d2iz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int32_t Speed_M2 = (int32_t) Err2 * kp + integral_M2 * ki + derivative_M2 * kd;
 8000f72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000f76:	f7ff fda5 	bl	8000ac4 <__aeabi_d2iz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa9d 	bl	80004bc <__aeabi_i2d>
 8000f82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f86:	f7ff fb03 	bl	8000590 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4614      	mov	r4, r2
 8000f90:	461d      	mov	r5, r3
 8000f92:	4b73      	ldr	r3, [pc, #460]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f9c:	f7ff faf8 	bl	8000590 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	f7ff f93c 	bl	8000224 <__adddf3>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fbc:	f7ff fae8 	bl	8000590 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff f92c 	bl	8000224 <__adddf3>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd76 	bl	8000ac4 <__aeabi_d2iz>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int32_t Speed_M3 = (int32_t) Err3 * kp + integral_M3 * ki + derivative_M3 * kd;
 8000fde:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000fe2:	f7ff fd6f 	bl	8000ac4 <__aeabi_d2iz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa67 	bl	80004bc <__aeabi_i2d>
 8000fee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ff2:	f7ff facd 	bl	8000590 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001008:	f7ff fac2 	bl	8000590 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4620      	mov	r0, r4
 8001012:	4629      	mov	r1, r5
 8001014:	f7ff f906 	bl	8000224 <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4614      	mov	r4, r2
 800101e:	461d      	mov	r5, r3
 8001020:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001024:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001028:	f7ff fab2 	bl	8000590 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff f8f6 	bl	8000224 <__adddf3>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fd40 	bl	8000ac4 <__aeabi_d2iz>
 8001044:	4603      	mov	r3, r0
 8001046:	67fb      	str	r3, [r7, #124]	; 0x7c

	if (tgt_M1 == 0){
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800104a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	f7ff fd03 	bl	8000a60 <__aeabi_dcmpeq>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x496>
		Speed_M1 = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}
	if (tgt_M2 == 0){
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	f7ff fcf4 	bl	8000a60 <__aeabi_dcmpeq>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x4b4>
			Speed_M2 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		}
	if (tgt_M3 == 0){
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f7ff fce5 	bl	8000a60 <__aeabi_dcmpeq>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x4d0>
			Speed_M3 = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	67fb      	str	r3, [r7, #124]	; 0x7c
		}
	if (Speed_M1 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 80010a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db06      	blt.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x4e6>
 80010a8:	2200      	movs	r2, #0
 80010aa:	2102      	movs	r1, #2
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f001 fd16 	bl	8002ae0 <HAL_GPIO_WritePin>
 80010b4:	e005      	b.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x4f2>
	else HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2102      	movs	r1, #2
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f001 fd0f 	bl	8002ae0 <HAL_GPIO_WritePin>

	if (Speed_M2 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80010c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db07      	blt.n	80010da <HAL_TIM_PeriodElapsedCallback+0x50a>
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f001 fd04 	bl	8002ae0 <HAL_GPIO_WritePin>
 80010d8:	e006      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x518>
	else HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f001 fcfc 	bl	8002ae0 <HAL_GPIO_WritePin>

	if (Speed_M3 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80010e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db06      	blt.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x52c>
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f001 fcf3 	bl	8002ae0 <HAL_GPIO_WritePin>
 80010fa:	e005      	b.n	8001108 <HAL_TIM_PeriodElapsedCallback+0x538>
	else HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2108      	movs	r1, #8
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f001 fcec 	bl	8002ae0 <HAL_GPIO_WritePin>

	TIM2->CCR1 = abs(Speed_M1);
 8001108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800110c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001110:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR3 = abs(Speed_M2);
 800111a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800111e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001122:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM15->CCR1 = abs(Speed_M3);
 800112c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800112e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001132:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

	safety_iters++;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	3788      	adds	r7, #136	; 0x88
 800114a:	46bd      	mov	sp, r7
 800114c:	bdb0      	pop	{r4, r5, r7, pc}
 800114e:	bf00      	nop
 8001150:	20000208 	.word	0x20000208
 8001154:	20000210 	.word	0x20000210
 8001158:	20000218 	.word	0x20000218
 800115c:	200001f0 	.word	0x200001f0
 8001160:	200001f8 	.word	0x200001f8
 8001164:	20000200 	.word	0x20000200
 8001168:	200001d8 	.word	0x200001d8
 800116c:	200001e0 	.word	0x200001e0
 8001170:	200001e8 	.word	0x200001e8
 8001174:	40014000 	.word	0x40014000
 8001178:	20000226 	.word	0x20000226

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f001 f970 	bl	8002466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f945 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f000 fdbb 	bl	8001d04 <MX_GPIO_Init>
  MX_TIM3_Init();
 800118e:	f000 fae5 	bl	800175c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001192:	f000 fb39 	bl	8001808 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001196:	f000 fb8d 	bl	80018b4 <MX_TIM6_Init>
  MX_TIM8_Init();
 800119a:	f000 fbc1 	bl	8001920 <MX_TIM8_Init>
  MX_TIM2_Init();
 800119e:	f000 fa51 	bl	8001644 <MX_TIM2_Init>
  MX_TIM16_Init();
 80011a2:	f000 fcbb 	bl	8001b1c <MX_TIM16_Init>
  MX_TIM17_Init();
 80011a6:	f000 fd33 	bl	8001c10 <MX_TIM17_Init>
  MX_TIM15_Init();
 80011aa:	f000 fc13 	bl	80019d4 <MX_TIM15_Init>
  MX_I2C3_Init();
 80011ae:	f000 f97d 	bl	80014ac <MX_I2C3_Init>
  MX_TIM1_Init();
 80011b2:	f000 f9bb 	bl	800152c <MX_TIM1_Init>
  MX_USB_Device_Init();
 80011b6:	f009 fc0d 	bl	800a9d4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2101      	movs	r1, #1
 80011be:	487f      	ldr	r0, [pc, #508]	; (80013bc <main+0x240>)
 80011c0:	f001 fc8e 	bl	8002ae0 <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c8:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011ce:	2104      	movs	r1, #4
 80011d0:	487b      	ldr	r0, [pc, #492]	; (80013c0 <main+0x244>)
 80011d2:	f004 fbb1 	bl	8005938 <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 80011d6:	2064      	movs	r0, #100	; 0x64
 80011d8:	f001 f9b6 	bl	8002548 <HAL_Delay>
  TIM2->CCR2 = 65536;
 80011dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38

  //motor speeds to zero
  TIM2->CCR1 = 0;
 80011e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 80011ee:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <main+0x248>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011fc:	2100      	movs	r1, #0
 80011fe:	4870      	ldr	r0, [pc, #448]	; (80013c0 <main+0x244>)
 8001200:	f004 fb9a 	bl	8005938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001204:	2108      	movs	r1, #8
 8001206:	486e      	ldr	r0, [pc, #440]	; (80013c0 <main+0x244>)
 8001208:	f004 fb96 	bl	8005938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	486e      	ldr	r0, [pc, #440]	; (80013c8 <main+0x24c>)
 8001210:	f004 fb92 	bl	8005938 <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001214:	2100      	movs	r1, #0
 8001216:	486d      	ldr	r0, [pc, #436]	; (80013cc <main+0x250>)
 8001218:	f004 fb8e 	bl	8005938 <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 800121c:	4b6c      	ldr	r3, [pc, #432]	; (80013d0 <main+0x254>)
 800121e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 8001224:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001228:	f001 f98e 	bl	8002548 <HAL_Delay>

  //enable grabber and set its speed to zero
  TIM17->CCR1 = 0;
 800122c:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <main+0x258>)
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001232:	2100      	movs	r1, #0
 8001234:	4868      	ldr	r0, [pc, #416]	; (80013d8 <main+0x25c>)
 8001236:	f004 fb7f 	bl	8005938 <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800123a:	2104      	movs	r1, #4
 800123c:	4867      	ldr	r0, [pc, #412]	; (80013dc <main+0x260>)
 800123e:	f004 fd21 	bl	8005c84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001242:	2104      	movs	r1, #4
 8001244:	4866      	ldr	r0, [pc, #408]	; (80013e0 <main+0x264>)
 8001246:	f004 fd1d 	bl	8005c84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800124a:	2104      	movs	r1, #4
 800124c:	4865      	ldr	r0, [pc, #404]	; (80013e4 <main+0x268>)
 800124e:	f004 fd19 	bl	8005c84 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <main+0x26c>)
 8001254:	f004 faae 	bl	80057b4 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  uint8_t n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8001258:	2120      	movs	r1, #32
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f001 fc27 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	71bb      	strb	r3, [r7, #6]

	  if (isCommandReceived){
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <main+0x270>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d059      	beq.n	8001324 <main+0x1a8>
		  isCommandReceived = 0;
 8001270:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <main+0x270>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
		  tgt_M1 = command.speed1;
 8001276:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <main+0x274>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f91d 	bl	80004bc <__aeabi_i2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	495b      	ldr	r1, [pc, #364]	; (80013f4 <main+0x278>)
 8001288:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = command.speed2;
 800128c:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <main+0x274>)
 800128e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f912 	bl	80004bc <__aeabi_i2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4956      	ldr	r1, [pc, #344]	; (80013f8 <main+0x27c>)
 800129e:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = command.speed3;
 80012a2:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <main+0x274>)
 80012a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f907 	bl	80004bc <__aeabi_i2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4952      	ldr	r1, [pc, #328]	; (80013fc <main+0x280>)
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]
		  thrower_speed = command.thrower_speed;
 80012b8:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <main+0x274>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a50      	ldr	r2, [pc, #320]	; (8001400 <main+0x284>)
 80012be:	6013      	str	r3, [r2, #0]
		  uint8_t bools = command.bools;
 80012c0:	4b4b      	ldr	r3, [pc, #300]	; (80013f0 <main+0x274>)
 80012c2:	88db      	ldrh	r3, [r3, #6]
 80012c4:	71fb      	strb	r3, [r7, #7]

		  if (bools >= 2)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d906      	bls.n	80012da <main+0x15e>
		  {
		  	  bools -= 2;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	3b02      	subs	r3, #2
 80012d0:	71fb      	strb	r3, [r7, #7]
		  	  grabber_on = 1;
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <main+0x288>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e002      	b.n	80012e0 <main+0x164>
		  }

		  else
		  {
			  grabber_on = 0;
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <main+0x288>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
		  }

		  if (bools >= 1)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <main+0x176>
		  {
			  bools -= 1;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
			  thrower = 1;
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <main+0x28c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2101      	movs	r1, #1
 80012f6:	4831      	ldr	r0, [pc, #196]	; (80013bc <main+0x240>)
 80012f8:	f001 fbf2 	bl	8002ae0 <HAL_GPIO_WritePin>

		  safety_iters = 0;
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <main+0x290>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]

		  feedback.bools = (uint8_t)HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8001302:	2120      	movs	r1, #32
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f001 fbd2 	bl	8002ab0 <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <main+0x294>)
 8001312:	80da      	strh	r2, [r3, #6]
		  feedback.deliminer = 0xAAAA;
 8001314:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <main+0x294>)
 8001316:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800131a:	609a      	str	r2, [r3, #8]
		  CDC_Transmit_FS(&feedback, sizeof(feedback));
 800131c:	210c      	movs	r1, #12
 800131e:	483c      	ldr	r0, [pc, #240]	; (8001410 <main+0x294>)
 8001320:	f009 fc1a 	bl	800ab58 <CDC_Transmit_FS>

	  }



	  if (grabber_on){
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <main+0x288>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00e      	beq.n	800134a <main+0x1ce>

		  if (n)
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <main+0x1c4>
		  {
			  TIM17->CCR1 = 0;
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <main+0x258>)
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
			  grabber_on = 0;
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <main+0x288>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
 800133e:	e007      	b.n	8001350 <main+0x1d4>

		  }
		  else TIM17->CCR1 = 1000;
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <main+0x258>)
 8001342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
 8001348:	e002      	b.n	8001350 <main+0x1d4>

	  }

	  else TIM17->CCR1 = 0;
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <main+0x258>)
 800134c:	2200      	movs	r2, #0
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
	  if (n) grabber_on = 0;
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <main+0x1e0>
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <main+0x288>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]

	  if(thrower && n){
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <main+0x28c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <main+0x1fa>
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <main+0x1fa>
		  throw(thrower_speed);
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <main+0x284>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fbf0 	bl	8000b54 <throw>
 8001374:	e002      	b.n	800137c <main+0x200>
	  }
	  else thrower = 0;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <main+0x28c>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]

	  if (safety_iters > 100){
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <main+0x290>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b64      	cmp	r3, #100	; 0x64
 8001382:	f67f af69 	bls.w	8001258 <main+0xdc>
		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	2101      	movs	r1, #1
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <main+0x240>)
 800138c:	f001 fba8 	bl	8002ae0 <HAL_GPIO_WritePin>
		  tgt_M1 = 0;
 8001390:	4918      	ldr	r1, [pc, #96]	; (80013f4 <main+0x278>)
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = 0;
 800139e:	4916      	ldr	r1, [pc, #88]	; (80013f8 <main+0x27c>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = 0;
 80013ac:	4913      	ldr	r1, [pc, #76]	; (80013fc <main+0x280>)
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9c1 2300 	strd	r2, r3, [r1]
  {
 80013ba:	e74d      	b.n	8001258 <main+0xdc>
 80013bc:	48000400 	.word	0x48000400
 80013c0:	200006ac 	.word	0x200006ac
 80013c4:	40014000 	.word	0x40014000
 80013c8:	20000530 	.word	0x20000530
 80013cc:	200006f8 	.word	0x200006f8
 80013d0:	40014400 	.word	0x40014400
 80013d4:	40014800 	.word	0x40014800
 80013d8:	2000057c 	.word	0x2000057c
 80013dc:	200005c8 	.word	0x200005c8
 80013e0:	200004e4 	.word	0x200004e4
 80013e4:	20000498 	.word	0x20000498
 80013e8:	20000614 	.word	0x20000614
 80013ec:	20000227 	.word	0x20000227
 80013f0:	20000000 	.word	0x20000000
 80013f4:	200001d8 	.word	0x200001d8
 80013f8:	200001e0 	.word	0x200001e0
 80013fc:	200001e8 	.word	0x200001e8
 8001400:	20000220 	.word	0x20000220
 8001404:	20000224 	.word	0x20000224
 8001408:	20000225 	.word	0x20000225
 800140c:	20000226 	.word	0x20000226
 8001410:	20000010 	.word	0x20000010

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	; 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	2238      	movs	r2, #56	; 0x38
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f00a f820 	bl	800b468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	f44f 7000 	mov.w	r0, #512	; 0x200
 800143a:	f003 f9c3 	bl	80047c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001448:	2340      	movs	r3, #64	; 0x40
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144c:	2302      	movs	r3, #2
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001450:	2302      	movs	r3, #2
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001454:	2301      	movs	r3, #1
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001458:	230c      	movs	r3, #12
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001460:	2304      	movs	r3, #4
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fa5d 	bl	800492c <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001478:	f000 fca6 	bl	8001dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001480:	2301      	movs	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fd61 	bl	8004f5c <HAL_RCC_ClockConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014a0:	f000 fc92 	bl	8001dc8 <Error_Handler>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3750      	adds	r7, #80	; 0x50
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C3_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C3_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C3_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C3_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C3_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C3_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C3_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C3_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C3_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C3_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C3_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_I2C3_Init+0x74>)
 80014e8:	f001 fb12 	bl	8002b10 <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014f2:	f000 fc69 	bl	8001dc8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_I2C3_Init+0x74>)
 80014fa:	f001 fb98 	bl	8002c2e <HAL_I2CEx_ConfigAnalogFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 fc60 	bl	8001dc8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C3_Init+0x74>)
 800150c:	f001 fbda 	bl	8002cc4 <HAL_I2CEx_ConfigDigitalFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fc57 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000044c 	.word	0x2000044c
 8001524:	40007800 	.word	0x40007800
 8001528:	00303d5b 	.word	0x00303d5b

0800152c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b098      	sub	sp, #96	; 0x60
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2234      	movs	r2, #52	; 0x34
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f009 ff85 	bl	800b468 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <MX_TIM1_Init+0x110>)
 8001560:	4a37      	ldr	r2, [pc, #220]	; (8001640 <MX_TIM1_Init+0x114>)
 8001562:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <MX_TIM1_Init+0x110>)
 8001566:	2200      	movs	r2, #0
 8001568:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <MX_TIM1_Init+0x110>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <MX_TIM1_Init+0x110>)
 8001572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001576:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <MX_TIM1_Init+0x110>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <MX_TIM1_Init+0x110>)
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <MX_TIM1_Init+0x110>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800158a:	482c      	ldr	r0, [pc, #176]	; (800163c <MX_TIM1_Init+0x110>)
 800158c:	f004 f97c 	bl	8005888 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 fc17 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015aa:	4619      	mov	r1, r3
 80015ac:	4823      	ldr	r0, [pc, #140]	; (800163c <MX_TIM1_Init+0x110>)
 80015ae:	f005 fbf5 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015b8:	f000 fc06 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015bc:	2360      	movs	r3, #96	; 0x60
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80015d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d4:	2210      	movs	r2, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM1_Init+0x110>)
 80015da:	f004 fd61 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80015e4:	f000 fbf0 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800160e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM1_Init+0x110>)
 8001626:	f005 fc3b 	bl	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001630:	f000 fbca 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3760      	adds	r7, #96	; 0x60
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000660 	.word	0x20000660
 8001640:	40012c00 	.word	0x40012c00

08001644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	; 0x38
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <MX_TIM2_Init+0x114>)
 8001678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <MX_TIM2_Init+0x114>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_TIM2_Init+0x114>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <MX_TIM2_Init+0x114>)
 800168c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001690:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_TIM2_Init+0x114>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_TIM2_Init+0x114>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800169e:	482e      	ldr	r0, [pc, #184]	; (8001758 <MX_TIM2_Init+0x114>)
 80016a0:	f004 f830 	bl	8005704 <HAL_TIM_Base_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80016aa:	f000 fb8d 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4827      	ldr	r0, [pc, #156]	; (8001758 <MX_TIM2_Init+0x114>)
 80016bc:	f004 fe04 	bl	80062c8 <HAL_TIM_ConfigClockSource>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016c6:	f000 fb7f 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ca:	4823      	ldr	r0, [pc, #140]	; (8001758 <MX_TIM2_Init+0x114>)
 80016cc:	f004 f8dc 	bl	8005888 <HAL_TIM_PWM_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016d6:	f000 fb77 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	481b      	ldr	r0, [pc, #108]	; (8001758 <MX_TIM2_Init+0x114>)
 80016ea:	f005 fb57 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016f4:	f000 fb68 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f8:	2360      	movs	r3, #96	; 0x60
 80016fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	4812      	ldr	r0, [pc, #72]	; (8001758 <MX_TIM2_Init+0x114>)
 8001710:	f004 fcc6 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800171a:	f000 fb55 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	2204      	movs	r2, #4
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <MX_TIM2_Init+0x114>)
 8001726:	f004 fcbb 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001730:	f000 fb4a 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	2208      	movs	r2, #8
 8001738:	4619      	mov	r1, r3
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM2_Init+0x114>)
 800173c:	f004 fcb0 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001746:	f000 fb3f 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM2_Init+0x114>)
 800174c:	f000 fd36 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001750:	bf00      	nop
 8001752:	3738      	adds	r7, #56	; 0x38
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200006ac 	.word	0x200006ac

0800175c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2224      	movs	r2, #36	; 0x24
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f009 fe7c 	bl	800b468 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_TIM3_Init+0xa4>)
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <MX_TIM3_Init+0xa8>)
 800177e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MX_TIM3_Init+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_TIM3_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_TIM3_Init+0xa4>)
 800178e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001792:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_TIM3_Init+0xa4>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_TIM3_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017a8:	2301      	movs	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017b8:	2301      	movs	r3, #1
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <MX_TIM3_Init+0xa4>)
 80017cc:	f004 f9b4 	bl	8005b38 <HAL_TIM_Encoder_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017d6:	f000 faf7 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e2:	463b      	mov	r3, r7
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <MX_TIM3_Init+0xa4>)
 80017e8:	f005 fad8 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017f2:	f000 fae9 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3730      	adds	r7, #48	; 0x30
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200005c8 	.word	0x200005c8
 8001804:	40000400 	.word	0x40000400

08001808 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2224      	movs	r2, #36	; 0x24
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f009 fe26 	bl	800b468 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <MX_TIM4_Init+0xa4>)
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <MX_TIM4_Init+0xa8>)
 800182a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_TIM4_Init+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <MX_TIM4_Init+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_TIM4_Init+0xa4>)
 800183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_TIM4_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_TIM4_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800184c:	2301      	movs	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001854:	2301      	movs	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	; (80018ac <MX_TIM4_Init+0xa4>)
 8001878:	f004 f95e 	bl	8005b38 <HAL_TIM_Encoder_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001882:	f000 faa1 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MX_TIM4_Init+0xa4>)
 8001894:	f005 fa82 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800189e:	f000 fa93 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3730      	adds	r7, #48	; 0x30
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200004e4 	.word	0x200004e4
 80018b0:	40000800 	.word	0x40000800

080018b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_TIM6_Init+0x64>)
 80018c6:	4a15      	ldr	r2, [pc, #84]	; (800191c <MX_TIM6_Init+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_TIM6_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_TIM6_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_TIM6_Init+0x64>)
 80018d8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80018dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_TIM6_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <MX_TIM6_Init+0x64>)
 80018e6:	f003 ff0d 	bl	8005704 <HAL_TIM_Base_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018f0:	f000 fa6a 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_TIM6_Init+0x64>)
 8001902:	f005 fa4b 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800190c:	f000 fa5c 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000614 	.word	0x20000614
 800191c:	40001000 	.word	0x40001000

08001920 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	; 0x30
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2224      	movs	r2, #36	; 0x24
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f009 fd9a 	bl	800b468 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <MX_TIM8_Init+0xac>)
 8001940:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <MX_TIM8_Init+0xb0>)
 8001942:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <MX_TIM8_Init+0xac>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <MX_TIM8_Init+0xac>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_TIM8_Init+0xac>)
 8001952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001956:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <MX_TIM8_Init+0xac>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_TIM8_Init+0xac>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <MX_TIM8_Init+0xac>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800196a:	2301      	movs	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001972:	2301      	movs	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001982:	2301      	movs	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4619      	mov	r1, r3
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_TIM8_Init+0xac>)
 8001996:	f004 f8cf 	bl	8005b38 <HAL_TIM_Encoder_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80019a0:	f000 fa12 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_TIM8_Init+0xac>)
 80019b6:	f005 f9f1 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80019c0:	f000 fa02 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000498 	.word	0x20000498
 80019d0:	40013400 	.word	0x40013400

080019d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b09c      	sub	sp, #112	; 0x70
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2234      	movs	r2, #52	; 0x34
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f009 fd2a 	bl	800b468 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a14:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a16:	4a40      	ldr	r2, [pc, #256]	; (8001b18 <MX_TIM15_Init+0x144>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a34:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a40:	4834      	ldr	r0, [pc, #208]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a42:	f003 fe5f 	bl	8005704 <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a4c:	f000 f9bc 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	482d      	ldr	r0, [pc, #180]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a5e:	f004 fc33 	bl	80062c8 <HAL_TIM_ConfigClockSource>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a68:	f000 f9ae 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a6c:	4829      	ldr	r0, [pc, #164]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a6e:	f003 ff0b 	bl	8005888 <HAL_TIM_PWM_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a78:	f000 f9a6 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4822      	ldr	r0, [pc, #136]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001a8c:	f005 f986 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a96:	f000 f997 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9a:	2360      	movs	r3, #96	; 0x60
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aba:	2200      	movs	r2, #0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4815      	ldr	r0, [pc, #84]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001ac0:	f004 faee 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001aca:	f000 f97d 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4807      	ldr	r0, [pc, #28]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001af6:	f005 f9d3 	bl	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001b00:	f000 f962 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <MX_TIM15_Init+0x140>)
 8001b06:	f000 fb59 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001b0a:	bf00      	nop
 8001b0c:	3770      	adds	r7, #112	; 0x70
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000530 	.word	0x20000530
 8001b18:	40014000 	.word	0x40014000

08001b1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b36:	463b      	mov	r3, r7
 8001b38:	2234      	movs	r2, #52	; 0x34
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f009 fc93 	bl	800b468 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b42:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b44:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <MX_TIM16_Init+0xf0>)
 8001b46:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b56:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001b5a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b62:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b6e:	4826      	ldr	r0, [pc, #152]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b70:	f003 fdc8 	bl	8005704 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b7a:	f000 f925 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b7e:	4822      	ldr	r0, [pc, #136]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001b80:	f003 fe82 	bl	8005888 <HAL_TIM_PWM_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b8a:	f000 f91d 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8e:	2360      	movs	r3, #96	; 0x60
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4815      	ldr	r0, [pc, #84]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001bb4:	f004 fa74 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001bbe:	f000 f903 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001be4:	463b      	mov	r3, r7
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001bea:	f005 f959 	bl	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001bf4:	f000 f8e8 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <MX_TIM16_Init+0xec>)
 8001bfa:	f000 fadf 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001bfe:	bf00      	nop
 8001c00:	3750      	adds	r7, #80	; 0x50
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200006f8 	.word	0x200006f8
 8001c0c:	40014400 	.word	0x40014400

08001c10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b094      	sub	sp, #80	; 0x50
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2234      	movs	r2, #52	; 0x34
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f009 fc19 	bl	800b468 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c38:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <MX_TIM17_Init+0xf0>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c3e:	2204      	movs	r2, #4
 8001c40:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c4a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001c4e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c62:	4826      	ldr	r0, [pc, #152]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c64:	f003 fd4e 	bl	8005704 <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001c6e:	f000 f8ab 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001c72:	4822      	ldr	r0, [pc, #136]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001c74:	f003 fe08 	bl	8005888 <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001c7e:	f000 f8a3 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4815      	ldr	r0, [pc, #84]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001ca8:	f004 f9fa 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001cb2:	f000 f889 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001cde:	f005 f8df 	bl	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001ce8:	f000 f86e 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM17_Init+0xec>)
 8001cee:	f000 fa65 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001cf2:	bf00      	nop
 8001cf4:	3750      	adds	r7, #80	; 0x50
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000057c 	.word	0x2000057c
 8001d00:	40014800 	.word	0x40014800

08001d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f240 410a 	movw	r1, #1034	; 0x40a
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f000 fec4 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4819      	ldr	r0, [pc, #100]	; (8001dc4 <MX_GPIO_Init+0xc0>)
 8001d5e:	f000 febf 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8001d62:	f240 430a 	movw	r3, #1034	; 0x40a
 8001d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f000 fd15 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8001d82:	2320      	movs	r3, #32
 8001d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d98:	f000 fd08 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_GPIO_Init+0xc0>)
 8001db4:	f000 fcfa 	bl	80027ac <HAL_GPIO_Init>

}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	48000400 	.word	0x48000400

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <Error_Handler+0x8>
	...

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_MspInit+0x44>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_MspInit+0x44>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6613      	str	r3, [r2, #96]	; 0x60
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_MspInit+0x44>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_MspInit+0x44>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_MspInit+0x44>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_MspInit+0x44>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e0a:	f002 fd7f 	bl	800490c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000

08001e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09c      	sub	sp, #112	; 0x70
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	2244      	movs	r2, #68	; 0x44
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f009 fb13 	bl	800b468 <memset>
  if(hi2c->Instance==I2C3)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2e      	ldr	r2, [pc, #184]	; (8001f00 <HAL_I2C_MspInit+0xe4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d154      	bne.n	8001ef6 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fa62 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e66:	f7ff ffaf 	bl	8001dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001eac:	2302      	movs	r3, #2
 8001eae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eba:	f000 fc77 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <HAL_I2C_MspInit+0xec>)
 8001eda:	f000 fc67 	bl	80027ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001ee4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_I2C_MspInit+0xe8>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3770      	adds	r7, #112	; 0x70
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40007800 	.word	0x40007800
 8001f04:	40021000 	.word	0x40021000
 8001f08:	48000400 	.word	0x48000400

08001f0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_TIM_PWM_MspInit+0x38>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10b      	bne.n	8001f36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f28:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f76:	e04e      	b.n	8002016 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a29      	ldr	r2, [pc, #164]	; (8002024 <HAL_TIM_Base_MspInit+0xd8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d114      	bne.n	8001fac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f82:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4a26      	ldr	r2, [pc, #152]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001f88:	f043 0310 	orr.w	r3, r3, #16
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2036      	movs	r0, #54	; 0x36
 8001fa0:	f000 fbcf 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa4:	2036      	movs	r0, #54	; 0x36
 8001fa6:	f000 fbe6 	bl	8002776 <HAL_NVIC_EnableIRQ>
}
 8001faa:	e034      	b.n	8002016 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_TIM_Base_MspInit+0xdc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697b      	ldr	r3, [r7, #20]
}
 8001fce:	e022      	b.n	8002016 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <HAL_TIM_Base_MspInit+0xe0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
}
 8001ff2:	e010      	b.n	8002016 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <HAL_TIM_Base_MspInit+0xe4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10b      	bne.n	8002016 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6613      	str	r3, [r2, #96]	; 0x60
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_TIM_Base_MspInit+0xd4>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	bf00      	nop
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	40001000 	.word	0x40001000
 8002028:	40014000 	.word	0x40014000
 800202c:	40014400 	.word	0x40014400
 8002030:	40014800 	.word	0x40014800

08002034 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08e      	sub	sp, #56	; 0x38
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a55      	ldr	r2, [pc, #340]	; (80021a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d129      	bne.n	80020aa <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002056:	4b55      	ldr	r3, [pc, #340]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a54      	ldr	r2, [pc, #336]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
 8002062:	4b52      	ldr	r3, [pc, #328]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	623b      	str	r3, [r7, #32]
 800206c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 8002086:	2350      	movs	r3, #80	; 0x50
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002096:	2302      	movs	r3, #2
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f000 fb82 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020a8:	e079      	b.n	800219e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a40      	ldr	r2, [pc, #256]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x17c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d128      	bne.n	8002106 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6593      	str	r3, [r2, #88]	; 0x58
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	4a36      	ldr	r2, [pc, #216]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 80020e4:	23c0      	movs	r3, #192	; 0xc0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f4:	2302      	movs	r3, #2
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	482d      	ldr	r0, [pc, #180]	; (80021b4 <HAL_TIM_Encoder_MspInit+0x180>)
 8002100:	f000 fb54 	bl	80027ac <HAL_GPIO_Init>
}
 8002104:	e04b      	b.n	800219e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <HAL_TIM_Encoder_MspInit+0x184>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d146      	bne.n	800219e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002116:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800211a:	6613      	str	r3, [r2, #96]	; 0x60
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_TIM_Encoder_MspInit+0x178>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800216a:	2302      	movs	r3, #2
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	4619      	mov	r1, r3
 8002174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002178:	f000 fb18 	bl	80027ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800217c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800218e:	230a      	movs	r3, #10
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	4619      	mov	r1, r3
 8002198:	4806      	ldr	r0, [pc, #24]	; (80021b4 <HAL_TIM_Encoder_MspInit+0x180>)
 800219a:	f000 fb07 	bl	80027ac <HAL_GPIO_Init>
}
 800219e:	bf00      	nop
 80021a0:	3738      	adds	r7, #56	; 0x38
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40000800 	.word	0x40000800
 80021b4:	48000400 	.word	0x48000400
 80021b8:	40013400 	.word	0x40013400

080021bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021dc:	d14b      	bne.n	8002276 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b55      	ldr	r3, [pc, #340]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a54      	ldr	r2, [pc, #336]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b52      	ldr	r3, [pc, #328]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_VH1_M1_PWM_Pin;
 800220e:	2301      	movs	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800221e:	2301      	movs	r3, #1
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_VH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	f000 fabe 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 8002230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002242:	230a      	movs	r3, #10
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002250:	f000 faac 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 8002254:	2308      	movs	r3, #8
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002264:	2301      	movs	r3, #1
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4838      	ldr	r0, [pc, #224]	; (8002350 <HAL_TIM_MspPostInit+0x194>)
 8002270:	f000 fa9c 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002274:	e066      	b.n	8002344 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_TIM_MspPostInit+0x198>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d11d      	bne.n	80022bc <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 8002298:	2304      	movs	r3, #4
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80022a8:	2309      	movs	r3, #9
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b6:	f000 fa79 	bl	80027ac <HAL_GPIO_Init>
}
 80022ba:	e043      	b.n	8002344 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a25      	ldr	r2, [pc, #148]	; (8002358 <HAL_TIM_MspPostInit+0x19c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d11c      	bne.n	8002300 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 80022de:	2310      	movs	r3, #16
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80022ee:	2301      	movs	r3, #1
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	4815      	ldr	r0, [pc, #84]	; (8002350 <HAL_TIM_MspPostInit+0x194>)
 80022fa:	f000 fa57 	bl	80027ac <HAL_GPIO_Init>
}
 80022fe:	e021      	b.n	8002344 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <HAL_TIM_MspPostInit+0x1a0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d11c      	bne.n	8002344 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_TIM_MspPostInit+0x190>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002332:	2301      	movs	r3, #1
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002340:	f000 fa34 	bl	80027ac <HAL_GPIO_Init>
}
 8002344:	bf00      	nop
 8002346:	3730      	adds	r7, #48	; 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	48000400 	.word	0x48000400
 8002354:	40014000 	.word	0x40014000
 8002358:	40014400 	.word	0x40014400
 800235c:	40014800 	.word	0x40014800

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 f8ae 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <USB_HP_IRQHandler+0x10>)
 80023ba:	f000 fdd6 	bl	8002f6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200013e8 	.word	0x200013e8

080023c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <USB_LP_IRQHandler+0x10>)
 80023ce:	f000 fdcc 	bl	8002f6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200013e8 	.word	0x200013e8

080023dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <TIM6_DAC_IRQHandler+0x10>)
 80023e2:	f003 fcdd 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000614 	.word	0x20000614

080023f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002416:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <LoopForever+0xe>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002430:	4c0b      	ldr	r4, [pc, #44]	; (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800243e:	f7ff ffd7 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f008 ffdf 	bl	800b404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7fe fe99 	bl	800117c <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   r0, =_estack
 800244c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002458:	0800b4f0 	.word	0x0800b4f0
  ldr r2, =_sbss
 800245c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002460:	200016dc 	.word	0x200016dc

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>

08002466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f95b 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	200f      	movs	r0, #15
 8002478:	f000 f80e 	bl	8002498 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e001      	b.n	800248c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002488:	f7ff fca4 	bl	8001dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	79fb      	ldrb	r3, [r7, #7]

}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_InitTick+0x68>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d022      	beq.n	80024f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_InitTick+0x6c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_InitTick+0x68>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f966 	bl	8002792 <HAL_SYSTICK_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	d809      	bhi.n	80024e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d2:	2200      	movs	r2, #0
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024da:	f000 f932 	bl	8002742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_InitTick+0x70>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e007      	b.n	80024f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e004      	b.n	80024f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e001      	b.n	80024f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000024 	.word	0x20000024
 8002504:	2000001c 	.word	0x2000001c
 8002508:	20000020 	.word	0x20000020

0800250c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_IncTick+0x1c>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x20>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4413      	add	r3, r2
 800251a:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_IncTick+0x1c>)
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	20000744 	.word	0x20000744
 800252c:	20000024 	.word	0x20000024

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000744 	.word	0x20000744

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002560:	d004      	beq.n	800256c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_Delay+0x40>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256c:	bf00      	nop
 800256e:	f7ff ffdf 	bl	8002530 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	429a      	cmp	r2, r3
 800257c:	d8f7      	bhi.n	800256e <HAL_Delay+0x26>
  {
  }
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000024 	.word	0x20000024

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <__NVIC_EnableIRQ+0x38>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800270c:	f7ff ff8e 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff29 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff40 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff90 	bl	8002680 <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5f 	bl	800262c <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff33 	bl	80025f0 <__NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffa4 	bl	80026e8 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027ba:	e15a      	b.n	8002a72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 814c 	beq.w	8002a6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d005      	beq.n	80027ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d130      	bne.n	800284e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002822:	2201      	movs	r2, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 0201 	and.w	r2, r3, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b03      	cmp	r3, #3
 8002858:	d017      	beq.n	800288a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d123      	bne.n	80028de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	220f      	movs	r2, #15
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	08da      	lsrs	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3208      	adds	r2, #8
 80028d8:	6939      	ldr	r1, [r7, #16]
 80028da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0203 	and.w	r2, r3, #3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80a6 	beq.w	8002a6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002920:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <HAL_GPIO_Init+0x2e4>)
 8002922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002924:	4a5a      	ldr	r2, [pc, #360]	; (8002a90 <HAL_GPIO_Init+0x2e4>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6613      	str	r3, [r2, #96]	; 0x60
 800292c:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <HAL_GPIO_Init+0x2e4>)
 800292e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002938:	4a56      	ldr	r2, [pc, #344]	; (8002a94 <HAL_GPIO_Init+0x2e8>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	220f      	movs	r2, #15
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002962:	d01f      	beq.n	80029a4 <HAL_GPIO_Init+0x1f8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a4c      	ldr	r2, [pc, #304]	; (8002a98 <HAL_GPIO_Init+0x2ec>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d019      	beq.n	80029a0 <HAL_GPIO_Init+0x1f4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a4b      	ldr	r2, [pc, #300]	; (8002a9c <HAL_GPIO_Init+0x2f0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_GPIO_Init+0x1f0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <HAL_GPIO_Init+0x2f4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00d      	beq.n	8002998 <HAL_GPIO_Init+0x1ec>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a49      	ldr	r2, [pc, #292]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <HAL_GPIO_Init+0x1e8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a48      	ldr	r2, [pc, #288]	; (8002aa8 <HAL_GPIO_Init+0x2fc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_GPIO_Init+0x1e4>
 800298c:	2305      	movs	r3, #5
 800298e:	e00a      	b.n	80029a6 <HAL_GPIO_Init+0x1fa>
 8002990:	2306      	movs	r3, #6
 8002992:	e008      	b.n	80029a6 <HAL_GPIO_Init+0x1fa>
 8002994:	2304      	movs	r3, #4
 8002996:	e006      	b.n	80029a6 <HAL_GPIO_Init+0x1fa>
 8002998:	2303      	movs	r3, #3
 800299a:	e004      	b.n	80029a6 <HAL_GPIO_Init+0x1fa>
 800299c:	2302      	movs	r3, #2
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0x1fa>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_GPIO_Init+0x1fa>
 80029a4:	2300      	movs	r3, #0
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	f002 0203 	and.w	r2, r2, #3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4093      	lsls	r3, r2
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b6:	4937      	ldr	r1, [pc, #220]	; (8002a94 <HAL_GPIO_Init+0x2e8>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_GPIO_Init+0x300>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <HAL_GPIO_Init+0x300>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_GPIO_Init+0x300>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <HAL_GPIO_Init+0x300>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_GPIO_Init+0x300>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_GPIO_Init+0x300>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_GPIO_Init+0x300>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_GPIO_Init+0x300>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f ae9d 	bne.w	80027bc <HAL_GPIO_Init+0x10>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010000 	.word	0x40010000
 8002a98:	48000400 	.word	0x48000400
 8002a9c:	48000800 	.word	0x48000800
 8002aa0:	48000c00 	.word	0x48000c00
 8002aa4:	48001000 	.word	0x48001000
 8002aa8:	48001400 	.word	0x48001400
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e081      	b.n	8002c26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff f970 	bl	8001e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	e006      	b.n	8002b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d104      	bne.n	8002baa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69d9      	ldr	r1, [r3, #28]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d138      	bne.n	8002cb6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e032      	b.n	8002cb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d139      	bne.n	8002d4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e033      	b.n	8002d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
  }
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5e:	b08b      	sub	sp, #44	; 0x2c
 8002d60:	af06      	add	r7, sp, #24
 8002d62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0d7      	b.n	8002f1e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f008 f830 	bl	800ade8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 f980 	bl	800709a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e04c      	b.n	8002e3a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	3301      	adds	r3, #1
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	b298      	uxth	r0, r3
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	3336      	adds	r3, #54	; 0x36
 8002dde:	4602      	mov	r2, r0
 8002de0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3303      	adds	r3, #3
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3338      	adds	r3, #56	; 0x38
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	333c      	adds	r3, #60	; 0x3c
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3340      	adds	r3, #64	; 0x40
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3301      	adds	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d3ad      	bcc.n	8002da0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e044      	b.n	8002ed4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	440b      	add	r3, r1
 8002e84:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3b5      	bcc.n	8002e4a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	687e      	ldr	r6, [r7, #4]
 8002ee6:	466d      	mov	r5, sp
 8002ee8:	f106 0410 	add.w	r4, r6, #16
 8002eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	602b      	str	r3, [r5, #0]
 8002ef4:	1d33      	adds	r3, r6, #4
 8002ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	f004 f8e9 	bl	80070d0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f001 fc29 	bl	800476e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_Start+0x16>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e012      	b.n	8002f62 <HAL_PCD_Start+0x3c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f004 f88f 	bl	800706c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f006 f844 	bl	8008fe0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f006 f849 	bl	800900e <USB_ReadInterrupts>
 8002f7c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fb26 	bl	80035da <PCD_EP_ISR_Handler>

    return;
 8002f8e:	e110      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d013      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f007 ffb1 	bl	800af1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002fb8:	2100      	movs	r1, #0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8fc 	bl	80031b8 <HAL_PCD_SetAddress>

    return;
 8002fc0:	e0f7      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00c      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fe4:	e0e5      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00c      	beq.n	800300a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003002:	b292      	uxth	r2, r2
 8003004:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003008:	e0d3      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d034      	beq.n	800307e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0204 	bic.w	r2, r2, #4
 8003026:	b292      	uxth	r2, r2
 8003028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0208 	bic.w	r2, r2, #8
 800303e:	b292      	uxth	r2, r2
 8003040:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f008 f953 	bl	800b304 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f007 ff94 	bl	800af8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800306c:	b29a      	uxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003076:	b292      	uxth	r2, r2
 8003078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800307c:	e099      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	2b00      	cmp	r3, #0
 8003086:	d027      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0208 	orr.w	r2, r2, #8
 800309a:	b292      	uxth	r2, r2
 800309c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b2:	b292      	uxth	r2, r2
 80030b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0204 	orr.w	r2, r2, #4
 80030ca:	b292      	uxth	r2, r2
 80030cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f007 ff41 	bl	800af58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030d6:	e06c      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d040      	beq.n	8003164 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f4:	b292      	uxth	r2, r2
 80030f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d12b      	bne.n	800315c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0204 	orr.w	r2, r2, #4
 8003116:	b292      	uxth	r2, r2
 8003118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	b292      	uxth	r2, r2
 8003130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003144:	b29b      	uxth	r3, r3
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003152:	2101      	movs	r1, #1
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f008 f8d5 	bl	800b304 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800315a:	e02a      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f007 fefb 	bl	800af58 <HAL_PCD_SuspendCallback>
    return;
 8003162:	e026      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00f      	beq.n	800318e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003180:	b292      	uxth	r2, r2
 8003182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f007 feb9 	bl	800aefe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800318c:	e011      	b.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031aa:	b292      	uxth	r2, r2
 80031ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031b0:	bf00      	nop
  }
}
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_PCD_SetAddress+0x1a>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e013      	b.n	80031fa <HAL_PCD_SetAddress+0x42>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f005 fee4 	bl	8008fb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	4608      	mov	r0, r1
 800320c:	4611      	mov	r1, r2
 800320e:	461a      	mov	r2, r3
 8003210:	4603      	mov	r3, r0
 8003212:	70fb      	strb	r3, [r7, #3]
 8003214:	460b      	mov	r3, r1
 8003216:	803b      	strh	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da0e      	bge.n	8003246 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	705a      	strb	r2, [r3, #1]
 8003244:	e00e      	b.n	8003264 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 0207 	and.w	r2, r3, #7
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003270:	883a      	ldrh	r2, [r7, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	78ba      	ldrb	r2, [r7, #2]
 800327a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800328e:	78bb      	ldrb	r3, [r7, #2]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d102      	bne.n	800329a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_PCD_EP_Open+0xa6>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e00e      	b.n	80032c6 <HAL_PCD_EP_Open+0xc4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 ff2c 	bl	8007114 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80032c4:	7afb      	ldrb	r3, [r7, #11]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da0e      	bge.n	8003300 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	705a      	strb	r2, [r3, #1]
 80032fe:	e00e      	b.n	800331e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 0207 	and.w	r2, r3, #7
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_PCD_EP_Close+0x6a>
 8003334:	2302      	movs	r3, #2
 8003336:	e00e      	b.n	8003356 <HAL_PCD_EP_Close+0x88>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68f9      	ldr	r1, [r7, #12]
 8003346:	4618      	mov	r0, r3
 8003348:	f004 fa78 	bl	800783c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	460b      	mov	r3, r1
 800336c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	f003 0207 	and.w	r2, r3, #7
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2200      	movs	r2, #0
 800339c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339e:	7afb      	ldrb	r3, [r7, #11]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6979      	ldr	r1, [r7, #20]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 fc2b 	bl	8007c16 <USB_EPStartXfer>
 80033c0:	e005      	b.n	80033ce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6979      	ldr	r1, [r7, #20]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 fc24 	bl	8007c16 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 0207 	and.w	r2, r3, #7
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2201      	movs	r2, #1
 8003452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003454:	7afb      	ldrb	r3, [r7, #11]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	b2da      	uxtb	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	4618      	mov	r0, r3
 8003472:	f004 fbd0 	bl	8007c16 <USB_EPStartXfer>
 8003476:	e005      	b.n	8003484 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fbc9 	bl	8007c16 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 0207 	and.w	r2, r3, #7
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d901      	bls.n	80034ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e03e      	b.n	800352a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da0e      	bge.n	80034d2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	705a      	strb	r2, [r3, #1]
 80034d0:	e00c      	b.n	80034ec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_PCD_EP_SetStall+0x7e>
 8003508:	2302      	movs	r3, #2
 800350a:	e00e      	b.n	800352a <HAL_PCD_EP_SetStall+0x9c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f005 fc4d 	bl	8008dba <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d901      	bls.n	8003550 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e040      	b.n	80035d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003554:	2b00      	cmp	r3, #0
 8003556:	da0e      	bge.n	8003576 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	705a      	strb	r2, [r3, #1]
 8003574:	e00e      	b.n	8003594 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 0207 	and.w	r2, r3, #7
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_PCD_EP_ClrStall+0x82>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e00e      	b.n	80035d2 <HAL_PCD_EP_ClrStall+0xa0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68f9      	ldr	r1, [r7, #12]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 fc4a 	bl	8008e5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b096      	sub	sp, #88	; 0x58
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035e2:	e39c      	b.n	8003d1e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80035fe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 815e 	bne.w	80038c4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003608:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d150      	bne.n	80036b6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003624:	81fb      	strh	r3, [r7, #14]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	89fb      	ldrh	r3, [r7, #14]
 800362c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003634:	b29b      	uxth	r3, r3
 8003636:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3328      	adds	r3, #40	; 0x28
 800363c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003646:	b29b      	uxth	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	4413      	add	r3, r2
 8003658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003664:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	441a      	add	r2, r3
 8003670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003672:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003674:	2100      	movs	r1, #0
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f007 fc27 	bl	800aeca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 834a 	beq.w	8003d1e <PCD_EP_ISR_Handler+0x744>
 800368a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 8345 	bne.w	8003d1e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036b4:	e333      	b.n	8003d1e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d032      	beq.n	800373a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003708:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800370e:	b29b      	uxth	r3, r3
 8003710:	f005 fccf 	bl	80090b2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29a      	uxth	r2, r3
 800371c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003720:	4013      	ands	r3, r2
 8003722:	823b      	strh	r3, [r7, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	8a3a      	ldrh	r2, [r7, #16]
 800372a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800372e:	b292      	uxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f007 fb9c 	bl	800ae70 <HAL_PCD_SetupStageCallback>
 8003738:	e2f1      	b.n	8003d1e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800373a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800373e:	2b00      	cmp	r3, #0
 8003740:	f280 82ed 	bge.w	8003d1e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29a      	uxth	r2, r3
 800374c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003750:	4013      	ands	r3, r2
 8003752:	83fb      	strh	r3, [r7, #30]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	8bfa      	ldrh	r2, [r7, #30]
 800375a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800375e:	b292      	uxth	r2, r2
 8003760:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376a:	b29b      	uxth	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	4413      	add	r3, r2
 800377c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d019      	beq.n	80037c6 <PCD_EP_ISR_Handler+0x1ec>
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d015      	beq.n	80037c6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a0:	6959      	ldr	r1, [r3, #20]
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f005 fc81 	bl	80090b2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80037b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	441a      	add	r2, r3
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037be:	2100      	movs	r1, #0
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f007 fb67 	bl	800ae94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 82a3 	bne.w	8003d1e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4413      	add	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b3e      	cmp	r3, #62	; 0x3e
 80037fe:	d918      	bls.n	8003832 <PCD_EP_ISR_Handler+0x258>
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <PCD_EP_ISR_Handler+0x240>
 8003814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003816:	3b01      	subs	r3, #1
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
 800381a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381c:	b29b      	uxth	r3, r3
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	b29b      	uxth	r3, r3
 8003822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382a:	b29a      	uxth	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	e029      	b.n	8003886 <PCD_EP_ISR_Handler+0x2ac>
 8003832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d112      	bne.n	8003860 <PCD_EP_ISR_Handler+0x286>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003844:	b29a      	uxth	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003858:	b29a      	uxth	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e012      	b.n	8003886 <PCD_EP_ISR_Handler+0x2ac>
 8003860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
 8003868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <PCD_EP_ISR_Handler+0x2a0>
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	3301      	adds	r3, #1
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
 800387a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387c:	b29b      	uxth	r3, r3
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	b29a      	uxth	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	827b      	strh	r3, [r7, #18]
 8003898:	8a7b      	ldrh	r3, [r7, #18]
 800389a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800389e:	827b      	strh	r3, [r7, #18]
 80038a0:	8a7b      	ldrh	r3, [r7, #18]
 80038a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038a6:	827b      	strh	r3, [r7, #18]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	8a7b      	ldrh	r3, [r7, #18]
 80038ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038be:	b29b      	uxth	r3, r3
 80038c0:	8013      	strh	r3, [r2, #0]
 80038c2:	e22c      	b.n	8003d1e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038d8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f280 80f6 	bge.w	8003ace <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038f8:	4013      	ands	r3, r2
 80038fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003910:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003914:	b292      	uxth	r2, r2
 8003916:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003918:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	7b1b      	ldrb	r3, [r3, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d123      	bne.n	800397e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	4413      	add	r3, r2
 8003950:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800395e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 808e 	beq.w	8003a84 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	6959      	ldr	r1, [r3, #20]
 8003970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003972:	88da      	ldrh	r2, [r3, #6]
 8003974:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003978:	f005 fb9b 	bl	80090b2 <USB_ReadPMA>
 800397c:	e082      	b.n	8003a84 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003980:	78db      	ldrb	r3, [r3, #3]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d10a      	bne.n	800399c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003986:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800398a:	461a      	mov	r2, r3
 800398c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9d3 	bl	8003d3a <HAL_PCD_EP_DB_Receive>
 8003994:	4603      	mov	r3, r0
 8003996:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800399a:	e073      	b.n	8003a84 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	441a      	add	r2, r3
 80039c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039dc:	b29b      	uxth	r3, r3
 80039de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d022      	beq.n	8003a40 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4413      	add	r3, r2
 8003a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02c      	beq.n	8003a84 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a30:	6959      	ldr	r1, [r3, #20]
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	891a      	ldrh	r2, [r3, #8]
 8003a36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a3a:	f005 fb3a 	bl	80090b2 <USB_ReadPMA>
 8003a3e:	e021      	b.n	8003a84 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a64:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	6959      	ldr	r1, [r3, #20]
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	895a      	ldrh	r2, [r3, #10]
 8003a7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a80:	f005 fb17 	bl	80090b2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a8c:	441a      	add	r2, r3
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a9a:	441a      	add	r2, r3
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <PCD_EP_ISR_Handler+0x4da>
 8003aa8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d206      	bcs.n	8003ac2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f007 f9ea 	bl	800ae94 <HAL_PCD_DataOutStageCallback>
 8003ac0:	e005      	b.n	8003ace <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 f8a4 	bl	8007c16 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ace:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8121 	beq.w	8003d1e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003adc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	441a      	add	r2, r3
 8003b1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2e:	78db      	ldrb	r3, [r3, #3]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f000 80a2 	beq.w	8003c7a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	2200      	movs	r2, #0
 8003b3a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3e:	7b1b      	ldrb	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8093 	beq.w	8003c6c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d046      	beq.n	8003be0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d126      	bne.n	8003ba8 <PCD_EP_ISR_Handler+0x5ce>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	4413      	add	r3, r2
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	00da      	lsls	r2, r3, #3
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e061      	b.n	8003c6c <PCD_EP_ISR_Handler+0x692>
 8003ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d15d      	bne.n	8003c6c <PCD_EP_ISR_Handler+0x692>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	4413      	add	r3, r2
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	00da      	lsls	r2, r3, #3
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	2200      	movs	r2, #0
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	e045      	b.n	8003c6c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d126      	bne.n	8003c3c <PCD_EP_ISR_Handler+0x662>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	4413      	add	r3, r2
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
 8003c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	00da      	lsls	r2, r3, #3
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0e:	4413      	add	r3, r2
 8003c10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c14:	633b      	str	r3, [r7, #48]	; 0x30
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	e017      	b.n	8003c6c <PCD_EP_ISR_Handler+0x692>
 8003c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d113      	bne.n	8003c6c <PCD_EP_ISR_Handler+0x692>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c52:	4413      	add	r3, r2
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	00da      	lsls	r2, r3, #3
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5e:	4413      	add	r3, r2
 8003c60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2200      	movs	r2, #0
 8003c6a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f007 f929 	bl	800aeca <HAL_PCD_DataInStageCallback>
 8003c78:	e051      	b.n	8003d1e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d144      	bne.n	8003d10 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003caa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d907      	bls.n	8003cca <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc6:	619a      	str	r2, [r3, #24]
 8003cc8:	e002      	b.n	8003cd0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f007 f8f3 	bl	800aeca <HAL_PCD_DataInStageCallback>
 8003ce4:	e01b      	b.n	8003d1e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cee:	441a      	add	r2, r3
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cfc:	441a      	add	r2, r3
 8003cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d00:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 ff84 	bl	8007c16 <USB_EPStartXfer>
 8003d0e:	e006      	b.n	8003d1e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003d10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003d14:	461a      	mov	r2, r3
 8003d16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f917 	bl	8003f4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f6ff ac5a 	blt.w	80035e4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3758      	adds	r7, #88	; 0x58
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d07c      	beq.n	8003e4c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	8b7b      	ldrh	r3, [r7, #26]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d306      	bcc.n	8003d90 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	8b7b      	ldrh	r3, [r7, #26]
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	e002      	b.n	8003d96 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2200      	movs	r2, #0
 8003d94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d123      	bne.n	8003de6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	833b      	strh	r3, [r7, #24]
 8003dba:	8b3b      	ldrh	r3, [r7, #24]
 8003dbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dc0:	833b      	strh	r3, [r7, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	441a      	add	r2, r3
 8003dd0:	8b3b      	ldrh	r3, [r7, #24]
 8003dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01f      	beq.n	8003e30 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	82fb      	strh	r3, [r7, #22]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	441a      	add	r2, r3
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e30:	8b7b      	ldrh	r3, [r7, #26]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8085 	beq.w	8003f42 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6959      	ldr	r1, [r3, #20]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	891a      	ldrh	r2, [r3, #8]
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	f005 f934 	bl	80090b2 <USB_ReadPMA>
 8003e4a:	e07a      	b.n	8003f42 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	8b7b      	ldrh	r3, [r7, #26]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d306      	bcc.n	8003e8a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	8b7b      	ldrh	r3, [r7, #26]
 8003e82:	1ad2      	subs	r2, r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	619a      	str	r2, [r3, #24]
 8003e88:	e002      	b.n	8003e90 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d123      	bne.n	8003ee0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	83fb      	strh	r3, [r7, #30]
 8003eb4:	8bfb      	ldrh	r3, [r7, #30]
 8003eb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003eba:	83fb      	strh	r3, [r7, #30]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	8bfb      	ldrh	r3, [r7, #30]
 8003ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11f      	bne.n	8003f2a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f04:	83bb      	strh	r3, [r7, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	441a      	add	r2, r3
 8003f14:	8bbb      	ldrh	r3, [r7, #28]
 8003f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6959      	ldr	r1, [r3, #20]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	895a      	ldrh	r2, [r3, #10]
 8003f3c:	8b7b      	ldrh	r3, [r7, #26]
 8003f3e:	f005 f8b8 	bl	80090b2 <USB_ReadPMA>
    }
  }

  return count;
 8003f42:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0a2      	sub	sp, #136	; 0x88
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 81c5 	beq.w	80042f0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d907      	bls.n	8003faa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	619a      	str	r2, [r3, #24]
 8003fa8:	e002      	b.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 80b9 	bne.w	800412c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d126      	bne.n	8004010 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	4413      	add	r3, r2
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	00da      	lsls	r2, r3, #3
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004008:	b29a      	uxth	r2, r3
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	e01a      	b.n	8004046 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d116      	bne.n	8004046 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	633b      	str	r3, [r7, #48]	; 0x30
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	4413      	add	r3, r2
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	00da      	lsls	r2, r3, #3
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	4413      	add	r3, r2
 800403a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	2200      	movs	r2, #0
 8004044:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d126      	bne.n	80040a2 <HAL_PCD_EP_DB_Transmit+0x156>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004062:	b29b      	uxth	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	4413      	add	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	00da      	lsls	r2, r3, #3
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	4413      	add	r3, r2
 8004076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004086:	b29a      	uxth	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	801a      	strh	r2, [r3, #0]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409a:	b29a      	uxth	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	e017      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d113      	bne.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	4413      	add	r3, r2
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	00da      	lsls	r2, r3, #3
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	4413      	add	r3, r2
 80040c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2200      	movs	r2, #0
 80040d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	4619      	mov	r1, r3
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f006 fef6 	bl	800aeca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 82d2 	beq.w	800468e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	827b      	strh	r3, [r7, #18]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	8a7b      	ldrh	r3, [r7, #18]
 8004116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
 800412a:	e2b0      	b.n	800468e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004150:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800416a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800416e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004176:	b29b      	uxth	r3, r3
 8004178:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 8284 	bne.w	800468e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800418e:	441a      	add	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800419c:	441a      	add	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d309      	bcc.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	621a      	str	r2, [r3, #32]
 80041c0:	e015      	b.n	80041ee <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80041ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041d8:	e009      	b.n	80041ee <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d155      	bne.n	80042a2 <HAL_PCD_EP_DB_Transmit+0x356>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004204:	b29b      	uxth	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	4413      	add	r3, r2
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	00da      	lsls	r2, r3, #3
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	4413      	add	r3, r2
 8004218:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
 800421e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004220:	2b3e      	cmp	r3, #62	; 0x3e
 8004222:	d916      	bls.n	8004252 <HAL_PCD_EP_DB_Transmit+0x306>
 8004224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
 800422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004236:	3b01      	subs	r3, #1
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
 800423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423c:	b29b      	uxth	r3, r3
 800423e:	029b      	lsls	r3, r3, #10
 8004240:	b29b      	uxth	r3, r3
 8004242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424a:	b29a      	uxth	r2, r3
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	e043      	b.n	80042da <HAL_PCD_EP_DB_Transmit+0x38e>
 8004252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004254:	2b00      	cmp	r3, #0
 8004256:	d112      	bne.n	800427e <HAL_PCD_EP_DB_Transmit+0x332>
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004262:	b29a      	uxth	r2, r3
 8004264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004276:	b29a      	uxth	r2, r3
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	e02d      	b.n	80042da <HAL_PCD_EP_DB_Transmit+0x38e>
 800427e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
 8004284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_PCD_EP_DB_Transmit+0x348>
 800428e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004290:	3301      	adds	r3, #1
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
 8004294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004296:	b29b      	uxth	r3, r3
 8004298:	029b      	lsls	r3, r3, #10
 800429a:	b29a      	uxth	r2, r3
 800429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	e01b      	b.n	80042da <HAL_PCD_EP_DB_Transmit+0x38e>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d117      	bne.n	80042da <HAL_PCD_EP_DB_Transmit+0x38e>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	643b      	str	r3, [r7, #64]	; 0x40
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042be:	4413      	add	r3, r2
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	00da      	lsls	r2, r3, #3
 80042c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ca:	4413      	add	r3, r2
 80042cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6959      	ldr	r1, [r3, #20]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	891a      	ldrh	r2, [r3, #8]
 80042e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f004 fea0 	bl	800902e <USB_WritePMA>
 80042ee:	e1ce      	b.n	800468e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	4413      	add	r3, r2
 800430a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004314:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004320:	429a      	cmp	r2, r3
 8004322:	d307      	bcc.n	8004334 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800432c:	1ad2      	subs	r2, r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	619a      	str	r2, [r3, #24]
 8004332:	e002      	b.n	800433a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2200      	movs	r2, #0
 8004338:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 80c4 	bne.w	80044cc <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d126      	bne.n	800439a <HAL_PCD_EP_DB_Transmit+0x44e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	66bb      	str	r3, [r7, #104]	; 0x68
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004360:	4413      	add	r3, r2
 8004362:	66bb      	str	r3, [r7, #104]	; 0x68
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	00da      	lsls	r2, r3, #3
 800436a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800436c:	4413      	add	r3, r2
 800436e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004372:	667b      	str	r3, [r7, #100]	; 0x64
 8004374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800437e:	b29a      	uxth	r2, r3
 8004380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29a      	uxth	r2, r3
 8004394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e01a      	b.n	80043d0 <HAL_PCD_EP_DB_Transmit+0x484>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	785b      	ldrb	r3, [r3, #1]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d116      	bne.n	80043d0 <HAL_PCD_EP_DB_Transmit+0x484>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	673b      	str	r3, [r7, #112]	; 0x70
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043b6:	4413      	add	r3, r2
 80043b8:	673b      	str	r3, [r7, #112]	; 0x70
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	00da      	lsls	r2, r3, #3
 80043c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c2:	4413      	add	r3, r2
 80043c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	2200      	movs	r2, #0
 80043ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d12f      	bne.n	800443e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f6:	4413      	add	r3, r2
 80043f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	00da      	lsls	r2, r3, #3
 8004402:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004406:	4413      	add	r3, r2
 8004408:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800440c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800441c:	b29a      	uxth	r2, r3
 800441e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e017      	b.n	800446e <HAL_PCD_EP_DB_Transmit+0x522>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	785b      	ldrb	r3, [r3, #1]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d113      	bne.n	800446e <HAL_PCD_EP_DB_Transmit+0x522>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004454:	4413      	add	r3, r2
 8004456:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	00da      	lsls	r2, r3, #3
 800445e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004460:	4413      	add	r3, r2
 8004462:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004466:	67bb      	str	r3, [r7, #120]	; 0x78
 8004468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800446a:	2200      	movs	r2, #0
 800446c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	4619      	mov	r1, r3
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f006 fd28 	bl	800aeca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 8104 	bne.w	800468e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	8013      	strh	r3, [r2, #0]
 80044ca:	e0e0      	b.n	800468e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d121      	bne.n	800451a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004516:	b29b      	uxth	r3, r3
 8004518:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 80b4 	bne.w	800468e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800452e:	441a      	add	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800453c:	441a      	add	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	d309      	bcc.n	8004562 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	621a      	str	r2, [r3, #32]
 8004560:	e015      	b.n	800458e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d107      	bne.n	800457a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800456a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800456e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004578:	e009      	b.n	800458e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	663b      	str	r3, [r7, #96]	; 0x60
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d155      	bne.n	8004648 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045b0:	4413      	add	r3, r2
 80045b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	00da      	lsls	r2, r3, #3
 80045ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045bc:	4413      	add	r3, r2
 80045be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045c2:	657b      	str	r3, [r7, #84]	; 0x54
 80045c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c6:	2b3e      	cmp	r3, #62	; 0x3e
 80045c8:	d916      	bls.n	80045f8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	677b      	str	r3, [r7, #116]	; 0x74
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <HAL_PCD_EP_DB_Transmit+0x694>
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	3b01      	subs	r3, #1
 80045de:	677b      	str	r3, [r7, #116]	; 0x74
 80045e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	e040      	b.n	800467a <HAL_PCD_EP_DB_Transmit+0x72e>
 80045f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d112      	bne.n	8004624 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80045fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004608:	b29a      	uxth	r2, r3
 800460a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460c:	801a      	strh	r2, [r3, #0]
 800460e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461c:	b29a      	uxth	r2, r3
 800461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e02a      	b.n	800467a <HAL_PCD_EP_DB_Transmit+0x72e>
 8004624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	677b      	str	r3, [r7, #116]	; 0x74
 800462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	3301      	adds	r3, #1
 8004638:	677b      	str	r3, [r7, #116]	; 0x74
 800463a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463c:	b29b      	uxth	r3, r3
 800463e:	029b      	lsls	r3, r3, #10
 8004640:	b29a      	uxth	r2, r3
 8004642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	e018      	b.n	800467a <HAL_PCD_EP_DB_Transmit+0x72e>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d114      	bne.n	800467a <HAL_PCD_EP_DB_Transmit+0x72e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004658:	b29b      	uxth	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465e:	4413      	add	r3, r2
 8004660:	663b      	str	r3, [r7, #96]	; 0x60
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	00da      	lsls	r2, r3, #3
 8004668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800466a:	4413      	add	r3, r2
 800466c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004674:	b29a      	uxth	r2, r3
 8004676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004678:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6959      	ldr	r1, [r3, #20]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	895a      	ldrh	r2, [r3, #10]
 8004686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004688:	b29b      	uxth	r3, r3
 800468a:	f004 fcd0 	bl	800902e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a8:	823b      	strh	r3, [r7, #16]
 80046aa:	8a3b      	ldrh	r3, [r7, #16]
 80046ac:	f083 0310 	eor.w	r3, r3, #16
 80046b0:	823b      	strh	r3, [r7, #16]
 80046b2:	8a3b      	ldrh	r3, [r7, #16]
 80046b4:	f083 0320 	eor.w	r3, r3, #32
 80046b8:	823b      	strh	r3, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	8a3b      	ldrh	r3, [r7, #16]
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3788      	adds	r7, #136	; 0x88
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	4613      	mov	r3, r2
 80046f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e009      	b.n	8004732 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800471e:	897a      	ldrh	r2, [r7, #10]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	b29a      	uxth	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	80da      	strh	r2, [r3, #6]
 8004746:	e00b      	b.n	8004760 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2201      	movs	r2, #1
 800474c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	b29a      	uxth	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	b29a      	uxth	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004792:	b29b      	uxth	r3, r3
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d141      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d2:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d131      	bne.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e0:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f8:	4a41      	ldr	r2, [pc, #260]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004800:	4b40      	ldr	r3, [pc, #256]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2232      	movs	r2, #50	; 0x32
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0c9b      	lsrs	r3, r3, #18
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004816:	e002      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d102      	bne.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f2      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d158      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e057      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004844:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484a:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004854:	e04d      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d141      	bne.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800485e:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d131      	bne.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800488a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2232      	movs	r2, #50	; 0x32
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a2:	e002      	b.n	80048aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b6:	d102      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f2      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ca:	d112      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e011      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048e0:	e007      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40007000 	.word	0x40007000
 8004904:	2000001c 	.word	0x2000001c
 8004908:	431bde83 	.word	0x431bde83

0800490c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800491a:	6093      	str	r3, [r2, #8]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40007000 	.word	0x40007000

0800492c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e308      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d075      	beq.n	8004a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494a:	4ba3      	ldr	r3, [pc, #652]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
 8004952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004954:	4ba0      	ldr	r3, [pc, #640]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b0c      	cmp	r3, #12
 8004962:	d102      	bne.n	800496a <HAL_RCC_OscConfig+0x3e>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d002      	beq.n	8004970 <HAL_RCC_OscConfig+0x44>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d10b      	bne.n	8004988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	4b99      	ldr	r3, [pc, #612]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05b      	beq.n	8004a34 <HAL_RCC_OscConfig+0x108>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d157      	bne.n	8004a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e2e3      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d106      	bne.n	80049a0 <HAL_RCC_OscConfig+0x74>
 8004992:	4b91      	ldr	r3, [pc, #580]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a90      	ldr	r2, [pc, #576]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xb0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x98>
 80049aa:	4b8b      	ldr	r3, [pc, #556]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a8a      	ldr	r2, [pc, #552]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a87      	ldr	r2, [pc, #540]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xb0>
 80049c4:	4b84      	ldr	r3, [pc, #528]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a83      	ldr	r2, [pc, #524]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b81      	ldr	r3, [pc, #516]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a80      	ldr	r2, [pc, #512]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd fda4 	bl	8002530 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fd fda0 	bl	8002530 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e2a8      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049fe:	4b76      	ldr	r3, [pc, #472]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xc0>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fd90 	bl	8002530 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fd8c 	bl	8002530 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e294      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a26:	4b6c      	ldr	r3, [pc, #432]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0xe8>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d075      	beq.n	8004b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a42:	4b65      	ldr	r3, [pc, #404]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a4c:	4b62      	ldr	r3, [pc, #392]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	d102      	bne.n	8004a62 <HAL_RCC_OscConfig+0x136>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d002      	beq.n	8004a68 <HAL_RCC_OscConfig+0x13c>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d11f      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_OscConfig+0x154>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e267      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a80:	4b55      	ldr	r3, [pc, #340]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	4952      	ldr	r1, [pc, #328]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a94:	4b51      	ldr	r3, [pc, #324]	; (8004bdc <HAL_RCC_OscConfig+0x2b0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fd fcfd 	bl	8002498 <HAL_InitTick>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d043      	beq.n	8004b2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e253      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d023      	beq.n	8004af8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab0:	4b49      	ldr	r3, [pc, #292]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a48      	ldr	r2, [pc, #288]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd fd38 	bl	8002530 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac4:	f7fd fd34 	bl	8002530 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e23c      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	061b      	lsls	r3, r3, #24
 8004af0:	4939      	ldr	r1, [pc, #228]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
 8004af6:	e01a      	b.n	8004b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a36      	ldr	r2, [pc, #216]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fd fd14 	bl	8002530 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7fd fd10 	bl	8002530 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e218      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1e0>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d03c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b42:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b52:	f7fd fced 	bl	8002530 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7fd fce9 	bl	8002530 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e1f1      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0ef      	beq.n	8004b5a <HAL_RCC_OscConfig+0x22e>
 8004b7a:	e01b      	b.n	8004bb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7c:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fd fcd0 	bl	8002530 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b94:	f7fd fccc 	bl	8002530 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1d4      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1ef      	bne.n	8004b94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80ab 	beq.w	8004d18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bc6:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x2b4>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e005      	b.n	8004be2 <HAL_RCC_OscConfig+0x2b6>
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	20000020 	.word	0x20000020
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	4baf      	ldr	r3, [pc, #700]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	4aae      	ldr	r2, [pc, #696]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf2:	4bac      	ldr	r3, [pc, #688]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c02:	4ba9      	ldr	r3, [pc, #676]	; (8004ea8 <HAL_RCC_OscConfig+0x57c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d118      	bne.n	8004c40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c0e:	4ba6      	ldr	r3, [pc, #664]	; (8004ea8 <HAL_RCC_OscConfig+0x57c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4aa5      	ldr	r2, [pc, #660]	; (8004ea8 <HAL_RCC_OscConfig+0x57c>)
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1a:	f7fd fc89 	bl	8002530 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c22:	f7fd fc85 	bl	8002530 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e18d      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c34:	4b9c      	ldr	r3, [pc, #624]	; (8004ea8 <HAL_RCC_OscConfig+0x57c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d108      	bne.n	8004c5a <HAL_RCC_OscConfig+0x32e>
 8004c48:	4b96      	ldr	r3, [pc, #600]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	4a95      	ldr	r2, [pc, #596]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c58:	e024      	b.n	8004ca4 <HAL_RCC_OscConfig+0x378>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d110      	bne.n	8004c84 <HAL_RCC_OscConfig+0x358>
 8004c62:	4b90      	ldr	r3, [pc, #576]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	4a8e      	ldr	r2, [pc, #568]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c72:	4b8c      	ldr	r3, [pc, #560]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	4a8a      	ldr	r2, [pc, #552]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c82:	e00f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x378>
 8004c84:	4b87      	ldr	r3, [pc, #540]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	4a86      	ldr	r2, [pc, #536]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c94:	4b83      	ldr	r3, [pc, #524]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	4a82      	ldr	r2, [pc, #520]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004c9c:	f023 0304 	bic.w	r3, r3, #4
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cac:	f7fd fc40 	bl	8002530 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb4:	f7fd fc3c 	bl	8002530 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e142      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cca:	4b76      	ldr	r3, [pc, #472]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0ed      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x388>
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fd fc29 	bl	8002530 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fd fc25 	bl	8002530 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e12b      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf8:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ed      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b65      	ldr	r3, [pc, #404]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	4a64      	ldr	r2, [pc, #400]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d03c      	beq.n	8004d9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01c      	beq.n	8004d66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d32:	4a5c      	ldr	r2, [pc, #368]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fd fbf8 	bl	8002530 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d44:	f7fd fbf4 	bl	8002530 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0fc      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d56:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ef      	beq.n	8004d44 <HAL_RCC_OscConfig+0x418>
 8004d64:	e01b      	b.n	8004d9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d66:	4b4f      	ldr	r3, [pc, #316]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d6c:	4a4d      	ldr	r2, [pc, #308]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d76:	f7fd fbdb 	bl	8002530 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d7e:	f7fd fbd7 	bl	8002530 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0df      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d90:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ef      	bne.n	8004d7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80d3 	beq.w	8004f4e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da8:	4b3e      	ldr	r3, [pc, #248]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	f000 808d 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d15a      	bne.n	8004e74 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a38      	ldr	r2, [pc, #224]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fd fbb1 	bl	8002530 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fd fbad 	bl	8002530 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0b5      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	4b2f      	ldr	r3, [pc, #188]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_RCC_OscConfig+0x580>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6a11      	ldr	r1, [r2, #32]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e00:	3a01      	subs	r2, #1
 8004e02:	0112      	lsls	r2, r2, #4
 8004e04:	4311      	orrs	r1, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e0a:	0212      	lsls	r2, r2, #8
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e12:	0852      	lsrs	r2, r2, #1
 8004e14:	3a01      	subs	r2, #1
 8004e16:	0552      	lsls	r2, r2, #21
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e1e:	0852      	lsrs	r2, r2, #1
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0652      	lsls	r2, r2, #25
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e2a:	06d2      	lsls	r2, r2, #27
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	491d      	ldr	r1, [pc, #116]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e40:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fb70 	bl	8002530 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd fb6c 	bl	8002530 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e074      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x528>
 8004e72:	e06c      	b.n	8004f4e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <HAL_RCC_OscConfig+0x578>)
 8004e92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fb48 	bl	8002530 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea2:	e00e      	b.n	8004ec2 <HAL_RCC_OscConfig+0x596>
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7fd fb3e 	bl	8002530 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e046      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec2:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_OscConfig+0x62c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x584>
 8004ece:	e03e      	b.n	8004f4e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e039      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004edc:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <HAL_RCC_OscConfig+0x62c>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0203 	and.w	r2, r3, #3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d12c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	3b01      	subs	r3, #1
 8004efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d123      	bne.n	8004f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d11b      	bne.n	8004f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d113      	bne.n	8004f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d109      	bne.n	8004f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	3b01      	subs	r3, #1
 8004f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000

08004f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e11e      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b91      	ldr	r3, [pc, #580]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d910      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b8e      	ldr	r3, [pc, #568]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 020f 	bic.w	r2, r3, #15
 8004f8a:	498c      	ldr	r1, [pc, #560]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b8a      	ldr	r3, [pc, #552]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e106      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d073      	beq.n	8005098 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d129      	bne.n	800500c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb8:	4b81      	ldr	r3, [pc, #516]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0f4      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fc8:	f000 f966 	bl	8005298 <RCC_GetSysClockFreqFromPLLSource>
 8004fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4a7c      	ldr	r2, [pc, #496]	; (80051c4 <HAL_RCC_ClockConfig+0x268>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d93f      	bls.n	8005056 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fd6:	4b7a      	ldr	r3, [pc, #488]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d033      	beq.n	8005056 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d12f      	bne.n	8005056 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ff6:	4b72      	ldr	r3, [pc, #456]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffe:	4a70      	ldr	r2, [pc, #448]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005004:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	e024      	b.n	8005056 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d107      	bne.n	8005024 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005014:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0c6      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005024:	4b66      	ldr	r3, [pc, #408]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0be      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005034:	f000 f8ce 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8005038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4a61      	ldr	r2, [pc, #388]	; (80051c4 <HAL_RCC_ClockConfig+0x268>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d909      	bls.n	8005056 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005042:	4b5f      	ldr	r3, [pc, #380]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	4a5d      	ldr	r2, [pc, #372]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005056:	4b5a      	ldr	r3, [pc, #360]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4957      	ldr	r1, [pc, #348]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005068:	f7fd fa62 	bl	8002530 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fd fa5e 	bl	8002530 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e095      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005086:	4b4e      	ldr	r3, [pc, #312]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 020c 	and.w	r2, r3, #12
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	429a      	cmp	r2, r3
 8005096:	d1eb      	bne.n	8005070 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d023      	beq.n	80050ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b0:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a42      	ldr	r2, [pc, #264]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050c8:	4b3d      	ldr	r3, [pc, #244]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050d0:	4a3b      	ldr	r2, [pc, #236]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4936      	ldr	r1, [pc, #216]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
 80050ea:	e008      	b.n	80050fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050f2:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4a32      	ldr	r2, [pc, #200]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050fe:	4b2f      	ldr	r3, [pc, #188]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d21d      	bcs.n	8005148 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 020f 	bic.w	r2, r3, #15
 8005114:	4929      	ldr	r1, [pc, #164]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800511c:	f7fd fa08 	bl	8002530 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	e00a      	b.n	800513a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fd fa04 	bl	8002530 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e03b      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d1ed      	bne.n	8005124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4917      	ldr	r1, [pc, #92]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	490f      	ldr	r1, [pc, #60]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005186:	f000 f825 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 800518a:	4602      	mov	r2, r0
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	490c      	ldr	r1, [pc, #48]	; (80051c8 <HAL_RCC_ClockConfig+0x26c>)
 8005198:	5ccb      	ldrb	r3, [r1, r3]
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	fa22 f303 	lsr.w	r3, r2, r3
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x270>)
 80051a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_RCC_ClockConfig+0x274>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd f974 	bl	8002498 <HAL_InitTick>
 80051b0:	4603      	mov	r3, r0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40022000 	.word	0x40022000
 80051c0:	40021000 	.word	0x40021000
 80051c4:	04c4b400 	.word	0x04c4b400
 80051c8:	0800b4d8 	.word	0x0800b4d8
 80051cc:	2000001c 	.word	0x2000001c
 80051d0:	20000020 	.word	0x20000020

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051da:	4b2c      	ldr	r3, [pc, #176]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d102      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051e6:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e047      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d102      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051f8:	4b26      	ldr	r3, [pc, #152]	; (8005294 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e03e      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d136      	bne.n	8005278 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005214:	4b1d      	ldr	r3, [pc, #116]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	3301      	adds	r3, #1
 8005220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d10c      	bne.n	8005242 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005228:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005232:	68d2      	ldr	r2, [r2, #12]
 8005234:	0a12      	lsrs	r2, r2, #8
 8005236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	617b      	str	r3, [r7, #20]
      break;
 8005240:	e00c      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	4a10      	ldr	r2, [pc, #64]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	0a12      	lsrs	r2, r2, #8
 8005250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
      break;
 800525a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0e5b      	lsrs	r3, r3, #25
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	3301      	adds	r3, #1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e001      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800527c:	693b      	ldr	r3, [r7, #16]
}
 800527e:	4618      	mov	r0, r3
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	00f42400 	.word	0x00f42400
 8005294:	007a1200 	.word	0x007a1200

08005298 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d10c      	bne.n	80052d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052bc:	4a17      	ldr	r2, [pc, #92]	; (800531c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	4a14      	ldr	r2, [pc, #80]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052c6:	68d2      	ldr	r2, [r2, #12]
 80052c8:	0a12      	lsrs	r2, r2, #8
 80052ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	617b      	str	r3, [r7, #20]
    break;
 80052d4:	e00c      	b.n	80052f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	4a0e      	ldr	r2, [pc, #56]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e0:	68d2      	ldr	r2, [r2, #12]
 80052e2:	0a12      	lsrs	r2, r2, #8
 80052e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052e8:	fb02 f303 	mul.w	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    break;
 80052ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	0e5b      	lsrs	r3, r3, #25
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	3301      	adds	r3, #1
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800530a:	687b      	ldr	r3, [r7, #4]
}
 800530c:	4618      	mov	r0, r3
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40021000 	.word	0x40021000
 800531c:	007a1200 	.word	0x007a1200
 8005320:	00f42400 	.word	0x00f42400

08005324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800532c:	2300      	movs	r3, #0
 800532e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005330:	2300      	movs	r3, #0
 8005332:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8098 	beq.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005346:	4b43      	ldr	r3, [pc, #268]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10d      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005352:	4b40      	ldr	r3, [pc, #256]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	4a3f      	ldr	r2, [pc, #252]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535c:	6593      	str	r3, [r2, #88]	; 0x58
 800535e:	4b3d      	ldr	r3, [pc, #244]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536a:	2301      	movs	r3, #1
 800536c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a39      	ldr	r2, [pc, #228]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800537a:	f7fd f8d9 	bl	8002530 <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005380:	e009      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005382:	f7fd f8d5 	bl	8002530 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d902      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	74fb      	strb	r3, [r7, #19]
        break;
 8005394:	e005      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0ef      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053a2:	7cfb      	ldrb	r3, [r7, #19]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d159      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053a8:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01e      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d019      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053c4:	4b23      	ldr	r3, [pc, #140]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d0:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e0:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fd f895 	bl	8002530 <HAL_GetTick>
 8005406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005408:	e00b      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd f891 	bl	8002530 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d902      	bls.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	74fb      	strb	r3, [r7, #19]
            break;
 8005420:	e006      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005422:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ec      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	4903      	ldr	r1, [pc, #12]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800544c:	e008      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	74bb      	strb	r3, [r7, #18]
 8005452:	e005      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005454:	40021000 	.word	0x40021000
 8005458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005460:	7c7b      	ldrb	r3, [r7, #17]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d105      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005466:	4ba6      	ldr	r3, [pc, #664]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546a:	4aa5      	ldr	r2, [pc, #660]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800547e:	4ba0      	ldr	r3, [pc, #640]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f023 0203 	bic.w	r2, r3, #3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	499c      	ldr	r1, [pc, #624]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054a0:	4b97      	ldr	r3, [pc, #604]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f023 020c 	bic.w	r2, r3, #12
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	4994      	ldr	r1, [pc, #592]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054c2:	4b8f      	ldr	r3, [pc, #572]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	498b      	ldr	r1, [pc, #556]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054e4:	4b86      	ldr	r3, [pc, #536]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	4983      	ldr	r1, [pc, #524]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005506:	4b7e      	ldr	r3, [pc, #504]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	497a      	ldr	r1, [pc, #488]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005528:	4b75      	ldr	r3, [pc, #468]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	4972      	ldr	r1, [pc, #456]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800554a:	4b6d      	ldr	r3, [pc, #436]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4969      	ldr	r1, [pc, #420]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556c:	4b64      	ldr	r3, [pc, #400]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	4961      	ldr	r1, [pc, #388]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800558e:	4b5c      	ldr	r3, [pc, #368]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	4958      	ldr	r1, [pc, #352]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d015      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b0:	4b53      	ldr	r3, [pc, #332]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	4950      	ldr	r1, [pc, #320]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ce:	d105      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d0:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4a4a      	ldr	r2, [pc, #296]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055e8:	4b45      	ldr	r3, [pc, #276]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	4942      	ldr	r1, [pc, #264]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005606:	d105      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005608:	4b3d      	ldr	r3, [pc, #244]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4a3c      	ldr	r2, [pc, #240]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005612:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005620:	4b37      	ldr	r3, [pc, #220]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	4934      	ldr	r1, [pc, #208]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005640:	4b2f      	ldr	r3, [pc, #188]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	4926      	ldr	r1, [pc, #152]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b21      	ldr	r3, [pc, #132]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a20      	ldr	r2, [pc, #128]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	4918      	ldr	r1, [pc, #96]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b0:	4b13      	ldr	r3, [pc, #76]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	490a      	ldr	r1, [pc, #40]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056e6:	d105      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a04      	ldr	r2, [pc, #16]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40021000 	.word	0x40021000

08005704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e049      	b.n	80057aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fc0e 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fee2 	bl	800650c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d001      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e04a      	b.n	8005862 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a21      	ldr	r2, [pc, #132]	; (8005870 <HAL_TIM_Base_Start_IT+0xbc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x6c>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d013      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x6c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_TIM_Base_Start_IT+0xc0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x6c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_TIM_Base_Start_IT+0xc4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x6c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1a      	ldr	r2, [pc, #104]	; (800587c <HAL_TIM_Base_Start_IT+0xc8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x6c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_TIM_Base_Start_IT+0xcc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d115      	bne.n	800584c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	4b17      	ldr	r3, [pc, #92]	; (8005884 <HAL_TIM_Base_Start_IT+0xd0>)
 8005828:	4013      	ands	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b06      	cmp	r3, #6
 8005830:	d015      	beq.n	800585e <HAL_TIM_Base_Start_IT+0xaa>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005838:	d011      	beq.n	800585e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584a:	e008      	b.n	800585e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	e000      	b.n	8005860 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40013400 	.word	0x40013400
 8005880:	40014000 	.word	0x40014000
 8005884:	00010007 	.word	0x00010007

08005888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e049      	b.n	800592e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc fb2c 	bl	8001f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f000 fe20 	bl	800650c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_TIM_PWM_Start+0x24>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e03c      	b.n	80059d6 <HAL_TIM_PWM_Start+0x9e>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b04      	cmp	r3, #4
 8005960:	d109      	bne.n	8005976 <HAL_TIM_PWM_Start+0x3e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	e02f      	b.n	80059d6 <HAL_TIM_PWM_Start+0x9e>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d109      	bne.n	8005990 <HAL_TIM_PWM_Start+0x58>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e022      	b.n	80059d6 <HAL_TIM_PWM_Start+0x9e>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b0c      	cmp	r3, #12
 8005994:	d109      	bne.n	80059aa <HAL_TIM_PWM_Start+0x72>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	bf14      	ite	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	2300      	moveq	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	e015      	b.n	80059d6 <HAL_TIM_PWM_Start+0x9e>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d109      	bne.n	80059c4 <HAL_TIM_PWM_Start+0x8c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	bf14      	ite	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	2300      	moveq	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	e008      	b.n	80059d6 <HAL_TIM_PWM_Start+0x9e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	bf14      	ite	ne
 80059d0:	2301      	movne	r3, #1
 80059d2:	2300      	moveq	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e097      	b.n	8005b0e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Start+0xb6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ec:	e023      	b.n	8005a36 <HAL_TIM_PWM_Start+0xfe>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0xc6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059fc:	e01b      	b.n	8005a36 <HAL_TIM_PWM_Start+0xfe>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0xd6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0c:	e013      	b.n	8005a36 <HAL_TIM_PWM_Start+0xfe>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Start+0xe6>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a1c:	e00b      	b.n	8005a36 <HAL_TIM_PWM_Start+0xfe>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d104      	bne.n	8005a2e <HAL_TIM_PWM_Start+0xf6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a2c:	e003      	b.n	8005a36 <HAL_TIM_PWM_Start+0xfe>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	6839      	ldr	r1, [r7, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 f986 	bl	8006d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <HAL_TIM_PWM_Start+0x1e0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x13e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a32      	ldr	r2, [pc, #200]	; (8005b1c <HAL_TIM_PWM_Start+0x1e4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x13e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a30      	ldr	r2, [pc, #192]	; (8005b20 <HAL_TIM_PWM_Start+0x1e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x13e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <HAL_TIM_PWM_Start+0x1ec>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x13e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_TIM_PWM_Start+0x1f0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d101      	bne.n	8005a7a <HAL_TIM_PWM_Start+0x142>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <HAL_TIM_PWM_Start+0x144>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <HAL_TIM_PWM_Start+0x1e0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <HAL_TIM_PWM_Start+0x194>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d013      	beq.n	8005acc <HAL_TIM_PWM_Start+0x194>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <HAL_TIM_PWM_Start+0x1f4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_TIM_PWM_Start+0x194>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <HAL_TIM_PWM_Start+0x1f8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_TIM_PWM_Start+0x194>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <HAL_TIM_PWM_Start+0x1e4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_TIM_PWM_Start+0x194>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <HAL_TIM_PWM_Start+0x1e8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d115      	bne.n	8005af8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	4b18      	ldr	r3, [pc, #96]	; (8005b34 <HAL_TIM_PWM_Start+0x1fc>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d015      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x1d2>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae4:	d011      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af6:	e008      	b.n	8005b0a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	e000      	b.n	8005b0c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	00010007 	.word	0x00010007

08005b38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e097      	b.n	8005c7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fc fa67 	bl	8002034 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005b7c:	f023 0307 	bic.w	r3, r3, #7
 8005b80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f000 fcbd 	bl	800650c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bd8:	f023 030c 	bic.w	r3, r3, #12
 8005bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	031b      	lsls	r3, r3, #12
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d110      	bne.n	8005cd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d102      	bne.n	8005cc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cba:	7b7b      	ldrb	r3, [r7, #13]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d001      	beq.n	8005cc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e069      	b.n	8005d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd4:	e031      	b.n	8005d3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d110      	bne.n	8005cfe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d102      	bne.n	8005ce8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce2:	7b3b      	ldrb	r3, [r7, #12]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d001      	beq.n	8005cec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e055      	b.n	8005d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cfc:	e01d      	b.n	8005d3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d108      	bne.n	8005d16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d04:	7bbb      	ldrb	r3, [r7, #14]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d105      	bne.n	8005d16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d0a:	7b7b      	ldrb	r3, [r7, #13]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d102      	bne.n	8005d16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d10:	7b3b      	ldrb	r3, [r7, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d001      	beq.n	8005d1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e03e      	b.n	8005d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_TIM_Encoder_Start+0xc4>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d008      	beq.n	8005d58 <HAL_TIM_Encoder_Start+0xd4>
 8005d46:	e00f      	b.n	8005d68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fffd 	bl	8006d50 <TIM_CCxChannelCmd>
      break;
 8005d56:	e016      	b.n	8005d86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	2104      	movs	r1, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fff5 	bl	8006d50 <TIM_CCxChannelCmd>
      break;
 8005d66:	e00e      	b.n	8005d86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 ffed 	bl	8006d50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 ffe6 	bl	8006d50 <TIM_CCxChannelCmd>
      break;
 8005d84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0202 	mvn.w	r2, #2
 8005dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fb74 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fb66 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fb77 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0204 	mvn.w	r2, #4
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fb4a 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fb3c 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fb4d 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0208 	mvn.w	r2, #8
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb20 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb12 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fb23 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	d122      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0210 	mvn.w	r2, #16
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 faf6 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fae8 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 faf9 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0201 	mvn.w	r2, #1
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fa fe56 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2e:	2b80      	cmp	r3, #128	; 0x80
 8005f30:	d10e      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d107      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 f852 	bl	8006ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5e:	d10e      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6a:	2b80      	cmp	r3, #128	; 0x80
 8005f6c:	d107      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f845 	bl	8007008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d10e      	bne.n	8005faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d107      	bne.n	8005faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 faa7 	bl	80064f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d10e      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d107      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f06f 0220 	mvn.w	r2, #32
 8005fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f805 	bl	8006fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe4:	d10f      	bne.n	8006006 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff4:	d107      	bne.n	8006006 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f80b 	bl	800701c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006014:	d10f      	bne.n	8006036 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006024:	d107      	bne.n	8006036 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fffd 	bl	8007030 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006044:	d10f      	bne.n	8006066 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006054:	d107      	bne.n	8006066 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800605e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 ffef 	bl	8007044 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006074:	d10f      	bne.n	8006096 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006084:	d107      	bne.n	8006096 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 ffe1 	bl	8007058 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e0ff      	b.n	80062be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b14      	cmp	r3, #20
 80060ca:	f200 80f0 	bhi.w	80062ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	08006129 	.word	0x08006129
 80060d8:	080062af 	.word	0x080062af
 80060dc:	080062af 	.word	0x080062af
 80060e0:	080062af 	.word	0x080062af
 80060e4:	08006169 	.word	0x08006169
 80060e8:	080062af 	.word	0x080062af
 80060ec:	080062af 	.word	0x080062af
 80060f0:	080062af 	.word	0x080062af
 80060f4:	080061ab 	.word	0x080061ab
 80060f8:	080062af 	.word	0x080062af
 80060fc:	080062af 	.word	0x080062af
 8006100:	080062af 	.word	0x080062af
 8006104:	080061eb 	.word	0x080061eb
 8006108:	080062af 	.word	0x080062af
 800610c:	080062af 	.word	0x080062af
 8006110:	080062af 	.word	0x080062af
 8006114:	0800622d 	.word	0x0800622d
 8006118:	080062af 	.word	0x080062af
 800611c:	080062af 	.word	0x080062af
 8006120:	080062af 	.word	0x080062af
 8006124:	0800626d 	.word	0x0800626d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fa7c 	bl	800662c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0208 	orr.w	r2, r2, #8
 8006142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0204 	bic.w	r2, r2, #4
 8006152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6999      	ldr	r1, [r3, #24]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	619a      	str	r2, [r3, #24]
      break;
 8006166:	e0a5      	b.n	80062b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 faec 	bl	800674c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6999      	ldr	r1, [r3, #24]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	021a      	lsls	r2, r3, #8
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	619a      	str	r2, [r3, #24]
      break;
 80061a8:	e084      	b.n	80062b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fb55 	bl	8006860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0208 	orr.w	r2, r2, #8
 80061c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0204 	bic.w	r2, r2, #4
 80061d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69d9      	ldr	r1, [r3, #28]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	61da      	str	r2, [r3, #28]
      break;
 80061e8:	e064      	b.n	80062b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fbbd 	bl	8006970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69d9      	ldr	r1, [r3, #28]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	021a      	lsls	r2, r3, #8
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	61da      	str	r2, [r3, #28]
      break;
 800622a:	e043      	b.n	80062b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fc26 	bl	8006a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0208 	orr.w	r2, r2, #8
 8006246:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0204 	bic.w	r2, r2, #4
 8006256:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800626a:	e023      	b.n	80062b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fc6a 	bl	8006b4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006286:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	021a      	lsls	r2, r3, #8
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062ac:	e002      	b.n	80062b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
      break;
 80062b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop

080062c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIM_ConfigClockSource+0x1c>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0de      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x1da>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800630e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a63      	ldr	r2, [pc, #396]	; (80064ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	f000 80a9 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 8006324:	4a61      	ldr	r2, [pc, #388]	; (80064ac <HAL_TIM_ConfigClockSource+0x1e4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	f200 80ae 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 800632c:	4a60      	ldr	r2, [pc, #384]	; (80064b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	f000 80a1 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 8006334:	4a5e      	ldr	r2, [pc, #376]	; (80064b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	f200 80a6 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 800633c:	4a5d      	ldr	r2, [pc, #372]	; (80064b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f000 8099 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 8006344:	4a5b      	ldr	r2, [pc, #364]	; (80064b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006346:	4293      	cmp	r3, r2
 8006348:	f200 809e 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 800634c:	4a5a      	ldr	r2, [pc, #360]	; (80064b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	f000 8091 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 8006354:	4a58      	ldr	r2, [pc, #352]	; (80064b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	f200 8096 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 800635c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006360:	f000 8089 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 8006364:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006368:	f200 808e 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 800636c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006370:	d03e      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x128>
 8006372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006376:	f200 8087 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637e:	f000 8086 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x1c6>
 8006382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006386:	d87f      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 8006388:	2b70      	cmp	r3, #112	; 0x70
 800638a:	d01a      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0xfa>
 800638c:	2b70      	cmp	r3, #112	; 0x70
 800638e:	d87b      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 8006390:	2b60      	cmp	r3, #96	; 0x60
 8006392:	d050      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x16e>
 8006394:	2b60      	cmp	r3, #96	; 0x60
 8006396:	d877      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 8006398:	2b50      	cmp	r3, #80	; 0x50
 800639a:	d03c      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0x14e>
 800639c:	2b50      	cmp	r3, #80	; 0x50
 800639e:	d873      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d058      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x18e>
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	d86f      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 80063a8:	2b30      	cmp	r3, #48	; 0x30
 80063aa:	d064      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d86b      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d060      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d867      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d05c      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d05a      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1ae>
 80063c0:	e062      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6899      	ldr	r1, [r3, #8]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f000 fc9d 	bl	8006d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	609a      	str	r2, [r3, #8]
      break;
 80063ee:	e04f      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	6899      	ldr	r1, [r3, #8]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f000 fc86 	bl	8006d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006412:	609a      	str	r2, [r3, #8]
      break;
 8006414:	e03c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6859      	ldr	r1, [r3, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	461a      	mov	r2, r3
 8006424:	f000 fbf8 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2150      	movs	r1, #80	; 0x50
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fc51 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006434:	e02c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6859      	ldr	r1, [r3, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	461a      	mov	r2, r3
 8006444:	f000 fc17 	bl	8006c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2160      	movs	r1, #96	; 0x60
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fc41 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006454:	e01c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	461a      	mov	r2, r3
 8006464:	f000 fbd8 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2140      	movs	r1, #64	; 0x40
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fc31 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006474:	e00c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f000 fc28 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006486:	e003      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	e000      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800648e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	00100070 	.word	0x00100070
 80064b0:	00100040 	.word	0x00100040
 80064b4:	00100030 	.word	0x00100030
 80064b8:	00100020 	.word	0x00100020

080064bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a3c      	ldr	r2, [pc, #240]	; (8006610 <TIM_Base_SetConfig+0x104>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00f      	beq.n	8006544 <TIM_Base_SetConfig+0x38>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d00b      	beq.n	8006544 <TIM_Base_SetConfig+0x38>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a39      	ldr	r2, [pc, #228]	; (8006614 <TIM_Base_SetConfig+0x108>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d007      	beq.n	8006544 <TIM_Base_SetConfig+0x38>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a38      	ldr	r2, [pc, #224]	; (8006618 <TIM_Base_SetConfig+0x10c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_Base_SetConfig+0x38>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a37      	ldr	r2, [pc, #220]	; (800661c <TIM_Base_SetConfig+0x110>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d108      	bne.n	8006556 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2d      	ldr	r2, [pc, #180]	; (8006610 <TIM_Base_SetConfig+0x104>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01b      	beq.n	8006596 <TIM_Base_SetConfig+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006564:	d017      	beq.n	8006596 <TIM_Base_SetConfig+0x8a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <TIM_Base_SetConfig+0x108>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <TIM_Base_SetConfig+0x8a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a29      	ldr	r2, [pc, #164]	; (8006618 <TIM_Base_SetConfig+0x10c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00f      	beq.n	8006596 <TIM_Base_SetConfig+0x8a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a28      	ldr	r2, [pc, #160]	; (800661c <TIM_Base_SetConfig+0x110>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00b      	beq.n	8006596 <TIM_Base_SetConfig+0x8a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a27      	ldr	r2, [pc, #156]	; (8006620 <TIM_Base_SetConfig+0x114>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_Base_SetConfig+0x8a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a26      	ldr	r2, [pc, #152]	; (8006624 <TIM_Base_SetConfig+0x118>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_Base_SetConfig+0x8a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a25      	ldr	r2, [pc, #148]	; (8006628 <TIM_Base_SetConfig+0x11c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d108      	bne.n	80065a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <TIM_Base_SetConfig+0x104>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00f      	beq.n	80065f4 <TIM_Base_SetConfig+0xe8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a11      	ldr	r2, [pc, #68]	; (800661c <TIM_Base_SetConfig+0x110>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_Base_SetConfig+0xe8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a10      	ldr	r2, [pc, #64]	; (8006620 <TIM_Base_SetConfig+0x114>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_Base_SetConfig+0xe8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a0f      	ldr	r2, [pc, #60]	; (8006624 <TIM_Base_SetConfig+0x118>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0xe8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a0e      	ldr	r2, [pc, #56]	; (8006628 <TIM_Base_SetConfig+0x11c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d103      	bne.n	80065fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	615a      	str	r2, [r3, #20]
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40013400 	.word	0x40013400
 8006620:	40014000 	.word	0x40014000
 8006624:	40014400 	.word	0x40014400
 8006628:	40014800 	.word	0x40014800

0800662c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 0302 	bic.w	r3, r3, #2
 8006678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <TIM_OC1_SetConfig+0x10c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_OC1_SetConfig+0x80>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a2b      	ldr	r2, [pc, #172]	; (800673c <TIM_OC1_SetConfig+0x110>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_OC1_SetConfig+0x80>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a2a      	ldr	r2, [pc, #168]	; (8006740 <TIM_OC1_SetConfig+0x114>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_OC1_SetConfig+0x80>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a29      	ldr	r2, [pc, #164]	; (8006744 <TIM_OC1_SetConfig+0x118>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC1_SetConfig+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a28      	ldr	r2, [pc, #160]	; (8006748 <TIM_OC1_SetConfig+0x11c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10c      	bne.n	80066c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f023 0308 	bic.w	r3, r3, #8
 80066b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 0304 	bic.w	r3, r3, #4
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <TIM_OC1_SetConfig+0x10c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00f      	beq.n	80066ee <TIM_OC1_SetConfig+0xc2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1a      	ldr	r2, [pc, #104]	; (800673c <TIM_OC1_SetConfig+0x110>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00b      	beq.n	80066ee <TIM_OC1_SetConfig+0xc2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a19      	ldr	r2, [pc, #100]	; (8006740 <TIM_OC1_SetConfig+0x114>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d007      	beq.n	80066ee <TIM_OC1_SetConfig+0xc2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a18      	ldr	r2, [pc, #96]	; (8006744 <TIM_OC1_SetConfig+0x118>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d003      	beq.n	80066ee <TIM_OC1_SetConfig+0xc2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a17      	ldr	r2, [pc, #92]	; (8006748 <TIM_OC1_SetConfig+0x11c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d111      	bne.n	8006712 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	621a      	str	r2, [r3, #32]
}
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40013400 	.word	0x40013400
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400
 8006748:	40014800 	.word	0x40014800

0800674c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f023 0210 	bic.w	r2, r3, #16
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0320 	bic.w	r3, r3, #32
 800679a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a28      	ldr	r2, [pc, #160]	; (800684c <TIM_OC2_SetConfig+0x100>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_OC2_SetConfig+0x6c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a27      	ldr	r2, [pc, #156]	; (8006850 <TIM_OC2_SetConfig+0x104>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d10d      	bne.n	80067d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1d      	ldr	r2, [pc, #116]	; (800684c <TIM_OC2_SetConfig+0x100>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00f      	beq.n	80067fc <TIM_OC2_SetConfig+0xb0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <TIM_OC2_SetConfig+0x104>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_OC2_SetConfig+0xb0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a1b      	ldr	r2, [pc, #108]	; (8006854 <TIM_OC2_SetConfig+0x108>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_OC2_SetConfig+0xb0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a1a      	ldr	r2, [pc, #104]	; (8006858 <TIM_OC2_SetConfig+0x10c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC2_SetConfig+0xb0>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a19      	ldr	r2, [pc, #100]	; (800685c <TIM_OC2_SetConfig+0x110>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d113      	bne.n	8006824 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40013400 	.word	0x40013400
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400
 800685c:	40014800 	.word	0x40014800

08006860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a27      	ldr	r2, [pc, #156]	; (800695c <TIM_OC3_SetConfig+0xfc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC3_SetConfig+0x6a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a26      	ldr	r2, [pc, #152]	; (8006960 <TIM_OC3_SetConfig+0x100>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d10d      	bne.n	80068e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <TIM_OC3_SetConfig+0xfc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00f      	beq.n	800690e <TIM_OC3_SetConfig+0xae>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <TIM_OC3_SetConfig+0x100>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00b      	beq.n	800690e <TIM_OC3_SetConfig+0xae>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a1a      	ldr	r2, [pc, #104]	; (8006964 <TIM_OC3_SetConfig+0x104>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d007      	beq.n	800690e <TIM_OC3_SetConfig+0xae>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a19      	ldr	r2, [pc, #100]	; (8006968 <TIM_OC3_SetConfig+0x108>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_OC3_SetConfig+0xae>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a18      	ldr	r2, [pc, #96]	; (800696c <TIM_OC3_SetConfig+0x10c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d113      	bne.n	8006936 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800691c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	621a      	str	r2, [r3, #32]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40013400 	.word	0x40013400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	031b      	lsls	r3, r3, #12
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a28      	ldr	r2, [pc, #160]	; (8006a70 <TIM_OC4_SetConfig+0x100>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC4_SetConfig+0x6c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <TIM_OC4_SetConfig+0x104>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d10d      	bne.n	80069f8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	031b      	lsls	r3, r3, #12
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1d      	ldr	r2, [pc, #116]	; (8006a70 <TIM_OC4_SetConfig+0x100>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00f      	beq.n	8006a20 <TIM_OC4_SetConfig+0xb0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a1c      	ldr	r2, [pc, #112]	; (8006a74 <TIM_OC4_SetConfig+0x104>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00b      	beq.n	8006a20 <TIM_OC4_SetConfig+0xb0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <TIM_OC4_SetConfig+0x108>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d007      	beq.n	8006a20 <TIM_OC4_SetConfig+0xb0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <TIM_OC4_SetConfig+0x10c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d003      	beq.n	8006a20 <TIM_OC4_SetConfig+0xb0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <TIM_OC4_SetConfig+0x110>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d113      	bne.n	8006a48 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	019b      	lsls	r3, r3, #6
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40013400 	.word	0x40013400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800

08006a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <TIM_OC5_SetConfig+0xb4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00f      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <TIM_OC5_SetConfig+0xb8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00b      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <TIM_OC5_SetConfig+0xbc>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <TIM_OC5_SetConfig+0xc0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC5_SetConfig+0x7a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <TIM_OC5_SetConfig+0xc4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d109      	bne.n	8006b12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40012c00 	.word	0x40012c00
 8006b3c:	40013400 	.word	0x40013400
 8006b40:	40014000 	.word	0x40014000
 8006b44:	40014400 	.word	0x40014400
 8006b48:	40014800 	.word	0x40014800

08006b4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	051b      	lsls	r3, r3, #20
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <TIM_OC6_SetConfig+0xb8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00f      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC6_SetConfig+0xbc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00b      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC6_SetConfig+0xc0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d007      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <TIM_OC6_SetConfig+0xc4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x7c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a14      	ldr	r2, [pc, #80]	; (8006c14 <TIM_OC6_SetConfig+0xc8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d109      	bne.n	8006bdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40013400 	.word	0x40013400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800

08006c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 030a 	bic.w	r3, r3, #10
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f043 0307 	orr.w	r3, r3, #7
 8006cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	609a      	str	r2, [r3, #8]
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	609a      	str	r2, [r3, #8]
}
 8006d44:	bf00      	nop
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2201      	movs	r2, #1
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1a      	ldr	r2, [r3, #32]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1a      	ldr	r2, [r3, #32]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e065      	b.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2b      	ldr	r2, [pc, #172]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d108      	bne.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1b      	ldr	r2, [pc, #108]	; (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2a:	d013      	beq.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d10c      	bne.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40013400 	.word	0x40013400
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40014000 	.word	0x40014000

08006ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e087      	b.n	8006fcc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a25      	ldr	r2, [pc, #148]	; (8006fdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d106      	bne.n	8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1e      	ldr	r2, [pc, #120]	; (8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d126      	bne.n	8006fba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f76:	051b      	lsls	r3, r3, #20
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a0e      	ldr	r2, [pc, #56]	; (8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d106      	bne.n	8006fba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40013400 	.word	0x40013400

08006fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800707c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007080:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	b29a      	uxth	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070a2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80070a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	43db      	mvns	r3, r3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4013      	ands	r3, r2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070d0:	b084      	sub	sp, #16
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	f107 0014 	add.w	r0, r7, #20
 80070de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	b004      	add	sp, #16
 8007110:	4770      	bx	lr
	...

08007114 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007114:	b480      	push	{r7}
 8007116:	b09d      	sub	sp, #116	; 0x74
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	78db      	ldrb	r3, [r3, #3]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d81f      	bhi.n	8007186 <USB_ActivateEndpoint+0x72>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <USB_ActivateEndpoint+0x38>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	0800715d 	.word	0x0800715d
 8007150:	08007179 	.word	0x08007179
 8007154:	0800718f 	.word	0x0800718f
 8007158:	0800716b 	.word	0x0800716b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800715c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007164:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007168:	e012      	b.n	8007190 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800716a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800716e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007172:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007176:	e00b      	b.n	8007190 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007178:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800717c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007180:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007184:	e004      	b.n	8007190 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800718c:	e000      	b.n	8007190 <USB_ActivateEndpoint+0x7c>
      break;
 800718e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	b21b      	sxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	b21a      	sxth	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b21b      	sxth	r3, r3
 80071d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	441a      	add	r2, r3
 80071e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80071e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	7b1b      	ldrb	r3, [r3, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8149 	bne.w	8007498 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8084 	beq.w	8007318 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	4413      	add	r3, r2
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	00da      	lsls	r2, r3, #3
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	88db      	ldrh	r3, [r3, #6]
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	b29b      	uxth	r3, r3
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	827b      	strh	r3, [r7, #18]
 8007252:	8a7b      	ldrh	r3, [r7, #18]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01b      	beq.n	8007294 <USB_ActivateEndpoint+0x180>
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	823b      	strh	r3, [r7, #16]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	441a      	add	r2, r3
 800727e:	8a3b      	ldrh	r3, [r7, #16]
 8007280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007290:	b29b      	uxth	r3, r3
 8007292:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	78db      	ldrb	r3, [r3, #3]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d020      	beq.n	80072de <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b2:	81bb      	strh	r3, [r7, #12]
 80072b4:	89bb      	ldrh	r3, [r7, #12]
 80072b6:	f083 0320 	eor.w	r3, r3, #32
 80072ba:	81bb      	strh	r3, [r7, #12]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	441a      	add	r2, r3
 80072c6:	89bb      	ldrh	r3, [r7, #12]
 80072c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8013      	strh	r3, [r2, #0]
 80072dc:	e2a6      	b.n	800782c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f4:	81fb      	strh	r3, [r7, #14]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	441a      	add	r2, r3
 8007300:	89fb      	ldrh	r3, [r7, #14]
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
 8007316:	e289      	b.n	800782c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007322:	b29b      	uxth	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	4413      	add	r3, r2
 800732a:	633b      	str	r3, [r7, #48]	; 0x30
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	00da      	lsls	r2, r3, #3
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	4413      	add	r3, r2
 8007336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	88db      	ldrh	r3, [r3, #6]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	b29b      	uxth	r3, r3
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	4413      	add	r3, r2
 800735e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	00da      	lsls	r2, r3, #3
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	4413      	add	r3, r2
 800736a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b3e      	cmp	r3, #62	; 0x3e
 8007376:	d918      	bls.n	80073aa <USB_ActivateEndpoint+0x296>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <USB_ActivateEndpoint+0x27e>
 800738c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800738e:	3b01      	subs	r3, #1
 8007390:	66bb      	str	r3, [r7, #104]	; 0x68
 8007392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007394:	b29b      	uxth	r3, r3
 8007396:	029b      	lsls	r3, r3, #10
 8007398:	b29b      	uxth	r3, r3
 800739a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	e029      	b.n	80073fe <USB_ActivateEndpoint+0x2ea>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d112      	bne.n	80073d8 <USB_ActivateEndpoint+0x2c4>
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073bc:	b29a      	uxth	r2, r3
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e012      	b.n	80073fe <USB_ActivateEndpoint+0x2ea>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	66bb      	str	r3, [r7, #104]	; 0x68
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <USB_ActivateEndpoint+0x2de>
 80073ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073ee:	3301      	adds	r3, #1
 80073f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	029b      	lsls	r3, r3, #10
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	847b      	strh	r3, [r7, #34]	; 0x22
 800740c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800740e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01b      	beq.n	800744e <USB_ActivateEndpoint+0x33a>
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742c:	843b      	strh	r3, [r7, #32]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	441a      	add	r2, r3
 8007438:	8c3b      	ldrh	r3, [r7, #32]
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007464:	83fb      	strh	r3, [r7, #30]
 8007466:	8bfb      	ldrh	r3, [r7, #30]
 8007468:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800746c:	83fb      	strh	r3, [r7, #30]
 800746e:	8bfb      	ldrh	r3, [r7, #30]
 8007470:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007474:	83fb      	strh	r3, [r7, #30]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	441a      	add	r2, r3
 8007480:	8bfb      	ldrh	r3, [r7, #30]
 8007482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800748a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]
 8007496:	e1c9      	b.n	800782c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	78db      	ldrb	r3, [r3, #3]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d11e      	bne.n	80074de <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
 80074dc:	e01d      	b.n	800751a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007516:	b29b      	uxth	r3, r3
 8007518:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007524:	b29b      	uxth	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800752a:	4413      	add	r3, r2
 800752c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	00da      	lsls	r2, r3, #3
 8007534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007536:	4413      	add	r3, r2
 8007538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800753c:	65bb      	str	r3, [r7, #88]	; 0x58
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	891b      	ldrh	r3, [r3, #8]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	657b      	str	r3, [r7, #84]	; 0x54
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007558:	b29b      	uxth	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755e:	4413      	add	r3, r2
 8007560:	657b      	str	r3, [r7, #84]	; 0x54
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	00da      	lsls	r2, r3, #3
 8007568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756a:	4413      	add	r3, r2
 800756c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007570:	653b      	str	r3, [r7, #80]	; 0x50
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	895b      	ldrh	r3, [r3, #10]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	b29b      	uxth	r3, r3
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8093 	bne.w	80076b2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800759c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80075a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01b      	beq.n	80075e0 <USB_ActivateEndpoint+0x4cc>
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80075cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075dc:	b29b      	uxth	r3, r3
 80075de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80075ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01b      	beq.n	8007630 <USB_ActivateEndpoint+0x51c>
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	441a      	add	r2, r3
 800761a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800761c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007628:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800762c:	b29b      	uxth	r3, r3
 800762e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007646:	873b      	strh	r3, [r7, #56]	; 0x38
 8007648:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800764a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800764e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007650:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007652:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007656:	873b      	strh	r3, [r7, #56]	; 0x38
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007674:	b29b      	uxth	r3, r3
 8007676:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	441a      	add	r2, r3
 800769a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800769c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	8013      	strh	r3, [r2, #0]
 80076b0:	e0bc      	b.n	800782c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80076c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01d      	beq.n	800770a <USB_ActivateEndpoint+0x5f6>
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007706:	b29b      	uxth	r3, r3
 8007708:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800771a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01d      	beq.n	8007762 <USB_ActivateEndpoint+0x64e>
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800774e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800775a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800775e:	b29b      	uxth	r3, r3
 8007760:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d024      	beq.n	80077b4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007780:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007784:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007788:	f083 0320 	eor.w	r3, r3, #32
 800778c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800779e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	8013      	strh	r3, [r2, #0]
 80077b2:	e01d      	b.n	80077f0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	441a      	add	r2, r3
 80077d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80077dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	441a      	add	r2, r3
 8007814:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	b29b      	uxth	r3, r3
 800782a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800782c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007830:	4618      	mov	r0, r3
 8007832:	3774      	adds	r7, #116	; 0x74
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800783c:	b480      	push	{r7}
 800783e:	b08d      	sub	sp, #52	; 0x34
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	7b1b      	ldrb	r3, [r3, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 808e 	bne.w	800796c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d044      	beq.n	80078e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	81bb      	strh	r3, [r7, #12]
 8007866:	89bb      	ldrh	r3, [r7, #12]
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01b      	beq.n	80078a8 <USB_DeactivateEndpoint+0x6c>
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	817b      	strh	r3, [r7, #10]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	441a      	add	r2, r3
 8007892:	897b      	ldrh	r3, [r7, #10]
 8007894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800789c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078be:	813b      	strh	r3, [r7, #8]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	441a      	add	r2, r3
 80078ca:	893b      	ldrh	r3, [r7, #8]
 80078cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078dc:	b29b      	uxth	r3, r3
 80078de:	8013      	strh	r3, [r2, #0]
 80078e0:	e192      	b.n	8007c08 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	827b      	strh	r3, [r7, #18]
 80078f0:	8a7b      	ldrh	r3, [r7, #18]
 80078f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01b      	beq.n	8007932 <USB_DeactivateEndpoint+0xf6>
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007910:	823b      	strh	r3, [r7, #16]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	441a      	add	r2, r3
 800791c:	8a3b      	ldrh	r3, [r7, #16]
 800791e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800792a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792e:	b29b      	uxth	r3, r3
 8007930:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007948:	81fb      	strh	r3, [r7, #14]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	441a      	add	r2, r3
 8007954:	89fb      	ldrh	r3, [r7, #14]
 8007956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800795a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800795e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007966:	b29b      	uxth	r3, r3
 8007968:	8013      	strh	r3, [r2, #0]
 800796a:	e14d      	b.n	8007c08 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 80a5 	bne.w	8007ac0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	843b      	strh	r3, [r7, #32]
 8007984:	8c3b      	ldrh	r3, [r7, #32]
 8007986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01b      	beq.n	80079c6 <USB_DeactivateEndpoint+0x18a>
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a4:	83fb      	strh	r3, [r7, #30]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	441a      	add	r2, r3
 80079b0:	8bfb      	ldrh	r3, [r7, #30]
 80079b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	83bb      	strh	r3, [r7, #28]
 80079d4:	8bbb      	ldrh	r3, [r7, #28]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01b      	beq.n	8007a16 <USB_DeactivateEndpoint+0x1da>
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f4:	837b      	strh	r3, [r7, #26]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	441a      	add	r2, r3
 8007a00:	8b7b      	ldrh	r3, [r7, #26]
 8007a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2c:	833b      	strh	r3, [r7, #24]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	8b3b      	ldrh	r3, [r7, #24]
 8007a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a64:	82fb      	strh	r3, [r7, #22]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	441a      	add	r2, r3
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9c:	82bb      	strh	r3, [r7, #20]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	441a      	add	r2, r3
 8007aa8:	8abb      	ldrh	r3, [r7, #20]
 8007aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	8013      	strh	r3, [r2, #0]
 8007abe:	e0a3      	b.n	8007c08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <USB_DeactivateEndpoint+0x2d4>
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	441a      	add	r2, r3
 8007afa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007b1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01b      	beq.n	8007b60 <USB_DeactivateEndpoint+0x324>
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	441a      	add	r2, r3
 8007b4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	441a      	add	r2, r3
 8007bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be6:	847b      	strh	r3, [r7, #34]	; 0x22
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	441a      	add	r2, r3
 8007bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3734      	adds	r7, #52	; 0x34
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b0c2      	sub	sp, #264	; 0x108
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	6018      	str	r0, [r3, #0]
 8007c20:	463b      	mov	r3, r7
 8007c22:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c24:	463b      	mov	r3, r7
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	f040 8509 	bne.w	8008642 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c30:	463b      	mov	r3, r7
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	463b      	mov	r3, r7
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d905      	bls.n	8007c4c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007c40:	463b      	mov	r3, r7
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c4a:	e004      	b.n	8007c56 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c56:	463b      	mov	r3, r7
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	7b1b      	ldrb	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d128      	bne.n	8007cb2 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c60:	463b      	mov	r3, r7
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6959      	ldr	r1, [r3, #20]
 8007c66:	463b      	mov	r3, r7
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	88da      	ldrh	r2, [r3, #6]
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	1d38      	adds	r0, r7, #4
 8007c74:	6800      	ldr	r0, [r0, #0]
 8007c76:	f001 f9da 	bl	800902e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c7a:	1d3b      	adds	r3, r7, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	1d3b      	adds	r3, r7, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	4413      	add	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	463b      	mov	r3, r7
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	00da      	lsls	r2, r3, #3
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	f000 bc9f 	b.w	80085f0 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	78db      	ldrb	r3, [r3, #3]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	f040 8347 	bne.w	800834c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a1a      	ldr	r2, [r3, #32]
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	f240 82eb 	bls.w	80082a6 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007cd0:	1d3b      	adds	r3, r7, #4
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	441a      	add	r2, r3
 8007cfc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d08:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007d14:	463b      	mov	r3, r7
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	463b      	mov	r3, r7
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8159 	beq.w	8007ff4 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d42:	1d3b      	adds	r3, r7, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	633b      	str	r3, [r7, #48]	; 0x30
 8007d48:	463b      	mov	r3, r7
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d164      	bne.n	8007e1c <USB_EPStartXfer+0x206>
 8007d52:	1d3b      	adds	r3, r7, #4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	4413      	add	r3, r2
 8007d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	00da      	lsls	r2, r3, #3
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	4413      	add	r3, r2
 8007d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d80:	2b3e      	cmp	r3, #62	; 0x3e
 8007d82:	d91c      	bls.n	8007dbe <USB_EPStartXfer+0x1a8>
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d92:	f003 031f 	and.w	r3, r3, #31
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <USB_EPStartXfer+0x18e>
 8007d9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007da4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	029b      	lsls	r3, r3, #10
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	e04a      	b.n	8007e54 <USB_EPStartXfer+0x23e>
 8007dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d112      	bne.n	8007dec <USB_EPStartXfer+0x1d6>
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e033      	b.n	8007e54 <USB_EPStartXfer+0x23e>
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <USB_EPStartXfer+0x1f6>
 8007e02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e06:	3301      	adds	r3, #1
 8007e08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	029b      	lsls	r3, r3, #10
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e01b      	b.n	8007e54 <USB_EPStartXfer+0x23e>
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d116      	bne.n	8007e54 <USB_EPStartXfer+0x23e>
 8007e26:	1d3b      	adds	r3, r7, #4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	4413      	add	r3, r2
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30
 8007e38:	463b      	mov	r3, r7
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	00da      	lsls	r2, r3, #3
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	4413      	add	r3, r2
 8007e44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e54:	463b      	mov	r3, r7
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	895b      	ldrh	r3, [r3, #10]
 8007e5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e5e:	463b      	mov	r3, r7
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6959      	ldr	r1, [r3, #20]
 8007e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e6e:	1d38      	adds	r0, r7, #4
 8007e70:	6800      	ldr	r0, [r0, #0]
 8007e72:	f001 f8dc 	bl	800902e <USB_WritePMA>
            ep->xfer_buff += len;
 8007e76:	463b      	mov	r3, r7
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695a      	ldr	r2, [r3, #20]
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e80:	441a      	add	r2, r3
 8007e82:	463b      	mov	r3, r7
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e88:	463b      	mov	r3, r7
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6a1a      	ldr	r2, [r3, #32]
 8007e8e:	463b      	mov	r3, r7
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d909      	bls.n	8007eac <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007e98:	463b      	mov	r3, r7
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a1a      	ldr	r2, [r3, #32]
 8007e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	621a      	str	r2, [r3, #32]
 8007eaa:	e008      	b.n	8007ebe <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007eac:	463b      	mov	r3, r7
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d164      	bne.n	8007f92 <USB_EPStartXfer+0x37c>
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	4413      	add	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	00da      	lsls	r2, r3, #3
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	4413      	add	r3, r2
 8007eec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ef8:	d91c      	bls.n	8007f34 <USB_EPStartXfer+0x31e>
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d104      	bne.n	8007f1a <USB_EPStartXfer+0x304>
 8007f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f14:	3b01      	subs	r3, #1
 8007f16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	029b      	lsls	r3, r3, #10
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	801a      	strh	r2, [r3, #0]
 8007f32:	e04d      	b.n	8007fd0 <USB_EPStartXfer+0x3ba>
 8007f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d112      	bne.n	8007f62 <USB_EPStartXfer+0x34c>
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	e036      	b.n	8007fd0 <USB_EPStartXfer+0x3ba>
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <USB_EPStartXfer+0x36c>
 8007f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	029b      	lsls	r3, r3, #10
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e01e      	b.n	8007fd0 <USB_EPStartXfer+0x3ba>
 8007f92:	463b      	mov	r3, r7
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	785b      	ldrb	r3, [r3, #1]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d119      	bne.n	8007fd0 <USB_EPStartXfer+0x3ba>
 8007f9c:	1d3b      	adds	r3, r7, #4
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	623b      	str	r3, [r7, #32]
 8007fa2:	1d3b      	adds	r3, r7, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	623b      	str	r3, [r7, #32]
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	00da      	lsls	r2, r3, #3
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	891b      	ldrh	r3, [r3, #8]
 8007fd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fda:	463b      	mov	r3, r7
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6959      	ldr	r1, [r3, #20]
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fea:	1d38      	adds	r0, r7, #4
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f001 f81e 	bl	800902e <USB_WritePMA>
 8007ff2:	e2fd      	b.n	80085f0 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d164      	bne.n	80080c8 <USB_EPStartXfer+0x4b2>
 8007ffe:	1d3b      	adds	r3, r7, #4
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	64bb      	str	r3, [r7, #72]	; 0x48
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800c:	b29b      	uxth	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008012:	4413      	add	r3, r2
 8008014:	64bb      	str	r3, [r7, #72]	; 0x48
 8008016:	463b      	mov	r3, r7
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	00da      	lsls	r2, r3, #3
 800801e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008020:	4413      	add	r3, r2
 8008022:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008026:	647b      	str	r3, [r7, #68]	; 0x44
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802c:	2b3e      	cmp	r3, #62	; 0x3e
 800802e:	d91c      	bls.n	800806a <USB_EPStartXfer+0x454>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2b00      	cmp	r3, #0
 8008044:	d104      	bne.n	8008050 <USB_EPStartXfer+0x43a>
 8008046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800804a:	3b01      	subs	r3, #1
 800804c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008054:	b29b      	uxth	r3, r3
 8008056:	029b      	lsls	r3, r3, #10
 8008058:	b29b      	uxth	r3, r3
 800805a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008062:	b29a      	uxth	r2, r3
 8008064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	e04d      	b.n	8008106 <USB_EPStartXfer+0x4f0>
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806e:	2b00      	cmp	r3, #0
 8008070:	d112      	bne.n	8008098 <USB_EPStartXfer+0x482>
 8008072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800807c:	b29a      	uxth	r2, r3
 800807e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008090:	b29a      	uxth	r2, r3
 8008092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008094:	801a      	strh	r2, [r3, #0]
 8008096:	e036      	b.n	8008106 <USB_EPStartXfer+0x4f0>
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809c:	085b      	lsrs	r3, r3, #1
 800809e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <USB_EPStartXfer+0x4a2>
 80080ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080b2:	3301      	adds	r3, #1
 80080b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080bc:	b29b      	uxth	r3, r3
 80080be:	029b      	lsls	r3, r3, #10
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c4:	801a      	strh	r2, [r3, #0]
 80080c6:	e01e      	b.n	8008106 <USB_EPStartXfer+0x4f0>
 80080c8:	463b      	mov	r3, r7
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d119      	bne.n	8008106 <USB_EPStartXfer+0x4f0>
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	653b      	str	r3, [r7, #80]	; 0x50
 80080d8:	1d3b      	adds	r3, r7, #4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e6:	4413      	add	r3, r2
 80080e8:	653b      	str	r3, [r7, #80]	; 0x50
 80080ea:	463b      	mov	r3, r7
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	00da      	lsls	r2, r3, #3
 80080f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008100:	b29a      	uxth	r2, r3
 8008102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008104:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008106:	463b      	mov	r3, r7
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	891b      	ldrh	r3, [r3, #8]
 800810c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008110:	463b      	mov	r3, r7
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6959      	ldr	r1, [r3, #20]
 8008116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811a:	b29b      	uxth	r3, r3
 800811c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008120:	1d38      	adds	r0, r7, #4
 8008122:	6800      	ldr	r0, [r0, #0]
 8008124:	f000 ff83 	bl	800902e <USB_WritePMA>
            ep->xfer_buff += len;
 8008128:	463b      	mov	r3, r7
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008132:	441a      	add	r2, r3
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6a1a      	ldr	r2, [r3, #32]
 8008140:	463b      	mov	r3, r7
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	429a      	cmp	r2, r3
 8008148:	d909      	bls.n	800815e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800814a:	463b      	mov	r3, r7
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6a1a      	ldr	r2, [r3, #32]
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008154:	1ad2      	subs	r2, r2, r3
 8008156:	463b      	mov	r3, r7
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	621a      	str	r2, [r3, #32]
 800815c:	e008      	b.n	8008170 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800815e:	463b      	mov	r3, r7
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008168:	463b      	mov	r3, r7
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2200      	movs	r2, #0
 800816e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008170:	1d3b      	adds	r3, r7, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	643b      	str	r3, [r7, #64]	; 0x40
 8008176:	463b      	mov	r3, r7
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d164      	bne.n	800824a <USB_EPStartXfer+0x634>
 8008180:	1d3b      	adds	r3, r7, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	63bb      	str	r3, [r7, #56]	; 0x38
 8008186:	1d3b      	adds	r3, r7, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818e:	b29b      	uxth	r3, r3
 8008190:	461a      	mov	r2, r3
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	4413      	add	r3, r2
 8008196:	63bb      	str	r3, [r7, #56]	; 0x38
 8008198:	463b      	mov	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	00da      	lsls	r2, r3, #3
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	4413      	add	r3, r2
 80081a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ae:	2b3e      	cmp	r3, #62	; 0x3e
 80081b0:	d91c      	bls.n	80081ec <USB_EPStartXfer+0x5d6>
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <USB_EPStartXfer+0x5bc>
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	029b      	lsls	r3, r3, #10
 80081da:	b29b      	uxth	r3, r3
 80081dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e8:	801a      	strh	r2, [r3, #0]
 80081ea:	e04a      	b.n	8008282 <USB_EPStartXfer+0x66c>
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d112      	bne.n	800821a <USB_EPStartXfer+0x604>
 80081f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081fe:	b29a      	uxth	r2, r3
 8008200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008212:	b29a      	uxth	r2, r3
 8008214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008216:	801a      	strh	r2, [r3, #0]
 8008218:	e033      	b.n	8008282 <USB_EPStartXfer+0x66c>
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821e:	085b      	lsrs	r3, r3, #1
 8008220:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <USB_EPStartXfer+0x624>
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	3301      	adds	r3, #1
 8008236:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800823a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823e:	b29b      	uxth	r3, r3
 8008240:	029b      	lsls	r3, r3, #10
 8008242:	b29a      	uxth	r2, r3
 8008244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	e01b      	b.n	8008282 <USB_EPStartXfer+0x66c>
 800824a:	463b      	mov	r3, r7
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d116      	bne.n	8008282 <USB_EPStartXfer+0x66c>
 8008254:	1d3b      	adds	r3, r7, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800825c:	b29b      	uxth	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008262:	4413      	add	r3, r2
 8008264:	643b      	str	r3, [r7, #64]	; 0x40
 8008266:	463b      	mov	r3, r7
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	00da      	lsls	r2, r3, #3
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	4413      	add	r3, r2
 8008272:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827c:	b29a      	uxth	r2, r3
 800827e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008280:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008282:	463b      	mov	r3, r7
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	895b      	ldrh	r3, [r3, #10]
 8008288:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800828c:	463b      	mov	r3, r7
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6959      	ldr	r1, [r3, #20]
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008296:	b29b      	uxth	r3, r3
 8008298:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800829c:	1d38      	adds	r0, r7, #4
 800829e:	6800      	ldr	r0, [r0, #0]
 80082a0:	f000 fec5 	bl	800902e <USB_WritePMA>
 80082a4:	e1a4      	b.n	80085f0 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80082a6:	463b      	mov	r3, r7
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80082b0:	1d3b      	adds	r3, r7, #4
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	463b      	mov	r3, r7
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80082c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80082ce:	1d3b      	adds	r3, r7, #4
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	441a      	add	r2, r3
 80082dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80082e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082f4:	1d3b      	adds	r3, r7, #4
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008302:	b29b      	uxth	r3, r3
 8008304:	461a      	mov	r2, r3
 8008306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008308:	4413      	add	r3, r2
 800830a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800830c:	463b      	mov	r3, r7
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	00da      	lsls	r2, r3, #3
 8008314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008316:	4413      	add	r3, r2
 8008318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800831c:	65bb      	str	r3, [r7, #88]	; 0x58
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008322:	b29a      	uxth	r2, r3
 8008324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008326:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008328:	463b      	mov	r3, r7
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	891b      	ldrh	r3, [r3, #8]
 800832e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008332:	463b      	mov	r3, r7
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6959      	ldr	r1, [r3, #20]
 8008338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833c:	b29b      	uxth	r3, r3
 800833e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008342:	1d38      	adds	r0, r7, #4
 8008344:	6800      	ldr	r0, [r0, #0]
 8008346:	f000 fe72 	bl	800902e <USB_WritePMA>
 800834a:	e151      	b.n	80085f0 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800834c:	463b      	mov	r3, r7
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6a1a      	ldr	r2, [r3, #32]
 8008352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	463b      	mov	r3, r7
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	463b      	mov	r3, r7
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 809b 	beq.w	80084b0 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800837a:	1d3b      	adds	r3, r7, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	673b      	str	r3, [r7, #112]	; 0x70
 8008380:	463b      	mov	r3, r7
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d164      	bne.n	8008454 <USB_EPStartXfer+0x83e>
 800838a:	1d3b      	adds	r3, r7, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008390:	1d3b      	adds	r3, r7, #4
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008398:	b29b      	uxth	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800839e:	4413      	add	r3, r2
 80083a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083a2:	463b      	mov	r3, r7
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	00da      	lsls	r2, r3, #3
 80083aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083ac:	4413      	add	r3, r2
 80083ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083b2:	667b      	str	r3, [r7, #100]	; 0x64
 80083b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ba:	d91c      	bls.n	80083f6 <USB_EPStartXfer+0x7e0>
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USB_EPStartXfer+0x7c6>
 80083d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083d6:	3b01      	subs	r3, #1
 80083d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e04a      	b.n	800848c <USB_EPStartXfer+0x876>
 80083f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d112      	bne.n	8008424 <USB_EPStartXfer+0x80e>
 80083fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008408:	b29a      	uxth	r2, r3
 800840a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841c:	b29a      	uxth	r2, r3
 800841e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008420:	801a      	strh	r2, [r3, #0]
 8008422:	e033      	b.n	800848c <USB_EPStartXfer+0x876>
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008428:	085b      	lsrs	r3, r3, #1
 800842a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800842e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d004      	beq.n	8008444 <USB_EPStartXfer+0x82e>
 800843a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800843e:	3301      	adds	r3, #1
 8008440:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008448:	b29b      	uxth	r3, r3
 800844a:	029b      	lsls	r3, r3, #10
 800844c:	b29a      	uxth	r2, r3
 800844e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	e01b      	b.n	800848c <USB_EPStartXfer+0x876>
 8008454:	463b      	mov	r3, r7
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d116      	bne.n	800848c <USB_EPStartXfer+0x876>
 800845e:	1d3b      	adds	r3, r7, #4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008466:	b29b      	uxth	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800846c:	4413      	add	r3, r2
 800846e:	673b      	str	r3, [r7, #112]	; 0x70
 8008470:	463b      	mov	r3, r7
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	00da      	lsls	r2, r3, #3
 8008478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800847a:	4413      	add	r3, r2
 800847c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008486:	b29a      	uxth	r2, r3
 8008488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800848c:	463b      	mov	r3, r7
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	895b      	ldrh	r3, [r3, #10]
 8008492:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008496:	463b      	mov	r3, r7
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6959      	ldr	r1, [r3, #20]
 800849c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084a6:	1d38      	adds	r0, r7, #4
 80084a8:	6800      	ldr	r0, [r0, #0]
 80084aa:	f000 fdc0 	bl	800902e <USB_WritePMA>
 80084ae:	e09f      	b.n	80085f0 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084b0:	463b      	mov	r3, r7
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d164      	bne.n	8008584 <USB_EPStartXfer+0x96e>
 80084ba:	1d3b      	adds	r3, r7, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084c0:	1d3b      	adds	r3, r7, #4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084ce:	4413      	add	r3, r2
 80084d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084d2:	463b      	mov	r3, r7
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	00da      	lsls	r2, r3, #3
 80084da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084dc:	4413      	add	r3, r2
 80084de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80084e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e8:	2b3e      	cmp	r3, #62	; 0x3e
 80084ea:	d91c      	bls.n	8008526 <USB_EPStartXfer+0x910>
 80084ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <USB_EPStartXfer+0x8f6>
 8008502:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008506:	3b01      	subs	r3, #1
 8008508:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800850c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008510:	b29b      	uxth	r3, r3
 8008512:	029b      	lsls	r3, r3, #10
 8008514:	b29b      	uxth	r3, r3
 8008516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851e:	b29a      	uxth	r2, r3
 8008520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e053      	b.n	80085ce <USB_EPStartXfer+0x9b8>
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852a:	2b00      	cmp	r3, #0
 800852c:	d112      	bne.n	8008554 <USB_EPStartXfer+0x93e>
 800852e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29b      	uxth	r3, r3
 8008534:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008538:	b29a      	uxth	r2, r3
 800853a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800853c:	801a      	strh	r2, [r3, #0]
 800853e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854c:	b29a      	uxth	r2, r3
 800854e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008550:	801a      	strh	r2, [r3, #0]
 8008552:	e03c      	b.n	80085ce <USB_EPStartXfer+0x9b8>
 8008554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <USB_EPStartXfer+0x95e>
 800856a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800856e:	3301      	adds	r3, #1
 8008570:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008574:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008578:	b29b      	uxth	r3, r3
 800857a:	029b      	lsls	r3, r3, #10
 800857c:	b29a      	uxth	r2, r3
 800857e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	e024      	b.n	80085ce <USB_EPStartXfer+0x9b8>
 8008584:	463b      	mov	r3, r7
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d11f      	bne.n	80085ce <USB_EPStartXfer+0x9b8>
 800858e:	1d3b      	adds	r3, r7, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008596:	1d3b      	adds	r3, r7, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859e:	b29b      	uxth	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085a6:	4413      	add	r3, r2
 80085a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	00da      	lsls	r2, r3, #3
 80085b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085b8:	4413      	add	r3, r2
 80085ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80085ce:	463b      	mov	r3, r7
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	891b      	ldrh	r3, [r3, #8]
 80085d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085d8:	463b      	mov	r3, r7
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6959      	ldr	r1, [r3, #20]
 80085de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085e8:	1d38      	adds	r0, r7, #4
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	f000 fd1f 	bl	800902e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80085f0:	1d3b      	adds	r3, r7, #4
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	463b      	mov	r3, r7
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800860a:	817b      	strh	r3, [r7, #10]
 800860c:	897b      	ldrh	r3, [r7, #10]
 800860e:	f083 0310 	eor.w	r3, r3, #16
 8008612:	817b      	strh	r3, [r7, #10]
 8008614:	897b      	ldrh	r3, [r7, #10]
 8008616:	f083 0320 	eor.w	r3, r3, #32
 800861a:	817b      	strh	r3, [r7, #10]
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	463b      	mov	r3, r7
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	441a      	add	r2, r3
 800862a:	897b      	ldrh	r3, [r7, #10]
 800862c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863c:	b29b      	uxth	r3, r3
 800863e:	8013      	strh	r3, [r2, #0]
 8008640:	e3b5      	b.n	8008dae <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008642:	463b      	mov	r3, r7
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	7b1b      	ldrb	r3, [r3, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f040 8090 	bne.w	800876e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800864e:	463b      	mov	r3, r7
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	463b      	mov	r3, r7
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	429a      	cmp	r2, r3
 800865c:	d90e      	bls.n	800867c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800865e:	463b      	mov	r3, r7
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008668:	463b      	mov	r3, r7
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	463b      	mov	r3, r7
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	619a      	str	r2, [r3, #24]
 800867a:	e008      	b.n	800868e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800867c:	463b      	mov	r3, r7
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008686:	463b      	mov	r3, r7
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2200      	movs	r2, #0
 800868c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008696:	1d3b      	adds	r3, r7, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800869e:	b29b      	uxth	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086a6:	4413      	add	r3, r2
 80086a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086ac:	463b      	mov	r3, r7
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	00da      	lsls	r2, r3, #3
 80086b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086b8:	4413      	add	r3, r2
 80086ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c6:	2b3e      	cmp	r3, #62	; 0x3e
 80086c8:	d91d      	bls.n	8008706 <USB_EPStartXfer+0xaf0>
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d8:	f003 031f 	and.w	r3, r3, #31
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USB_EPStartXfer+0xad4>
 80086e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086e4:	3b01      	subs	r3, #1
 80086e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	029b      	lsls	r3, r3, #10
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	e325      	b.n	8008d52 <USB_EPStartXfer+0x113c>
 8008706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800870a:	2b00      	cmp	r3, #0
 800870c:	d116      	bne.n	800873c <USB_EPStartXfer+0xb26>
 800870e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	b29b      	uxth	r3, r3
 8008716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800871a:	b29a      	uxth	r2, r3
 800871c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008720:	801a      	strh	r2, [r3, #0]
 8008722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800872e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008732:	b29a      	uxth	r2, r3
 8008734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008738:	801a      	strh	r2, [r3, #0]
 800873a:	e30a      	b.n	8008d52 <USB_EPStartXfer+0x113c>
 800873c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <USB_EPStartXfer+0xb46>
 8008752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008756:	3301      	adds	r3, #1
 8008758:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800875c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008760:	b29b      	uxth	r3, r3
 8008762:	029b      	lsls	r3, r3, #10
 8008764:	b29a      	uxth	r2, r3
 8008766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800876a:	801a      	strh	r2, [r3, #0]
 800876c:	e2f1      	b.n	8008d52 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800876e:	463b      	mov	r3, r7
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	78db      	ldrb	r3, [r3, #3]
 8008774:	2b02      	cmp	r3, #2
 8008776:	f040 818f 	bne.w	8008a98 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800877a:	463b      	mov	r3, r7
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d175      	bne.n	8008870 <USB_EPStartXfer+0xc5a>
 8008784:	1d3b      	adds	r3, r7, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008794:	b29b      	uxth	r3, r3
 8008796:	461a      	mov	r2, r3
 8008798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800879c:	4413      	add	r3, r2
 800879e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087a2:	463b      	mov	r3, r7
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	00da      	lsls	r2, r3, #3
 80087aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ae:	4413      	add	r3, r2
 80087b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087b8:	463b      	mov	r3, r7
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b3e      	cmp	r3, #62	; 0x3e
 80087c0:	d91f      	bls.n	8008802 <USB_EPStartXfer+0xbec>
 80087c2:	463b      	mov	r3, r7
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087ce:	463b      	mov	r3, r7
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <USB_EPStartXfer+0xbd0>
 80087dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e0:	3b01      	subs	r3, #1
 80087e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	029b      	lsls	r3, r3, #10
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e05c      	b.n	80088bc <USB_EPStartXfer+0xca6>
 8008802:	463b      	mov	r3, r7
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d116      	bne.n	800883a <USB_EPStartXfer+0xc24>
 800880c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008818:	b29a      	uxth	r2, r3
 800881a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800881e:	801a      	strh	r2, [r3, #0]
 8008820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	b29b      	uxth	r3, r3
 8008828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008830:	b29a      	uxth	r2, r3
 8008832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	e040      	b.n	80088bc <USB_EPStartXfer+0xca6>
 800883a:	463b      	mov	r3, r7
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008846:	463b      	mov	r3, r7
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <USB_EPStartXfer+0xc48>
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008858:	3301      	adds	r3, #1
 800885a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800885e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008862:	b29b      	uxth	r3, r3
 8008864:	029b      	lsls	r3, r3, #10
 8008866:	b29a      	uxth	r2, r3
 8008868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	e025      	b.n	80088bc <USB_EPStartXfer+0xca6>
 8008870:	463b      	mov	r3, r7
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	785b      	ldrb	r3, [r3, #1]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d120      	bne.n	80088bc <USB_EPStartXfer+0xca6>
 800887a:	1d3b      	adds	r3, r7, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008882:	1d3b      	adds	r3, r7, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888a:	b29b      	uxth	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008892:	4413      	add	r3, r2
 8008894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008898:	463b      	mov	r3, r7
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	00da      	lsls	r2, r3, #3
 80088a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088a4:	4413      	add	r3, r2
 80088a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088ae:	463b      	mov	r3, r7
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088ba:	801a      	strh	r2, [r3, #0]
 80088bc:	1d3b      	adds	r3, r7, #4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088c4:	463b      	mov	r3, r7
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d175      	bne.n	80089ba <USB_EPStartXfer+0xda4>
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088d6:	1d3b      	adds	r3, r7, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088de:	b29b      	uxth	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e6:	4413      	add	r3, r2
 80088e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088ec:	463b      	mov	r3, r7
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	00da      	lsls	r2, r3, #3
 80088f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f8:	4413      	add	r3, r2
 80088fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008902:	463b      	mov	r3, r7
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	2b3e      	cmp	r3, #62	; 0x3e
 800890a:	d91f      	bls.n	800894c <USB_EPStartXfer+0xd36>
 800890c:	463b      	mov	r3, r7
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	095b      	lsrs	r3, r3, #5
 8008914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008918:	463b      	mov	r3, r7
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <USB_EPStartXfer+0xd1a>
 8008926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800892a:	3b01      	subs	r3, #1
 800892c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008934:	b29b      	uxth	r3, r3
 8008936:	029b      	lsls	r3, r3, #10
 8008938:	b29b      	uxth	r3, r3
 800893a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008942:	b29a      	uxth	r2, r3
 8008944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008948:	801a      	strh	r2, [r3, #0]
 800894a:	e058      	b.n	80089fe <USB_EPStartXfer+0xde8>
 800894c:	463b      	mov	r3, r7
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d116      	bne.n	8008984 <USB_EPStartXfer+0xd6e>
 8008956:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008962:	b29a      	uxth	r2, r3
 8008964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897a:	b29a      	uxth	r2, r3
 800897c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	e03c      	b.n	80089fe <USB_EPStartXfer+0xde8>
 8008984:	463b      	mov	r3, r7
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008990:	463b      	mov	r3, r7
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d004      	beq.n	80089a8 <USB_EPStartXfer+0xd92>
 800899e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a2:	3301      	adds	r3, #1
 80089a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	029b      	lsls	r3, r3, #10
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	e021      	b.n	80089fe <USB_EPStartXfer+0xde8>
 80089ba:	463b      	mov	r3, r7
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d11c      	bne.n	80089fe <USB_EPStartXfer+0xde8>
 80089c4:	1d3b      	adds	r3, r7, #4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	461a      	mov	r2, r3
 80089d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089d4:	4413      	add	r3, r2
 80089d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089da:	463b      	mov	r3, r7
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	00da      	lsls	r2, r3, #3
 80089e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089e6:	4413      	add	r3, r2
 80089e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089f0:	463b      	mov	r3, r7
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089fc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089fe:	463b      	mov	r3, r7
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 81a4 	beq.w	8008d52 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008a0a:	1d3b      	adds	r3, r7, #4
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	463b      	mov	r3, r7
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <USB_EPStartXfer+0xe20>
 8008a2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10d      	bne.n	8008a52 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f040 8187 	bne.w	8008d52 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f040 8180 	bne.w	8008d52 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a52:	1d3b      	adds	r3, r7, #4
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	463b      	mov	r3, r7
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a70:	1d3b      	adds	r3, r7, #4
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	463b      	mov	r3, r7
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	441a      	add	r2, r3
 8008a7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	8013      	strh	r3, [r2, #0]
 8008a96:	e15c      	b.n	8008d52 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a98:	463b      	mov	r3, r7
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	78db      	ldrb	r3, [r3, #3]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	f040 8155 	bne.w	8008d4e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	463b      	mov	r3, r7
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d90e      	bls.n	8008ad2 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008abe:	463b      	mov	r3, r7
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	699a      	ldr	r2, [r3, #24]
 8008ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	463b      	mov	r3, r7
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	619a      	str	r2, [r3, #24]
 8008ad0:	e008      	b.n	8008ae4 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008adc:	463b      	mov	r3, r7
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ae4:	463b      	mov	r3, r7
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d16f      	bne.n	8008bce <USB_EPStartXfer+0xfb8>
 8008aee:	1d3b      	adds	r3, r7, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008af6:	1d3b      	adds	r3, r7, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b06:	4413      	add	r3, r2
 8008b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b0c:	463b      	mov	r3, r7
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	00da      	lsls	r2, r3, #3
 8008b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b18:	4413      	add	r3, r2
 8008b1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b26:	2b3e      	cmp	r3, #62	; 0x3e
 8008b28:	d91d      	bls.n	8008b66 <USB_EPStartXfer+0xf50>
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d104      	bne.n	8008b4a <USB_EPStartXfer+0xf34>
 8008b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b44:	3b01      	subs	r3, #1
 8008b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	029b      	lsls	r3, r3, #10
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e058      	b.n	8008c18 <USB_EPStartXfer+0x1002>
 8008b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d116      	bne.n	8008b9c <USB_EPStartXfer+0xf86>
 8008b6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b80:	801a      	strh	r2, [r3, #0]
 8008b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b98:	801a      	strh	r2, [r3, #0]
 8008b9a:	e03d      	b.n	8008c18 <USB_EPStartXfer+0x1002>
 8008b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba0:	085b      	lsrs	r3, r3, #1
 8008ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <USB_EPStartXfer+0xfa6>
 8008bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	029b      	lsls	r3, r3, #10
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	e024      	b.n	8008c18 <USB_EPStartXfer+0x1002>
 8008bce:	463b      	mov	r3, r7
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d11f      	bne.n	8008c18 <USB_EPStartXfer+0x1002>
 8008bd8:	1d3b      	adds	r3, r7, #4
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008be0:	1d3b      	adds	r3, r7, #4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	00da      	lsls	r2, r3, #3
 8008bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c02:	4413      	add	r3, r2
 8008c04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	1d3b      	adds	r3, r7, #4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c20:	463b      	mov	r3, r7
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d16f      	bne.n	8008d0a <USB_EPStartXfer+0x10f4>
 8008c2a:	1d3b      	adds	r3, r7, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c32:	1d3b      	adds	r3, r7, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c42:	4413      	add	r3, r2
 8008c44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c48:	463b      	mov	r3, r7
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	00da      	lsls	r2, r3, #3
 8008c50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c54:	4413      	add	r3, r2
 8008c56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c62:	2b3e      	cmp	r3, #62	; 0x3e
 8008c64:	d91d      	bls.n	8008ca2 <USB_EPStartXfer+0x108c>
 8008c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <USB_EPStartXfer+0x1070>
 8008c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c80:	3b01      	subs	r3, #1
 8008c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	029b      	lsls	r3, r3, #10
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c9e:	801a      	strh	r2, [r3, #0]
 8008ca0:	e057      	b.n	8008d52 <USB_EPStartXfer+0x113c>
 8008ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d116      	bne.n	8008cd8 <USB_EPStartXfer+0x10c2>
 8008caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cbc:	801a      	strh	r2, [r3, #0]
 8008cbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cd4:	801a      	strh	r2, [r3, #0]
 8008cd6:	e03c      	b.n	8008d52 <USB_EPStartXfer+0x113c>
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <USB_EPStartXfer+0x10e2>
 8008cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	029b      	lsls	r3, r3, #10
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	e023      	b.n	8008d52 <USB_EPStartXfer+0x113c>
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	785b      	ldrb	r3, [r3, #1]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d11e      	bne.n	8008d52 <USB_EPStartXfer+0x113c>
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d24:	4413      	add	r3, r2
 8008d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	00da      	lsls	r2, r3, #3
 8008d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d36:	4413      	add	r3, r2
 8008d38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d4a:	801a      	strh	r2, [r3, #0]
 8008d4c:	e001      	b.n	8008d52 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e02e      	b.n	8008db0 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	463b      	mov	r3, r7
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d84:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d88:	1d3b      	adds	r3, r7, #4
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	441a      	add	r2, r3
 8008d96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d020      	beq.n	8008e0e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de2:	81bb      	strh	r3, [r7, #12]
 8008de4:	89bb      	ldrh	r3, [r7, #12]
 8008de6:	f083 0310 	eor.w	r3, r3, #16
 8008dea:	81bb      	strh	r3, [r7, #12]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	441a      	add	r2, r3
 8008df6:	89bb      	ldrh	r3, [r7, #12]
 8008df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	8013      	strh	r3, [r2, #0]
 8008e0c:	e01f      	b.n	8008e4e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e24:	81fb      	strh	r3, [r7, #14]
 8008e26:	89fb      	ldrh	r3, [r7, #14]
 8008e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e2c:	81fb      	strh	r3, [r7, #14]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	441a      	add	r2, r3
 8008e38:	89fb      	ldrh	r3, [r7, #14]
 8008e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	7b1b      	ldrb	r3, [r3, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f040 809d 	bne.w	8008faa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d04c      	beq.n	8008f12 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	823b      	strh	r3, [r7, #16]
 8008e86:	8a3b      	ldrh	r3, [r7, #16]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <USB_EPClearStall+0x6c>
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	81fb      	strh	r3, [r7, #14]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	441a      	add	r2, r3
 8008eb2:	89fb      	ldrh	r3, [r7, #14]
 8008eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	78db      	ldrb	r3, [r3, #3]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d06c      	beq.n	8008faa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee6:	81bb      	strh	r3, [r7, #12]
 8008ee8:	89bb      	ldrh	r3, [r7, #12]
 8008eea:	f083 0320 	eor.w	r3, r3, #32
 8008eee:	81bb      	strh	r3, [r7, #12]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	441a      	add	r2, r3
 8008efa:	89bb      	ldrh	r3, [r7, #12]
 8008efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	8013      	strh	r3, [r2, #0]
 8008f10:	e04b      	b.n	8008faa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	82fb      	strh	r3, [r7, #22]
 8008f20:	8afb      	ldrh	r3, [r7, #22]
 8008f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d01b      	beq.n	8008f62 <USB_EPClearStall+0x106>
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f40:	82bb      	strh	r3, [r7, #20]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	441a      	add	r2, r3
 8008f4c:	8abb      	ldrh	r3, [r7, #20]
 8008f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f78:	827b      	strh	r3, [r7, #18]
 8008f7a:	8a7b      	ldrh	r3, [r7, #18]
 8008f7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f80:	827b      	strh	r3, [r7, #18]
 8008f82:	8a7b      	ldrh	r3, [r7, #18]
 8008f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f88:	827b      	strh	r3, [r7, #18]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	441a      	add	r2, r3
 8008f94:	8a7b      	ldrh	r3, [r7, #18]
 8008f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d103      	bne.n	8008fd2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2280      	movs	r2, #128	; 0x80
 8008fce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800901c:	b29b      	uxth	r3, r3
 800901e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009020:	68fb      	ldr	r3, [r7, #12]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800902e:	b480      	push	{r7}
 8009030:	b08d      	sub	sp, #52	; 0x34
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	4611      	mov	r1, r2
 800903a:	461a      	mov	r2, r3
 800903c:	460b      	mov	r3, r1
 800903e:	80fb      	strh	r3, [r7, #6]
 8009040:	4613      	mov	r3, r2
 8009042:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009044:	88bb      	ldrh	r3, [r7, #4]
 8009046:	3301      	adds	r3, #1
 8009048:	085b      	lsrs	r3, r3, #1
 800904a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009054:	88fa      	ldrh	r2, [r7, #6]
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800905e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009064:	e01b      	b.n	800909e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	3301      	adds	r3, #1
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b29b      	uxth	r3, r3
 8009078:	021b      	lsls	r3, r3, #8
 800907a:	b29b      	uxth	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	b29a      	uxth	r2, r3
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	3302      	adds	r3, #2
 8009090:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	3301      	adds	r3, #1
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	3b01      	subs	r3, #1
 800909c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e0      	bne.n	8009066 <USB_WritePMA+0x38>
  }
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	3734      	adds	r7, #52	; 0x34
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b08b      	sub	sp, #44	; 0x2c
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	4611      	mov	r1, r2
 80090be:	461a      	mov	r2, r3
 80090c0:	460b      	mov	r3, r1
 80090c2:	80fb      	strh	r3, [r7, #6]
 80090c4:	4613      	mov	r3, r2
 80090c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80090c8:	88bb      	ldrh	r3, [r7, #4]
 80090ca:	085b      	lsrs	r3, r3, #1
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090d8:	88fa      	ldrh	r2, [r7, #6]
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090e2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
 80090e8:	e018      	b.n	800911c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	3302      	adds	r3, #2
 80090f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	3301      	adds	r3, #1
 8009104:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	0a1b      	lsrs	r3, r3, #8
 800910a:	b2da      	uxtb	r2, r3
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	3301      	adds	r3, #1
 8009114:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	3b01      	subs	r3, #1
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e3      	bne.n	80090ea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009122:	88bb      	ldrh	r3, [r7, #4]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	b2da      	uxtb	r2, r3
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	701a      	strb	r2, [r3, #0]
  }
}
 800913e:	bf00      	nop
 8009140:	372c      	adds	r7, #44	; 0x2c
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009156:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800915a:	f002 f909 	bl	800b370 <USBD_static_malloc>
 800915e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800916e:	2302      	movs	r3, #2
 8009170:	e066      	b.n	8009240 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	7c1b      	ldrb	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d119      	bne.n	80091b6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009186:	2202      	movs	r2, #2
 8009188:	2181      	movs	r1, #129	; 0x81
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 ff95 	bl	800b0ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800919a:	2202      	movs	r2, #2
 800919c:	2101      	movs	r1, #1
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 ff8b 	bl	800b0ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2210      	movs	r2, #16
 80091b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80091b4:	e016      	b.n	80091e4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80091b6:	2340      	movs	r3, #64	; 0x40
 80091b8:	2202      	movs	r2, #2
 80091ba:	2181      	movs	r1, #129	; 0x81
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 ff7c 	bl	800b0ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091c8:	2340      	movs	r3, #64	; 0x40
 80091ca:	2202      	movs	r2, #2
 80091cc:	2101      	movs	r1, #1
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 ff73 	bl	800b0ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2210      	movs	r2, #16
 80091e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091e4:	2308      	movs	r3, #8
 80091e6:	2203      	movs	r2, #3
 80091e8:	2182      	movs	r1, #130	; 0x82
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 ff65 	bl	800b0ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7c1b      	ldrb	r3, [r3, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d109      	bne.n	800922e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009224:	2101      	movs	r1, #1
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f002 f837 	bl	800b29a <USBD_LL_PrepareReceive>
 800922c:	e007      	b.n	800923e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	2101      	movs	r1, #1
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f002 f82e 	bl	800b29a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009254:	2181      	movs	r1, #129	; 0x81
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 ff55 	bl	800b106 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009262:	2101      	movs	r1, #1
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 ff4e 	bl	800b106 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009272:	2182      	movs	r1, #130	; 0x82
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f001 ff46 	bl	800b106 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00e      	beq.n	80092b2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a4:	4618      	mov	r0, r3
 80092a6:	f002 f871 	bl	800b38c <USBD_static_free>
    pdev->pClassData = NULL;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e0af      	b.n	8009444 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d03f      	beq.n	8009370 <USBD_CDC_Setup+0xb4>
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	f040 809f 	bne.w	8009434 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	88db      	ldrh	r3, [r3, #6]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d02e      	beq.n	800935c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	b25b      	sxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	da16      	bge.n	8009336 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009314:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	88d2      	ldrh	r2, [r2, #6]
 800931a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	88db      	ldrh	r3, [r3, #6]
 8009320:	2b07      	cmp	r3, #7
 8009322:	bf28      	it	cs
 8009324:	2307      	movcs	r3, #7
 8009326:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	89fa      	ldrh	r2, [r7, #14]
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 facf 	bl	800a8d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009334:	e085      	b.n	8009442 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	785a      	ldrb	r2, [r3, #1]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	88db      	ldrh	r3, [r3, #6]
 8009344:	b2da      	uxtb	r2, r3
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800934c:	6939      	ldr	r1, [r7, #16]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	88db      	ldrh	r3, [r3, #6]
 8009352:	461a      	mov	r2, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 fae8 	bl	800a92a <USBD_CtlPrepareRx>
      break;
 800935a:	e072      	b.n	8009442 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	7850      	ldrb	r0, [r2, #1]
 8009368:	2200      	movs	r2, #0
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	4798      	blx	r3
      break;
 800936e:	e068      	b.n	8009442 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	785b      	ldrb	r3, [r3, #1]
 8009374:	2b0b      	cmp	r3, #11
 8009376:	d852      	bhi.n	800941e <USBD_CDC_Setup+0x162>
 8009378:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <USBD_CDC_Setup+0xc4>)
 800937a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937e:	bf00      	nop
 8009380:	080093b1 	.word	0x080093b1
 8009384:	0800942d 	.word	0x0800942d
 8009388:	0800941f 	.word	0x0800941f
 800938c:	0800941f 	.word	0x0800941f
 8009390:	0800941f 	.word	0x0800941f
 8009394:	0800941f 	.word	0x0800941f
 8009398:	0800941f 	.word	0x0800941f
 800939c:	0800941f 	.word	0x0800941f
 80093a0:	0800941f 	.word	0x0800941f
 80093a4:	0800941f 	.word	0x0800941f
 80093a8:	080093db 	.word	0x080093db
 80093ac:	08009405 	.word	0x08009405
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d107      	bne.n	80093cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093bc:	f107 030a 	add.w	r3, r7, #10
 80093c0:	2202      	movs	r2, #2
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 fa84 	bl	800a8d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093ca:	e032      	b.n	8009432 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 fa0e 	bl	800a7f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	75fb      	strb	r3, [r7, #23]
          break;
 80093d8:	e02b      	b.n	8009432 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d107      	bne.n	80093f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093e6:	f107 030d 	add.w	r3, r7, #13
 80093ea:	2201      	movs	r2, #1
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fa6f 	bl	800a8d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093f4:	e01d      	b.n	8009432 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 f9f9 	bl	800a7f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80093fe:	2303      	movs	r3, #3
 8009400:	75fb      	strb	r3, [r7, #23]
          break;
 8009402:	e016      	b.n	8009432 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b03      	cmp	r3, #3
 800940e:	d00f      	beq.n	8009430 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 f9ec 	bl	800a7f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009418:	2303      	movs	r3, #3
 800941a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800941c:	e008      	b.n	8009430 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 f9e5 	bl	800a7f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009426:	2303      	movs	r3, #3
 8009428:	75fb      	strb	r3, [r7, #23]
          break;
 800942a:	e002      	b.n	8009432 <USBD_CDC_Setup+0x176>
          break;
 800942c:	bf00      	nop
 800942e:	e008      	b.n	8009442 <USBD_CDC_Setup+0x186>
          break;
 8009430:	bf00      	nop
      }
      break;
 8009432:	e006      	b.n	8009442 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 f9da 	bl	800a7f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800943c:	2303      	movs	r3, #3
 800943e:	75fb      	strb	r3, [r7, #23]
      break;
 8009440:	bf00      	nop
  }

  return (uint8_t)ret;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800945e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800946a:	2303      	movs	r3, #3
 800946c:	e04f      	b.n	800950e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009474:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	3318      	adds	r3, #24
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d029      	beq.n	80094e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	3318      	adds	r3, #24
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	78f9      	ldrb	r1, [r7, #3]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	460b      	mov	r3, r1
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	4403      	add	r3, r0
 80094ac:	3338      	adds	r3, #56	; 0x38
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80094b4:	fb03 f301 	mul.w	r3, r3, r1
 80094b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d110      	bne.n	80094e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	3318      	adds	r3, #24
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094d2:	78f9      	ldrb	r1, [r7, #3]
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 febd 	bl	800b258 <USBD_LL_Transmit>
 80094de:	e015      	b.n	800950c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00b      	beq.n	800950c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009508:	78fa      	ldrb	r2, [r7, #3]
 800950a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009528:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009534:	2303      	movs	r3, #3
 8009536:	e015      	b.n	8009564 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 fecd 	bl	800b2dc <USBD_LL_GetRxDataSize>
 8009542:	4602      	mov	r2, r0
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800955e:	4611      	mov	r1, r2
 8009560:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800957a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009582:	2303      	movs	r3, #3
 8009584:	e01b      	b.n	80095be <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d015      	beq.n	80095bc <USBD_CDC_EP0_RxReady+0x50>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009596:	2bff      	cmp	r3, #255	; 0xff
 8009598:	d010      	beq.n	80095bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80095a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80095b0:	b292      	uxth	r2, r2
 80095b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	22ff      	movs	r2, #255	; 0xff
 80095b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2243      	movs	r2, #67	; 0x43
 80095d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80095d6:	4b03      	ldr	r3, [pc, #12]	; (80095e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	200000b0 	.word	0x200000b0

080095e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2243      	movs	r2, #67	; 0x43
 80095f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80095f6:	4b03      	ldr	r3, [pc, #12]	; (8009604 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	2000006c 	.word	0x2000006c

08009608 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2243      	movs	r2, #67	; 0x43
 8009614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009616:	4b03      	ldr	r3, [pc, #12]	; (8009624 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	200000f4 	.word	0x200000f4

08009628 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	220a      	movs	r2, #10
 8009634:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009636:	4b03      	ldr	r3, [pc, #12]	; (8009644 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	20000028 	.word	0x20000028

08009648 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	e004      	b.n	8009666 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009672:	b480      	push	{r7}
 8009674:	b087      	sub	sp, #28
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009684:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800968c:	2303      	movs	r3, #3
 800968e:	e008      	b.n	80096a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e004      	b.n	80096d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80096f0:	2301      	movs	r3, #1
 80096f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096fe:	2303      	movs	r3, #3
 8009700:	e01a      	b.n	8009738 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009708:	2b00      	cmp	r3, #0
 800970a:	d114      	bne.n	8009736 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2201      	movs	r2, #1
 8009710:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800972a:	2181      	movs	r1, #129	; 0x81
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 fd93 	bl	800b258 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800974e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800975a:	2303      	movs	r3, #3
 800975c:	e016      	b.n	800978c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	7c1b      	ldrb	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d109      	bne.n	800977a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800976c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009770:	2101      	movs	r1, #1
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 fd91 	bl	800b29a <USBD_LL_PrepareReceive>
 8009778:	e007      	b.n	800978a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	2101      	movs	r1, #1
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 fd88 	bl	800b29a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e01f      	b.n	80097ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	79fa      	ldrb	r2, [r7, #7]
 80097de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f001 fbef 	bl	800afc4 <USBD_LL_Init>
 80097e6:	4603      	mov	r3, r0
 80097e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	e016      	b.n	800983a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	f107 020e 	add.w	r2, r7, #14
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
 8009830:	4602      	mov	r2, r0
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f001 fc1a 	bl	800b084 <USBD_LL_Start>
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800987c:	2303      	movs	r3, #3
 800987e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009886:	2b00      	cmp	r3, #0
 8009888:	d009      	beq.n	800989e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	4611      	mov	r1, r2
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	78fa      	ldrb	r2, [r7, #3]
 80098c8:	4611      	mov	r1, r2
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	4798      	blx	r3
  }

  return USBD_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 ff46 	bl	800a77c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80098fe:	461a      	mov	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	2b02      	cmp	r3, #2
 8009912:	d01a      	beq.n	800994a <USBD_LL_SetupStage+0x72>
 8009914:	2b02      	cmp	r3, #2
 8009916:	d822      	bhi.n	800995e <USBD_LL_SetupStage+0x86>
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <USBD_LL_SetupStage+0x4a>
 800991c:	2b01      	cmp	r3, #1
 800991e:	d00a      	beq.n	8009936 <USBD_LL_SetupStage+0x5e>
 8009920:	e01d      	b.n	800995e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f9ee 	bl	8009d0c <USBD_StdDevReq>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
      break;
 8009934:	e020      	b.n	8009978 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa52 	bl	8009de8 <USBD_StdItfReq>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
      break;
 8009948:	e016      	b.n	8009978 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa91 	bl	8009e7a <USBD_StdEPReq>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
      break;
 800995c:	e00c      	b.n	8009978 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009968:	b2db      	uxtb	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 fbe9 	bl	800b144 <USBD_LL_StallEP>
 8009972:	4603      	mov	r3, r0
 8009974:	73fb      	strb	r3, [r7, #15]
      break;
 8009976:	bf00      	nop
  }

  return ret;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	460b      	mov	r3, r1
 800998c:	607a      	str	r2, [r7, #4]
 800998e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d138      	bne.n	8009a08 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800999c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d14a      	bne.n	8009a3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d913      	bls.n	80099dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	1ad2      	subs	r2, r2, r3
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	4293      	cmp	r3, r2
 80099cc:	bf28      	it	cs
 80099ce:	4613      	movcs	r3, r2
 80099d0:	461a      	mov	r2, r3
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 ffc5 	bl	800a964 <USBD_CtlContinueRx>
 80099da:	e030      	b.n	8009a3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d10b      	bne.n	8009a00 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 ffc0 	bl	800a986 <USBD_CtlSendStatus>
 8009a06:	e01a      	b.n	8009a3e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d114      	bne.n	8009a3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	7afa      	ldrb	r2, [r7, #11]
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	4798      	blx	r3
 8009a30:	4603      	mov	r3, r0
 8009a32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	e000      	b.n	8009a40 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	460b      	mov	r3, r1
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d16b      	bne.n	8009b34 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3314      	adds	r3, #20
 8009a60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d156      	bne.n	8009b1a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d914      	bls.n	8009aa2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	1ad2      	subs	r2, r2, r3
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 ff3a 	bl	800a908 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a94:	2300      	movs	r3, #0
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f001 fbfd 	bl	800b29a <USBD_LL_PrepareReceive>
 8009aa0:	e03b      	b.n	8009b1a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d11c      	bne.n	8009ae8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d316      	bcc.n	8009ae8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d20f      	bcs.n	8009ae8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2100      	movs	r1, #0
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 ff1b 	bl	800a908 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ada:	2300      	movs	r3, #0
 8009adc:	2200      	movs	r2, #0
 8009ade:	2100      	movs	r1, #0
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f001 fbda 	bl	800b29a <USBD_LL_PrepareReceive>
 8009ae6:	e018      	b.n	8009b1a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d10b      	bne.n	8009b0c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b0c:	2180      	movs	r1, #128	; 0x80
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f001 fb18 	bl	800b144 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 ff49 	bl	800a9ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d122      	bne.n	8009b6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f7ff fe98 	bl	800985a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009b32:	e01a      	b.n	8009b6a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d114      	bne.n	8009b6a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	7afa      	ldrb	r2, [r7, #11]
 8009b56:	4611      	mov	r1, r2
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	e000      	b.n	8009b6c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e02f      	b.n	8009c08 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00f      	beq.n	8009bd2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d009      	beq.n	8009bd2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6852      	ldr	r2, [r2, #4]
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	4611      	mov	r1, r2
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bd2:	2340      	movs	r3, #64	; 0x40
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f001 fa6e 	bl	800b0ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2240      	movs	r2, #64	; 0x40
 8009bea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bee:	2340      	movs	r3, #64	; 0x40
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2180      	movs	r1, #128	; 0x80
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f001 fa60 	bl	800b0ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2240      	movs	r2, #64	; 0x40
 8009c04:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d106      	bne.n	8009c7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e012      	b.n	8009cc8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d10b      	bne.n	8009cc6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cee:	8a3b      	ldrh	r3, [r7, #16]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	b21a      	sxth	r2, r3
 8009cf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	b21b      	sxth	r3, r3
 8009cfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d22:	2b40      	cmp	r3, #64	; 0x40
 8009d24:	d005      	beq.n	8009d32 <USBD_StdDevReq+0x26>
 8009d26:	2b40      	cmp	r3, #64	; 0x40
 8009d28:	d853      	bhi.n	8009dd2 <USBD_StdDevReq+0xc6>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <USBD_StdDevReq+0x3a>
 8009d2e:	2b20      	cmp	r3, #32
 8009d30:	d14f      	bne.n	8009dd2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	4798      	blx	r3
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]
      break;
 8009d44:	e04a      	b.n	8009ddc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	785b      	ldrb	r3, [r3, #1]
 8009d4a:	2b09      	cmp	r3, #9
 8009d4c:	d83b      	bhi.n	8009dc6 <USBD_StdDevReq+0xba>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <USBD_StdDevReq+0x48>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009da9 	.word	0x08009da9
 8009d58:	08009dbd 	.word	0x08009dbd
 8009d5c:	08009dc7 	.word	0x08009dc7
 8009d60:	08009db3 	.word	0x08009db3
 8009d64:	08009dc7 	.word	0x08009dc7
 8009d68:	08009d87 	.word	0x08009d87
 8009d6c:	08009d7d 	.word	0x08009d7d
 8009d70:	08009dc7 	.word	0x08009dc7
 8009d74:	08009d9f 	.word	0x08009d9f
 8009d78:	08009d91 	.word	0x08009d91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9de 	bl	800a140 <USBD_GetDescriptor>
          break;
 8009d84:	e024      	b.n	8009dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fb6d 	bl	800a468 <USBD_SetAddress>
          break;
 8009d8e:	e01f      	b.n	8009dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fbac 	bl	800a4f0 <USBD_SetConfig>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
          break;
 8009d9c:	e018      	b.n	8009dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fc4b 	bl	800a63c <USBD_GetConfig>
          break;
 8009da6:	e013      	b.n	8009dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fc7c 	bl	800a6a8 <USBD_GetStatus>
          break;
 8009db0:	e00e      	b.n	8009dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fcab 	bl	800a710 <USBD_SetFeature>
          break;
 8009dba:	e009      	b.n	8009dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fcba 	bl	800a738 <USBD_ClrFeature>
          break;
 8009dc4:	e004      	b.n	8009dd0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fd11 	bl	800a7f0 <USBD_CtlError>
          break;
 8009dce:	bf00      	nop
      }
      break;
 8009dd0:	e004      	b.n	8009ddc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fd0b 	bl	800a7f0 <USBD_CtlError>
      break;
 8009dda:	bf00      	nop
  }

  return ret;
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop

08009de8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dfe:	2b40      	cmp	r3, #64	; 0x40
 8009e00:	d005      	beq.n	8009e0e <USBD_StdItfReq+0x26>
 8009e02:	2b40      	cmp	r3, #64	; 0x40
 8009e04:	d82f      	bhi.n	8009e66 <USBD_StdItfReq+0x7e>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <USBD_StdItfReq+0x26>
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d12b      	bne.n	8009e66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d81d      	bhi.n	8009e58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	889b      	ldrh	r3, [r3, #4]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d813      	bhi.n	8009e4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	4798      	blx	r3
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	88db      	ldrh	r3, [r3, #6]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d110      	bne.n	8009e62 <USBD_StdItfReq+0x7a>
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10d      	bne.n	8009e62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fd9d 	bl	800a986 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e4c:	e009      	b.n	8009e62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fccd 	bl	800a7f0 <USBD_CtlError>
          break;
 8009e56:	e004      	b.n	8009e62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fcc8 	bl	800a7f0 <USBD_CtlError>
          break;
 8009e60:	e000      	b.n	8009e64 <USBD_StdItfReq+0x7c>
          break;
 8009e62:	bf00      	nop
      }
      break;
 8009e64:	e004      	b.n	8009e70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fcc1 	bl	800a7f0 <USBD_CtlError>
      break;
 8009e6e:	bf00      	nop
  }

  return ret;
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	889b      	ldrh	r3, [r3, #4]
 8009e8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e96:	2b40      	cmp	r3, #64	; 0x40
 8009e98:	d007      	beq.n	8009eaa <USBD_StdEPReq+0x30>
 8009e9a:	2b40      	cmp	r3, #64	; 0x40
 8009e9c:	f200 8145 	bhi.w	800a12a <USBD_StdEPReq+0x2b0>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00c      	beq.n	8009ebe <USBD_StdEPReq+0x44>
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	f040 8140 	bne.w	800a12a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	4798      	blx	r3
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
      break;
 8009ebc:	e13a      	b.n	800a134 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d007      	beq.n	8009ed6 <USBD_StdEPReq+0x5c>
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	f300 8129 	bgt.w	800a11e <USBD_StdEPReq+0x2a4>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d07f      	beq.n	8009fd0 <USBD_StdEPReq+0x156>
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d03c      	beq.n	8009f4e <USBD_StdEPReq+0xd4>
 8009ed4:	e123      	b.n	800a11e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d002      	beq.n	8009ee8 <USBD_StdEPReq+0x6e>
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d016      	beq.n	8009f14 <USBD_StdEPReq+0x9a>
 8009ee6:	e02c      	b.n	8009f42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00d      	beq.n	8009f0a <USBD_StdEPReq+0x90>
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b80      	cmp	r3, #128	; 0x80
 8009ef2:	d00a      	beq.n	8009f0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 f923 	bl	800b144 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009efe:	2180      	movs	r1, #128	; 0x80
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 f91f 	bl	800b144 <USBD_LL_StallEP>
 8009f06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f08:	e020      	b.n	8009f4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fc6f 	bl	800a7f0 <USBD_CtlError>
              break;
 8009f12:	e01b      	b.n	8009f4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	885b      	ldrh	r3, [r3, #2]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10e      	bne.n	8009f3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <USBD_StdEPReq+0xc0>
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b80      	cmp	r3, #128	; 0x80
 8009f26:	d008      	beq.n	8009f3a <USBD_StdEPReq+0xc0>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	88db      	ldrh	r3, [r3, #6]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f905 	bl	800b144 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fd23 	bl	800a986 <USBD_CtlSendStatus>

              break;
 8009f40:	e004      	b.n	8009f4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fc53 	bl	800a7f0 <USBD_CtlError>
              break;
 8009f4a:	bf00      	nop
          }
          break;
 8009f4c:	e0ec      	b.n	800a128 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d002      	beq.n	8009f60 <USBD_StdEPReq+0xe6>
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d016      	beq.n	8009f8c <USBD_StdEPReq+0x112>
 8009f5e:	e030      	b.n	8009fc2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00d      	beq.n	8009f82 <USBD_StdEPReq+0x108>
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b80      	cmp	r3, #128	; 0x80
 8009f6a:	d00a      	beq.n	8009f82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 f8e7 	bl	800b144 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f76:	2180      	movs	r1, #128	; 0x80
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 f8e3 	bl	800b144 <USBD_LL_StallEP>
 8009f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f80:	e025      	b.n	8009fce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fc33 	bl	800a7f0 <USBD_CtlError>
              break;
 8009f8a:	e020      	b.n	8009fce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	885b      	ldrh	r3, [r3, #2]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d11b      	bne.n	8009fcc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d004      	beq.n	8009fa8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 f8ed 	bl	800b182 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fcec 	bl	800a986 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009fc0:	e004      	b.n	8009fcc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fc13 	bl	800a7f0 <USBD_CtlError>
              break;
 8009fca:	e000      	b.n	8009fce <USBD_StdEPReq+0x154>
              break;
 8009fcc:	bf00      	nop
          }
          break;
 8009fce:	e0ab      	b.n	800a128 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d002      	beq.n	8009fe2 <USBD_StdEPReq+0x168>
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d032      	beq.n	800a046 <USBD_StdEPReq+0x1cc>
 8009fe0:	e097      	b.n	800a112 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d007      	beq.n	8009ff8 <USBD_StdEPReq+0x17e>
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b80      	cmp	r3, #128	; 0x80
 8009fec:	d004      	beq.n	8009ff8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fbfd 	bl	800a7f0 <USBD_CtlError>
                break;
 8009ff6:	e091      	b.n	800a11c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	da0b      	bge.n	800a018 <USBD_StdEPReq+0x19e>
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	3310      	adds	r3, #16
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	3304      	adds	r3, #4
 800a016:	e00b      	b.n	800a030 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	3304      	adds	r3, #4
 800a030:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2202      	movs	r2, #2
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fc47 	bl	800a8d2 <USBD_CtlSendData>
              break;
 800a044:	e06a      	b.n	800a11c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	da11      	bge.n	800a072 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	f003 020f 	and.w	r2, r3, #15
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	440b      	add	r3, r1
 800a060:	3324      	adds	r3, #36	; 0x24
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d117      	bne.n	800a098 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fbc0 	bl	800a7f0 <USBD_CtlError>
                  break;
 800a070:	e054      	b.n	800a11c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	f003 020f 	and.w	r2, r3, #15
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	4613      	mov	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	440b      	add	r3, r1
 800a084:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d104      	bne.n	800a098 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fbad 	bl	800a7f0 <USBD_CtlError>
                  break;
 800a096:	e041      	b.n	800a11c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	da0b      	bge.n	800a0b8 <USBD_StdEPReq+0x23e>
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	3310      	adds	r3, #16
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	e00b      	b.n	800a0d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0be:	4613      	mov	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <USBD_StdEPReq+0x264>
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	2b80      	cmp	r3, #128	; 0x80
 800a0dc:	d103      	bne.n	800a0e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e00e      	b.n	800a104 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 f868 	bl	800b1c0 <USBD_LL_IsStallEP>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	e002      	b.n	800a104 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2202      	movs	r2, #2
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fbe1 	bl	800a8d2 <USBD_CtlSendData>
              break;
 800a110:	e004      	b.n	800a11c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb6b 	bl	800a7f0 <USBD_CtlError>
              break;
 800a11a:	bf00      	nop
          }
          break;
 800a11c:	e004      	b.n	800a128 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fb65 	bl	800a7f0 <USBD_CtlError>
          break;
 800a126:	bf00      	nop
      }
      break;
 800a128:	e004      	b.n	800a134 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fb5f 	bl	800a7f0 <USBD_CtlError>
      break;
 800a132:	bf00      	nop
  }

  return ret;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a14a:	2300      	movs	r3, #0
 800a14c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	885b      	ldrh	r3, [r3, #2]
 800a15a:	0a1b      	lsrs	r3, r3, #8
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	3b01      	subs	r3, #1
 800a160:	2b0e      	cmp	r3, #14
 800a162:	f200 8152 	bhi.w	800a40a <USBD_GetDescriptor+0x2ca>
 800a166:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <USBD_GetDescriptor+0x2c>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a1dd 	.word	0x0800a1dd
 800a170:	0800a1f5 	.word	0x0800a1f5
 800a174:	0800a235 	.word	0x0800a235
 800a178:	0800a40b 	.word	0x0800a40b
 800a17c:	0800a40b 	.word	0x0800a40b
 800a180:	0800a3ab 	.word	0x0800a3ab
 800a184:	0800a3d7 	.word	0x0800a3d7
 800a188:	0800a40b 	.word	0x0800a40b
 800a18c:	0800a40b 	.word	0x0800a40b
 800a190:	0800a40b 	.word	0x0800a40b
 800a194:	0800a40b 	.word	0x0800a40b
 800a198:	0800a40b 	.word	0x0800a40b
 800a19c:	0800a40b 	.word	0x0800a40b
 800a1a0:	0800a40b 	.word	0x0800a40b
 800a1a4:	0800a1a9 	.word	0x0800a1a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00b      	beq.n	800a1cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	7c12      	ldrb	r2, [r2, #16]
 800a1c0:	f107 0108 	add.w	r1, r7, #8
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	4798      	blx	r3
 800a1c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1ca:	e126      	b.n	800a41a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fb0e 	bl	800a7f0 <USBD_CtlError>
        err++;
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	72fb      	strb	r3, [r7, #11]
      break;
 800a1da:	e11e      	b.n	800a41a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	7c12      	ldrb	r2, [r2, #16]
 800a1e8:	f107 0108 	add.w	r1, r7, #8
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4798      	blx	r3
 800a1f0:	60f8      	str	r0, [r7, #12]
      break;
 800a1f2:	e112      	b.n	800a41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	7c1b      	ldrb	r3, [r3, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10d      	bne.n	800a218 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a204:	f107 0208 	add.w	r2, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3301      	adds	r3, #1
 800a212:	2202      	movs	r2, #2
 800a214:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a216:	e100      	b.n	800a41a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	f107 0208 	add.w	r2, r7, #8
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3301      	adds	r3, #1
 800a22e:	2202      	movs	r2, #2
 800a230:	701a      	strb	r2, [r3, #0]
      break;
 800a232:	e0f2      	b.n	800a41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	885b      	ldrh	r3, [r3, #2]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b05      	cmp	r3, #5
 800a23c:	f200 80ac 	bhi.w	800a398 <USBD_GetDescriptor+0x258>
 800a240:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <USBD_GetDescriptor+0x108>)
 800a242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a246:	bf00      	nop
 800a248:	0800a261 	.word	0x0800a261
 800a24c:	0800a295 	.word	0x0800a295
 800a250:	0800a2c9 	.word	0x0800a2c9
 800a254:	0800a2fd 	.word	0x0800a2fd
 800a258:	0800a331 	.word	0x0800a331
 800a25c:	0800a365 	.word	0x0800a365
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	7c12      	ldrb	r2, [r2, #16]
 800a278:	f107 0108 	add.w	r1, r7, #8
 800a27c:	4610      	mov	r0, r2
 800a27e:	4798      	blx	r3
 800a280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a282:	e091      	b.n	800a3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fab2 	bl	800a7f0 <USBD_CtlError>
            err++;
 800a28c:	7afb      	ldrb	r3, [r7, #11]
 800a28e:	3301      	adds	r3, #1
 800a290:	72fb      	strb	r3, [r7, #11]
          break;
 800a292:	e089      	b.n	800a3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00b      	beq.n	800a2b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	7c12      	ldrb	r2, [r2, #16]
 800a2ac:	f107 0108 	add.w	r1, r7, #8
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	4798      	blx	r3
 800a2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2b6:	e077      	b.n	800a3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa98 	bl	800a7f0 <USBD_CtlError>
            err++;
 800a2c0:	7afb      	ldrb	r3, [r7, #11]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2c6:	e06f      	b.n	800a3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00b      	beq.n	800a2ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	7c12      	ldrb	r2, [r2, #16]
 800a2e0:	f107 0108 	add.w	r1, r7, #8
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	4798      	blx	r3
 800a2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ea:	e05d      	b.n	800a3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa7e 	bl	800a7f0 <USBD_CtlError>
            err++;
 800a2f4:	7afb      	ldrb	r3, [r7, #11]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2fa:	e055      	b.n	800a3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	7c12      	ldrb	r2, [r2, #16]
 800a314:	f107 0108 	add.w	r1, r7, #8
 800a318:	4610      	mov	r0, r2
 800a31a:	4798      	blx	r3
 800a31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a31e:	e043      	b.n	800a3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa64 	bl	800a7f0 <USBD_CtlError>
            err++;
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	3301      	adds	r3, #1
 800a32c:	72fb      	strb	r3, [r7, #11]
          break;
 800a32e:	e03b      	b.n	800a3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00b      	beq.n	800a354 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	7c12      	ldrb	r2, [r2, #16]
 800a348:	f107 0108 	add.w	r1, r7, #8
 800a34c:	4610      	mov	r0, r2
 800a34e:	4798      	blx	r3
 800a350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a352:	e029      	b.n	800a3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa4a 	bl	800a7f0 <USBD_CtlError>
            err++;
 800a35c:	7afb      	ldrb	r3, [r7, #11]
 800a35e:	3301      	adds	r3, #1
 800a360:	72fb      	strb	r3, [r7, #11]
          break;
 800a362:	e021      	b.n	800a3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00b      	beq.n	800a388 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	7c12      	ldrb	r2, [r2, #16]
 800a37c:	f107 0108 	add.w	r1, r7, #8
 800a380:	4610      	mov	r0, r2
 800a382:	4798      	blx	r3
 800a384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a386:	e00f      	b.n	800a3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fa30 	bl	800a7f0 <USBD_CtlError>
            err++;
 800a390:	7afb      	ldrb	r3, [r7, #11]
 800a392:	3301      	adds	r3, #1
 800a394:	72fb      	strb	r3, [r7, #11]
          break;
 800a396:	e007      	b.n	800a3a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa28 	bl	800a7f0 <USBD_CtlError>
          err++;
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a3a6:	bf00      	nop
      }
      break;
 800a3a8:	e037      	b.n	800a41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	7c1b      	ldrb	r3, [r3, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ba:	f107 0208 	add.w	r2, r7, #8
 800a3be:	4610      	mov	r0, r2
 800a3c0:	4798      	blx	r3
 800a3c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3c4:	e029      	b.n	800a41a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fa11 	bl	800a7f0 <USBD_CtlError>
        err++;
 800a3ce:	7afb      	ldrb	r3, [r7, #11]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3d4:	e021      	b.n	800a41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	7c1b      	ldrb	r3, [r3, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10d      	bne.n	800a3fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e6:	f107 0208 	add.w	r2, r7, #8
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	4798      	blx	r3
 800a3ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	2207      	movs	r2, #7
 800a3f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3f8:	e00f      	b.n	800a41a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f9f7 	bl	800a7f0 <USBD_CtlError>
        err++;
 800a402:	7afb      	ldrb	r3, [r7, #11]
 800a404:	3301      	adds	r3, #1
 800a406:	72fb      	strb	r3, [r7, #11]
      break;
 800a408:	e007      	b.n	800a41a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f9ef 	bl	800a7f0 <USBD_CtlError>
      err++;
 800a412:	7afb      	ldrb	r3, [r7, #11]
 800a414:	3301      	adds	r3, #1
 800a416:	72fb      	strb	r3, [r7, #11]
      break;
 800a418:	bf00      	nop
  }

  if (err != 0U)
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d11e      	bne.n	800a45e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	88db      	ldrh	r3, [r3, #6]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d016      	beq.n	800a456 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a428:	893b      	ldrh	r3, [r7, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00e      	beq.n	800a44c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	88da      	ldrh	r2, [r3, #6]
 800a432:	893b      	ldrh	r3, [r7, #8]
 800a434:	4293      	cmp	r3, r2
 800a436:	bf28      	it	cs
 800a438:	4613      	movcs	r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a43e:	893b      	ldrh	r3, [r7, #8]
 800a440:	461a      	mov	r2, r3
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fa44 	bl	800a8d2 <USBD_CtlSendData>
 800a44a:	e009      	b.n	800a460 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f9ce 	bl	800a7f0 <USBD_CtlError>
 800a454:	e004      	b.n	800a460 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fa95 	bl	800a986 <USBD_CtlSendStatus>
 800a45c:	e000      	b.n	800a460 <USBD_GetDescriptor+0x320>
    return;
 800a45e:	bf00      	nop
  }
}
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop

0800a468 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	889b      	ldrh	r3, [r3, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d131      	bne.n	800a4de <USBD_SetAddress+0x76>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	88db      	ldrh	r3, [r3, #6]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d12d      	bne.n	800a4de <USBD_SetAddress+0x76>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	885b      	ldrh	r3, [r3, #2]
 800a486:	2b7f      	cmp	r3, #127	; 0x7f
 800a488:	d829      	bhi.n	800a4de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	885b      	ldrh	r3, [r3, #2]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a494:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d104      	bne.n	800a4ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f9a3 	bl	800a7f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4aa:	e01d      	b.n	800a4e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	7bfa      	ldrb	r2, [r7, #15]
 800a4b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 feae 	bl	800b21a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa61 	bl	800a986 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d004      	beq.n	800a4d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4d2:	e009      	b.n	800a4e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4dc:	e004      	b.n	800a4e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f985 	bl	800a7f0 <USBD_CtlError>
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	885b      	ldrh	r3, [r3, #2]
 800a502:	b2da      	uxtb	r2, r3
 800a504:	4b4c      	ldr	r3, [pc, #304]	; (800a638 <USBD_SetConfig+0x148>)
 800a506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a508:	4b4b      	ldr	r3, [pc, #300]	; (800a638 <USBD_SetConfig+0x148>)
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d905      	bls.n	800a51c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f96c 	bl	800a7f0 <USBD_CtlError>
    return USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	e088      	b.n	800a62e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	d002      	beq.n	800a52e <USBD_SetConfig+0x3e>
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d025      	beq.n	800a578 <USBD_SetConfig+0x88>
 800a52c:	e071      	b.n	800a612 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a52e:	4b42      	ldr	r3, [pc, #264]	; (800a638 <USBD_SetConfig+0x148>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d01c      	beq.n	800a570 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a536:	4b40      	ldr	r3, [pc, #256]	; (800a638 <USBD_SetConfig+0x148>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a540:	4b3d      	ldr	r3, [pc, #244]	; (800a638 <USBD_SetConfig+0x148>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff f992 	bl	8009870 <USBD_SetClassConfig>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d004      	beq.n	800a560 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f949 	bl	800a7f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a55e:	e065      	b.n	800a62c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fa10 	bl	800a986 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2203      	movs	r2, #3
 800a56a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a56e:	e05d      	b.n	800a62c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fa08 	bl	800a986 <USBD_CtlSendStatus>
      break;
 800a576:	e059      	b.n	800a62c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a578:	4b2f      	ldr	r3, [pc, #188]	; (800a638 <USBD_SetConfig+0x148>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d112      	bne.n	800a5a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a588:	4b2b      	ldr	r3, [pc, #172]	; (800a638 <USBD_SetConfig+0x148>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a592:	4b29      	ldr	r3, [pc, #164]	; (800a638 <USBD_SetConfig+0x148>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff f985 	bl	80098a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f9f1 	bl	800a986 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a5a4:	e042      	b.n	800a62c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a5a6:	4b24      	ldr	r3, [pc, #144]	; (800a638 <USBD_SetConfig+0x148>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d02a      	beq.n	800a60a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff f973 	bl	80098a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a5c2:	4b1d      	ldr	r3, [pc, #116]	; (800a638 <USBD_SetConfig+0x148>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5cc:	4b1a      	ldr	r3, [pc, #104]	; (800a638 <USBD_SetConfig+0x148>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff f94c 	bl	8009870 <USBD_SetClassConfig>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00f      	beq.n	800a602 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f903 	bl	800a7f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff f958 	bl	80098a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a600:	e014      	b.n	800a62c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f9bf 	bl	800a986 <USBD_CtlSendStatus>
      break;
 800a608:	e010      	b.n	800a62c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f9bb 	bl	800a986 <USBD_CtlSendStatus>
      break;
 800a610:	e00c      	b.n	800a62c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f8eb 	bl	800a7f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <USBD_SetConfig+0x148>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff f941 	bl	80098a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a626:	2303      	movs	r3, #3
 800a628:	73fb      	strb	r3, [r7, #15]
      break;
 800a62a:	bf00      	nop
  }

  return ret;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20000228 	.word	0x20000228

0800a63c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	88db      	ldrh	r3, [r3, #6]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d004      	beq.n	800a658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f8cd 	bl	800a7f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a656:	e023      	b.n	800a6a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	2b02      	cmp	r3, #2
 800a662:	dc02      	bgt.n	800a66a <USBD_GetConfig+0x2e>
 800a664:	2b00      	cmp	r3, #0
 800a666:	dc03      	bgt.n	800a670 <USBD_GetConfig+0x34>
 800a668:	e015      	b.n	800a696 <USBD_GetConfig+0x5a>
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d00b      	beq.n	800a686 <USBD_GetConfig+0x4a>
 800a66e:	e012      	b.n	800a696 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3308      	adds	r3, #8
 800a67a:	2201      	movs	r2, #1
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f927 	bl	800a8d2 <USBD_CtlSendData>
        break;
 800a684:	e00c      	b.n	800a6a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3304      	adds	r3, #4
 800a68a:	2201      	movs	r2, #1
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f91f 	bl	800a8d2 <USBD_CtlSendData>
        break;
 800a694:	e004      	b.n	800a6a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f8a9 	bl	800a7f0 <USBD_CtlError>
        break;
 800a69e:	bf00      	nop
}
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d81e      	bhi.n	800a6fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	88db      	ldrh	r3, [r3, #6]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d004      	beq.n	800a6d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f890 	bl	800a7f0 <USBD_CtlError>
        break;
 800a6d0:	e01a      	b.n	800a708 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f043 0202 	orr.w	r2, r3, #2
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f8eb 	bl	800a8d2 <USBD_CtlSendData>
      break;
 800a6fc:	e004      	b.n	800a708 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f875 	bl	800a7f0 <USBD_CtlError>
      break;
 800a706:	bf00      	nop
  }
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	885b      	ldrh	r3, [r3, #2]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d106      	bne.n	800a730 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f92b 	bl	800a986 <USBD_CtlSendStatus>
  }
}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	3b01      	subs	r3, #1
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d80b      	bhi.n	800a768 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	885b      	ldrh	r3, [r3, #2]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d10c      	bne.n	800a772 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f910 	bl	800a986 <USBD_CtlSendStatus>
      }
      break;
 800a766:	e004      	b.n	800a772 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f840 	bl	800a7f0 <USBD_CtlError>
      break;
 800a770:	e000      	b.n	800a774 <USBD_ClrFeature+0x3c>
      break;
 800a772:	bf00      	nop
  }
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	781a      	ldrb	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3301      	adds	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fa92 	bl	8009cd0 <SWAPBYTE>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fa85 	bl	8009cd0 <SWAPBYTE>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7ff fa78 	bl	8009cd0 <SWAPBYTE>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	80da      	strh	r2, [r3, #6]
}
 800a7e8:	bf00      	nop
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7fa:	2180      	movs	r1, #128	; 0x80
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fca1 	bl	800b144 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a802:	2100      	movs	r1, #0
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fc9d 	bl	800b144 <USBD_LL_StallEP>
}
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b086      	sub	sp, #24
 800a816:	af00      	add	r7, sp, #0
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d036      	beq.n	800a896 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a82c:	6938      	ldr	r0, [r7, #16]
 800a82e:	f000 f836 	bl	800a89e <USBD_GetLen>
 800a832:	4603      	mov	r3, r0
 800a834:	3301      	adds	r3, #1
 800a836:	b29b      	uxth	r3, r3
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	4413      	add	r3, r2
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	7812      	ldrb	r2, [r2, #0]
 800a84a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	3301      	adds	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	4413      	add	r3, r2
 800a858:	2203      	movs	r2, #3
 800a85a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	3301      	adds	r3, #1
 800a860:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a862:	e013      	b.n	800a88c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	4413      	add	r3, r2
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	7812      	ldrb	r2, [r2, #0]
 800a86e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	3301      	adds	r3, #1
 800a874:	613b      	str	r3, [r7, #16]
    idx++;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	3301      	adds	r3, #1
 800a87a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4413      	add	r3, r2
 800a882:	2200      	movs	r2, #0
 800a884:	701a      	strb	r2, [r3, #0]
    idx++;
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	3301      	adds	r3, #1
 800a88a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e7      	bne.n	800a864 <USBD_GetString+0x52>
 800a894:	e000      	b.n	800a898 <USBD_GetString+0x86>
    return;
 800a896:	bf00      	nop
  }
}
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a8ae:	e005      	b.n	800a8bc <USBD_GetLen+0x1e>
  {
    len++;
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1f5      	bne.n	800a8b0 <USBD_GetLen+0x12>
  }

  return len;
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 fcad 	bl	800b258 <USBD_LL_Transmit>

  return USBD_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	2100      	movs	r1, #0
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 fc9c 	bl	800b258 <USBD_LL_Transmit>

  return USBD_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2203      	movs	r2, #3
 800a93a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	2100      	movs	r1, #0
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 fca0 	bl	800b29a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	2100      	movs	r1, #0
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 fc8f 	bl	800b29a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2204      	movs	r2, #4
 800a992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a996:	2300      	movs	r3, #0
 800a998:	2200      	movs	r2, #0
 800a99a:	2100      	movs	r1, #0
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fc5b 	bl	800b258 <USBD_LL_Transmit>

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2205      	movs	r2, #5
 800a9b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9bc:	2300      	movs	r3, #0
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fc69 	bl	800b29a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4912      	ldr	r1, [pc, #72]	; (800aa24 <MX_USB_Device_Init+0x50>)
 800a9dc:	4812      	ldr	r0, [pc, #72]	; (800aa28 <MX_USB_Device_Init+0x54>)
 800a9de:	f7fe fed9 	bl	8009794 <USBD_Init>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a9e8:	f7f7 f9ee 	bl	8001dc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a9ec:	490f      	ldr	r1, [pc, #60]	; (800aa2c <MX_USB_Device_Init+0x58>)
 800a9ee:	480e      	ldr	r0, [pc, #56]	; (800aa28 <MX_USB_Device_Init+0x54>)
 800a9f0:	f7fe ff00 	bl	80097f4 <USBD_RegisterClass>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a9fa:	f7f7 f9e5 	bl	8001dc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a9fe:	490c      	ldr	r1, [pc, #48]	; (800aa30 <MX_USB_Device_Init+0x5c>)
 800aa00:	4809      	ldr	r0, [pc, #36]	; (800aa28 <MX_USB_Device_Init+0x54>)
 800aa02:	f7fe fe21 	bl	8009648 <USBD_CDC_RegisterInterface>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800aa0c:	f7f7 f9dc 	bl	8001dc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aa10:	4805      	ldr	r0, [pc, #20]	; (800aa28 <MX_USB_Device_Init+0x54>)
 800aa12:	f7fe ff16 	bl	8009842 <USBD_Start>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aa1c:	f7f7 f9d4 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aa20:	bf00      	nop
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	2000014c 	.word	0x2000014c
 800aa28:	20000748 	.word	0x20000748
 800aa2c:	20000034 	.word	0x20000034
 800aa30:	20000138 	.word	0x20000138

0800aa34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4905      	ldr	r1, [pc, #20]	; (800aa50 <CDC_Init_FS+0x1c>)
 800aa3c:	4805      	ldr	r0, [pc, #20]	; (800aa54 <CDC_Init_FS+0x20>)
 800aa3e:	f7fe fe18 	bl	8009672 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa42:	4905      	ldr	r1, [pc, #20]	; (800aa58 <CDC_Init_FS+0x24>)
 800aa44:	4803      	ldr	r0, [pc, #12]	; (800aa54 <CDC_Init_FS+0x20>)
 800aa46:	f7fe fe32 	bl	80096ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20000e00 	.word	0x20000e00
 800aa54:	20000748 	.word	0x20000748
 800aa58:	20000a18 	.word	0x20000a18

0800aa5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	6039      	str	r1, [r7, #0]
 800aa76:	71fb      	strb	r3, [r7, #7]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	2b23      	cmp	r3, #35	; 0x23
 800aa80:	d84a      	bhi.n	800ab18 <CDC_Control_FS+0xac>
 800aa82:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <CDC_Control_FS+0x1c>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800ab19 	.word	0x0800ab19
 800aa8c:	0800ab19 	.word	0x0800ab19
 800aa90:	0800ab19 	.word	0x0800ab19
 800aa94:	0800ab19 	.word	0x0800ab19
 800aa98:	0800ab19 	.word	0x0800ab19
 800aa9c:	0800ab19 	.word	0x0800ab19
 800aaa0:	0800ab19 	.word	0x0800ab19
 800aaa4:	0800ab19 	.word	0x0800ab19
 800aaa8:	0800ab19 	.word	0x0800ab19
 800aaac:	0800ab19 	.word	0x0800ab19
 800aab0:	0800ab19 	.word	0x0800ab19
 800aab4:	0800ab19 	.word	0x0800ab19
 800aab8:	0800ab19 	.word	0x0800ab19
 800aabc:	0800ab19 	.word	0x0800ab19
 800aac0:	0800ab19 	.word	0x0800ab19
 800aac4:	0800ab19 	.word	0x0800ab19
 800aac8:	0800ab19 	.word	0x0800ab19
 800aacc:	0800ab19 	.word	0x0800ab19
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab19 	.word	0x0800ab19
 800aad8:	0800ab19 	.word	0x0800ab19
 800aadc:	0800ab19 	.word	0x0800ab19
 800aae0:	0800ab19 	.word	0x0800ab19
 800aae4:	0800ab19 	.word	0x0800ab19
 800aae8:	0800ab19 	.word	0x0800ab19
 800aaec:	0800ab19 	.word	0x0800ab19
 800aaf0:	0800ab19 	.word	0x0800ab19
 800aaf4:	0800ab19 	.word	0x0800ab19
 800aaf8:	0800ab19 	.word	0x0800ab19
 800aafc:	0800ab19 	.word	0x0800ab19
 800ab00:	0800ab19 	.word	0x0800ab19
 800ab04:	0800ab19 	.word	0x0800ab19
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab19 	.word	0x0800ab19
 800ab10:	0800ab19 	.word	0x0800ab19
 800ab14:	0800ab19 	.word	0x0800ab19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab18:	bf00      	nop
  }

  return (USBD_OK);
 800ab1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7f5 ffed 	bl	8000b14 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	4805      	ldr	r0, [pc, #20]	; (800ab54 <CDC_Receive_FS+0x2c>)
 800ab3e:	f7fe fdb6 	bl	80096ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab42:	4804      	ldr	r0, [pc, #16]	; (800ab54 <CDC_Receive_FS+0x2c>)
 800ab44:	f7fe fdfc 	bl	8009740 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	20000748 	.word	0x20000748

0800ab58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab68:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <CDC_Transmit_FS+0x48>)
 800ab6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e00b      	b.n	800ab96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab7e:	887b      	ldrh	r3, [r7, #2]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	4806      	ldr	r0, [pc, #24]	; (800aba0 <CDC_Transmit_FS+0x48>)
 800ab86:	f7fe fd74 	bl	8009672 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab8a:	4805      	ldr	r0, [pc, #20]	; (800aba0 <CDC_Transmit_FS+0x48>)
 800ab8c:	f7fe fda8 	bl	80096e0 <USBD_CDC_TransmitPacket>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000748 	.word	0x20000748

0800aba4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4613      	mov	r3, r2
 800abb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800abb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
	...

0800abc8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	6039      	str	r1, [r7, #0]
 800abd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2212      	movs	r2, #18
 800abd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800abda:	4b03      	ldr	r3, [pc, #12]	; (800abe8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800abdc:	4618      	mov	r0, r3
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	2000016c 	.word	0x2000016c

0800abec <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2204      	movs	r2, #4
 800abfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abfe:	4b03      	ldr	r3, [pc, #12]	; (800ac0c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	20000180 	.word	0x20000180

0800ac10 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4907      	ldr	r1, [pc, #28]	; (800ac44 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac26:	4808      	ldr	r0, [pc, #32]	; (800ac48 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac28:	f7ff fdf3 	bl	800a812 <USBD_GetString>
 800ac2c:	e004      	b.n	800ac38 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	4904      	ldr	r1, [pc, #16]	; (800ac44 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac32:	4805      	ldr	r0, [pc, #20]	; (800ac48 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac34:	f7ff fded 	bl	800a812 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac38:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	200011e8 	.word	0x200011e8
 800ac48:	0800b490 	.word	0x0800b490

0800ac4c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	4904      	ldr	r1, [pc, #16]	; (800ac6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac5c:	4804      	ldr	r0, [pc, #16]	; (800ac70 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac5e:	f7ff fdd8 	bl	800a812 <USBD_GetString>
  return USBD_StrDesc;
 800ac62:	4b02      	ldr	r3, [pc, #8]	; (800ac6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	200011e8 	.word	0x200011e8
 800ac70:	0800b4a8 	.word	0x0800b4a8

0800ac74 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	6039      	str	r1, [r7, #0]
 800ac7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	221a      	movs	r2, #26
 800ac84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac86:	f000 f843 	bl	800ad10 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac8a:	4b02      	ldr	r3, [pc, #8]	; (800ac94 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20000184 	.word	0x20000184

0800ac98 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d105      	bne.n	800acb6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	4907      	ldr	r1, [pc, #28]	; (800accc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800acae:	4808      	ldr	r0, [pc, #32]	; (800acd0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800acb0:	f7ff fdaf 	bl	800a812 <USBD_GetString>
 800acb4:	e004      	b.n	800acc0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	4904      	ldr	r1, [pc, #16]	; (800accc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800acba:	4805      	ldr	r0, [pc, #20]	; (800acd0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800acbc:	f7ff fda9 	bl	800a812 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acc0:	4b02      	ldr	r3, [pc, #8]	; (800accc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	200011e8 	.word	0x200011e8
 800acd0:	0800b4bc 	.word	0x0800b4bc

0800acd4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d105      	bne.n	800acf2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4907      	ldr	r1, [pc, #28]	; (800ad08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acea:	4808      	ldr	r0, [pc, #32]	; (800ad0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acec:	f7ff fd91 	bl	800a812 <USBD_GetString>
 800acf0:	e004      	b.n	800acfc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4904      	ldr	r1, [pc, #16]	; (800ad08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acf6:	4805      	ldr	r0, [pc, #20]	; (800ad0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acf8:	f7ff fd8b 	bl	800a812 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acfc:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200011e8 	.word	0x200011e8
 800ad0c:	0800b4c8 	.word	0x0800b4c8

0800ad10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad16:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <Get_SerialNum+0x44>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad1c:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <Get_SerialNum+0x48>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad22:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <Get_SerialNum+0x4c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d009      	beq.n	800ad4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad36:	2208      	movs	r2, #8
 800ad38:	4909      	ldr	r1, [pc, #36]	; (800ad60 <Get_SerialNum+0x50>)
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 f814 	bl	800ad68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad40:	2204      	movs	r2, #4
 800ad42:	4908      	ldr	r1, [pc, #32]	; (800ad64 <Get_SerialNum+0x54>)
 800ad44:	68b8      	ldr	r0, [r7, #8]
 800ad46:	f000 f80f 	bl	800ad68 <IntToUnicode>
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	1fff7590 	.word	0x1fff7590
 800ad58:	1fff7594 	.word	0x1fff7594
 800ad5c:	1fff7598 	.word	0x1fff7598
 800ad60:	20000186 	.word	0x20000186
 800ad64:	20000196 	.word	0x20000196

0800ad68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	4613      	mov	r3, r2
 800ad74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
 800ad7e:	e027      	b.n	800add0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	0f1b      	lsrs	r3, r3, #28
 800ad84:	2b09      	cmp	r3, #9
 800ad86:	d80b      	bhi.n	800ada0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	0f1b      	lsrs	r3, r3, #28
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	4619      	mov	r1, r3
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	440b      	add	r3, r1
 800ad98:	3230      	adds	r2, #48	; 0x30
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	e00a      	b.n	800adb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	0f1b      	lsrs	r3, r3, #28
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	7dfb      	ldrb	r3, [r7, #23]
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	4619      	mov	r1, r3
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	440b      	add	r3, r1
 800adb0:	3237      	adds	r2, #55	; 0x37
 800adb2:	b2d2      	uxtb	r2, r2
 800adb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	005b      	lsls	r3, r3, #1
 800adc0:	3301      	adds	r3, #1
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	4413      	add	r3, r2
 800adc6:	2200      	movs	r2, #0
 800adc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	3301      	adds	r3, #1
 800adce:	75fb      	strb	r3, [r7, #23]
 800add0:	7dfa      	ldrb	r2, [r7, #23]
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	429a      	cmp	r2, r3
 800add6:	d3d3      	bcc.n	800ad80 <IntToUnicode+0x18>
  }
}
 800add8:	bf00      	nop
 800adda:	bf00      	nop
 800addc:	371c      	adds	r7, #28
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
	...

0800ade8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b094      	sub	sp, #80	; 0x50
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800adf0:	f107 030c 	add.w	r3, r7, #12
 800adf4:	2244      	movs	r2, #68	; 0x44
 800adf6:	2100      	movs	r1, #0
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 fb35 	bl	800b468 <memset>
  if(pcdHandle->Instance==USB)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a19      	ldr	r2, [pc, #100]	; (800ae68 <HAL_PCD_MspInit+0x80>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d12b      	bne.n	800ae60 <HAL_PCD_MspInit+0x78>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ae08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ae0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae12:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ae14:	f107 030c 	add.w	r3, r7, #12
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fa fa83 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ae24:	f7f6 ffd0 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae28:	4b10      	ldr	r3, [pc, #64]	; (800ae6c <HAL_PCD_MspInit+0x84>)
 800ae2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2c:	4a0f      	ldr	r2, [pc, #60]	; (800ae6c <HAL_PCD_MspInit+0x84>)
 800ae2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae32:	6593      	str	r3, [r2, #88]	; 0x58
 800ae34:	4b0d      	ldr	r3, [pc, #52]	; (800ae6c <HAL_PCD_MspInit+0x84>)
 800ae36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae3c:	60bb      	str	r3, [r7, #8]
 800ae3e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800ae40:	2200      	movs	r2, #0
 800ae42:	2100      	movs	r1, #0
 800ae44:	2013      	movs	r0, #19
 800ae46:	f7f7 fc7c 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800ae4a:	2013      	movs	r0, #19
 800ae4c:	f7f7 fc93 	bl	8002776 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae50:	2200      	movs	r2, #0
 800ae52:	2100      	movs	r1, #0
 800ae54:	2014      	movs	r0, #20
 800ae56:	f7f7 fc74 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae5a:	2014      	movs	r0, #20
 800ae5c:	f7f7 fc8b 	bl	8002776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae60:	bf00      	nop
 800ae62:	3750      	adds	r7, #80	; 0x50
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	40005c00 	.word	0x40005c00
 800ae6c:	40021000 	.word	0x40021000

0800ae70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae84:	4619      	mov	r1, r3
 800ae86:	4610      	mov	r0, r2
 800ae88:	f7fe fd26 	bl	80098d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800aea6:	78fa      	ldrb	r2, [r7, #3]
 800aea8:	6879      	ldr	r1, [r7, #4]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	00db      	lsls	r3, r3, #3
 800aeb2:	440b      	add	r3, r1
 800aeb4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	4619      	mov	r1, r3
 800aebe:	f7fe fd60 	bl	8009982 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800aedc:	78fa      	ldrb	r2, [r7, #3]
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	440b      	add	r3, r1
 800aeea:	333c      	adds	r3, #60	; 0x3c
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	78fb      	ldrb	r3, [r7, #3]
 800aef0:	4619      	mov	r1, r3
 800aef2:	f7fe fda9 	bl	8009a48 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe febd 	bl	8009c8c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af22:	2301      	movs	r3, #1
 800af24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d001      	beq.n	800af32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af2e:	f7f6 ff4b 	bl	8001dc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af38:	7bfa      	ldrb	r2, [r7, #15]
 800af3a:	4611      	mov	r1, r2
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fe fe67 	bl	8009c10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe fe13 	bl	8009b74 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fe62 	bl	8009c30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af74:	4b04      	ldr	r3, [pc, #16]	; (800af88 <HAL_PCD_SuspendCallback+0x30>)
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	4a03      	ldr	r2, [pc, #12]	; (800af88 <HAL_PCD_SuspendCallback+0x30>)
 800af7a:	f043 0306 	orr.w	r3, r3, #6
 800af7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	e000ed00 	.word	0xe000ed00

0800af8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d007      	beq.n	800afac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af9c:	4b08      	ldr	r3, [pc, #32]	; (800afc0 <HAL_PCD_ResumeCallback+0x34>)
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	4a07      	ldr	r2, [pc, #28]	; (800afc0 <HAL_PCD_ResumeCallback+0x34>)
 800afa2:	f023 0306 	bic.w	r3, r3, #6
 800afa6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800afa8:	f000 f9fa 	bl	800b3a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe fe52 	bl	8009c5c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	e000ed00 	.word	0xe000ed00

0800afc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800afcc:	4a2b      	ldr	r2, [pc, #172]	; (800b07c <USBD_LL_Init+0xb8>)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a29      	ldr	r2, [pc, #164]	; (800b07c <USBD_LL_Init+0xb8>)
 800afd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800afdc:	4b27      	ldr	r3, [pc, #156]	; (800b07c <USBD_LL_Init+0xb8>)
 800afde:	4a28      	ldr	r2, [pc, #160]	; (800b080 <USBD_LL_Init+0xbc>)
 800afe0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afe2:	4b26      	ldr	r3, [pc, #152]	; (800b07c <USBD_LL_Init+0xb8>)
 800afe4:	2208      	movs	r2, #8
 800afe6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afe8:	4b24      	ldr	r3, [pc, #144]	; (800b07c <USBD_LL_Init+0xb8>)
 800afea:	2202      	movs	r2, #2
 800afec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afee:	4b23      	ldr	r3, [pc, #140]	; (800b07c <USBD_LL_Init+0xb8>)
 800aff0:	2202      	movs	r2, #2
 800aff2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aff4:	4b21      	ldr	r3, [pc, #132]	; (800b07c <USBD_LL_Init+0xb8>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800affa:	4b20      	ldr	r3, [pc, #128]	; (800b07c <USBD_LL_Init+0xb8>)
 800affc:	2200      	movs	r2, #0
 800affe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b000:	4b1e      	ldr	r3, [pc, #120]	; (800b07c <USBD_LL_Init+0xb8>)
 800b002:	2200      	movs	r2, #0
 800b004:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b006:	4b1d      	ldr	r3, [pc, #116]	; (800b07c <USBD_LL_Init+0xb8>)
 800b008:	2200      	movs	r2, #0
 800b00a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b00c:	481b      	ldr	r0, [pc, #108]	; (800b07c <USBD_LL_Init+0xb8>)
 800b00e:	f7f7 fea5 	bl	8002d5c <HAL_PCD_Init>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b018:	f7f6 fed6 	bl	8001dc8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b022:	2318      	movs	r3, #24
 800b024:	2200      	movs	r2, #0
 800b026:	2100      	movs	r1, #0
 800b028:	f7f9 fb5e 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b032:	2358      	movs	r3, #88	; 0x58
 800b034:	2200      	movs	r2, #0
 800b036:	2180      	movs	r1, #128	; 0x80
 800b038:	f7f9 fb56 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b042:	23c0      	movs	r3, #192	; 0xc0
 800b044:	2200      	movs	r2, #0
 800b046:	2181      	movs	r1, #129	; 0x81
 800b048:	f7f9 fb4e 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b052:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b056:	2200      	movs	r2, #0
 800b058:	2101      	movs	r1, #1
 800b05a:	f7f9 fb45 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b064:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b068:	2200      	movs	r2, #0
 800b06a:	2182      	movs	r1, #130	; 0x82
 800b06c:	f7f9 fb3c 	bl	80046e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	200013e8 	.word	0x200013e8
 800b080:	40005c00 	.word	0x40005c00

0800b084 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f7 ff43 	bl	8002f26 <HAL_PCD_Start>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f980 	bl	800b3ac <USBD_Get_USB_Status>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	70fb      	strb	r3, [r7, #3]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70bb      	strb	r3, [r7, #2]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0e2:	78bb      	ldrb	r3, [r7, #2]
 800b0e4:	883a      	ldrh	r2, [r7, #0]
 800b0e6:	78f9      	ldrb	r1, [r7, #3]
 800b0e8:	f7f8 f88b 	bl	8003202 <HAL_PCD_EP_Open>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 f95a 	bl	800b3ac <USBD_Get_USB_Status>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b084      	sub	sp, #16
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b120:	78fa      	ldrb	r2, [r7, #3]
 800b122:	4611      	mov	r1, r2
 800b124:	4618      	mov	r0, r3
 800b126:	f7f8 f8d2 	bl	80032ce <HAL_PCD_EP_Close>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	4618      	mov	r0, r3
 800b132:	f000 f93b 	bl	800b3ac <USBD_Get_USB_Status>
 800b136:	4603      	mov	r3, r0
 800b138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b15e:	78fa      	ldrb	r2, [r7, #3]
 800b160:	4611      	mov	r1, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f7f8 f993 	bl	800348e <HAL_PCD_EP_SetStall>
 800b168:	4603      	mov	r3, r0
 800b16a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f91c 	bl	800b3ac <USBD_Get_USB_Status>
 800b174:	4603      	mov	r3, r0
 800b176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b178:	7bbb      	ldrb	r3, [r7, #14]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	460b      	mov	r3, r1
 800b18c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b19c:	78fa      	ldrb	r2, [r7, #3]
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7f8 f9c6 	bl	8003532 <HAL_PCD_EP_ClrStall>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 f8fd 	bl	800b3ac <USBD_Get_USB_Status>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da0c      	bge.n	800b1f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1dc:	78fb      	ldrb	r3, [r7, #3]
 800b1de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1e2:	68f9      	ldr	r1, [r7, #12]
 800b1e4:	1c5a      	adds	r2, r3, #1
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	e00b      	b.n	800b20e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1f6:	78fb      	ldrb	r3, [r7, #3]
 800b1f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1fc:	68f9      	ldr	r1, [r7, #12]
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	00db      	lsls	r3, r3, #3
 800b206:	440b      	add	r3, r1
 800b208:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b20c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b234:	78fa      	ldrb	r2, [r7, #3]
 800b236:	4611      	mov	r1, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	f7f7 ffbd 	bl	80031b8 <HAL_PCD_SetAddress>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	4618      	mov	r0, r3
 800b246:	f000 f8b1 	bl	800b3ac <USBD_Get_USB_Status>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	603b      	str	r3, [r7, #0]
 800b264:	460b      	mov	r3, r1
 800b266:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b276:	7af9      	ldrb	r1, [r7, #11]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	f7f8 f8c4 	bl	8003408 <HAL_PCD_EP_Transmit>
 800b280:	4603      	mov	r3, r0
 800b282:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	4618      	mov	r0, r3
 800b288:	f000 f890 	bl	800b3ac <USBD_Get_USB_Status>
 800b28c:	4603      	mov	r3, r0
 800b28e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b290:	7dbb      	ldrb	r3, [r7, #22]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2b8:	7af9      	ldrb	r1, [r7, #11]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	f7f8 f84e 	bl	800335e <HAL_PCD_EP_Receive>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f86f 	bl	800b3ac <USBD_Get_USB_Status>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2ee:	78fa      	ldrb	r2, [r7, #3]
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f8 f870 	bl	80033d8 <HAL_PCD_EP_GetRxCount>
 800b2f8:	4603      	mov	r3, r0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
	...

0800b304 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <HAL_PCDEx_LPM_Callback+0x18>
 800b316:	2b01      	cmp	r3, #1
 800b318:	d013      	beq.n	800b342 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b31a:	e023      	b.n	800b364 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d007      	beq.n	800b334 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b324:	f000 f83c 	bl	800b3a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b328:	4b10      	ldr	r3, [pc, #64]	; (800b36c <HAL_PCDEx_LPM_Callback+0x68>)
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	4a0f      	ldr	r2, [pc, #60]	; (800b36c <HAL_PCDEx_LPM_Callback+0x68>)
 800b32e:	f023 0306 	bic.w	r3, r3, #6
 800b332:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fc8e 	bl	8009c5c <USBD_LL_Resume>
    break;
 800b340:	e010      	b.n	800b364 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fe fc71 	bl	8009c30 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d005      	beq.n	800b362 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b356:	4b05      	ldr	r3, [pc, #20]	; (800b36c <HAL_PCDEx_LPM_Callback+0x68>)
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	4a04      	ldr	r2, [pc, #16]	; (800b36c <HAL_PCDEx_LPM_Callback+0x68>)
 800b35c:	f043 0306 	orr.w	r3, r3, #6
 800b360:	6113      	str	r3, [r2, #16]
    break;
 800b362:	bf00      	nop
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	e000ed00 	.word	0xe000ed00

0800b370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b378:	4b03      	ldr	r3, [pc, #12]	; (800b388 <USBD_static_malloc+0x18>)
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	2000022c 	.word	0x2000022c

0800b38c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]

}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b3a4:	f7f6 f836 	bl	8001414 <SystemClock_Config>
}
 800b3a8:	bf00      	nop
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	2b03      	cmp	r3, #3
 800b3be:	d817      	bhi.n	800b3f0 <USBD_Get_USB_Status+0x44>
 800b3c0:	a201      	add	r2, pc, #4	; (adr r2, 800b3c8 <USBD_Get_USB_Status+0x1c>)
 800b3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c6:	bf00      	nop
 800b3c8:	0800b3d9 	.word	0x0800b3d9
 800b3cc:	0800b3df 	.word	0x0800b3df
 800b3d0:	0800b3e5 	.word	0x0800b3e5
 800b3d4:	0800b3eb 	.word	0x0800b3eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
    break;
 800b3dc:	e00b      	b.n	800b3f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e2:	e008      	b.n	800b3f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e8:	e005      	b.n	800b3f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ee:	e002      	b.n	800b3f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f4:	bf00      	nop
  }
  return usb_status;
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <__libc_init_array>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	4d0d      	ldr	r5, [pc, #52]	; (800b43c <__libc_init_array+0x38>)
 800b408:	4c0d      	ldr	r4, [pc, #52]	; (800b440 <__libc_init_array+0x3c>)
 800b40a:	1b64      	subs	r4, r4, r5
 800b40c:	10a4      	asrs	r4, r4, #2
 800b40e:	2600      	movs	r6, #0
 800b410:	42a6      	cmp	r6, r4
 800b412:	d109      	bne.n	800b428 <__libc_init_array+0x24>
 800b414:	4d0b      	ldr	r5, [pc, #44]	; (800b444 <__libc_init_array+0x40>)
 800b416:	4c0c      	ldr	r4, [pc, #48]	; (800b448 <__libc_init_array+0x44>)
 800b418:	f000 f82e 	bl	800b478 <_init>
 800b41c:	1b64      	subs	r4, r4, r5
 800b41e:	10a4      	asrs	r4, r4, #2
 800b420:	2600      	movs	r6, #0
 800b422:	42a6      	cmp	r6, r4
 800b424:	d105      	bne.n	800b432 <__libc_init_array+0x2e>
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42c:	4798      	blx	r3
 800b42e:	3601      	adds	r6, #1
 800b430:	e7ee      	b.n	800b410 <__libc_init_array+0xc>
 800b432:	f855 3b04 	ldr.w	r3, [r5], #4
 800b436:	4798      	blx	r3
 800b438:	3601      	adds	r6, #1
 800b43a:	e7f2      	b.n	800b422 <__libc_init_array+0x1e>
 800b43c:	0800b4e8 	.word	0x0800b4e8
 800b440:	0800b4e8 	.word	0x0800b4e8
 800b444:	0800b4e8 	.word	0x0800b4e8
 800b448:	0800b4ec 	.word	0x0800b4ec

0800b44c <memcpy>:
 800b44c:	440a      	add	r2, r1
 800b44e:	4291      	cmp	r1, r2
 800b450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b454:	d100      	bne.n	800b458 <memcpy+0xc>
 800b456:	4770      	bx	lr
 800b458:	b510      	push	{r4, lr}
 800b45a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b45e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b462:	4291      	cmp	r1, r2
 800b464:	d1f9      	bne.n	800b45a <memcpy+0xe>
 800b466:	bd10      	pop	{r4, pc}

0800b468 <memset>:
 800b468:	4402      	add	r2, r0
 800b46a:	4603      	mov	r3, r0
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d100      	bne.n	800b472 <memset+0xa>
 800b470:	4770      	bx	lr
 800b472:	f803 1b01 	strb.w	r1, [r3], #1
 800b476:	e7f9      	b.n	800b46c <memset+0x4>

0800b478 <_init>:
 800b478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47a:	bf00      	nop
 800b47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b47e:	bc08      	pop	{r3}
 800b480:	469e      	mov	lr, r3
 800b482:	4770      	bx	lr

0800b484 <_fini>:
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b486:	bf00      	nop
 800b488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b48a:	bc08      	pop	{r3}
 800b48c:	469e      	mov	lr, r3
 800b48e:	4770      	bx	lr
