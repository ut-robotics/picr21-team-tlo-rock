
tlo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b29c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b474  0800b474  0001b474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4cc  0800b4cc  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4cc  0800b4cc  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4cc  0800b4cc  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4cc  0800b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d0  0800b4d0  0001b4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  200001a0  0800b674  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016dc  0800b674  000216dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205e3  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  000407b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021731  00000000  00000000  00047048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a610  00000000  00000000  00068779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a2a  00000000  00000000  00082d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c7b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f20  00000000  00000000  0014c808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b45c 	.word	0x0800b45c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0800b45c 	.word	0x0800b45c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <CDC_On_Receive>:
Feedback feedback = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .bools = 0, .deliminer = 0xAAAA};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) //uint8_t* Buf, uint32_t* Len
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)){
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	d104      	bne.n	8000b30 <CDC_On_Receive+0x1c>
		memcpy(&command, buffer, sizeof(Command));
 8000b26:	2210      	movs	r2, #16
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b2c:	f00a fc80 	bl	800b430 <memcpy>
	}
	if (command.delimiter == 0xAAAA){
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <CDC_On_Receive+0x2e>
		isCommandReceived = 1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <CDC_On_Receive+0x3c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
	}
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000227 	.word	0x20000227

08000b54 <throw>:

void throw(uint32_t speed)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (speed > 7500) speed = 7500;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d902      	bls.n	8000b6c <throw+0x18>
 8000b66:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000b6a:	607b      	str	r3, [r7, #4]
	if (speed < 2500) speed = 2500;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d802      	bhi.n	8000b7c <throw+0x28>
 8000b76:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b7a:	607b      	str	r3, [r7, #4]
	TIM16->CCR1 = speed;
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <throw+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(400);
 8000b82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b86:	f001 fcd1 	bl	800252c <HAL_Delay>
	TIM17->CCR1 = 1000;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <throw+0x78>)
 8000b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
	int n = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
	while (n)
 8000b96:	e009      	b.n	8000bac <throw+0x58>
	{
		n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8000b98:	2120      	movs	r1, #32
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 ff79 	bl	8002a94 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(200);
 8000ba6:	20c8      	movs	r0, #200	; 0xc8
 8000ba8:	f001 fcc0 	bl	800252c <HAL_Delay>
	while (n)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f2      	bne.n	8000b98 <throw+0x44>
	}
	TIM17->CCR1 = 0;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <throw+0x78>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = 2500;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <throw+0x74>)
 8000bba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40014400 	.word	0x40014400
 8000bcc:	40014800 	.word	0x40014800

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b0a2      	sub	sp, #136	; 0x88
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	int16_t Cpos_M1 = (int16_t)TIM3->CNT;
 8000bd8:	4ba9      	ldr	r3, [pc, #676]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		feedback.speed1  = Cpos_M1;
 8000be0:	4aa8      	ldr	r2, [pc, #672]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000be2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000be6:	8013      	strh	r3, [r2, #0]
		double dif_M1 = Cpos_M1 - Lpos_M1;
 8000be8:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc65 	bl	80004bc <__aeabi_i2d>
 8000bf2:	4ba5      	ldr	r3, [pc, #660]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf8:	f7ff fb12 	bl	8000220 <__aeabi_dsub>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		Lpos_M1 = Cpos_M1;
 8000c04:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc57 	bl	80004bc <__aeabi_i2d>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	499d      	ldr	r1, [pc, #628]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c14:	e9c1 2300 	strd	r2, r3, [r1]

		int16_t Cpos_M2 = (int16_t)TIM4->CNT;
 8000c18:	4b9c      	ldr	r3, [pc, #624]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		feedback.speed2  = Cpos_M2;
 8000c20:	4a98      	ldr	r2, [pc, #608]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000c26:	8053      	strh	r3, [r2, #2]
		double dif_M2 = Cpos_M2 - Lpos_M2;
 8000c28:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fc45 	bl	80004bc <__aeabi_i2d>
 8000c32:	4b97      	ldr	r3, [pc, #604]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	f7ff faf2 	bl	8000220 <__aeabi_dsub>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		Lpos_M2 = Cpos_M2;
 8000c44:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fc37 	bl	80004bc <__aeabi_i2d>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	498f      	ldr	r1, [pc, #572]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c54:	e9c1 2300 	strd	r2, r3, [r1]

		int16_t Cpos_M3 = (int16_t)TIM8->CNT;
 8000c58:	4b8e      	ldr	r3, [pc, #568]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		feedback.speed3  = Cpos_M3;
 8000c60:	4a88      	ldr	r2, [pc, #544]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c62:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c66:	8093      	strh	r3, [r2, #4]
		double dif_M3 = Cpos_M3 - Lpos_M3;
 8000c68:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc25 	bl	80004bc <__aeabi_i2d>
 8000c72:	4b89      	ldr	r3, [pc, #548]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fad2 	bl	8000220 <__aeabi_dsub>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50


		double Err1 = tgt_M1/15 - dif_M1;
 8000c84:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b84      	ldr	r3, [pc, #528]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c90:	f7ff fda8 	bl	80007e4 <__aeabi_ddiv>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ca0:	f7ff fabe 	bl	8000220 <__aeabi_dsub>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		double Err2 = tgt_M2/15 - dif_M2;
 8000cac:	4b7d      	ldr	r3, [pc, #500]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	4b7a      	ldr	r3, [pc, #488]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000cb8:	f7ff fd94 	bl	80007e4 <__aeabi_ddiv>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000cc8:	f7ff faaa 	bl	8000220 <__aeabi_dsub>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		double Err3 = tgt_M3/15 - dif_M3;
 8000cd4:	4b74      	ldr	r3, [pc, #464]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b70      	ldr	r3, [pc, #448]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ce0:	f7ff fd80 	bl	80007e4 <__aeabi_ddiv>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000cf0:	f7ff fa96 	bl	8000220 <__aeabi_dsub>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		double kp = 4000;
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d02:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double ki = 700;
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	4b69      	ldr	r3, [pc, #420]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double kd = 300;
 8000d10:	a359      	add	r3, pc, #356	; (adr r3, 8000e78 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d16:	e9c7 2308 	strd	r2, r3, [r7, #32]

		integral_M1 += Err1;
 8000d1a:	4b66      	ldr	r3, [pc, #408]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d24:	f7ff fa7e 	bl	8000224 <__adddf3>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4961      	ldr	r1, [pc, #388]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d2e:	e9c1 2300 	strd	r2, r3, [r1]
		integral_M2 += Err2;
 8000d32:	4b61      	ldr	r3, [pc, #388]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d3c:	f7ff fa72 	bl	8000224 <__adddf3>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	495c      	ldr	r1, [pc, #368]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d46:	e9c1 2300 	strd	r2, r3, [r1]
		integral_M3 += Err3;
 8000d4a:	4b5c      	ldr	r3, [pc, #368]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000d54:	f7ff fa66 	bl	8000224 <__adddf3>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4957      	ldr	r1, [pc, #348]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d5e:	e9c1 2300 	strd	r2, r3, [r1]

		if (integral_M1 > 40) integral_M1 = 40;
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d6e:	f7ff fe9f 	bl	8000ab0 <__aeabi_dcmpgt>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8000d78:	494e      	ldr	r1, [pc, #312]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d80:	e9c1 2300 	strd	r2, r3, [r1]
		if (integral_M1 < -40) integral_M1 = -40;
 8000d84:	4b4b      	ldr	r3, [pc, #300]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d90:	f7ff fe70 	bl	8000a74 <__aeabi_dcmplt>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8000d9a:	4946      	ldr	r1, [pc, #280]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	4b48      	ldr	r3, [pc, #288]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000da2:	e9c1 2300 	strd	r2, r3, [r1]

		if (integral_M2 > 40) integral_M2 = 40;
 8000da6:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000db2:	f7ff fe7d 	bl	8000ab0 <__aeabi_dcmpgt>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8000dbc:	493e      	ldr	r1, [pc, #248]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	4b3f      	ldr	r3, [pc, #252]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dc4:	e9c1 2300 	strd	r2, r3, [r1]
		if (integral_M2 < -40) integral_M2 = -40;
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000dd4:	f7ff fe4e 	bl	8000a74 <__aeabi_dcmplt>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <HAL_TIM_PeriodElapsedCallback+0x21a>
 8000dde:	4936      	ldr	r1, [pc, #216]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000de6:	e9c1 2300 	strd	r2, r3, [r1]

		if (integral_M3 > 40) integral_M3 = 40;
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000df6:	f7ff fe5b 	bl	8000ab0 <__aeabi_dcmpgt>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000e00:	492e      	ldr	r1, [pc, #184]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e08:	e9c1 2300 	strd	r2, r3, [r1]
		if (integral_M3 < -40) integral_M3 = -40;
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e18:	f7ff fe2c 	bl	8000a74 <__aeabi_dcmplt>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x25e>
 8000e22:	4926      	ldr	r1, [pc, #152]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e2a:	e9c1 2300 	strd	r2, r3, [r1]

		double derivative_M1 = (Err1 - last_err_M1);
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000e38:	f7ff f9f2 	bl	8000220 <__aeabi_dsub>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double derivative_M2 = (Err2 - last_err_M2);
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e4e:	f7ff f9e7 	bl	8000220 <__aeabi_dsub>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double derivative_M3 = (Err3 - last_err_M3);
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000e64:	f7ff f9dc 	bl	8000220 <__aeabi_dsub>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		last_err_M1 = Err1;
 8000e70:	4915      	ldr	r1, [pc, #84]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e72:	e02f      	b.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x304>
 8000e74:	f3af 8000 	nop.w
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	4072c000 	.word	0x4072c000
 8000e80:	40000400 	.word	0x40000400
 8000e84:	20000010 	.word	0x20000010
 8000e88:	200001c0 	.word	0x200001c0
 8000e8c:	40000800 	.word	0x40000800
 8000e90:	200001c8 	.word	0x200001c8
 8000e94:	40013400 	.word	0x40013400
 8000e98:	200001d0 	.word	0x200001d0
 8000e9c:	200001d8 	.word	0x200001d8
 8000ea0:	402e0000 	.word	0x402e0000
 8000ea4:	200001e0 	.word	0x200001e0
 8000ea8:	200001e8 	.word	0x200001e8
 8000eac:	40af4000 	.word	0x40af4000
 8000eb0:	4085e000 	.word	0x4085e000
 8000eb4:	200001f0 	.word	0x200001f0
 8000eb8:	200001f8 	.word	0x200001f8
 8000ebc:	20000200 	.word	0x20000200
 8000ec0:	40440000 	.word	0x40440000
 8000ec4:	c0440000 	.word	0xc0440000
 8000ec8:	20000208 	.word	0x20000208
 8000ecc:	20000210 	.word	0x20000210
 8000ed0:	20000218 	.word	0x20000218
 8000ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000ed8:	e9c1 2300 	strd	r2, r3, [r1]
		last_err_M2 = Err2;
 8000edc:	4996      	ldr	r1, [pc, #600]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ee2:	e9c1 2300 	strd	r2, r3, [r1]
		last_err_M3 = Err3;
 8000ee6:	4995      	ldr	r1, [pc, #596]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000eec:	e9c1 2300 	strd	r2, r3, [r1]

		int32_t Speed_M1 = (int32_t) Err1 * kp + integral_M1 * ki + derivative_M1 * kd;
 8000ef0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000ef4:	f7ff fde6 	bl	8000ac4 <__aeabi_d2iz>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fade 	bl	80004bc <__aeabi_i2d>
 8000f00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f04:	f7ff fb44 	bl	8000590 <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4614      	mov	r4, r2
 8000f0e:	461d      	mov	r5, r3
 8000f10:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f1a:	f7ff fb39 	bl	8000590 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4620      	mov	r0, r4
 8000f24:	4629      	mov	r1, r5
 8000f26:	f7ff f97d 	bl	8000224 <__adddf3>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4614      	mov	r4, r2
 8000f30:	461d      	mov	r5, r3
 8000f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f3a:	f7ff fb29 	bl	8000590 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4620      	mov	r0, r4
 8000f44:	4629      	mov	r1, r5
 8000f46:	f7ff f96d 	bl	8000224 <__adddf3>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fdb7 	bl	8000ac4 <__aeabi_d2iz>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		int32_t Speed_M2 = (int32_t) Err2 * kp + integral_M2 * ki + derivative_M2 * kd;
 8000f5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000f60:	f7ff fdb0 	bl	8000ac4 <__aeabi_d2iz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff faa8 	bl	80004bc <__aeabi_i2d>
 8000f6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f70:	f7ff fb0e 	bl	8000590 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4614      	mov	r4, r2
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	4b71      	ldr	r3, [pc, #452]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f86:	f7ff fb03 	bl	8000590 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4620      	mov	r0, r4
 8000f90:	4629      	mov	r1, r5
 8000f92:	f7ff f947 	bl	8000224 <__adddf3>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4614      	mov	r4, r2
 8000f9c:	461d      	mov	r5, r3
 8000f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa6:	f7ff faf3 	bl	8000590 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4620      	mov	r0, r4
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	f7ff f937 	bl	8000224 <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd81 	bl	8000ac4 <__aeabi_d2iz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int32_t Speed_M3 = (int32_t) Err3 * kp + integral_M3 * ki + derivative_M3 * kd;
 8000fc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000fcc:	f7ff fd7a 	bl	8000ac4 <__aeabi_d2iz>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa72 	bl	80004bc <__aeabi_i2d>
 8000fd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fdc:	f7ff fad8 	bl	8000590 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	4b57      	ldr	r3, [pc, #348]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000ff2:	f7ff facd 	bl	8000590 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff f911 	bl	8000224 <__adddf3>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4614      	mov	r4, r2
 8001008:	461d      	mov	r5, r3
 800100a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800100e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001012:	f7ff fabd 	bl	8000590 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff f901 	bl	8000224 <__adddf3>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd4b 	bl	8000ac4 <__aeabi_d2iz>
 800102e:	4603      	mov	r3, r0
 8001030:	67fb      	str	r3, [r7, #124]	; 0x7c

		if (tgt_M1 == 0){
 8001032:	4b46      	ldr	r3, [pc, #280]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	f7ff fd0e 	bl	8000a60 <__aeabi_dcmpeq>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <HAL_TIM_PeriodElapsedCallback+0x480>
			Speed_M1 = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		}
		if (tgt_M2 == 0){
 8001050:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	f7ff fcff 	bl	8000a60 <__aeabi_dcmpeq>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <HAL_TIM_PeriodElapsedCallback+0x49e>
				Speed_M2 = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}
		if (tgt_M3 == 0){
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	f7ff fcf0 	bl	8000a60 <__aeabi_dcmpeq>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_TIM_PeriodElapsedCallback+0x4ba>
				Speed_M3 = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	67fb      	str	r3, [r7, #124]	; 0x7c
			}
		if (Speed_M1 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 800108a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800108e:	2b00      	cmp	r3, #0
 8001090:	db06      	blt.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8001092:	2200      	movs	r2, #0
 8001094:	2102      	movs	r1, #2
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f001 fd13 	bl	8002ac4 <HAL_GPIO_WritePin>
 800109e:	e005      	b.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x4dc>
		else HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2102      	movs	r1, #2
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f001 fd0c 	bl	8002ac4 <HAL_GPIO_WritePin>

		if (Speed_M2 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80010ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db07      	blt.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x4f4>
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f001 fd01 	bl	8002ac4 <HAL_GPIO_WritePin>
 80010c2:	e006      	b.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0x502>
		else HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f001 fcf9 	bl	8002ac4 <HAL_GPIO_WritePin>

		if (Speed_M3 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80010d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db06      	blt.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x516>
 80010d8:	2200      	movs	r2, #0
 80010da:	2108      	movs	r1, #8
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f001 fcf0 	bl	8002ac4 <HAL_GPIO_WritePin>
 80010e4:	e005      	b.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x522>
		else HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f001 fce9 	bl	8002ac4 <HAL_GPIO_WritePin>

		TIM2->CCR1 = abs(Speed_M1);
 80010f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010f6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = abs(Speed_M2);
 8001104:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001108:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800110c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM15->CCR1 = abs(Speed_M3);
 8001116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001118:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800111c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001122:	635a      	str	r2, [r3, #52]	; 0x34

		safety_iters++;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	3788      	adds	r7, #136	; 0x88
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}
 8001138:	20000210 	.word	0x20000210
 800113c:	20000218 	.word	0x20000218
 8001140:	200001f0 	.word	0x200001f0
 8001144:	200001f8 	.word	0x200001f8
 8001148:	20000200 	.word	0x20000200
 800114c:	200001d8 	.word	0x200001d8
 8001150:	200001e0 	.word	0x200001e0
 8001154:	200001e8 	.word	0x200001e8
 8001158:	40014000 	.word	0x40014000
 800115c:	20000226 	.word	0x20000226

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f001 f970 	bl	800244a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f945 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 fdbb 	bl	8001ce8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001172:	f000 fae5 	bl	8001740 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001176:	f000 fb39 	bl	80017ec <MX_TIM4_Init>
  MX_TIM6_Init();
 800117a:	f000 fb8d 	bl	8001898 <MX_TIM6_Init>
  MX_TIM8_Init();
 800117e:	f000 fbc1 	bl	8001904 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001182:	f000 fa51 	bl	8001628 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001186:	f000 fcbb 	bl	8001b00 <MX_TIM16_Init>
  MX_TIM17_Init();
 800118a:	f000 fd33 	bl	8001bf4 <MX_TIM17_Init>
  MX_TIM15_Init();
 800118e:	f000 fc13 	bl	80019b8 <MX_TIM15_Init>
  MX_I2C3_Init();
 8001192:	f000 f97d 	bl	8001490 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001196:	f000 f9bb 	bl	8001510 <MX_TIM1_Init>
  MX_USB_Device_Init();
 800119a:	f009 fc0d 	bl	800a9b8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	2101      	movs	r1, #1
 80011a2:	487f      	ldr	r0, [pc, #508]	; (80013a0 <main+0x240>)
 80011a4:	f001 fc8e 	bl	8002ac4 <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 80011a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ac:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011b2:	2104      	movs	r1, #4
 80011b4:	487b      	ldr	r0, [pc, #492]	; (80013a4 <main+0x244>)
 80011b6:	f004 fbb1 	bl	800591c <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f001 f9b6 	bl	800252c <HAL_Delay>
  TIM2->CCR2 = 65536;
 80011c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38

  //motor speeds to zero
  TIM2->CCR1 = 0;
 80011ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ce:	2200      	movs	r2, #0
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 80011d2:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <main+0x248>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011dc:	2200      	movs	r2, #0
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011e0:	2100      	movs	r1, #0
 80011e2:	4870      	ldr	r0, [pc, #448]	; (80013a4 <main+0x244>)
 80011e4:	f004 fb9a 	bl	800591c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011e8:	2108      	movs	r1, #8
 80011ea:	486e      	ldr	r0, [pc, #440]	; (80013a4 <main+0x244>)
 80011ec:	f004 fb96 	bl	800591c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80011f0:	2100      	movs	r1, #0
 80011f2:	486e      	ldr	r0, [pc, #440]	; (80013ac <main+0x24c>)
 80011f4:	f004 fb92 	bl	800591c <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	486d      	ldr	r0, [pc, #436]	; (80013b0 <main+0x250>)
 80011fc:	f004 fb8e 	bl	800591c <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 8001200:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <main+0x254>)
 8001202:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 8001208:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800120c:	f001 f98e 	bl	800252c <HAL_Delay>

  //enable grabber and set its speed to zero
  TIM17->CCR1 = 0;
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <main+0x258>)
 8001212:	2200      	movs	r2, #0
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001216:	2100      	movs	r1, #0
 8001218:	4868      	ldr	r0, [pc, #416]	; (80013bc <main+0x25c>)
 800121a:	f004 fb7f 	bl	800591c <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800121e:	2104      	movs	r1, #4
 8001220:	4867      	ldr	r0, [pc, #412]	; (80013c0 <main+0x260>)
 8001222:	f004 fd21 	bl	8005c68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001226:	2104      	movs	r1, #4
 8001228:	4866      	ldr	r0, [pc, #408]	; (80013c4 <main+0x264>)
 800122a:	f004 fd1d 	bl	8005c68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800122e:	2104      	movs	r1, #4
 8001230:	4865      	ldr	r0, [pc, #404]	; (80013c8 <main+0x268>)
 8001232:	f004 fd19 	bl	8005c68 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 8001236:	4865      	ldr	r0, [pc, #404]	; (80013cc <main+0x26c>)
 8001238:	f004 faae 	bl	8005798 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  uint8_t n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 800123c:	2120      	movs	r1, #32
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f001 fc27 	bl	8002a94 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	71bb      	strb	r3, [r7, #6]

	  if (isCommandReceived){
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <main+0x270>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d059      	beq.n	8001308 <main+0x1a8>
		  isCommandReceived = 0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <main+0x270>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
		  tgt_M1 = command.speed1;
 800125a:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <main+0x274>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f92b 	bl	80004bc <__aeabi_i2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	495b      	ldr	r1, [pc, #364]	; (80013d8 <main+0x278>)
 800126c:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = command.speed2;
 8001270:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <main+0x274>)
 8001272:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f920 	bl	80004bc <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4956      	ldr	r1, [pc, #344]	; (80013dc <main+0x27c>)
 8001282:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = command.speed3;
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <main+0x274>)
 8001288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f915 	bl	80004bc <__aeabi_i2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4952      	ldr	r1, [pc, #328]	; (80013e0 <main+0x280>)
 8001298:	e9c1 2300 	strd	r2, r3, [r1]
		  thrower_speed = command.thrower_speed;
 800129c:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <main+0x274>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a50      	ldr	r2, [pc, #320]	; (80013e4 <main+0x284>)
 80012a2:	6013      	str	r3, [r2, #0]
		  uint8_t bools = command.bools;
 80012a4:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <main+0x274>)
 80012a6:	88db      	ldrh	r3, [r3, #6]
 80012a8:	71fb      	strb	r3, [r7, #7]

		  if (bools >= 2)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d906      	bls.n	80012be <main+0x15e>
		  {
		  	  bools -= 2;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	3b02      	subs	r3, #2
 80012b4:	71fb      	strb	r3, [r7, #7]
		  	  grabber_on = 1;
 80012b6:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <main+0x288>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	e002      	b.n	80012c4 <main+0x164>
		  }

		  else
		  {
			  grabber_on = 0;
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <main+0x288>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
		  }

		  if (bools >= 1)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <main+0x176>
		  {
			  bools -= 1;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	71fb      	strb	r3, [r7, #7]
			  thrower = 1;
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <main+0x28c>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4831      	ldr	r0, [pc, #196]	; (80013a0 <main+0x240>)
 80012dc:	f001 fbf2 	bl	8002ac4 <HAL_GPIO_WritePin>

		  safety_iters = 0;
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <main+0x290>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

		  feedback.bools = (uint8_t)HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80012e6:	2120      	movs	r1, #32
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f001 fbd2 	bl	8002a94 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <main+0x294>)
 80012f6:	80da      	strh	r2, [r3, #6]
		  feedback.deliminer = 0xAAAA;
 80012f8:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <main+0x294>)
 80012fa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80012fe:	609a      	str	r2, [r3, #8]
		  CDC_Transmit_FS(&feedback, sizeof(feedback));
 8001300:	210c      	movs	r1, #12
 8001302:	483c      	ldr	r0, [pc, #240]	; (80013f4 <main+0x294>)
 8001304:	f009 fc1a 	bl	800ab3c <CDC_Transmit_FS>

	  }



	  if (grabber_on){
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <main+0x288>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00e      	beq.n	800132e <main+0x1ce>

		  if (n)
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <main+0x1c4>
		  {
			  TIM17->CCR1 = 0;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <main+0x258>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
			  grabber_on = 0;
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <main+0x288>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <main+0x1d4>

		  }
		  else TIM17->CCR1 = 1000;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <main+0x258>)
 8001326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132a:	635a      	str	r2, [r3, #52]	; 0x34
 800132c:	e002      	b.n	8001334 <main+0x1d4>

	  }

	  else TIM17->CCR1 = 0;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <main+0x258>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	; 0x34
	  if (n) grabber_on = 0;
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <main+0x1e0>
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <main+0x288>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

	  if(thrower && n){
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <main+0x28c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <main+0x1fa>
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <main+0x1fa>
		  throw(thrower_speed);
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <main+0x284>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fbfe 	bl	8000b54 <throw>
 8001358:	e002      	b.n	8001360 <main+0x200>
	  }
	  else thrower = 0;
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <main+0x28c>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]

	  if (safety_iters > 100){
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <main+0x290>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b64      	cmp	r3, #100	; 0x64
 8001366:	f67f af69 	bls.w	800123c <main+0xdc>
		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 800136a:	2201      	movs	r2, #1
 800136c:	2101      	movs	r1, #1
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <main+0x240>)
 8001370:	f001 fba8 	bl	8002ac4 <HAL_GPIO_WritePin>
		  tgt_M1 = 0;
 8001374:	4918      	ldr	r1, [pc, #96]	; (80013d8 <main+0x278>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = 0;
 8001382:	4916      	ldr	r1, [pc, #88]	; (80013dc <main+0x27c>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = 0;
 8001390:	4913      	ldr	r1, [pc, #76]	; (80013e0 <main+0x280>)
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9c1 2300 	strd	r2, r3, [r1]
  {
 800139e:	e74d      	b.n	800123c <main+0xdc>
 80013a0:	48000400 	.word	0x48000400
 80013a4:	200006ac 	.word	0x200006ac
 80013a8:	40014000 	.word	0x40014000
 80013ac:	20000530 	.word	0x20000530
 80013b0:	200006f8 	.word	0x200006f8
 80013b4:	40014400 	.word	0x40014400
 80013b8:	40014800 	.word	0x40014800
 80013bc:	2000057c 	.word	0x2000057c
 80013c0:	200005c8 	.word	0x200005c8
 80013c4:	200004e4 	.word	0x200004e4
 80013c8:	20000498 	.word	0x20000498
 80013cc:	20000614 	.word	0x20000614
 80013d0:	20000227 	.word	0x20000227
 80013d4:	20000000 	.word	0x20000000
 80013d8:	200001d8 	.word	0x200001d8
 80013dc:	200001e0 	.word	0x200001e0
 80013e0:	200001e8 	.word	0x200001e8
 80013e4:	20000220 	.word	0x20000220
 80013e8:	20000224 	.word	0x20000224
 80013ec:	20000225 	.word	0x20000225
 80013f0:	20000226 	.word	0x20000226
 80013f4:	20000010 	.word	0x20000010

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	2238      	movs	r2, #56	; 0x38
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00a f820 	bl	800b44c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800141e:	f003 f9c3 	bl	80047a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142c:	2340      	movs	r3, #64	; 0x40
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001438:	2301      	movs	r3, #1
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800143c:	230c      	movs	r3, #12
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001440:	2302      	movs	r3, #2
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001444:	2304      	movs	r3, #4
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fa5d 	bl	8004910 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800145c:	f000 fca6 	bl	8001dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001464:	2301      	movs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fd61 	bl	8004f40 <HAL_RCC_ClockConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001484:	f000 fc92 	bl	8001dac <Error_Handler>
  }
}
 8001488:	bf00      	nop
 800148a:	3750      	adds	r7, #80	; 0x50
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_I2C3_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_I2C3_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_I2C3_Init+0x74>)
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <MX_I2C3_Init+0x7c>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_I2C3_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_I2C3_Init+0x74>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_I2C3_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_I2C3_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_I2C3_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_I2C3_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_I2C3_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <MX_I2C3_Init+0x74>)
 80014cc:	f001 fb12 	bl	8002af4 <HAL_I2C_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014d6:	f000 fc69 	bl	8001dac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <MX_I2C3_Init+0x74>)
 80014de:	f001 fb98 	bl	8002c12 <HAL_I2CEx_ConfigAnalogFilter>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014e8:	f000 fc60 	bl	8001dac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_I2C3_Init+0x74>)
 80014f0:	f001 fbda 	bl	8002ca8 <HAL_I2CEx_ConfigDigitalFilter>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 fc57 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000044c 	.word	0x2000044c
 8001508:	40007800 	.word	0x40007800
 800150c:	00303d5b 	.word	0x00303d5b

08001510 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b098      	sub	sp, #96	; 0x60
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2234      	movs	r2, #52	; 0x34
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f009 ff85 	bl	800b44c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <MX_TIM1_Init+0x110>)
 8001544:	4a37      	ldr	r2, [pc, #220]	; (8001624 <MX_TIM1_Init+0x114>)
 8001546:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <MX_TIM1_Init+0x110>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <MX_TIM1_Init+0x110>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <MX_TIM1_Init+0x110>)
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <MX_TIM1_Init+0x110>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <MX_TIM1_Init+0x110>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MX_TIM1_Init+0x110>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800156e:	482c      	ldr	r0, [pc, #176]	; (8001620 <MX_TIM1_Init+0x110>)
 8001570:	f004 f97c 	bl	800586c <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 fc17 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800158e:	4619      	mov	r1, r3
 8001590:	4823      	ldr	r0, [pc, #140]	; (8001620 <MX_TIM1_Init+0x110>)
 8001592:	f005 fbf5 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800159c:	f000 fc06 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a0:	2360      	movs	r3, #96	; 0x60
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80015b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015b8:	2210      	movs	r2, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	4818      	ldr	r0, [pc, #96]	; (8001620 <MX_TIM1_Init+0x110>)
 80015be:	f004 fd61 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80015c8:	f000 fbf0 	bl	8001dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM1_Init+0x110>)
 800160a:	f005 fc3b 	bl	8006e84 <HAL_TIMEx_ConfigBreakDeadTime>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001614:	f000 fbca 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3760      	adds	r7, #96	; 0x60
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000660 	.word	0x20000660
 8001624:	40012c00 	.word	0x40012c00

08001628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165a:	4b38      	ldr	r3, [pc, #224]	; (800173c <MX_TIM2_Init+0x114>)
 800165c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001660:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001662:	4b36      	ldr	r3, [pc, #216]	; (800173c <MX_TIM2_Init+0x114>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <MX_TIM2_Init+0x114>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <MX_TIM2_Init+0x114>)
 8001670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <MX_TIM2_Init+0x114>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <MX_TIM2_Init+0x114>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001682:	482e      	ldr	r0, [pc, #184]	; (800173c <MX_TIM2_Init+0x114>)
 8001684:	f004 f830 	bl	80056e8 <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800168e:	f000 fb8d 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169c:	4619      	mov	r1, r3
 800169e:	4827      	ldr	r0, [pc, #156]	; (800173c <MX_TIM2_Init+0x114>)
 80016a0:	f004 fe04 	bl	80062ac <HAL_TIM_ConfigClockSource>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016aa:	f000 fb7f 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ae:	4823      	ldr	r0, [pc, #140]	; (800173c <MX_TIM2_Init+0x114>)
 80016b0:	f004 f8dc 	bl	800586c <HAL_TIM_PWM_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016ba:	f000 fb77 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	481b      	ldr	r0, [pc, #108]	; (800173c <MX_TIM2_Init+0x114>)
 80016ce:	f005 fb57 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016d8:	f000 fb68 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016dc:	2360      	movs	r3, #96	; 0x60
 80016de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	4619      	mov	r1, r3
 80016f2:	4812      	ldr	r0, [pc, #72]	; (800173c <MX_TIM2_Init+0x114>)
 80016f4:	f004 fcc6 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016fe:	f000 fb55 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	2204      	movs	r2, #4
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM2_Init+0x114>)
 800170a:	f004 fcbb 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001714:	f000 fb4a 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	2208      	movs	r2, #8
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_TIM2_Init+0x114>)
 8001720:	f004 fcb0 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800172a:	f000 fb3f 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_TIM2_Init+0x114>)
 8001730:	f000 fd36 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001734:	bf00      	nop
 8001736:	3738      	adds	r7, #56	; 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200006ac 	.word	0x200006ac

08001740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f009 fe7c 	bl	800b44c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <MX_TIM3_Init+0xa4>)
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <MX_TIM3_Init+0xa8>)
 8001762:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <MX_TIM3_Init+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_TIM3_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <MX_TIM3_Init+0xa4>)
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_TIM3_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <MX_TIM3_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001784:	2301      	movs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800178c:	2301      	movs	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800179c:	2301      	movs	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <MX_TIM3_Init+0xa4>)
 80017b0:	f004 f9b4 	bl	8005b1c <HAL_TIM_Encoder_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017ba:	f000 faf7 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c6:	463b      	mov	r3, r7
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <MX_TIM3_Init+0xa4>)
 80017cc:	f005 fad8 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017d6:	f000 fae9 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	3730      	adds	r7, #48	; 0x30
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200005c8 	.word	0x200005c8
 80017e8:	40000400 	.word	0x40000400

080017ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f009 fe26 	bl	800b44c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_TIM4_Init+0xa4>)
 800180c:	4a21      	ldr	r2, [pc, #132]	; (8001894 <MX_TIM4_Init+0xa8>)
 800180e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_TIM4_Init+0xa4>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_TIM4_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_TIM4_Init+0xa4>)
 800181e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001822:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_TIM4_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_TIM4_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001830:	2301      	movs	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001838:	2301      	movs	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001848:	2301      	movs	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_TIM4_Init+0xa4>)
 800185c:	f004 f95e 	bl	8005b1c <HAL_TIM_Encoder_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001866:	f000 faa1 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_TIM4_Init+0xa4>)
 8001878:	f005 fa82 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001882:	f000 fa93 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3730      	adds	r7, #48	; 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200004e4 	.word	0x200004e4
 8001894:	40000800 	.word	0x40000800

08001898 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_TIM6_Init+0x64>)
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <MX_TIM6_Init+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_TIM6_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_TIM6_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_TIM6_Init+0x64>)
 80018bc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80018c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_TIM6_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_TIM6_Init+0x64>)
 80018ca:	f003 ff0d 	bl	80056e8 <HAL_TIM_Base_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018d4:	f000 fa6a 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_TIM6_Init+0x64>)
 80018e6:	f005 fa4b 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018f0:	f000 fa5c 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000614 	.word	0x20000614
 8001900:	40001000 	.word	0x40001000

08001904 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	2224      	movs	r2, #36	; 0x24
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f009 fd9a 	bl	800b44c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <MX_TIM8_Init+0xac>)
 8001924:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <MX_TIM8_Init+0xb0>)
 8001926:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_TIM8_Init+0xac>)
 800192a:	2205      	movs	r2, #5
 800192c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_TIM8_Init+0xac>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64000;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_TIM8_Init+0xac>)
 8001936:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800193a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM8_Init+0xac>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_TIM8_Init+0xac>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_TIM8_Init+0xac>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800194e:	2301      	movs	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001956:	2301      	movs	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001966:	2301      	movs	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_TIM8_Init+0xac>)
 800197a:	f004 f8cf 	bl	8005b1c <HAL_TIM_Encoder_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001984:	f000 fa12 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM8_Init+0xac>)
 800199a:	f005 f9f1 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80019a4:	f000 fa02 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000498 	.word	0x20000498
 80019b4:	40013400 	.word	0x40013400

080019b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b09c      	sub	sp, #112	; 0x70
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2234      	movs	r2, #52	; 0x34
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f009 fd2a 	bl	800b44c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <MX_TIM15_Init+0x140>)
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <MX_TIM15_Init+0x144>)
 80019fc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a10:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a18:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a24:	4834      	ldr	r0, [pc, #208]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a26:	f003 fe5f 	bl	80056e8 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a30:	f000 f9bc 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a3e:	4619      	mov	r1, r3
 8001a40:	482d      	ldr	r0, [pc, #180]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a42:	f004 fc33 	bl	80062ac <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a4c:	f000 f9ae 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a50:	4829      	ldr	r0, [pc, #164]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a52:	f003 ff0b 	bl	800586c <HAL_TIM_PWM_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a5c:	f000 f9a6 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4822      	ldr	r0, [pc, #136]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001a70:	f005 f986 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a7a:	f000 f997 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7e:	2360      	movs	r3, #96	; 0x60
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a86:	2300      	movs	r3, #0
 8001a88:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4815      	ldr	r0, [pc, #84]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001aa4:	f004 faee 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001aae:	f000 f97d 	bl	8001dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4807      	ldr	r0, [pc, #28]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001ada:	f005 f9d3 	bl	8006e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001ae4:	f000 f962 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <MX_TIM15_Init+0x140>)
 8001aea:	f000 fb59 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001aee:	bf00      	nop
 8001af0:	3770      	adds	r7, #112	; 0x70
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000530 	.word	0x20000530
 8001afc:	40014000 	.word	0x40014000

08001b00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b094      	sub	sp, #80	; 0x50
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2234      	movs	r2, #52	; 0x34
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f009 fc93 	bl	800b44c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b28:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <MX_TIM16_Init+0xf0>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b2e:	2204      	movs	r2, #4
 8001b30:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b3a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001b3e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b54:	f003 fdc8 	bl	80056e8 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b5e:	f000 f925 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b62:	4822      	ldr	r0, [pc, #136]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b64:	f003 fe82 	bl	800586c <HAL_TIM_PWM_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b6e:	f000 f91d 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b72:	2360      	movs	r3, #96	; 0x60
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	4815      	ldr	r0, [pc, #84]	; (8001bec <MX_TIM16_Init+0xec>)
 8001b98:	f004 fa74 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001ba2:	f000 f903 	bl	8001dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <MX_TIM16_Init+0xec>)
 8001bce:	f005 f959 	bl	8006e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001bd8:	f000 f8e8 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <MX_TIM16_Init+0xec>)
 8001bde:	f000 fadf 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001be2:	bf00      	nop
 8001be4:	3750      	adds	r7, #80	; 0x50
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200006f8 	.word	0x200006f8
 8001bf0:	40014400 	.word	0x40014400

08001bf4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2234      	movs	r2, #52	; 0x34
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f009 fc19 	bl	800b44c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c1c:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <MX_TIM17_Init+0xf0>)
 8001c1e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c22:	2204      	movs	r2, #4
 8001c24:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c2e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001c32:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c46:	4826      	ldr	r0, [pc, #152]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c48:	f003 fd4e 	bl	80056e8 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001c52:	f000 f8ab 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001c56:	4822      	ldr	r0, [pc, #136]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c58:	f003 fe08 	bl	800586c <HAL_TIM_PWM_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001c62:	f000 f8a3 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c66:	2360      	movs	r3, #96	; 0x60
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c86:	2200      	movs	r2, #0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001c8c:	f004 f9fa 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001c96:	f000 f889 	bl	8001dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4807      	ldr	r0, [pc, #28]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001cc2:	f005 f8df 	bl	8006e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001ccc:	f000 f86e 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <MX_TIM17_Init+0xec>)
 8001cd2:	f000 fa65 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001cd6:	bf00      	nop
 8001cd8:	3750      	adds	r7, #80	; 0x50
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000057c 	.word	0x2000057c
 8001ce4:	40014800 	.word	0x40014800

08001ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <MX_GPIO_Init+0xbc>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <MX_GPIO_Init+0xbc>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_GPIO_Init+0xbc>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <MX_GPIO_Init+0xbc>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <MX_GPIO_Init+0xbc>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_GPIO_Init+0xbc>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f240 410a 	movw	r1, #1034	; 0x40a
 8001d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d38:	f000 fec4 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <MX_GPIO_Init+0xc0>)
 8001d42:	f000 febf 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8001d46:	f240 430a 	movw	r3, #1034	; 0x40a
 8001d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d62:	f000 fd15 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8001d66:	2320      	movs	r3, #32
 8001d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7c:	f000 fd08 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8001d80:	2301      	movs	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_GPIO_Init+0xc0>)
 8001d98:	f000 fcfa 	bl	8002790 <HAL_GPIO_Init>

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	48000400 	.word	0x48000400

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <Error_Handler+0x8>
	...

08001db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_MspInit+0x44>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_MspInit+0x44>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_MspInit+0x44>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_MspInit+0x44>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_MspInit+0x44>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_MspInit+0x44>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dee:	f002 fd7f 	bl	80048f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000

08001e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b09c      	sub	sp, #112	; 0x70
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	2244      	movs	r2, #68	; 0x44
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f009 fb13 	bl	800b44c <memset>
  if(hi2c->Instance==I2C3)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ee4 <HAL_I2C_MspInit+0xe4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d154      	bne.n	8001eda <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3a:	f107 0318 	add.w	r3, r7, #24
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa62 	bl	8005308 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e4a:	f7ff ffaf 	bl	8001dac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e84:	2312      	movs	r3, #18
 8001e86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001e90:	2302      	movs	r3, #2
 8001e92:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f000 fc77 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <HAL_I2C_MspInit+0xec>)
 8001ebe:	f000 fc67 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_I2C_MspInit+0xe8>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3770      	adds	r7, #112	; 0x70
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40007800 	.word	0x40007800
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	48000400 	.word	0x48000400

08001ef0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_TIM_PWM_MspInit+0x38>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10b      	bne.n	8001f1a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40012c00 	.word	0x40012c00
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d10c      	bne.n	8001f5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f5a:	e04e      	b.n	8001ffa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a29      	ldr	r2, [pc, #164]	; (8002008 <HAL_TIM_Base_MspInit+0xd8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d114      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	6593      	str	r3, [r2, #88]	; 0x58
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2036      	movs	r0, #54	; 0x36
 8001f84:	f000 fbcf 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f88:	2036      	movs	r0, #54	; 0x36
 8001f8a:	f000 fbe6 	bl	800275a <HAL_NVIC_EnableIRQ>
}
 8001f8e:	e034      	b.n	8001ffa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_TIM_Base_MspInit+0xdc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10c      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
}
 8001fb2:	e022      	b.n	8001ffa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a15      	ldr	r2, [pc, #84]	; (8002010 <HAL_TIM_Base_MspInit+0xe0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
}
 8001fd6:	e010      	b.n	8001ffa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_TIM_Base_MspInit+0xe4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10b      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6613      	str	r3, [r2, #96]	; 0x60
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_TIM_Base_MspInit+0xd4>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
}
 8001ffa:	bf00      	nop
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40001000 	.word	0x40001000
 800200c:	40014000 	.word	0x40014000
 8002010:	40014400 	.word	0x40014400
 8002014:	40014800 	.word	0x40014800

08002018 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a55      	ldr	r2, [pc, #340]	; (800218c <HAL_TIM_Encoder_MspInit+0x174>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d129      	bne.n	800208e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203a:	4b55      	ldr	r3, [pc, #340]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a54      	ldr	r2, [pc, #336]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
 8002046:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	623b      	str	r3, [r7, #32]
 8002050:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 800206a:	2350      	movs	r3, #80	; 0x50
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800207a:	2302      	movs	r3, #2
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002088:	f000 fb82 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800208c:	e079      	b.n	8002182 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <HAL_TIM_Encoder_MspInit+0x17c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d128      	bne.n	80020ea <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a3c      	ldr	r2, [pc, #240]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	4a36      	ldr	r2, [pc, #216]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020d8:	2302      	movs	r3, #2
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	482d      	ldr	r0, [pc, #180]	; (8002198 <HAL_TIM_Encoder_MspInit+0x180>)
 80020e4:	f000 fb54 	bl	8002790 <HAL_GPIO_Init>
}
 80020e8:	e04b      	b.n	8002182 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2b      	ldr	r2, [pc, #172]	; (800219c <HAL_TIM_Encoder_MspInit+0x184>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d146      	bne.n	8002182 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020f4:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	4a25      	ldr	r2, [pc, #148]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 80020fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_TIM_Encoder_MspInit+0x178>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCA_Pin;
 800213c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800214e:	2302      	movs	r3, #2
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_ENCA_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f000 fb18 	bl	8002790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8_CH2_ENCB_Pin;
 8002160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002172:	230a      	movs	r3, #10
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH2_ENCB_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	4806      	ldr	r0, [pc, #24]	; (8002198 <HAL_TIM_Encoder_MspInit+0x180>)
 800217e:	f000 fb07 	bl	8002790 <HAL_GPIO_Init>
}
 8002182:	bf00      	nop
 8002184:	3738      	adds	r7, #56	; 0x38
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40000400 	.word	0x40000400
 8002190:	40021000 	.word	0x40021000
 8002194:	40000800 	.word	0x40000800
 8002198:	48000400 	.word	0x48000400
 800219c:	40013400 	.word	0x40013400

080021a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d14b      	bne.n	800225a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	4b5b      	ldr	r3, [pc, #364]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	4a5a      	ldr	r2, [pc, #360]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ce:	4b58      	ldr	r3, [pc, #352]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a54      	ldr	r2, [pc, #336]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_VH1_M1_PWM_Pin;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002202:	2301      	movs	r3, #1
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_VH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f000 fabe 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 8002214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002226:	230a      	movs	r3, #10
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002234:	f000 faac 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 8002238:	2308      	movs	r3, #8
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002248:	2301      	movs	r3, #1
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4838      	ldr	r0, [pc, #224]	; (8002334 <HAL_TIM_MspPostInit+0x194>)
 8002254:	f000 fa9c 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002258:	e066      	b.n	8002328 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a36      	ldr	r2, [pc, #216]	; (8002338 <HAL_TIM_MspPostInit+0x198>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d11d      	bne.n	80022a0 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	4a31      	ldr	r2, [pc, #196]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 800227c:	2304      	movs	r3, #4
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800228c:	2309      	movs	r3, #9
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229a:	f000 fa79 	bl	8002790 <HAL_GPIO_Init>
}
 800229e:	e043      	b.n	8002328 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <HAL_TIM_MspPostInit+0x19c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d11c      	bne.n	80022e4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	4a20      	ldr	r2, [pc, #128]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 80022c2:	2310      	movs	r3, #16
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80022d2:	2301      	movs	r3, #1
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4815      	ldr	r0, [pc, #84]	; (8002334 <HAL_TIM_MspPostInit+0x194>)
 80022de:	f000 fa57 	bl	8002790 <HAL_GPIO_Init>
}
 80022e2:	e021      	b.n	8002328 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_TIM_MspPostInit+0x1a0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d11c      	bne.n	8002328 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_TIM_MspPostInit+0x190>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002316:	2301      	movs	r3, #1
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002324:	f000 fa34 	bl	8002790 <HAL_GPIO_Init>
}
 8002328:	bf00      	nop
 800232a:	3730      	adds	r7, #48	; 0x30
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	48000400 	.word	0x48000400
 8002338:	40014000 	.word	0x40014000
 800233c:	40014400 	.word	0x40014400
 8002340:	40014800 	.word	0x40014800

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002390:	f000 f8ae 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <USB_HP_IRQHandler+0x10>)
 800239e:	f000 fdd6 	bl	8002f4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200013e8 	.word	0x200013e8

080023ac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <USB_LP_IRQHandler+0x10>)
 80023b2:	f000 fdcc 	bl	8002f4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200013e8 	.word	0x200013e8

080023c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <TIM6_DAC_IRQHandler+0x10>)
 80023c6:	f003 fcdd 	bl	8005d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000614 	.word	0x20000614

080023d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopForever+0x6>)
  ldr r1, =_edata
 80023fe:	490e      	ldr	r1, [pc, #56]	; (8002438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <LoopForever+0xe>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002414:	4c0b      	ldr	r4, [pc, #44]	; (8002444 <LoopForever+0x16>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002422:	f7ff ffd7 	bl	80023d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f008 ffdf 	bl	800b3e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242a:	f7fe fe99 	bl	8001160 <main>

0800242e <LoopForever>:

LoopForever:
    b LoopForever
 800242e:	e7fe      	b.n	800242e <LoopForever>
  ldr   r0, =_estack
 8002430:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 800243c:	0800b4d4 	.word	0x0800b4d4
  ldr r2, =_sbss
 8002440:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002444:	200016dc 	.word	0x200016dc

08002448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC1_2_IRQHandler>

0800244a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f000 f95b 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245a:	200f      	movs	r0, #15
 800245c:	f000 f80e 	bl	800247c <HAL_InitTick>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	e001      	b.n	8002470 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800246c:	f7ff fca4 	bl	8001db8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002470:	79fb      	ldrb	r3, [r7, #7]

}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_InitTick+0x68>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d022      	beq.n	80024d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_InitTick+0x6c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_InitTick+0x68>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249c:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f966 	bl	8002776 <HAL_SYSTICK_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d809      	bhi.n	80024ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b6:	2200      	movs	r2, #0
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024be:	f000 f932 	bl	8002726 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_InitTick+0x70>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e007      	b.n	80024da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e004      	b.n	80024da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e001      	b.n	80024da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000024 	.word	0x20000024
 80024e8:	2000001c 	.word	0x2000001c
 80024ec:	20000020 	.word	0x20000020

080024f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_IncTick+0x1c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x20>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a03      	ldr	r2, [pc, #12]	; (800250c <HAL_IncTick+0x1c>)
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	20000744 	.word	0x20000744
 8002510:	20000024 	.word	0x20000024

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000744 	.word	0x20000744

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffee 	bl	8002514 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002544:	d004      	beq.n	8002550 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_Delay+0x40>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4413      	add	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002550:	bf00      	nop
 8002552:	f7ff ffdf 	bl	8002514 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	429a      	cmp	r2, r3
 8002560:	d8f7      	bhi.n	8002552 <HAL_Delay+0x26>
  {
  }
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000024 	.word	0x20000024

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	; (800260c <__NVIC_EnableIRQ+0x38>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f0:	f7ff ff8e 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff29 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff40 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff90 	bl	8002664 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5f 	bl	8002610 <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff33 	bl	80025d4 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa4 	bl	80026cc <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800279e:	e15a      	b.n	8002a56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 814c 	beq.w	8002a50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d005      	beq.n	80027d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d130      	bne.n	8002832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002806:	2201      	movs	r2, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0201 	and.w	r2, r3, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b03      	cmp	r3, #3
 800283c:	d017      	beq.n	800286e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d123      	bne.n	80028c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	6939      	ldr	r1, [r7, #16]
 80028be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80a6 	beq.w	8002a50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002904:	4b5b      	ldr	r3, [pc, #364]	; (8002a74 <HAL_GPIO_Init+0x2e4>)
 8002906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002908:	4a5a      	ldr	r2, [pc, #360]	; (8002a74 <HAL_GPIO_Init+0x2e4>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6613      	str	r3, [r2, #96]	; 0x60
 8002910:	4b58      	ldr	r3, [pc, #352]	; (8002a74 <HAL_GPIO_Init+0x2e4>)
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291c:	4a56      	ldr	r2, [pc, #344]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002946:	d01f      	beq.n	8002988 <HAL_GPIO_Init+0x1f8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x2ec>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d019      	beq.n	8002984 <HAL_GPIO_Init+0x1f4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x2f0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_GPIO_Init+0x1f0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_GPIO_Init+0x2f4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00d      	beq.n	800297c <HAL_GPIO_Init+0x1ec>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a49      	ldr	r2, [pc, #292]	; (8002a88 <HAL_GPIO_Init+0x2f8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <HAL_GPIO_Init+0x1e8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a48      	ldr	r2, [pc, #288]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_GPIO_Init+0x1e4>
 8002970:	2305      	movs	r3, #5
 8002972:	e00a      	b.n	800298a <HAL_GPIO_Init+0x1fa>
 8002974:	2306      	movs	r3, #6
 8002976:	e008      	b.n	800298a <HAL_GPIO_Init+0x1fa>
 8002978:	2304      	movs	r3, #4
 800297a:	e006      	b.n	800298a <HAL_GPIO_Init+0x1fa>
 800297c:	2303      	movs	r3, #3
 800297e:	e004      	b.n	800298a <HAL_GPIO_Init+0x1fa>
 8002980:	2302      	movs	r3, #2
 8002982:	e002      	b.n	800298a <HAL_GPIO_Init+0x1fa>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_GPIO_Init+0x1fa>
 8002988:	2300      	movs	r3, #0
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	f002 0203 	and.w	r2, r2, #3
 8002990:	0092      	lsls	r2, r2, #2
 8002992:	4093      	lsls	r3, r2
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800299a:	4937      	ldr	r1, [pc, #220]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a8:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_GPIO_Init+0x300>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029cc:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_GPIO_Init+0x300>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <HAL_GPIO_Init+0x300>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029f6:	4a26      	ldr	r2, [pc, #152]	; (8002a90 <HAL_GPIO_Init+0x300>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029fc:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_GPIO_Init+0x300>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f ae9d 	bne.w	80027a0 <HAL_GPIO_Init+0x10>
  }
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	48000400 	.word	0x48000400
 8002a80:	48000800 	.word	0x48000800
 8002a84:	48000c00 	.word	0x48000c00
 8002a88:	48001000 	.word	0x48001000
 8002a8c:	48001400 	.word	0x48001400
 8002a90:	40010400 	.word	0x40010400

08002a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e001      	b.n	8002ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e081      	b.n	8002c0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff f970 	bl	8001e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	e006      	b.n	8002b7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d104      	bne.n	8002b8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69d9      	ldr	r1, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d138      	bne.n	8002c9a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e032      	b.n	8002c9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	; 0x24
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c64:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d139      	bne.n	8002d32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e033      	b.n	8002d34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cfa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
  }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b08b      	sub	sp, #44	; 0x2c
 8002d44:	af06      	add	r7, sp, #24
 8002d46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0d7      	b.n	8002f02 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f008 f830 	bl	800adcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 f980 	bl	800707e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	e04c      	b.n	8002e1e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	3301      	adds	r3, #1
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	b298      	uxth	r0, r3
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3336      	adds	r3, #54	; 0x36
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3338      	adds	r3, #56	; 0x38
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	333c      	adds	r3, #60	; 0x3c
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3340      	adds	r3, #64	; 0x40
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d3ad      	bcc.n	8002d84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e044      	b.n	8002eb8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3b5      	bcc.n	8002e2e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	687e      	ldr	r6, [r7, #4]
 8002eca:	466d      	mov	r5, sp
 8002ecc:	f106 0410 	add.w	r4, r6, #16
 8002ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	602b      	str	r3, [r5, #0]
 8002ed8:	1d33      	adds	r3, r6, #4
 8002eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f004 f8e9 	bl	80070b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f001 fc29 	bl	8004752 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_PCD_Start+0x16>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e012      	b.n	8002f46 <HAL_PCD_Start+0x3c>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 f88f 	bl	8007050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f006 f844 	bl	8008fc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f006 f849 	bl	8008ff2 <USB_ReadInterrupts>
 8002f60:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fb26 	bl	80035be <PCD_EP_ISR_Handler>

    return;
 8002f72:	e110      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d013      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f90:	b292      	uxth	r2, r2
 8002f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f007 ffb1 	bl	800aefe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8fc 	bl	800319c <HAL_PCD_SetAddress>

    return;
 8002fa4:	e0f7      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00c      	beq.n	8002fca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fc8:	e0e5      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe6:	b292      	uxth	r2, r2
 8002fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fec:	e0d3      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d034      	beq.n	8003062 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0204 	bic.w	r2, r2, #4
 800300a:	b292      	uxth	r2, r2
 800300c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0208 	bic.w	r2, r2, #8
 8003022:	b292      	uxth	r2, r2
 8003024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800303a:	2100      	movs	r1, #0
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f008 f953 	bl	800b2e8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f007 ff94 	bl	800af70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800305a:	b292      	uxth	r2, r2
 800305c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003060:	e099      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003068:	2b00      	cmp	r3, #0
 800306a:	d027      	beq.n	80030bc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0208 	orr.w	r2, r2, #8
 800307e:	b292      	uxth	r2, r2
 8003080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800308c:	b29a      	uxth	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003096:	b292      	uxth	r2, r2
 8003098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0204 	orr.w	r2, r2, #4
 80030ae:	b292      	uxth	r2, r2
 80030b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f007 ff41 	bl	800af3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030ba:	e06c      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d040      	beq.n	8003148 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d8:	b292      	uxth	r2, r2
 80030da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d12b      	bne.n	8003140 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0204 	orr.w	r2, r2, #4
 80030fa:	b292      	uxth	r2, r2
 80030fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	b292      	uxth	r2, r2
 8003114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003128:	b29b      	uxth	r3, r3
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003136:	2101      	movs	r1, #1
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f008 f8d5 	bl	800b2e8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800313e:	e02a      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f007 fefb 	bl	800af3c <HAL_PCD_SuspendCallback>
    return;
 8003146:	e026      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00f      	beq.n	8003172 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800315a:	b29a      	uxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003164:	b292      	uxth	r2, r2
 8003166:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f007 feb9 	bl	800aee2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003170:	e011      	b.n	8003196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800318e:	b292      	uxth	r2, r2
 8003190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003194:	bf00      	nop
  }
}
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_PCD_SetAddress+0x1a>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e013      	b.n	80031de <HAL_PCD_SetAddress+0x42>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f005 fee4 	bl	8008f9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	4608      	mov	r0, r1
 80031f0:	4611      	mov	r1, r2
 80031f2:	461a      	mov	r2, r3
 80031f4:	4603      	mov	r3, r0
 80031f6:	70fb      	strb	r3, [r7, #3]
 80031f8:	460b      	mov	r3, r1
 80031fa:	803b      	strh	r3, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003208:	2b00      	cmp	r3, #0
 800320a:	da0e      	bge.n	800322a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	705a      	strb	r2, [r3, #1]
 8003228:	e00e      	b.n	8003248 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 0207 	and.w	r2, r3, #7
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003254:	883a      	ldrh	r2, [r7, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	78ba      	ldrb	r2, [r7, #2]
 800325e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003272:	78bb      	ldrb	r3, [r7, #2]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d102      	bne.n	800327e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_PCD_EP_Open+0xa6>
 8003288:	2302      	movs	r3, #2
 800328a:	e00e      	b.n	80032aa <HAL_PCD_EP_Open+0xc4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	4618      	mov	r0, r3
 800329c:	f003 ff2c 	bl	80070f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80032a8:	7afb      	ldrb	r3, [r7, #11]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da0e      	bge.n	80032e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	705a      	strb	r2, [r3, #1]
 80032e2:	e00e      	b.n	8003302 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	f003 0207 	and.w	r2, r3, #7
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_EP_Close+0x6a>
 8003318:	2302      	movs	r3, #2
 800331a:	e00e      	b.n	800333a <HAL_PCD_EP_Close+0x88>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fa78 	bl	8007820 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	460b      	mov	r3, r1
 8003350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	f003 0207 	and.w	r2, r3, #7
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2200      	movs	r2, #0
 8003380:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003382:	7afb      	ldrb	r3, [r7, #11]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	b2da      	uxtb	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6979      	ldr	r1, [r7, #20]
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 fc2b 	bl	8007bfa <USB_EPStartXfer>
 80033a4:	e005      	b.n	80033b2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6979      	ldr	r1, [r7, #20]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 fc24 	bl	8007bfa <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 0207 	and.w	r2, r3, #7
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	440b      	add	r3, r1
 80033da:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	460b      	mov	r3, r1
 80033fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2201      	movs	r2, #1
 8003436:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003438:	7afb      	ldrb	r3, [r7, #11]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	b2da      	uxtb	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003444:	7afb      	ldrb	r3, [r7, #11]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6979      	ldr	r1, [r7, #20]
 8003454:	4618      	mov	r0, r3
 8003456:	f004 fbd0 	bl	8007bfa <USB_EPStartXfer>
 800345a:	e005      	b.n	8003468 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6979      	ldr	r1, [r7, #20]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 fbc9 	bl	8007bfa <USB_EPStartXfer>
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 0207 	and.w	r2, r3, #7
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	429a      	cmp	r2, r3
 800348a:	d901      	bls.n	8003490 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e03e      	b.n	800350e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da0e      	bge.n	80034b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	705a      	strb	r2, [r3, #1]
 80034b4:	e00c      	b.n	80034d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_EP_SetStall+0x7e>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_SetStall+0x9c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f005 fc4d 	bl	8008d9e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	d901      	bls.n	8003534 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e040      	b.n	80035b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da0e      	bge.n	800355a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	705a      	strb	r2, [r3, #1]
 8003558:	e00e      	b.n	8003578 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 0207 	and.w	r2, r3, #7
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_PCD_EP_ClrStall+0x82>
 8003594:	2302      	movs	r3, #2
 8003596:	e00e      	b.n	80035b6 <HAL_PCD_EP_ClrStall+0xa0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f005 fc4a 	bl	8008e40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b096      	sub	sp, #88	; 0x58
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035c6:	e39c      	b.n	8003d02 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80035e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 815e 	bne.w	80038a8 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d150      	bne.n	800369a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	81fb      	strh	r3, [r7, #14]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003618:	b29b      	uxth	r3, r3
 800361a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3328      	adds	r3, #40	; 0x28
 8003620:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	4413      	add	r3, r2
 800363c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003648:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	441a      	add	r2, r3
 8003654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003656:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003658:	2100      	movs	r1, #0
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f007 fc27 	bl	800aeae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 834a 	beq.w	8003d02 <PCD_EP_ISR_Handler+0x744>
 800366e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8345 	bne.w	8003d02 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003684:	b2da      	uxtb	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b292      	uxth	r2, r2
 800368c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003698:	e333      	b.n	8003d02 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036a0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d032      	beq.n	800371e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80036ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f005 fccf 	bl	8009096 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003704:	4013      	ands	r3, r2
 8003706:	823b      	strh	r3, [r7, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	8a3a      	ldrh	r2, [r7, #16]
 800370e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003712:	b292      	uxth	r2, r2
 8003714:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f007 fb9c 	bl	800ae54 <HAL_PCD_SetupStageCallback>
 800371c:	e2f1      	b.n	8003d02 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800371e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003722:	2b00      	cmp	r3, #0
 8003724:	f280 82ed 	bge.w	8003d02 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29a      	uxth	r2, r3
 8003730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003734:	4013      	ands	r3, r2
 8003736:	83fb      	strh	r3, [r7, #30]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	8bfa      	ldrh	r2, [r7, #30]
 800373e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003742:	b292      	uxth	r2, r2
 8003744:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374e:	b29b      	uxth	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	4413      	add	r3, r2
 8003760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800376a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800376e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d019      	beq.n	80037aa <PCD_EP_ISR_Handler+0x1ec>
 8003776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d015      	beq.n	80037aa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	6959      	ldr	r1, [r3, #20]
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800378e:	b29b      	uxth	r3, r3
 8003790:	f005 fc81 	bl	8009096 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	441a      	add	r2, r3
 800379e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037a2:	2100      	movs	r1, #0
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f007 fb67 	bl	800ae78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 82a3 	bne.w	8003d02 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4413      	add	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b3e      	cmp	r3, #62	; 0x3e
 80037e2:	d918      	bls.n	8003816 <PCD_EP_ISR_Handler+0x258>
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	647b      	str	r3, [r7, #68]	; 0x44
 80037ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <PCD_EP_ISR_Handler+0x240>
 80037f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fa:	3b01      	subs	r3, #1
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
 80037fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003800:	b29b      	uxth	r3, r3
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	b29b      	uxth	r3, r3
 8003806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800380a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380e:	b29a      	uxth	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	e029      	b.n	800386a <PCD_EP_ISR_Handler+0x2ac>
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d112      	bne.n	8003844 <PCD_EP_ISR_Handler+0x286>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003828:	b29a      	uxth	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383c:	b29a      	uxth	r2, r3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	801a      	strh	r2, [r3, #0]
 8003842:	e012      	b.n	800386a <PCD_EP_ISR_Handler+0x2ac>
 8003844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	647b      	str	r3, [r7, #68]	; 0x44
 800384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <PCD_EP_ISR_Handler+0x2a0>
 8003858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385a:	3301      	adds	r3, #1
 800385c:	647b      	str	r3, [r7, #68]	; 0x44
 800385e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003860:	b29b      	uxth	r3, r3
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	b29a      	uxth	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	827b      	strh	r3, [r7, #18]
 800387c:	8a7b      	ldrh	r3, [r7, #18]
 800387e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003882:	827b      	strh	r3, [r7, #18]
 8003884:	8a7b      	ldrh	r3, [r7, #18]
 8003886:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800388a:	827b      	strh	r3, [r7, #18]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	8a7b      	ldrh	r3, [r7, #18]
 8003892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8013      	strh	r3, [r2, #0]
 80038a6:	e22c      	b.n	8003d02 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038bc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f280 80f6 	bge.w	8003ab2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038dc:	4013      	ands	r3, r2
 80038de:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80038f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f8:	b292      	uxth	r2, r2
 80038fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038fc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	7b1b      	ldrb	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d123      	bne.n	8003962 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003922:	b29b      	uxth	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	4413      	add	r3, r2
 8003934:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8003942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 808e 	beq.w	8003a68 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003952:	6959      	ldr	r1, [r3, #20]
 8003954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003956:	88da      	ldrh	r2, [r3, #6]
 8003958:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800395c:	f005 fb9b 	bl	8009096 <USB_ReadPMA>
 8003960:	e082      	b.n	8003a68 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	78db      	ldrb	r3, [r3, #3]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d10a      	bne.n	8003980 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800396a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800396e:	461a      	mov	r2, r3
 8003970:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9d3 	bl	8003d1e <HAL_PCD_EP_DB_Receive>
 8003978:	4603      	mov	r3, r0
 800397a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800397e:	e073      	b.n	8003a68 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d022      	beq.n	8003a24 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	4413      	add	r3, r2
 80039f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02c      	beq.n	8003a68 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	6959      	ldr	r1, [r3, #20]
 8003a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a18:	891a      	ldrh	r2, [r3, #8]
 8003a1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a1e:	f005 fb3a 	bl	8009096 <USB_ReadPMA>
 8003a22:	e021      	b.n	8003a68 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5a:	6959      	ldr	r1, [r3, #20]
 8003a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5e:	895a      	ldrh	r2, [r3, #10]
 8003a60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a64:	f005 fb17 	bl	8009096 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a70:	441a      	add	r2, r3
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a7e:	441a      	add	r2, r3
 8003a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a82:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <PCD_EP_ISR_Handler+0x4da>
 8003a8c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d206      	bcs.n	8003aa6 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f007 f9ea 	bl	800ae78 <HAL_PCD_DataOutStageCallback>
 8003aa4:	e005      	b.n	8003ab2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 f8a4 	bl	8007bfa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ab2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8121 	beq.w	8003d02 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ac0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	441a      	add	r2, r3
 8003b00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b12:	78db      	ldrb	r3, [r3, #3]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	f000 80a2 	beq.w	8003c5e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	7b1b      	ldrb	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8093 	beq.w	8003c50 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d046      	beq.n	8003bc4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	785b      	ldrb	r3, [r3, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d126      	bne.n	8003b8c <PCD_EP_ISR_Handler+0x5ce>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	4413      	add	r3, r2
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	00da      	lsls	r2, r3, #3
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	4413      	add	r3, r2
 8003b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b64:	623b      	str	r3, [r7, #32]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	e061      	b.n	8003c50 <PCD_EP_ISR_Handler+0x692>
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d15d      	bne.n	8003c50 <PCD_EP_ISR_Handler+0x692>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	4413      	add	r3, r2
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	00da      	lsls	r2, r3, #3
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	e045      	b.n	8003c50 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d126      	bne.n	8003c20 <PCD_EP_ISR_Handler+0x662>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	4413      	add	r3, r2
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	00da      	lsls	r2, r3, #3
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	e017      	b.n	8003c50 <PCD_EP_ISR_Handler+0x692>
 8003c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c22:	785b      	ldrb	r3, [r3, #1]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d113      	bne.n	8003c50 <PCD_EP_ISR_Handler+0x692>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c36:	4413      	add	r3, r2
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c42:	4413      	add	r3, r2
 8003c44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f007 f929 	bl	800aeae <HAL_PCD_DataInStageCallback>
 8003c5c:	e051      	b.n	8003d02 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c5e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d144      	bne.n	8003cf4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d907      	bls.n	8003cae <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ca6:	1ad2      	subs	r2, r2, r3
 8003ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003caa:	619a      	str	r2, [r3, #24]
 8003cac:	e002      	b.n	8003cb4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f007 f8f3 	bl	800aeae <HAL_PCD_DataInStageCallback>
 8003cc8:	e01b      	b.n	8003d02 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cd2:	441a      	add	r2, r3
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ce0:	441a      	add	r2, r3
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 ff84 	bl	8007bfa <USB_EPStartXfer>
 8003cf2:	e006      	b.n	8003d02 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003cf4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f917 	bl	8003f30 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f6ff ac5a 	blt.w	80035c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3758      	adds	r7, #88	; 0x58
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b088      	sub	sp, #32
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d07c      	beq.n	8003e30 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	8b7b      	ldrh	r3, [r7, #26]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d306      	bcc.n	8003d74 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	8b7b      	ldrh	r3, [r7, #26]
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	619a      	str	r2, [r3, #24]
 8003d72:	e002      	b.n	8003d7a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2200      	movs	r2, #0
 8003d78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d123      	bne.n	8003dca <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	833b      	strh	r3, [r7, #24]
 8003d9e:	8b3b      	ldrh	r3, [r7, #24]
 8003da0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003da4:	833b      	strh	r3, [r7, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	8b3b      	ldrh	r3, [r7, #24]
 8003db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01f      	beq.n	8003e14 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	82fb      	strh	r3, [r7, #22]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	8afb      	ldrh	r3, [r7, #22]
 8003e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e14:	8b7b      	ldrh	r3, [r7, #26]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8085 	beq.w	8003f26 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6959      	ldr	r1, [r3, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	891a      	ldrh	r2, [r3, #8]
 8003e28:	8b7b      	ldrh	r3, [r7, #26]
 8003e2a:	f005 f934 	bl	8009096 <USB_ReadPMA>
 8003e2e:	e07a      	b.n	8003f26 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	8b7b      	ldrh	r3, [r7, #26]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d306      	bcc.n	8003e6e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	8b7b      	ldrh	r3, [r7, #26]
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	619a      	str	r2, [r3, #24]
 8003e6c:	e002      	b.n	8003e74 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d123      	bne.n	8003ec4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	83fb      	strh	r3, [r7, #30]
 8003e98:	8bfb      	ldrh	r3, [r7, #30]
 8003e9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e9e:	83fb      	strh	r3, [r7, #30]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	8bfb      	ldrh	r3, [r7, #30]
 8003eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11f      	bne.n	8003f0e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee8:	83bb      	strh	r3, [r7, #28]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	8bbb      	ldrh	r3, [r7, #28]
 8003efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f0e:	8b7b      	ldrh	r3, [r7, #26]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6959      	ldr	r1, [r3, #20]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	895a      	ldrh	r2, [r3, #10]
 8003f20:	8b7b      	ldrh	r3, [r7, #26]
 8003f22:	f005 f8b8 	bl	8009096 <USB_ReadPMA>
    }
  }

  return count;
 8003f26:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b0a2      	sub	sp, #136	; 0x88
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 81c5 	beq.w	80042d4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	4413      	add	r3, r2
 8003f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d907      	bls.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	619a      	str	r2, [r3, #24]
 8003f8c:	e002      	b.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 80b9 	bne.w	8004110 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d126      	bne.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	4413      	add	r3, r2
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	00da      	lsls	r2, r3, #3
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	e01a      	b.n	800402a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	785b      	ldrb	r3, [r3, #1]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d116      	bne.n	800402a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	4413      	add	r3, r2
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	00da      	lsls	r2, r3, #3
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	4413      	add	r3, r2
 800401e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	2200      	movs	r2, #0
 8004028:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d126      	bne.n	8004086 <HAL_PCD_EP_DB_Transmit+0x156>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4413      	add	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	00da      	lsls	r2, r3, #3
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800406a:	b29a      	uxth	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407e:	b29a      	uxth	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	e017      	b.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x186>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d113      	bne.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	4413      	add	r3, r2
 800409e:	623b      	str	r3, [r7, #32]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	00da      	lsls	r2, r3, #3
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2200      	movs	r2, #0
 80040b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	4619      	mov	r1, r3
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f006 fef6 	bl	800aeae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 82d2 	beq.w	8004672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	827b      	strh	r3, [r7, #18]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	8a7b      	ldrh	r3, [r7, #18]
 80040fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]
 800410e:	e2b0      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d021      	beq.n	800415e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004164:	2b01      	cmp	r3, #1
 8004166:	f040 8284 	bne.w	8004672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004172:	441a      	add	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004180:	441a      	add	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d309      	bcc.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	621a      	str	r2, [r3, #32]
 80041a4:	e015      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80041ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041bc:	e009      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d155      	bne.n	8004286 <HAL_PCD_EP_DB_Transmit+0x356>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	4413      	add	r3, r2
 80041f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	00da      	lsls	r2, r3, #3
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	4413      	add	r3, r2
 80041fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
 8004202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004204:	2b3e      	cmp	r3, #62	; 0x3e
 8004206:	d916      	bls.n	8004236 <HAL_PCD_EP_DB_Transmit+0x306>
 8004208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	64bb      	str	r3, [r7, #72]	; 0x48
 800420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421a:	3b01      	subs	r3, #1
 800421c:	64bb      	str	r3, [r7, #72]	; 0x48
 800421e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004220:	b29b      	uxth	r3, r3
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	b29b      	uxth	r3, r3
 8004226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422e:	b29a      	uxth	r2, r3
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	e043      	b.n	80042be <HAL_PCD_EP_DB_Transmit+0x38e>
 8004236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004238:	2b00      	cmp	r3, #0
 800423a:	d112      	bne.n	8004262 <HAL_PCD_EP_DB_Transmit+0x332>
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004246:	b29a      	uxth	r2, r3
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425a:	b29a      	uxth	r2, r3
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	e02d      	b.n	80042be <HAL_PCD_EP_DB_Transmit+0x38e>
 8004262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	64bb      	str	r3, [r7, #72]	; 0x48
 8004268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_PCD_EP_DB_Transmit+0x348>
 8004272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004274:	3301      	adds	r3, #1
 8004276:	64bb      	str	r3, [r7, #72]	; 0x48
 8004278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427a:	b29b      	uxth	r3, r3
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	b29a      	uxth	r2, r3
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	e01b      	b.n	80042be <HAL_PCD_EP_DB_Transmit+0x38e>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d117      	bne.n	80042be <HAL_PCD_EP_DB_Transmit+0x38e>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	643b      	str	r3, [r7, #64]	; 0x40
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a2:	4413      	add	r3, r2
 80042a4:	643b      	str	r3, [r7, #64]	; 0x40
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	00da      	lsls	r2, r3, #3
 80042ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ae:	4413      	add	r3, r2
 80042b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6959      	ldr	r1, [r3, #20]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	891a      	ldrh	r2, [r3, #8]
 80042ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f004 fea0 	bl	8009012 <USB_WritePMA>
 80042d2:	e1ce      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	4413      	add	r3, r2
 80042ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004304:	429a      	cmp	r2, r3
 8004306:	d307      	bcc.n	8004318 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004310:	1ad2      	subs	r2, r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	619a      	str	r2, [r3, #24]
 8004316:	e002      	b.n	800431e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 80c4 	bne.w	80044b0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d126      	bne.n	800437e <HAL_PCD_EP_DB_Transmit+0x44e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	66bb      	str	r3, [r7, #104]	; 0x68
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004344:	4413      	add	r3, r2
 8004346:	66bb      	str	r3, [r7, #104]	; 0x68
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	00da      	lsls	r2, r3, #3
 800434e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004350:	4413      	add	r3, r2
 8004352:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004356:	667b      	str	r3, [r7, #100]	; 0x64
 8004358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004362:	b29a      	uxth	r2, r3
 8004364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29a      	uxth	r2, r3
 8004378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	e01a      	b.n	80043b4 <HAL_PCD_EP_DB_Transmit+0x484>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d116      	bne.n	80043b4 <HAL_PCD_EP_DB_Transmit+0x484>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	673b      	str	r3, [r7, #112]	; 0x70
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004394:	b29b      	uxth	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800439a:	4413      	add	r3, r2
 800439c:	673b      	str	r3, [r7, #112]	; 0x70
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	00da      	lsls	r2, r3, #3
 80043a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043a6:	4413      	add	r3, r2
 80043a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	2200      	movs	r2, #0
 80043b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d12f      	bne.n	8004422 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043da:	4413      	add	r3, r2
 80043dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	00da      	lsls	r2, r3, #3
 80043e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ea:	4413      	add	r3, r2
 80043ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004400:	b29a      	uxth	r2, r3
 8004402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004418:	b29a      	uxth	r2, r3
 800441a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800441e:	801a      	strh	r2, [r3, #0]
 8004420:	e017      	b.n	8004452 <HAL_PCD_EP_DB_Transmit+0x522>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d113      	bne.n	8004452 <HAL_PCD_EP_DB_Transmit+0x522>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004432:	b29b      	uxth	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004438:	4413      	add	r3, r2
 800443a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	00da      	lsls	r2, r3, #3
 8004442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004444:	4413      	add	r3, r2
 8004446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800444a:	67bb      	str	r3, [r7, #120]	; 0x78
 800444c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800444e:	2200      	movs	r2, #0
 8004450:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f006 fd28 	bl	800aeae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f040 8104 	bne.w	8004672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800449a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8013      	strh	r3, [r2, #0]
 80044ae:	e0e0      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d121      	bne.n	80044fe <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 80b4 	bne.w	8004672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004512:	441a      	add	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004520:	441a      	add	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	429a      	cmp	r2, r3
 8004530:	d309      	bcc.n	8004546 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453e:	1ad2      	subs	r2, r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	621a      	str	r2, [r3, #32]
 8004544:	e015      	b.n	8004572 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800454e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004552:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800455c:	e009      	b.n	8004572 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2200      	movs	r2, #0
 8004568:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	663b      	str	r3, [r7, #96]	; 0x60
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d155      	bne.n	800462c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	65bb      	str	r3, [r7, #88]	; 0x58
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800458e:	b29b      	uxth	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004594:	4413      	add	r3, r2
 8004596:	65bb      	str	r3, [r7, #88]	; 0x58
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	00da      	lsls	r2, r3, #3
 800459e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a0:	4413      	add	r3, r2
 80045a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045a6:	657b      	str	r3, [r7, #84]	; 0x54
 80045a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045aa:	2b3e      	cmp	r3, #62	; 0x3e
 80045ac:	d916      	bls.n	80045dc <HAL_PCD_EP_DB_Transmit+0x6ac>
 80045ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	677b      	str	r3, [r7, #116]	; 0x74
 80045b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x694>
 80045be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c0:	3b01      	subs	r3, #1
 80045c2:	677b      	str	r3, [r7, #116]	; 0x74
 80045c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	029b      	lsls	r3, r3, #10
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	e040      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x72e>
 80045dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d112      	bne.n	8004608 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80045e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	801a      	strh	r2, [r3, #0]
 80045f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004600:	b29a      	uxth	r2, r3
 8004602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	e02a      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x72e>
 8004608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	677b      	str	r3, [r7, #116]	; 0x74
 800460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800461a:	3301      	adds	r3, #1
 800461c:	677b      	str	r3, [r7, #116]	; 0x74
 800461e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004620:	b29b      	uxth	r3, r3
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	b29a      	uxth	r2, r3
 8004626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e018      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x72e>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d114      	bne.n	800465e <HAL_PCD_EP_DB_Transmit+0x72e>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004642:	4413      	add	r3, r2
 8004644:	663b      	str	r3, [r7, #96]	; 0x60
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	00da      	lsls	r2, r3, #3
 800464c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800464e:	4413      	add	r3, r2
 8004650:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	b29a      	uxth	r2, r3
 800465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6959      	ldr	r1, [r3, #20]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	895a      	ldrh	r2, [r3, #10]
 800466a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466c:	b29b      	uxth	r3, r3
 800466e:	f004 fcd0 	bl	8009012 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468c:	823b      	strh	r3, [r7, #16]
 800468e:	8a3b      	ldrh	r3, [r7, #16]
 8004690:	f083 0310 	eor.w	r3, r3, #16
 8004694:	823b      	strh	r3, [r7, #16]
 8004696:	8a3b      	ldrh	r3, [r7, #16]
 8004698:	f083 0320 	eor.w	r3, r3, #32
 800469c:	823b      	strh	r3, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	441a      	add	r2, r3
 80046ac:	8a3b      	ldrh	r3, [r7, #16]
 80046ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3788      	adds	r7, #136	; 0x88
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	4613      	mov	r3, r2
 80046dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80046de:	897b      	ldrh	r3, [r7, #10]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e009      	b.n	8004716 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004702:	897a      	ldrh	r2, [r7, #10]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004716:	893b      	ldrh	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2200      	movs	r2, #0
 8004720:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	b29a      	uxth	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	80da      	strh	r2, [r3, #6]
 800472a:	e00b      	b.n	8004744 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2201      	movs	r2, #1
 8004730:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	b29a      	uxth	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	b29a      	uxth	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004776:	b29b      	uxth	r3, r3
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800478a:	b29b      	uxth	r3, r3
 800478c:	f043 0302 	orr.w	r3, r3, #2
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d141      	bne.n	800483a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047b6:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d131      	bne.n	8004828 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047c4:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ca:	4a46      	ldr	r2, [pc, #280]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047dc:	4a41      	ldr	r2, [pc, #260]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047e4:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2232      	movs	r2, #50	; 0x32
 80047ea:	fb02 f303 	mul.w	r3, r2, r3
 80047ee:	4a3f      	ldr	r2, [pc, #252]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	0c9b      	lsrs	r3, r3, #18
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fa:	e002      	b.n	8004802 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3b01      	subs	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004802:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480e:	d102      	bne.n	8004816 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f2      	bne.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004816:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d158      	bne.n	80048d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e057      	b.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004828:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800482e:	4a2d      	ldr	r2, [pc, #180]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004838:	e04d      	b.n	80048d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004840:	d141      	bne.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004842:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d131      	bne.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004856:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004860:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004868:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800486e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2232      	movs	r2, #50	; 0x32
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	0c9b      	lsrs	r3, r3, #18
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004886:	e002      	b.n	800488e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3b01      	subs	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488e:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489a:	d102      	bne.n	80048a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f2      	bne.n	8004888 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	d112      	bne.n	80048d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e011      	b.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048c4:	e007      	b.n	80048d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048c6:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ce:	4a05      	ldr	r2, [pc, #20]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40007000 	.word	0x40007000
 80048e8:	2000001c 	.word	0x2000001c
 80048ec:	431bde83 	.word	0x431bde83

080048f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a04      	ldr	r2, [pc, #16]	; (800490c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048fe:	6093      	str	r3, [r2, #8]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40007000 	.word	0x40007000

08004910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e308      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d075      	beq.n	8004a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492e:	4ba3      	ldr	r3, [pc, #652]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004938:	4ba0      	ldr	r3, [pc, #640]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d102      	bne.n	800494e <HAL_RCC_OscConfig+0x3e>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d002      	beq.n	8004954 <HAL_RCC_OscConfig+0x44>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b99      	ldr	r3, [pc, #612]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d05b      	beq.n	8004a18 <HAL_RCC_OscConfig+0x108>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d157      	bne.n	8004a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e2e3      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x74>
 8004976:	4b91      	ldr	r3, [pc, #580]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a90      	ldr	r2, [pc, #576]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e01d      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x98>
 800498e:	4b8b      	ldr	r3, [pc, #556]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a8a      	ldr	r2, [pc, #552]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b88      	ldr	r3, [pc, #544]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a87      	ldr	r2, [pc, #540]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 80049a8:	4b84      	ldr	r3, [pc, #528]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a83      	ldr	r2, [pc, #524]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a80      	ldr	r2, [pc, #512]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd fda4 	bl	8002514 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fd fda0 	bl	8002514 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e2a8      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e2:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0xc0>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fd90 	bl	8002514 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fd fd8c 	bl	8002514 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e294      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0xe8>
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d075      	beq.n	8004b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b62      	ldr	r3, [pc, #392]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	d102      	bne.n	8004a46 <HAL_RCC_OscConfig+0x136>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_OscConfig+0x13c>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d11f      	bne.n	8004a8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a4c:	4b5b      	ldr	r3, [pc, #364]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_OscConfig+0x154>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e267      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b55      	ldr	r3, [pc, #340]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	4952      	ldr	r1, [pc, #328]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a78:	4b51      	ldr	r3, [pc, #324]	; (8004bc0 <HAL_RCC_OscConfig+0x2b0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fd fcfd 	bl	800247c <HAL_InitTick>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d043      	beq.n	8004b10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e253      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d023      	beq.n	8004adc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a94:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a48      	ldr	r2, [pc, #288]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fd fd38 	bl	8002514 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa8:	f7fd fd34 	bl	8002514 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e23c      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aba:	4b40      	ldr	r3, [pc, #256]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b3d      	ldr	r3, [pc, #244]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	061b      	lsls	r3, r3, #24
 8004ad4:	4939      	ldr	r1, [pc, #228]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
 8004ada:	e01a      	b.n	8004b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004adc:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a36      	ldr	r2, [pc, #216]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fd14 	bl	8002514 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af0:	f7fd fd10 	bl	8002514 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e218      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x1e0>
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d03c      	beq.n	8004b98 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01c      	beq.n	8004b60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b26:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2c:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fd fced 	bl	8002514 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3e:	f7fd fce9 	bl	8002514 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e1f1      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ef      	beq.n	8004b3e <HAL_RCC_OscConfig+0x22e>
 8004b5e:	e01b      	b.n	8004b98 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b60:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b66:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b70:	f7fd fcd0 	bl	8002514 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b78:	f7fd fccc 	bl	8002514 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e1d4      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ef      	bne.n	8004b78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80ab 	beq.w	8004cfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2b4>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e005      	b.n	8004bc6 <HAL_RCC_OscConfig+0x2b6>
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	20000020 	.word	0x20000020
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4baf      	ldr	r3, [pc, #700]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	4aae      	ldr	r2, [pc, #696]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd6:	4bac      	ldr	r3, [pc, #688]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be6:	4ba9      	ldr	r3, [pc, #676]	; (8004e8c <HAL_RCC_OscConfig+0x57c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf2:	4ba6      	ldr	r3, [pc, #664]	; (8004e8c <HAL_RCC_OscConfig+0x57c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4aa5      	ldr	r2, [pc, #660]	; (8004e8c <HAL_RCC_OscConfig+0x57c>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fd fc89 	bl	8002514 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fd fc85 	bl	8002514 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e18d      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c18:	4b9c      	ldr	r3, [pc, #624]	; (8004e8c <HAL_RCC_OscConfig+0x57c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCC_OscConfig+0x32e>
 8004c2c:	4b96      	ldr	r3, [pc, #600]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	4a95      	ldr	r2, [pc, #596]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c3c:	e024      	b.n	8004c88 <HAL_RCC_OscConfig+0x378>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	d110      	bne.n	8004c68 <HAL_RCC_OscConfig+0x358>
 8004c46:	4b90      	ldr	r3, [pc, #576]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	4a8e      	ldr	r2, [pc, #568]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c56:	4b8c      	ldr	r3, [pc, #560]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5c:	4a8a      	ldr	r2, [pc, #552]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c66:	e00f      	b.n	8004c88 <HAL_RCC_OscConfig+0x378>
 8004c68:	4b87      	ldr	r3, [pc, #540]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	4a86      	ldr	r2, [pc, #536]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c78:	4b83      	ldr	r3, [pc, #524]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	4a82      	ldr	r2, [pc, #520]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fd fc40 	bl	8002514 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c98:	f7fd fc3c 	bl	8002514 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e142      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cae:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ed      	beq.n	8004c98 <HAL_RCC_OscConfig+0x388>
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbe:	f7fd fc29 	bl	8002514 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc6:	f7fd fc25 	bl	8002514 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e12b      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cdc:	4b6a      	ldr	r3, [pc, #424]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1ed      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cea:	7ffb      	ldrb	r3, [r7, #31]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf0:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	4a64      	ldr	r2, [pc, #400]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d03c      	beq.n	8004d82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01c      	beq.n	8004d4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d10:	4b5d      	ldr	r3, [pc, #372]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d16:	4a5c      	ldr	r2, [pc, #368]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fd fbf8 	bl	8002514 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d28:	f7fd fbf4 	bl	8002514 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0fc      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d3a:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ef      	beq.n	8004d28 <HAL_RCC_OscConfig+0x418>
 8004d48:	e01b      	b.n	8004d82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d4a:	4b4f      	ldr	r3, [pc, #316]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d50:	4a4d      	ldr	r2, [pc, #308]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5a:	f7fd fbdb 	bl	8002514 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d62:	f7fd fbd7 	bl	8002514 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0df      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d74:	4b44      	ldr	r3, [pc, #272]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ef      	bne.n	8004d62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80d3 	beq.w	8004f32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	f000 808d 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d15a      	bne.n	8004e58 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da2:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a38      	ldr	r2, [pc, #224]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fd fbb1 	bl	8002514 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db6:	f7fd fbad 	bl	8002514 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e0b5      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc8:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f0      	bne.n	8004db6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd4:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <HAL_RCC_OscConfig+0x580>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6a11      	ldr	r1, [r2, #32]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de4:	3a01      	subs	r2, #1
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	4311      	orrs	r1, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004dee:	0212      	lsls	r2, r2, #8
 8004df0:	4311      	orrs	r1, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004df6:	0852      	lsrs	r2, r2, #1
 8004df8:	3a01      	subs	r2, #1
 8004dfa:	0552      	lsls	r2, r2, #21
 8004dfc:	4311      	orrs	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e02:	0852      	lsrs	r2, r2, #1
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0652      	lsls	r2, r2, #25
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e0e:	06d2      	lsls	r2, r2, #27
 8004e10:	430a      	orrs	r2, r1
 8004e12:	491d      	ldr	r1, [pc, #116]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e24:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fb70 	bl	8002514 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fd fb6c 	bl	8002514 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e074      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x528>
 8004e56:	e06c      	b.n	8004f32 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e64:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_RCC_OscConfig+0x578>)
 8004e76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd fb48 	bl	8002514 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e86:	e00e      	b.n	8004ea6 <HAL_RCC_OscConfig+0x596>
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd fb3e 	bl	8002514 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e046      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea6:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <HAL_RCC_OscConfig+0x62c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x584>
 8004eb2:	e03e      	b.n	8004f32 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e039      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <HAL_RCC_OscConfig+0x62c>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 0203 	and.w	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d12c      	bne.n	8004f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d123      	bne.n	8004f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d11b      	bne.n	8004f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d113      	bne.n	8004f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	3b01      	subs	r3, #1
 8004f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d109      	bne.n	8004f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	3b01      	subs	r3, #1
 8004f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000

08004f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e11e      	b.n	8005196 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f58:	4b91      	ldr	r3, [pc, #580]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d910      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b8e      	ldr	r3, [pc, #568]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 020f 	bic.w	r2, r3, #15
 8004f6e:	498c      	ldr	r1, [pc, #560]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b8a      	ldr	r3, [pc, #552]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e106      	b.n	8005196 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d073      	beq.n	800507c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d129      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9c:	4b81      	ldr	r3, [pc, #516]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0f4      	b.n	8005196 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fac:	f000 f966 	bl	800527c <RCC_GetSysClockFreqFromPLLSource>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4a7c      	ldr	r2, [pc, #496]	; (80051a8 <HAL_RCC_ClockConfig+0x268>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d93f      	bls.n	800503a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fba:	4b7a      	ldr	r3, [pc, #488]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d033      	beq.n	800503a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d12f      	bne.n	800503a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fda:	4b72      	ldr	r3, [pc, #456]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe2:	4a70      	ldr	r2, [pc, #448]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	e024      	b.n	800503a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff8:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0c6      	b.n	8005196 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005008:	4b66      	ldr	r3, [pc, #408]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0be      	b.n	8005196 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005018:	f000 f8ce 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 800501c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4a61      	ldr	r2, [pc, #388]	; (80051a8 <HAL_RCC_ClockConfig+0x268>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d909      	bls.n	800503a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005026:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502e:	4a5d      	ldr	r2, [pc, #372]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b5a      	ldr	r3, [pc, #360]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4957      	ldr	r1, [pc, #348]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504c:	f7fd fa62 	bl	8002514 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fd fa5e 	bl	8002514 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e095      	b.n	8005196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b4e      	ldr	r3, [pc, #312]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d023      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005094:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a42      	ldr	r2, [pc, #264]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 800509a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800509e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050ac:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050b4:	4a3b      	ldr	r2, [pc, #236]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 80050b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050bc:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4936      	ldr	r1, [pc, #216]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d105      	bne.n	80050e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050d6:	4b33      	ldr	r3, [pc, #204]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d21d      	bcs.n	800512c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f0:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 020f 	bic.w	r2, r3, #15
 80050f8:	4929      	ldr	r1, [pc, #164]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005100:	f7fd fa08 	bl	8002514 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7fd fa04 	bl	8002514 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e03b      	b.n	8005196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_RCC_ClockConfig+0x260>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d1ed      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4917      	ldr	r1, [pc, #92]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005156:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	490f      	ldr	r1, [pc, #60]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800516a:	f000 f825 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 800516e:	4602      	mov	r2, r0
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_RCC_ClockConfig+0x264>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	490c      	ldr	r1, [pc, #48]	; (80051ac <HAL_RCC_ClockConfig+0x26c>)
 800517c:	5ccb      	ldrb	r3, [r1, r3]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x270>)
 8005188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x274>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fd f974 	bl	800247c <HAL_InitTick>
 8005194:	4603      	mov	r3, r0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40022000 	.word	0x40022000
 80051a4:	40021000 	.word	0x40021000
 80051a8:	04c4b400 	.word	0x04c4b400
 80051ac:	0800b4bc 	.word	0x0800b4bc
 80051b0:	2000001c 	.word	0x2000001c
 80051b4:	20000020 	.word	0x20000020

080051b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051be:	4b2c      	ldr	r3, [pc, #176]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d102      	bne.n	80051d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ca:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e047      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051d0:	4b27      	ldr	r3, [pc, #156]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d102      	bne.n	80051e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051dc:	4b26      	ldr	r3, [pc, #152]	; (8005278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	e03e      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051e2:	4b23      	ldr	r3, [pc, #140]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d136      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	3301      	adds	r3, #1
 8005204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b03      	cmp	r3, #3
 800520a:	d10c      	bne.n	8005226 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800520c:	4a1a      	ldr	r2, [pc, #104]	; (8005278 <HAL_RCC_GetSysClockFreq+0xc0>)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005216:	68d2      	ldr	r2, [r2, #12]
 8005218:	0a12      	lsrs	r2, r2, #8
 800521a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	617b      	str	r3, [r7, #20]
      break;
 8005224:	e00c      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005226:	4a13      	ldr	r2, [pc, #76]	; (8005274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	4a10      	ldr	r2, [pc, #64]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005230:	68d2      	ldr	r2, [r2, #12]
 8005232:	0a12      	lsrs	r2, r2, #8
 8005234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
      break;
 800523e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	0e5b      	lsrs	r3, r3, #25
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e001      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005260:	693b      	ldr	r3, [r7, #16]
}
 8005262:	4618      	mov	r0, r3
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	00f42400 	.word	0x00f42400
 8005278:	007a1200 	.word	0x007a1200

0800527c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005282:	4b1e      	ldr	r3, [pc, #120]	; (80052fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d10c      	bne.n	80052ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	4a14      	ldr	r2, [pc, #80]	; (80052fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052aa:	68d2      	ldr	r2, [r2, #12]
 80052ac:	0a12      	lsrs	r2, r2, #8
 80052ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
 80052b6:	617b      	str	r3, [r7, #20]
    break;
 80052b8:	e00c      	b.n	80052d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c2:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052c4:	68d2      	ldr	r2, [r2, #12]
 80052c6:	0a12      	lsrs	r2, r2, #8
 80052c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052cc:	fb02 f303 	mul.w	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]
    break;
 80052d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	0e5b      	lsrs	r3, r3, #25
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	3301      	adds	r3, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052ee:	687b      	ldr	r3, [r7, #4]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40021000 	.word	0x40021000
 8005300:	007a1200 	.word	0x007a1200
 8005304:	00f42400 	.word	0x00f42400

08005308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005310:	2300      	movs	r3, #0
 8005312:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005314:	2300      	movs	r3, #0
 8005316:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8098 	beq.w	8005456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005326:	2300      	movs	r3, #0
 8005328:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800532a:	4b43      	ldr	r3, [pc, #268]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10d      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005336:	4b40      	ldr	r3, [pc, #256]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	4a3f      	ldr	r2, [pc, #252]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6593      	str	r3, [r2, #88]	; 0x58
 8005342:	4b3d      	ldr	r3, [pc, #244]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534e:	2301      	movs	r3, #1
 8005350:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005352:	4b3a      	ldr	r3, [pc, #232]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a39      	ldr	r2, [pc, #228]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800535e:	f7fd f8d9 	bl	8002514 <HAL_GetTick>
 8005362:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005364:	e009      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005366:	f7fd f8d5 	bl	8002514 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d902      	bls.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	74fb      	strb	r3, [r7, #19]
        break;
 8005378:	e005      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800537a:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0ef      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d159      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800538c:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01e      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d019      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053a8:	4b23      	ldr	r3, [pc, #140]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053b4:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053c4:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053d4:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fd f895 	bl	8002514 <HAL_GetTick>
 80053ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ec:	e00b      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fd f891 	bl	8002514 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d902      	bls.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	74fb      	strb	r3, [r7, #19]
            break;
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0ec      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	4903      	ldr	r1, [pc, #12]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005430:	e008      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005432:	7cfb      	ldrb	r3, [r7, #19]
 8005434:	74bb      	strb	r3, [r7, #18]
 8005436:	e005      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005438:	40021000 	.word	0x40021000
 800543c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005444:	7c7b      	ldrb	r3, [r7, #17]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d105      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544a:	4ba6      	ldr	r3, [pc, #664]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544e:	4aa5      	ldr	r2, [pc, #660]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005454:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005462:	4ba0      	ldr	r3, [pc, #640]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f023 0203 	bic.w	r2, r3, #3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	499c      	ldr	r1, [pc, #624]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005484:	4b97      	ldr	r3, [pc, #604]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f023 020c 	bic.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	4994      	ldr	r1, [pc, #592]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054a6:	4b8f      	ldr	r3, [pc, #572]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	498b      	ldr	r1, [pc, #556]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054c8:	4b86      	ldr	r3, [pc, #536]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	4983      	ldr	r1, [pc, #524]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054ea:	4b7e      	ldr	r3, [pc, #504]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	497a      	ldr	r1, [pc, #488]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800550c:	4b75      	ldr	r3, [pc, #468]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	4972      	ldr	r1, [pc, #456]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800552e:	4b6d      	ldr	r3, [pc, #436]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	4969      	ldr	r1, [pc, #420]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005550:	4b64      	ldr	r3, [pc, #400]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4961      	ldr	r1, [pc, #388]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005572:	4b5c      	ldr	r3, [pc, #368]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	4958      	ldr	r1, [pc, #352]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	2b00      	cmp	r3, #0
 8005592:	d015      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	4950      	ldr	r1, [pc, #320]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b2:	d105      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b4:	4b4b      	ldr	r3, [pc, #300]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4a4a      	ldr	r2, [pc, #296]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d015      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055cc:	4b45      	ldr	r3, [pc, #276]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	4942      	ldr	r1, [pc, #264]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ea:	d105      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ec:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a3c      	ldr	r2, [pc, #240]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d015      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005604:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4934      	ldr	r1, [pc, #208]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005622:	d105      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005624:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a2e      	ldr	r2, [pc, #184]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800562e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800563c:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	4926      	ldr	r1, [pc, #152]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565a:	d105      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a20      	ldr	r2, [pc, #128]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005666:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d015      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005674:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	4918      	ldr	r1, [pc, #96]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005692:	d105      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800569e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	490a      	ldr	r1, [pc, #40]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ca:	d105      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000

080056e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e049      	b.n	800578e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fc fc0e 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f000 fee2 	bl	80064f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e04a      	b.n	8005846 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a21      	ldr	r2, [pc, #132]	; (8005854 <HAL_TIM_Base_Start_IT+0xbc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d018      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d013      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_TIM_Base_Start_IT+0xc0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_TIM_Base_Start_IT+0xc4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1a      	ldr	r2, [pc, #104]	; (8005860 <HAL_TIM_Base_Start_IT+0xc8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a19      	ldr	r2, [pc, #100]	; (8005864 <HAL_TIM_Base_Start_IT+0xcc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d115      	bne.n	8005830 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <HAL_TIM_Base_Start_IT+0xd0>)
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d015      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0xaa>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d011      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582e:	e008      	b.n	8005842 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e000      	b.n	8005844 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40013400 	.word	0x40013400
 8005864:	40014000 	.word	0x40014000
 8005868:	00010007 	.word	0x00010007

0800586c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e049      	b.n	8005912 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc fb2c 	bl	8001ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 fe20 	bl	80064f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <HAL_TIM_PWM_Start+0x24>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e03c      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d109      	bne.n	800595a <HAL_TIM_PWM_Start+0x3e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e02f      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d109      	bne.n	8005974 <HAL_TIM_PWM_Start+0x58>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e022      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b0c      	cmp	r3, #12
 8005978:	d109      	bne.n	800598e <HAL_TIM_PWM_Start+0x72>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	bf14      	ite	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2300      	moveq	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e015      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b10      	cmp	r3, #16
 8005992:	d109      	bne.n	80059a8 <HAL_TIM_PWM_Start+0x8c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	bf14      	ite	ne
 80059a0:	2301      	movne	r3, #1
 80059a2:	2300      	moveq	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	e008      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	bf14      	ite	ne
 80059b4:	2301      	movne	r3, #1
 80059b6:	2300      	moveq	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e097      	b.n	8005af2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_PWM_Start+0xb6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d0:	e023      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Start+0xc6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e0:	e01b      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0xd6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f0:	e013      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_PWM_Start+0xe6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a00:	e00b      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0xf6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a10:	e003      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 f986 	bl	8006d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a33      	ldr	r2, [pc, #204]	; (8005afc <HAL_TIM_PWM_Start+0x1e0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a32      	ldr	r2, [pc, #200]	; (8005b00 <HAL_TIM_PWM_Start+0x1e4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a30      	ldr	r2, [pc, #192]	; (8005b04 <HAL_TIM_PWM_Start+0x1e8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2f      	ldr	r2, [pc, #188]	; (8005b08 <HAL_TIM_PWM_Start+0x1ec>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2d      	ldr	r2, [pc, #180]	; (8005b0c <HAL_TIM_PWM_Start+0x1f0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x142>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <HAL_TIM_PWM_Start+0x144>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a20      	ldr	r2, [pc, #128]	; (8005afc <HAL_TIM_PWM_Start+0x1e0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d018      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0x194>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a86:	d013      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0x194>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a20      	ldr	r2, [pc, #128]	; (8005b10 <HAL_TIM_PWM_Start+0x1f4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00e      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0x194>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <HAL_TIM_PWM_Start+0x1f8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0x194>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <HAL_TIM_PWM_Start+0x1e4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0x194>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <HAL_TIM_PWM_Start+0x1e8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d115      	bne.n	8005adc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <HAL_TIM_PWM_Start+0x1fc>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b06      	cmp	r3, #6
 8005ac0:	d015      	beq.n	8005aee <HAL_TIM_PWM_Start+0x1d2>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac8:	d011      	beq.n	8005aee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ada:	e008      	b.n	8005aee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	e000      	b.n	8005af0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	00010007 	.word	0x00010007

08005b1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e097      	b.n	8005c60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fc fa67 	bl	8002018 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005b60:	f023 0307 	bic.w	r3, r3, #7
 8005b64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f000 fcbd 	bl	80064f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bbc:	f023 030c 	bic.w	r3, r3, #12
 8005bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	031b      	lsls	r3, r3, #12
 8005bec:	4313      	orrs	r3, r2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d110      	bne.n	8005cba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d102      	bne.n	8005ca4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c9e:	7b7b      	ldrb	r3, [r7, #13]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d001      	beq.n	8005ca8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e069      	b.n	8005d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb8:	e031      	b.n	8005d1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d110      	bne.n	8005ce2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d102      	bne.n	8005ccc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cc6:	7b3b      	ldrb	r3, [r7, #12]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d001      	beq.n	8005cd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e055      	b.n	8005d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce0:	e01d      	b.n	8005d1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d108      	bne.n	8005cfa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d105      	bne.n	8005cfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cee:	7b7b      	ldrb	r3, [r7, #13]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d102      	bne.n	8005cfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cf4:	7b3b      	ldrb	r3, [r7, #12]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d001      	beq.n	8005cfe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e03e      	b.n	8005d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_TIM_Encoder_Start+0xc4>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d008      	beq.n	8005d3c <HAL_TIM_Encoder_Start+0xd4>
 8005d2a:	e00f      	b.n	8005d4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fffd 	bl	8006d34 <TIM_CCxChannelCmd>
      break;
 8005d3a:	e016      	b.n	8005d6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2201      	movs	r2, #1
 8005d42:	2104      	movs	r1, #4
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fff5 	bl	8006d34 <TIM_CCxChannelCmd>
      break;
 8005d4a:	e00e      	b.n	8005d6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2201      	movs	r2, #1
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ffed 	bl	8006d34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2104      	movs	r1, #4
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 ffe6 	bl	8006d34 <TIM_CCxChannelCmd>
      break;
 8005d68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d122      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d11b      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0202 	mvn.w	r2, #2
 8005db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fb74 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 8005dcc:	e005      	b.n	8005dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fb66 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fb77 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d122      	bne.n	8005e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d11b      	bne.n	8005e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0204 	mvn.w	r2, #4
 8005e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fb4a 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 8005e20:	e005      	b.n	8005e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb3c 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fb4d 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d122      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d11b      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0208 	mvn.w	r2, #8
 8005e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb20 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fb12 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb23 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d122      	bne.n	8005edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d11b      	bne.n	8005edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0210 	mvn.w	r2, #16
 8005eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 faf6 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 8005ec8:	e005      	b.n	8005ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fae8 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 faf9 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10e      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d107      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0201 	mvn.w	r2, #1
 8005f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fa fe64 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d10e      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d107      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 f852 	bl	8006fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	d10e      	bne.n	8005f62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b80      	cmp	r3, #128	; 0x80
 8005f50:	d107      	bne.n	8005f62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 f845 	bl	8006fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d10e      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d107      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 faa7 	bl	80064dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d10e      	bne.n	8005fba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d107      	bne.n	8005fba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f06f 0220 	mvn.w	r2, #32
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 f805 	bl	8006fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc8:	d10f      	bne.n	8005fea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd8:	d107      	bne.n	8005fea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 f80b 	bl	8007000 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff8:	d10f      	bne.n	800601a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006008:	d107      	bne.n	800601a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fffd 	bl	8007014 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006028:	d10f      	bne.n	800604a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006038:	d107      	bne.n	800604a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 ffef 	bl	8007028 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006058:	d10f      	bne.n	800607a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006068:	d107      	bne.n	800607a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 ffe1 	bl	800703c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800609e:	2302      	movs	r3, #2
 80060a0:	e0ff      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b14      	cmp	r3, #20
 80060ae:	f200 80f0 	bhi.w	8006292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006293 	.word	0x08006293
 80060c0:	08006293 	.word	0x08006293
 80060c4:	08006293 	.word	0x08006293
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	08006293 	.word	0x08006293
 80060d0:	08006293 	.word	0x08006293
 80060d4:	08006293 	.word	0x08006293
 80060d8:	0800618f 	.word	0x0800618f
 80060dc:	08006293 	.word	0x08006293
 80060e0:	08006293 	.word	0x08006293
 80060e4:	08006293 	.word	0x08006293
 80060e8:	080061cf 	.word	0x080061cf
 80060ec:	08006293 	.word	0x08006293
 80060f0:	08006293 	.word	0x08006293
 80060f4:	08006293 	.word	0x08006293
 80060f8:	08006211 	.word	0x08006211
 80060fc:	08006293 	.word	0x08006293
 8006100:	08006293 	.word	0x08006293
 8006104:	08006293 	.word	0x08006293
 8006108:	08006251 	.word	0x08006251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa7c 	bl	8006610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
      break;
 800614a:	e0a5      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 faec 	bl	8006730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	619a      	str	r2, [r3, #24]
      break;
 800618c:	e084      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fb55 	bl	8006844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0208 	orr.w	r2, r2, #8
 80061a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0204 	bic.w	r2, r2, #4
 80061b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	61da      	str	r2, [r3, #28]
      break;
 80061cc:	e064      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fbbd 	bl	8006954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	61da      	str	r2, [r3, #28]
      break;
 800620e:	e043      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fc26 	bl	8006a68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0204 	bic.w	r2, r2, #4
 800623a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800624e:	e023      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fc6a 	bl	8006b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006290:	e002      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
      break;
 8006296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop

080062ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_ConfigClockSource+0x1c>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e0de      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x1da>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a63      	ldr	r2, [pc, #396]	; (8006490 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f000 80a9 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 8006308:	4a61      	ldr	r2, [pc, #388]	; (8006490 <HAL_TIM_ConfigClockSource+0x1e4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f200 80ae 	bhi.w	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006310:	4a60      	ldr	r2, [pc, #384]	; (8006494 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f000 80a1 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 8006318:	4a5e      	ldr	r2, [pc, #376]	; (8006494 <HAL_TIM_ConfigClockSource+0x1e8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f200 80a6 	bhi.w	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006320:	4a5d      	ldr	r2, [pc, #372]	; (8006498 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006322:	4293      	cmp	r3, r2
 8006324:	f000 8099 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 8006328:	4a5b      	ldr	r2, [pc, #364]	; (8006498 <HAL_TIM_ConfigClockSource+0x1ec>)
 800632a:	4293      	cmp	r3, r2
 800632c:	f200 809e 	bhi.w	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006330:	4a5a      	ldr	r2, [pc, #360]	; (800649c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	f000 8091 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 8006338:	4a58      	ldr	r2, [pc, #352]	; (800649c <HAL_TIM_ConfigClockSource+0x1f0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	f200 8096 	bhi.w	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006340:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006344:	f000 8089 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 8006348:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800634c:	f200 808e 	bhi.w	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006354:	d03e      	beq.n	80063d4 <HAL_TIM_ConfigClockSource+0x128>
 8006356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635a:	f200 8087 	bhi.w	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	f000 8086 	beq.w	8006472 <HAL_TIM_ConfigClockSource+0x1c6>
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d87f      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 800636c:	2b70      	cmp	r3, #112	; 0x70
 800636e:	d01a      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0xfa>
 8006370:	2b70      	cmp	r3, #112	; 0x70
 8006372:	d87b      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006374:	2b60      	cmp	r3, #96	; 0x60
 8006376:	d050      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x16e>
 8006378:	2b60      	cmp	r3, #96	; 0x60
 800637a:	d877      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 800637c:	2b50      	cmp	r3, #80	; 0x50
 800637e:	d03c      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x14e>
 8006380:	2b50      	cmp	r3, #80	; 0x50
 8006382:	d873      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d058      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x18e>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d86f      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 800638c:	2b30      	cmp	r3, #48	; 0x30
 800638e:	d064      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d86b      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 8006394:	2b20      	cmp	r3, #32
 8006396:	d060      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 8006398:	2b20      	cmp	r3, #32
 800639a:	d867      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05c      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d05a      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x1ae>
 80063a4:	e062      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6899      	ldr	r1, [r3, #8]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f000 fc9d 	bl	8006cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	609a      	str	r2, [r3, #8]
      break;
 80063d2:	e04f      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	6899      	ldr	r1, [r3, #8]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f000 fc86 	bl	8006cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f6:	609a      	str	r2, [r3, #8]
      break;
 80063f8:	e03c      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	461a      	mov	r2, r3
 8006408:	f000 fbf8 	bl	8006bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2150      	movs	r1, #80	; 0x50
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fc51 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006418:	e02c      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	461a      	mov	r2, r3
 8006428:	f000 fc17 	bl	8006c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2160      	movs	r1, #96	; 0x60
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fc41 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006438:	e01c      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	461a      	mov	r2, r3
 8006448:	f000 fbd8 	bl	8006bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2140      	movs	r1, #64	; 0x40
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fc31 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006458:	e00c      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4619      	mov	r1, r3
 8006464:	4610      	mov	r0, r2
 8006466:	f000 fc28 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 800646a:	e003      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	73fb      	strb	r3, [r7, #15]
      break;
 8006470:	e000      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	00100070 	.word	0x00100070
 8006494:	00100040 	.word	0x00100040
 8006498:	00100030 	.word	0x00100030
 800649c:	00100020 	.word	0x00100020

080064a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a3c      	ldr	r2, [pc, #240]	; (80065f4 <TIM_Base_SetConfig+0x104>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00f      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650e:	d00b      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a39      	ldr	r2, [pc, #228]	; (80065f8 <TIM_Base_SetConfig+0x108>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d007      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a38      	ldr	r2, [pc, #224]	; (80065fc <TIM_Base_SetConfig+0x10c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_Base_SetConfig+0x38>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a37      	ldr	r2, [pc, #220]	; (8006600 <TIM_Base_SetConfig+0x110>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d108      	bne.n	800653a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a2d      	ldr	r2, [pc, #180]	; (80065f4 <TIM_Base_SetConfig+0x104>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01b      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d017      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <TIM_Base_SetConfig+0x108>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a29      	ldr	r2, [pc, #164]	; (80065fc <TIM_Base_SetConfig+0x10c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a28      	ldr	r2, [pc, #160]	; (8006600 <TIM_Base_SetConfig+0x110>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <TIM_Base_SetConfig+0x114>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a26      	ldr	r2, [pc, #152]	; (8006608 <TIM_Base_SetConfig+0x118>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_Base_SetConfig+0x8a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a25      	ldr	r2, [pc, #148]	; (800660c <TIM_Base_SetConfig+0x11c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a10      	ldr	r2, [pc, #64]	; (80065f4 <TIM_Base_SetConfig+0x104>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00f      	beq.n	80065d8 <TIM_Base_SetConfig+0xe8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a11      	ldr	r2, [pc, #68]	; (8006600 <TIM_Base_SetConfig+0x110>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_Base_SetConfig+0xe8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a10      	ldr	r2, [pc, #64]	; (8006604 <TIM_Base_SetConfig+0x114>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_Base_SetConfig+0xe8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <TIM_Base_SetConfig+0x118>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_Base_SetConfig+0xe8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a0e      	ldr	r2, [pc, #56]	; (800660c <TIM_Base_SetConfig+0x11c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d103      	bne.n	80065e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	615a      	str	r2, [r3, #20]
}
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40000400 	.word	0x40000400
 80065fc:	40000800 	.word	0x40000800
 8006600:	40013400 	.word	0x40013400
 8006604:	40014000 	.word	0x40014000
 8006608:	40014400 	.word	0x40014400
 800660c:	40014800 	.word	0x40014800

08006610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0303 	bic.w	r3, r3, #3
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 0302 	bic.w	r3, r3, #2
 800665c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a2c      	ldr	r2, [pc, #176]	; (800671c <TIM_OC1_SetConfig+0x10c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00f      	beq.n	8006690 <TIM_OC1_SetConfig+0x80>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a2b      	ldr	r2, [pc, #172]	; (8006720 <TIM_OC1_SetConfig+0x110>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00b      	beq.n	8006690 <TIM_OC1_SetConfig+0x80>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <TIM_OC1_SetConfig+0x114>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_OC1_SetConfig+0x80>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a29      	ldr	r2, [pc, #164]	; (8006728 <TIM_OC1_SetConfig+0x118>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC1_SetConfig+0x80>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a28      	ldr	r2, [pc, #160]	; (800672c <TIM_OC1_SetConfig+0x11c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10c      	bne.n	80066aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 0308 	bic.w	r3, r3, #8
 8006696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1b      	ldr	r2, [pc, #108]	; (800671c <TIM_OC1_SetConfig+0x10c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00f      	beq.n	80066d2 <TIM_OC1_SetConfig+0xc2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1a      	ldr	r2, [pc, #104]	; (8006720 <TIM_OC1_SetConfig+0x110>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_OC1_SetConfig+0xc2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <TIM_OC1_SetConfig+0x114>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_OC1_SetConfig+0xc2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a18      	ldr	r2, [pc, #96]	; (8006728 <TIM_OC1_SetConfig+0x118>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC1_SetConfig+0xc2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a17      	ldr	r2, [pc, #92]	; (800672c <TIM_OC1_SetConfig+0x11c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d111      	bne.n	80066f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	621a      	str	r2, [r3, #32]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40013400 	.word	0x40013400
 8006724:	40014000 	.word	0x40014000
 8006728:	40014400 	.word	0x40014400
 800672c:	40014800 	.word	0x40014800

08006730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f023 0210 	bic.w	r2, r3, #16
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 0320 	bic.w	r3, r3, #32
 800677e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a28      	ldr	r2, [pc, #160]	; (8006830 <TIM_OC2_SetConfig+0x100>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_OC2_SetConfig+0x6c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a27      	ldr	r2, [pc, #156]	; (8006834 <TIM_OC2_SetConfig+0x104>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d10d      	bne.n	80067b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <TIM_OC2_SetConfig+0x100>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00f      	beq.n	80067e0 <TIM_OC2_SetConfig+0xb0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a1c      	ldr	r2, [pc, #112]	; (8006834 <TIM_OC2_SetConfig+0x104>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00b      	beq.n	80067e0 <TIM_OC2_SetConfig+0xb0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a1b      	ldr	r2, [pc, #108]	; (8006838 <TIM_OC2_SetConfig+0x108>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <TIM_OC2_SetConfig+0xb0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a1a      	ldr	r2, [pc, #104]	; (800683c <TIM_OC2_SetConfig+0x10c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_OC2_SetConfig+0xb0>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <TIM_OC2_SetConfig+0x110>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d113      	bne.n	8006808 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	621a      	str	r2, [r3, #32]
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800

08006844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a27      	ldr	r2, [pc, #156]	; (8006940 <TIM_OC3_SetConfig+0xfc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_OC3_SetConfig+0x6a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a26      	ldr	r2, [pc, #152]	; (8006944 <TIM_OC3_SetConfig+0x100>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10d      	bne.n	80068ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <TIM_OC3_SetConfig+0xfc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00f      	beq.n	80068f2 <TIM_OC3_SetConfig+0xae>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <TIM_OC3_SetConfig+0x100>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00b      	beq.n	80068f2 <TIM_OC3_SetConfig+0xae>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	; (8006948 <TIM_OC3_SetConfig+0x104>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d007      	beq.n	80068f2 <TIM_OC3_SetConfig+0xae>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <TIM_OC3_SetConfig+0x108>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_OC3_SetConfig+0xae>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a18      	ldr	r2, [pc, #96]	; (8006950 <TIM_OC3_SetConfig+0x10c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d113      	bne.n	800691a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40013400 	.word	0x40013400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	031b      	lsls	r3, r3, #12
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a28      	ldr	r2, [pc, #160]	; (8006a54 <TIM_OC4_SetConfig+0x100>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_OC4_SetConfig+0x6c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <TIM_OC4_SetConfig+0x104>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10d      	bne.n	80069dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	031b      	lsls	r3, r3, #12
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <TIM_OC4_SetConfig+0x100>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_OC4_SetConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <TIM_OC4_SetConfig+0x104>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_OC4_SetConfig+0xb0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <TIM_OC4_SetConfig+0x108>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_OC4_SetConfig+0xb0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1a      	ldr	r2, [pc, #104]	; (8006a60 <TIM_OC4_SetConfig+0x10c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_OC4_SetConfig+0xb0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <TIM_OC4_SetConfig+0x110>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d113      	bne.n	8006a2c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	019b      	lsls	r3, r3, #6
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	019b      	lsls	r3, r3, #6
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800

08006a68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006aac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a17      	ldr	r2, [pc, #92]	; (8006b1c <TIM_OC5_SetConfig+0xb4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00f      	beq.n	8006ae2 <TIM_OC5_SetConfig+0x7a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a16      	ldr	r2, [pc, #88]	; (8006b20 <TIM_OC5_SetConfig+0xb8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_OC5_SetConfig+0x7a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <TIM_OC5_SetConfig+0xbc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_OC5_SetConfig+0x7a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <TIM_OC5_SetConfig+0xc0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_OC5_SetConfig+0x7a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <TIM_OC5_SetConfig+0xc4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d109      	bne.n	8006af6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	621a      	str	r2, [r3, #32]
}
 8006b10:	bf00      	nop
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40012c00 	.word	0x40012c00
 8006b20:	40013400 	.word	0x40013400
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800

08006b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	051b      	lsls	r3, r3, #20
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <TIM_OC6_SetConfig+0xb8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00f      	beq.n	8006bac <TIM_OC6_SetConfig+0x7c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a17      	ldr	r2, [pc, #92]	; (8006bec <TIM_OC6_SetConfig+0xbc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00b      	beq.n	8006bac <TIM_OC6_SetConfig+0x7c>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <TIM_OC6_SetConfig+0xc0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_OC6_SetConfig+0x7c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a15      	ldr	r2, [pc, #84]	; (8006bf4 <TIM_OC6_SetConfig+0xc4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_OC6_SetConfig+0x7c>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <TIM_OC6_SetConfig+0xc8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d109      	bne.n	8006bc0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	029b      	lsls	r3, r3, #10
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40012c00 	.word	0x40012c00
 8006bec:	40013400 	.word	0x40013400
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	40014800 	.word	0x40014800

08006bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f023 0201 	bic.w	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 030a 	bic.w	r3, r3, #10
 8006c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b087      	sub	sp, #28
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0210 	bic.w	r2, r3, #16
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	031b      	lsls	r3, r3, #12
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f043 0307 	orr.w	r3, r3, #7
 8006ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	609a      	str	r2, [r3, #8]
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	021a      	lsls	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2201      	movs	r2, #1
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1a      	ldr	r2, [r3, #32]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	401a      	ands	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1a      	ldr	r2, [r3, #32]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e065      	b.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2c      	ldr	r2, [pc, #176]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2b      	ldr	r2, [pc, #172]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d108      	bne.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d018      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d013      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00e      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a17      	ldr	r2, [pc, #92]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d009      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d004      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10c      	bne.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40013400 	.word	0x40013400
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40014000 	.word	0x40014000

08006e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e087      	b.n	8006fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a27      	ldr	r2, [pc, #156]	; (8006fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d106      	bne.n	8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d004      	beq.n	8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	; (8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d126      	bne.n	8006f9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	051b      	lsls	r3, r3, #20
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0e      	ldr	r2, [pc, #56]	; (8006fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a0d      	ldr	r2, [pc, #52]	; (8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d106      	bne.n	8006f9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40013400 	.word	0x40013400

08006fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007060:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007064:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	b29a      	uxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007086:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800708a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	b29b      	uxth	r3, r3
 8007098:	43db      	mvns	r3, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	4013      	ands	r3, r2
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070b4:	b084      	sub	sp, #16
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	f107 0014 	add.w	r0, r7, #20
 80070c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	b004      	add	sp, #16
 80070f4:	4770      	bx	lr
	...

080070f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b09d      	sub	sp, #116	; 0x74
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	78db      	ldrb	r3, [r3, #3]
 8007126:	2b03      	cmp	r3, #3
 8007128:	d81f      	bhi.n	800716a <USB_ActivateEndpoint+0x72>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <USB_ActivateEndpoint+0x38>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007141 	.word	0x08007141
 8007134:	0800715d 	.word	0x0800715d
 8007138:	08007173 	.word	0x08007173
 800713c:	0800714f 	.word	0x0800714f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007140:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007148:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800714c:	e012      	b.n	8007174 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800714e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007152:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007156:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800715a:	e00b      	b.n	8007174 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800715c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007164:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007168:	e004      	b.n	8007174 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007170:	e000      	b.n	8007174 <USB_ActivateEndpoint+0x7c>
      break;
 8007172:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007192:	b29b      	uxth	r3, r3
 8007194:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b21b      	sxth	r3, r3
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ae:	b21a      	sxth	r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b21b      	sxth	r3, r3
 80071ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	441a      	add	r2, r3
 80071c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80071cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071dc:	b29b      	uxth	r3, r3
 80071de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	7b1b      	ldrb	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8149 	bne.w	800747c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8084 	beq.w	80072fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071fe:	b29b      	uxth	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	4413      	add	r3, r2
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	00da      	lsls	r2, r3, #3
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	88db      	ldrh	r3, [r3, #6]
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	b29b      	uxth	r3, r3
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	827b      	strh	r3, [r7, #18]
 8007236:	8a7b      	ldrh	r3, [r7, #18]
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01b      	beq.n	8007278 <USB_ActivateEndpoint+0x180>
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007256:	823b      	strh	r3, [r7, #16]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	8a3b      	ldrh	r3, [r7, #16]
 8007264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007274:	b29b      	uxth	r3, r3
 8007276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	78db      	ldrb	r3, [r3, #3]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d020      	beq.n	80072c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29b      	uxth	r3, r3
 800728e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007296:	81bb      	strh	r3, [r7, #12]
 8007298:	89bb      	ldrh	r3, [r7, #12]
 800729a:	f083 0320 	eor.w	r3, r3, #32
 800729e:	81bb      	strh	r3, [r7, #12]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	441a      	add	r2, r3
 80072aa:	89bb      	ldrh	r3, [r7, #12]
 80072ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]
 80072c0:	e2a6      	b.n	8007810 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d8:	81fb      	strh	r3, [r7, #14]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	441a      	add	r2, r3
 80072e4:	89fb      	ldrh	r3, [r7, #14]
 80072e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	8013      	strh	r3, [r2, #0]
 80072fa:	e289      	b.n	8007810 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	4413      	add	r3, r2
 800730e:	633b      	str	r3, [r7, #48]	; 0x30
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	00da      	lsls	r2, r3, #3
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	4413      	add	r3, r2
 800731a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	88db      	ldrh	r3, [r3, #6]
 8007324:	085b      	lsrs	r3, r3, #1
 8007326:	b29b      	uxth	r3, r3
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	4413      	add	r3, r2
 8007342:	62bb      	str	r3, [r7, #40]	; 0x28
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	00da      	lsls	r2, r3, #3
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	4413      	add	r3, r2
 800734e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b3e      	cmp	r3, #62	; 0x3e
 800735a:	d918      	bls.n	800738e <USB_ActivateEndpoint+0x296>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	66bb      	str	r3, [r7, #104]	; 0x68
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	2b00      	cmp	r3, #0
 800736e:	d102      	bne.n	8007376 <USB_ActivateEndpoint+0x27e>
 8007370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007372:	3b01      	subs	r3, #1
 8007374:	66bb      	str	r3, [r7, #104]	; 0x68
 8007376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007378:	b29b      	uxth	r3, r3
 800737a:	029b      	lsls	r3, r3, #10
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007386:	b29a      	uxth	r2, r3
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	e029      	b.n	80073e2 <USB_ActivateEndpoint+0x2ea>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d112      	bne.n	80073bc <USB_ActivateEndpoint+0x2c4>
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e012      	b.n	80073e2 <USB_ActivateEndpoint+0x2ea>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <USB_ActivateEndpoint+0x2de>
 80073d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d2:	3301      	adds	r3, #1
 80073d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d8:	b29b      	uxth	r3, r3
 80073da:	029b      	lsls	r3, r3, #10
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80073f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01b      	beq.n	8007432 <USB_ActivateEndpoint+0x33a>
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007410:	843b      	strh	r3, [r7, #32]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	441a      	add	r2, r3
 800741c:	8c3b      	ldrh	r3, [r7, #32]
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800742a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007448:	83fb      	strh	r3, [r7, #30]
 800744a:	8bfb      	ldrh	r3, [r7, #30]
 800744c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007450:	83fb      	strh	r3, [r7, #30]
 8007452:	8bfb      	ldrh	r3, [r7, #30]
 8007454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007458:	83fb      	strh	r3, [r7, #30]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	441a      	add	r2, r3
 8007464:	8bfb      	ldrh	r3, [r7, #30]
 8007466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800746a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800746e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007476:	b29b      	uxth	r3, r3
 8007478:	8013      	strh	r3, [r2, #0]
 800747a:	e1c9      	b.n	8007810 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	78db      	ldrb	r3, [r3, #3]
 8007480:	2b02      	cmp	r3, #2
 8007482:	d11e      	bne.n	80074c2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	441a      	add	r2, r3
 80074a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8013      	strh	r3, [r2, #0]
 80074c0:	e01d      	b.n	80074fe <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80074ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007508:	b29b      	uxth	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800750e:	4413      	add	r3, r2
 8007510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	00da      	lsls	r2, r3, #3
 8007518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751a:	4413      	add	r3, r2
 800751c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007520:	65bb      	str	r3, [r7, #88]	; 0x58
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	891b      	ldrh	r3, [r3, #8]
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	b29b      	uxth	r3, r3
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	657b      	str	r3, [r7, #84]	; 0x54
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800753c:	b29b      	uxth	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007542:	4413      	add	r3, r2
 8007544:	657b      	str	r3, [r7, #84]	; 0x54
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	00da      	lsls	r2, r3, #3
 800754c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800754e:	4413      	add	r3, r2
 8007550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007554:	653b      	str	r3, [r7, #80]	; 0x50
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	895b      	ldrh	r3, [r3, #10]
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	b29b      	uxth	r3, r3
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007564:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 8093 	bne.w	8007696 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01b      	beq.n	80075c4 <USB_ActivateEndpoint+0x4cc>
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	441a      	add	r2, r3
 80075ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80075b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80075d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01b      	beq.n	8007614 <USB_ActivateEndpoint+0x51c>
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007610:	b29b      	uxth	r3, r3
 8007612:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762a:	873b      	strh	r3, [r7, #56]	; 0x38
 800762c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800762e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007632:	873b      	strh	r3, [r7, #56]	; 0x38
 8007634:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007636:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800763a:	873b      	strh	r3, [r7, #56]	; 0x38
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	441a      	add	r2, r3
 8007646:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007658:	b29b      	uxth	r3, r3
 800765a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007672:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	441a      	add	r2, r3
 800767e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007690:	b29b      	uxth	r3, r3
 8007692:	8013      	strh	r3, [r2, #0]
 8007694:	e0bc      	b.n	8007810 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80076a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01d      	beq.n	80076ee <USB_ActivateEndpoint+0x5f6>
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01d      	beq.n	8007746 <USB_ActivateEndpoint+0x64e>
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007720:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007742:	b29b      	uxth	r3, r3
 8007744:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	78db      	ldrb	r3, [r3, #3]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d024      	beq.n	8007798 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007764:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007768:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800776c:	f083 0320 	eor.w	r3, r3, #32
 8007770:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]
 8007796:	e01d      	b.n	80077d4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80077c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	441a      	add	r2, r3
 80077f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80077fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007810:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007814:	4618      	mov	r0, r3
 8007816:	3774      	adds	r7, #116	; 0x74
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007820:	b480      	push	{r7}
 8007822:	b08d      	sub	sp, #52	; 0x34
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	7b1b      	ldrb	r3, [r3, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f040 808e 	bne.w	8007950 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d044      	beq.n	80078c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	81bb      	strh	r3, [r7, #12]
 800784a:	89bb      	ldrh	r3, [r7, #12]
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01b      	beq.n	800788c <USB_DeactivateEndpoint+0x6c>
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	817b      	strh	r3, [r7, #10]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	897b      	ldrh	r3, [r7, #10]
 8007878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007888:	b29b      	uxth	r3, r3
 800788a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a2:	813b      	strh	r3, [r7, #8]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	441a      	add	r2, r3
 80078ae:	893b      	ldrh	r3, [r7, #8]
 80078b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	8013      	strh	r3, [r2, #0]
 80078c4:	e192      	b.n	8007bec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	827b      	strh	r3, [r7, #18]
 80078d4:	8a7b      	ldrh	r3, [r7, #18]
 80078d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01b      	beq.n	8007916 <USB_DeactivateEndpoint+0xf6>
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f4:	823b      	strh	r3, [r7, #16]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	441a      	add	r2, r3
 8007900:	8a3b      	ldrh	r3, [r7, #16]
 8007902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800790e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007912:	b29b      	uxth	r3, r3
 8007914:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792c:	81fb      	strh	r3, [r7, #14]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	89fb      	ldrh	r3, [r7, #14]
 800793a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800793e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]
 800794e:	e14d      	b.n	8007bec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	785b      	ldrb	r3, [r3, #1]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 80a5 	bne.w	8007aa4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	843b      	strh	r3, [r7, #32]
 8007968:	8c3b      	ldrh	r3, [r7, #32]
 800796a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01b      	beq.n	80079aa <USB_DeactivateEndpoint+0x18a>
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007988:	83fb      	strh	r3, [r7, #30]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	441a      	add	r2, r3
 8007994:	8bfb      	ldrh	r3, [r7, #30]
 8007996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	83bb      	strh	r3, [r7, #28]
 80079b8:	8bbb      	ldrh	r3, [r7, #28]
 80079ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01b      	beq.n	80079fa <USB_DeactivateEndpoint+0x1da>
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d8:	837b      	strh	r3, [r7, #26]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	441a      	add	r2, r3
 80079e4:	8b7b      	ldrh	r3, [r7, #26]
 80079e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a10:	833b      	strh	r3, [r7, #24]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	441a      	add	r2, r3
 8007a1c:	8b3b      	ldrh	r3, [r7, #24]
 8007a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a48:	82fb      	strh	r3, [r7, #22]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	8afb      	ldrh	r3, [r7, #22]
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a80:	82bb      	strh	r3, [r7, #20]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	441a      	add	r2, r3
 8007a8c:	8abb      	ldrh	r3, [r7, #20]
 8007a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	8013      	strh	r3, [r2, #0]
 8007aa2:	e0a3      	b.n	8007bec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01b      	beq.n	8007af4 <USB_DeactivateEndpoint+0x2d4>
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	441a      	add	r2, r3
 8007ade:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01b      	beq.n	8007b44 <USB_DeactivateEndpoint+0x324>
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	441a      	add	r2, r3
 8007b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	441a      	add	r2, r3
 8007b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	847b      	strh	r3, [r7, #34]	; 0x22
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	441a      	add	r2, r3
 8007bd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3734      	adds	r7, #52	; 0x34
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b0c2      	sub	sp, #264	; 0x108
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	1d3b      	adds	r3, r7, #4
 8007c02:	6018      	str	r0, [r3, #0]
 8007c04:	463b      	mov	r3, r7
 8007c06:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c08:	463b      	mov	r3, r7
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	f040 8509 	bne.w	8008626 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c14:	463b      	mov	r3, r7
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d905      	bls.n	8007c30 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007c24:	463b      	mov	r3, r7
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c2e:	e004      	b.n	8007c3a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007c30:	463b      	mov	r3, r7
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	7b1b      	ldrb	r3, [r3, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d128      	bne.n	8007c96 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c44:	463b      	mov	r3, r7
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6959      	ldr	r1, [r3, #20]
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	88da      	ldrh	r2, [r3, #6]
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	1d38      	adds	r0, r7, #4
 8007c58:	6800      	ldr	r0, [r0, #0]
 8007c5a:	f001 f9da 	bl	8009012 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c5e:	1d3b      	adds	r3, r7, #4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	1d3b      	adds	r3, r7, #4
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	00da      	lsls	r2, r3, #3
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	4413      	add	r3, r2
 8007c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	801a      	strh	r2, [r3, #0]
 8007c92:	f000 bc9f 	b.w	80085d4 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007c96:	463b      	mov	r3, r7
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	78db      	ldrb	r3, [r3, #3]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	f040 8347 	bne.w	8008330 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007ca2:	463b      	mov	r3, r7
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6a1a      	ldr	r2, [r3, #32]
 8007ca8:	463b      	mov	r3, r7
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	f240 82eb 	bls.w	800828a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007cb4:	1d3b      	adds	r3, r7, #4
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007cd2:	1d3b      	adds	r3, r7, #4
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	441a      	add	r2, r3
 8007ce0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6a1a      	ldr	r2, [r3, #32]
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d02:	1ad2      	subs	r2, r2, r3
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d0a:	1d3b      	adds	r3, r7, #4
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	463b      	mov	r3, r7
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8159 	beq.w	8007fd8 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	785b      	ldrb	r3, [r3, #1]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d164      	bne.n	8007e00 <USB_EPStartXfer+0x206>
 8007d36:	1d3b      	adds	r3, r7, #4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d3c:	1d3b      	adds	r3, r7, #4
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	4413      	add	r3, r2
 8007d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d4e:	463b      	mov	r3, r7
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	00da      	lsls	r2, r3, #3
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d64:	2b3e      	cmp	r3, #62	; 0x3e
 8007d66:	d91c      	bls.n	8007da2 <USB_EPStartXfer+0x1a8>
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <USB_EPStartXfer+0x18e>
 8007d7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d82:	3b01      	subs	r3, #1
 8007d84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e04a      	b.n	8007e38 <USB_EPStartXfer+0x23e>
 8007da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d112      	bne.n	8007dd0 <USB_EPStartXfer+0x1d6>
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	801a      	strh	r2, [r3, #0]
 8007dce:	e033      	b.n	8007e38 <USB_EPStartXfer+0x23e>
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd4:	085b      	lsrs	r3, r3, #1
 8007dd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <USB_EPStartXfer+0x1f6>
 8007de6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dea:	3301      	adds	r3, #1
 8007dec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007df0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	801a      	strh	r2, [r3, #0]
 8007dfe:	e01b      	b.n	8007e38 <USB_EPStartXfer+0x23e>
 8007e00:	463b      	mov	r3, r7
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d116      	bne.n	8007e38 <USB_EPStartXfer+0x23e>
 8007e0a:	1d3b      	adds	r3, r7, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	4413      	add	r3, r2
 8007e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	00da      	lsls	r2, r3, #3
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	4413      	add	r3, r2
 8007e28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e38:	463b      	mov	r3, r7
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	895b      	ldrh	r3, [r3, #10]
 8007e3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6959      	ldr	r1, [r3, #20]
 8007e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e52:	1d38      	adds	r0, r7, #4
 8007e54:	6800      	ldr	r0, [r0, #0]
 8007e56:	f001 f8dc 	bl	8009012 <USB_WritePMA>
            ep->xfer_buff += len;
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695a      	ldr	r2, [r3, #20]
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e64:	441a      	add	r2, r3
 8007e66:	463b      	mov	r3, r7
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e6c:	463b      	mov	r3, r7
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a1a      	ldr	r2, [r3, #32]
 8007e72:	463b      	mov	r3, r7
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d909      	bls.n	8007e90 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a1a      	ldr	r2, [r3, #32]
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	463b      	mov	r3, r7
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	621a      	str	r2, [r3, #32]
 8007e8e:	e008      	b.n	8007ea2 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e90:	463b      	mov	r3, r7
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e9a:	463b      	mov	r3, r7
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d164      	bne.n	8007f76 <USB_EPStartXfer+0x37c>
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	1d3b      	adds	r3, r7, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	00da      	lsls	r2, r3, #3
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eda:	2b3e      	cmp	r3, #62	; 0x3e
 8007edc:	d91c      	bls.n	8007f18 <USB_EPStartXfer+0x31e>
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USB_EPStartXfer+0x304>
 8007ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	801a      	strh	r2, [r3, #0]
 8007f16:	e04d      	b.n	8007fb4 <USB_EPStartXfer+0x3ba>
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d112      	bne.n	8007f46 <USB_EPStartXfer+0x34c>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	801a      	strh	r2, [r3, #0]
 8007f44:	e036      	b.n	8007fb4 <USB_EPStartXfer+0x3ba>
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <USB_EPStartXfer+0x36c>
 8007f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f60:	3301      	adds	r3, #1
 8007f62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	029b      	lsls	r3, r3, #10
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e01e      	b.n	8007fb4 <USB_EPStartXfer+0x3ba>
 8007f76:	463b      	mov	r3, r7
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d119      	bne.n	8007fb4 <USB_EPStartXfer+0x3ba>
 8007f80:	1d3b      	adds	r3, r7, #4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	623b      	str	r3, [r7, #32]
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	4413      	add	r3, r2
 8007f96:	623b      	str	r3, [r7, #32]
 8007f98:	463b      	mov	r3, r7
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	00da      	lsls	r2, r3, #3
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fa8:	61fb      	str	r3, [r7, #28]
 8007faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	891b      	ldrh	r3, [r3, #8]
 8007fba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6959      	ldr	r1, [r3, #20]
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fce:	1d38      	adds	r0, r7, #4
 8007fd0:	6800      	ldr	r0, [r0, #0]
 8007fd2:	f001 f81e 	bl	8009012 <USB_WritePMA>
 8007fd6:	e2fd      	b.n	80085d4 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fd8:	463b      	mov	r3, r7
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d164      	bne.n	80080ac <USB_EPStartXfer+0x4b2>
 8007fe2:	1d3b      	adds	r3, r7, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe8:	1d3b      	adds	r3, r7, #4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff6:	4413      	add	r3, r2
 8007ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	00da      	lsls	r2, r3, #3
 8008002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008004:	4413      	add	r3, r2
 8008006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800800a:	647b      	str	r3, [r7, #68]	; 0x44
 800800c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008010:	2b3e      	cmp	r3, #62	; 0x3e
 8008012:	d91c      	bls.n	800804e <USB_EPStartXfer+0x454>
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800801e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008022:	f003 031f 	and.w	r3, r3, #31
 8008026:	2b00      	cmp	r3, #0
 8008028:	d104      	bne.n	8008034 <USB_EPStartXfer+0x43a>
 800802a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800802e:	3b01      	subs	r3, #1
 8008030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008038:	b29b      	uxth	r3, r3
 800803a:	029b      	lsls	r3, r3, #10
 800803c:	b29b      	uxth	r3, r3
 800803e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008046:	b29a      	uxth	r2, r3
 8008048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e04d      	b.n	80080ea <USB_EPStartXfer+0x4f0>
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008052:	2b00      	cmp	r3, #0
 8008054:	d112      	bne.n	800807c <USB_EPStartXfer+0x482>
 8008056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008060:	b29a      	uxth	r2, r3
 8008062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008064:	801a      	strh	r2, [r3, #0]
 8008066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	b29b      	uxth	r3, r3
 800806c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008074:	b29a      	uxth	r2, r3
 8008076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e036      	b.n	80080ea <USB_EPStartXfer+0x4f0>
 800807c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008080:	085b      	lsrs	r3, r3, #1
 8008082:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d004      	beq.n	800809c <USB_EPStartXfer+0x4a2>
 8008092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008096:	3301      	adds	r3, #1
 8008098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800809c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	029b      	lsls	r3, r3, #10
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	e01e      	b.n	80080ea <USB_EPStartXfer+0x4f0>
 80080ac:	463b      	mov	r3, r7
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d119      	bne.n	80080ea <USB_EPStartXfer+0x4f0>
 80080b6:	1d3b      	adds	r3, r7, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	653b      	str	r3, [r7, #80]	; 0x50
 80080bc:	1d3b      	adds	r3, r7, #4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ca:	4413      	add	r3, r2
 80080cc:	653b      	str	r3, [r7, #80]	; 0x50
 80080ce:	463b      	mov	r3, r7
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	00da      	lsls	r2, r3, #3
 80080d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d8:	4413      	add	r3, r2
 80080da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080ea:	463b      	mov	r3, r7
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	891b      	ldrh	r3, [r3, #8]
 80080f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080f4:	463b      	mov	r3, r7
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6959      	ldr	r1, [r3, #20]
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008104:	1d38      	adds	r0, r7, #4
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	f000 ff83 	bl	8009012 <USB_WritePMA>
            ep->xfer_buff += len;
 800810c:	463b      	mov	r3, r7
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008116:	441a      	add	r2, r3
 8008118:	463b      	mov	r3, r7
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800811e:	463b      	mov	r3, r7
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6a1a      	ldr	r2, [r3, #32]
 8008124:	463b      	mov	r3, r7
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d909      	bls.n	8008142 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6a1a      	ldr	r2, [r3, #32]
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008138:	1ad2      	subs	r2, r2, r3
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	621a      	str	r2, [r3, #32]
 8008140:	e008      	b.n	8008154 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008142:	463b      	mov	r3, r7
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800814c:	463b      	mov	r3, r7
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2200      	movs	r2, #0
 8008152:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008154:	1d3b      	adds	r3, r7, #4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	643b      	str	r3, [r7, #64]	; 0x40
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d164      	bne.n	800822e <USB_EPStartXfer+0x634>
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	63bb      	str	r3, [r7, #56]	; 0x38
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	4413      	add	r3, r2
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
 800817c:	463b      	mov	r3, r7
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	00da      	lsls	r2, r3, #3
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	4413      	add	r3, r2
 8008188:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008192:	2b3e      	cmp	r3, #62	; 0x3e
 8008194:	d91c      	bls.n	80081d0 <USB_EPStartXfer+0x5d6>
 8008196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <USB_EPStartXfer+0x5bc>
 80081ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b0:	3b01      	subs	r3, #1
 80081b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	029b      	lsls	r3, r3, #10
 80081be:	b29b      	uxth	r3, r3
 80081c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	e04a      	b.n	8008266 <USB_EPStartXfer+0x66c>
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d112      	bne.n	80081fe <USB_EPStartXfer+0x604>
 80081d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e033      	b.n	8008266 <USB_EPStartXfer+0x66c>
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <USB_EPStartXfer+0x624>
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008218:	3301      	adds	r3, #1
 800821a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800821e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008222:	b29b      	uxth	r3, r3
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	b29a      	uxth	r2, r3
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	e01b      	b.n	8008266 <USB_EPStartXfer+0x66c>
 800822e:	463b      	mov	r3, r7
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d116      	bne.n	8008266 <USB_EPStartXfer+0x66c>
 8008238:	1d3b      	adds	r3, r7, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008240:	b29b      	uxth	r3, r3
 8008242:	461a      	mov	r2, r3
 8008244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008246:	4413      	add	r3, r2
 8008248:	643b      	str	r3, [r7, #64]	; 0x40
 800824a:	463b      	mov	r3, r7
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	00da      	lsls	r2, r3, #3
 8008252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008254:	4413      	add	r3, r2
 8008256:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008260:	b29a      	uxth	r2, r3
 8008262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008264:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008266:	463b      	mov	r3, r7
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	895b      	ldrh	r3, [r3, #10]
 800826c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008270:	463b      	mov	r3, r7
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6959      	ldr	r1, [r3, #20]
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827a:	b29b      	uxth	r3, r3
 800827c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008280:	1d38      	adds	r0, r7, #4
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	f000 fec5 	bl	8009012 <USB_WritePMA>
 8008288:	e1a4      	b.n	80085d4 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800828a:	463b      	mov	r3, r7
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008294:	1d3b      	adds	r3, r7, #4
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	463b      	mov	r3, r7
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80082b2:	1d3b      	adds	r3, r7, #4
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	463b      	mov	r3, r7
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	441a      	add	r2, r3
 80082c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80082c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082d8:	1d3b      	adds	r3, r7, #4
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082de:	1d3b      	adds	r3, r7, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	461a      	mov	r2, r3
 80082ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ec:	4413      	add	r3, r2
 80082ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082f0:	463b      	mov	r3, r7
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	00da      	lsls	r2, r3, #3
 80082f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fa:	4413      	add	r3, r2
 80082fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008300:	65bb      	str	r3, [r7, #88]	; 0x58
 8008302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008306:	b29a      	uxth	r2, r3
 8008308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800830c:	463b      	mov	r3, r7
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	891b      	ldrh	r3, [r3, #8]
 8008312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008316:	463b      	mov	r3, r7
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6959      	ldr	r1, [r3, #20]
 800831c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008320:	b29b      	uxth	r3, r3
 8008322:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008326:	1d38      	adds	r0, r7, #4
 8008328:	6800      	ldr	r0, [r0, #0]
 800832a:	f000 fe72 	bl	8009012 <USB_WritePMA>
 800832e:	e151      	b.n	80085d4 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833a:	1ad2      	subs	r2, r2, r3
 800833c:	463b      	mov	r3, r7
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008342:	1d3b      	adds	r3, r7, #4
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	463b      	mov	r3, r7
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	b29b      	uxth	r3, r3
 8008354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 809b 	beq.w	8008494 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	673b      	str	r3, [r7, #112]	; 0x70
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	785b      	ldrb	r3, [r3, #1]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d164      	bne.n	8008438 <USB_EPStartXfer+0x83e>
 800836e:	1d3b      	adds	r3, r7, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	66bb      	str	r3, [r7, #104]	; 0x68
 8008374:	1d3b      	adds	r3, r7, #4
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837c:	b29b      	uxth	r3, r3
 800837e:	461a      	mov	r2, r3
 8008380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008382:	4413      	add	r3, r2
 8008384:	66bb      	str	r3, [r7, #104]	; 0x68
 8008386:	463b      	mov	r3, r7
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	00da      	lsls	r2, r3, #3
 800838e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008390:	4413      	add	r3, r2
 8008392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008396:	667b      	str	r3, [r7, #100]	; 0x64
 8008398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839c:	2b3e      	cmp	r3, #62	; 0x3e
 800839e:	d91c      	bls.n	80083da <USB_EPStartXfer+0x7e0>
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ae:	f003 031f 	and.w	r3, r3, #31
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <USB_EPStartXfer+0x7c6>
 80083b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083ba:	3b01      	subs	r3, #1
 80083bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	029b      	lsls	r3, r3, #10
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	e04a      	b.n	8008470 <USB_EPStartXfer+0x876>
 80083da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d112      	bne.n	8008408 <USB_EPStartXfer+0x80e>
 80083e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	e033      	b.n	8008470 <USB_EPStartXfer+0x876>
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <USB_EPStartXfer+0x82e>
 800841e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008422:	3301      	adds	r3, #1
 8008424:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008428:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800842c:	b29b      	uxth	r3, r3
 800842e:	029b      	lsls	r3, r3, #10
 8008430:	b29a      	uxth	r2, r3
 8008432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	e01b      	b.n	8008470 <USB_EPStartXfer+0x876>
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d116      	bne.n	8008470 <USB_EPStartXfer+0x876>
 8008442:	1d3b      	adds	r3, r7, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800844a:	b29b      	uxth	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008450:	4413      	add	r3, r2
 8008452:	673b      	str	r3, [r7, #112]	; 0x70
 8008454:	463b      	mov	r3, r7
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	00da      	lsls	r2, r3, #3
 800845c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800845e:	4413      	add	r3, r2
 8008460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846a:	b29a      	uxth	r2, r3
 800846c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008470:	463b      	mov	r3, r7
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	895b      	ldrh	r3, [r3, #10]
 8008476:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800847a:	463b      	mov	r3, r7
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6959      	ldr	r1, [r3, #20]
 8008480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008484:	b29b      	uxth	r3, r3
 8008486:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800848a:	1d38      	adds	r0, r7, #4
 800848c:	6800      	ldr	r0, [r0, #0]
 800848e:	f000 fdc0 	bl	8009012 <USB_WritePMA>
 8008492:	e09f      	b.n	80085d4 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008494:	463b      	mov	r3, r7
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d164      	bne.n	8008568 <USB_EPStartXfer+0x96e>
 800849e:	1d3b      	adds	r3, r7, #4
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084a4:	1d3b      	adds	r3, r7, #4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	461a      	mov	r2, r3
 80084b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084b2:	4413      	add	r3, r2
 80084b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084b6:	463b      	mov	r3, r7
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	00da      	lsls	r2, r3, #3
 80084be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084c0:	4413      	add	r3, r2
 80084c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084cc:	2b3e      	cmp	r3, #62	; 0x3e
 80084ce:	d91c      	bls.n	800850a <USB_EPStartXfer+0x910>
 80084d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d4:	095b      	lsrs	r3, r3, #5
 80084d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084de:	f003 031f 	and.w	r3, r3, #31
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <USB_EPStartXfer+0x8f6>
 80084e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084ea:	3b01      	subs	r3, #1
 80084ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	029b      	lsls	r3, r3, #10
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008502:	b29a      	uxth	r2, r3
 8008504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	e053      	b.n	80085b2 <USB_EPStartXfer+0x9b8>
 800850a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800850e:	2b00      	cmp	r3, #0
 8008510:	d112      	bne.n	8008538 <USB_EPStartXfer+0x93e>
 8008512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800851c:	b29a      	uxth	r2, r3
 800851e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008530:	b29a      	uxth	r2, r3
 8008532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	e03c      	b.n	80085b2 <USB_EPStartXfer+0x9b8>
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <USB_EPStartXfer+0x95e>
 800854e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008552:	3301      	adds	r3, #1
 8008554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008558:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800855c:	b29b      	uxth	r3, r3
 800855e:	029b      	lsls	r3, r3, #10
 8008560:	b29a      	uxth	r2, r3
 8008562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	e024      	b.n	80085b2 <USB_EPStartXfer+0x9b8>
 8008568:	463b      	mov	r3, r7
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d11f      	bne.n	80085b2 <USB_EPStartXfer+0x9b8>
 8008572:	1d3b      	adds	r3, r7, #4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800858a:	4413      	add	r3, r2
 800858c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008590:	463b      	mov	r3, r7
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	00da      	lsls	r2, r3, #3
 8008598:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800859c:	4413      	add	r3, r2
 800859e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80085b2:	463b      	mov	r3, r7
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	891b      	ldrh	r3, [r3, #8]
 80085b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085bc:	463b      	mov	r3, r7
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6959      	ldr	r1, [r3, #20]
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085cc:	1d38      	adds	r0, r7, #4
 80085ce:	6800      	ldr	r0, [r0, #0]
 80085d0:	f000 fd1f 	bl	8009012 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80085d4:	1d3b      	adds	r3, r7, #4
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	463b      	mov	r3, r7
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ee:	817b      	strh	r3, [r7, #10]
 80085f0:	897b      	ldrh	r3, [r7, #10]
 80085f2:	f083 0310 	eor.w	r3, r3, #16
 80085f6:	817b      	strh	r3, [r7, #10]
 80085f8:	897b      	ldrh	r3, [r7, #10]
 80085fa:	f083 0320 	eor.w	r3, r3, #32
 80085fe:	817b      	strh	r3, [r7, #10]
 8008600:	1d3b      	adds	r3, r7, #4
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	463b      	mov	r3, r7
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	441a      	add	r2, r3
 800860e:	897b      	ldrh	r3, [r7, #10]
 8008610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	b29b      	uxth	r3, r3
 8008622:	8013      	strh	r3, [r2, #0]
 8008624:	e3b5      	b.n	8008d92 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008626:	463b      	mov	r3, r7
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	7b1b      	ldrb	r3, [r3, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8090 	bne.w	8008752 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008632:	463b      	mov	r3, r7
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	463b      	mov	r3, r7
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	429a      	cmp	r2, r3
 8008640:	d90e      	bls.n	8008660 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8008642:	463b      	mov	r3, r7
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800864c:	463b      	mov	r3, r7
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008656:	1ad2      	subs	r2, r2, r3
 8008658:	463b      	mov	r3, r7
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	619a      	str	r2, [r3, #24]
 800865e:	e008      	b.n	8008672 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8008660:	463b      	mov	r3, r7
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800866a:	463b      	mov	r3, r7
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008672:	1d3b      	adds	r3, r7, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008682:	b29b      	uxth	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800868a:	4413      	add	r3, r2
 800868c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008690:	463b      	mov	r3, r7
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	00da      	lsls	r2, r3, #3
 8008698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800869c:	4413      	add	r3, r2
 800869e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086aa:	2b3e      	cmp	r3, #62	; 0x3e
 80086ac:	d91d      	bls.n	80086ea <USB_EPStartXfer+0xaf0>
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <USB_EPStartXfer+0xad4>
 80086c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086c8:	3b01      	subs	r3, #1
 80086ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	029b      	lsls	r3, r3, #10
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086e6:	801a      	strh	r2, [r3, #0]
 80086e8:	e325      	b.n	8008d36 <USB_EPStartXfer+0x113c>
 80086ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d116      	bne.n	8008720 <USB_EPStartXfer+0xb26>
 80086f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086fe:	b29a      	uxth	r2, r3
 8008700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008704:	801a      	strh	r2, [r3, #0]
 8008706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	b29b      	uxth	r3, r3
 800870e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008716:	b29a      	uxth	r2, r3
 8008718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e30a      	b.n	8008d36 <USB_EPStartXfer+0x113c>
 8008720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800872a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <USB_EPStartXfer+0xb46>
 8008736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800873a:	3301      	adds	r3, #1
 800873c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008744:	b29b      	uxth	r3, r3
 8008746:	029b      	lsls	r3, r3, #10
 8008748:	b29a      	uxth	r2, r3
 800874a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800874e:	801a      	strh	r2, [r3, #0]
 8008750:	e2f1      	b.n	8008d36 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008752:	463b      	mov	r3, r7
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	78db      	ldrb	r3, [r3, #3]
 8008758:	2b02      	cmp	r3, #2
 800875a:	f040 818f 	bne.w	8008a7c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800875e:	463b      	mov	r3, r7
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d175      	bne.n	8008854 <USB_EPStartXfer+0xc5a>
 8008768:	1d3b      	adds	r3, r7, #4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008770:	1d3b      	adds	r3, r7, #4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008778:	b29b      	uxth	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008780:	4413      	add	r3, r2
 8008782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008786:	463b      	mov	r3, r7
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	00da      	lsls	r2, r3, #3
 800878e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008792:	4413      	add	r3, r2
 8008794:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800879c:	463b      	mov	r3, r7
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b3e      	cmp	r3, #62	; 0x3e
 80087a4:	d91f      	bls.n	80087e6 <USB_EPStartXfer+0xbec>
 80087a6:	463b      	mov	r3, r7
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	095b      	lsrs	r3, r3, #5
 80087ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	f003 031f 	and.w	r3, r3, #31
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <USB_EPStartXfer+0xbd0>
 80087c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c4:	3b01      	subs	r3, #1
 80087c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	029b      	lsls	r3, r3, #10
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087dc:	b29a      	uxth	r2, r3
 80087de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087e2:	801a      	strh	r2, [r3, #0]
 80087e4:	e05c      	b.n	80088a0 <USB_EPStartXfer+0xca6>
 80087e6:	463b      	mov	r3, r7
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d116      	bne.n	800881e <USB_EPStartXfer+0xc24>
 80087f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008814:	b29a      	uxth	r2, r3
 8008816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800881a:	801a      	strh	r2, [r3, #0]
 800881c:	e040      	b.n	80088a0 <USB_EPStartXfer+0xca6>
 800881e:	463b      	mov	r3, r7
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800882a:	463b      	mov	r3, r7
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <USB_EPStartXfer+0xc48>
 8008838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883c:	3301      	adds	r3, #1
 800883e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	b29b      	uxth	r3, r3
 8008848:	029b      	lsls	r3, r3, #10
 800884a:	b29a      	uxth	r2, r3
 800884c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	e025      	b.n	80088a0 <USB_EPStartXfer+0xca6>
 8008854:	463b      	mov	r3, r7
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d120      	bne.n	80088a0 <USB_EPStartXfer+0xca6>
 800885e:	1d3b      	adds	r3, r7, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008866:	1d3b      	adds	r3, r7, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886e:	b29b      	uxth	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008876:	4413      	add	r3, r2
 8008878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800887c:	463b      	mov	r3, r7
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	00da      	lsls	r2, r3, #3
 8008884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008888:	4413      	add	r3, r2
 800888a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800888e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008892:	463b      	mov	r3, r7
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	b29a      	uxth	r2, r3
 800889a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	1d3b      	adds	r3, r7, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088a8:	463b      	mov	r3, r7
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	785b      	ldrb	r3, [r3, #1]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d175      	bne.n	800899e <USB_EPStartXfer+0xda4>
 80088b2:	1d3b      	adds	r3, r7, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088ba:	1d3b      	adds	r3, r7, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ca:	4413      	add	r3, r2
 80088cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088d0:	463b      	mov	r3, r7
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	00da      	lsls	r2, r3, #3
 80088d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088dc:	4413      	add	r3, r2
 80088de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088e6:	463b      	mov	r3, r7
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	2b3e      	cmp	r3, #62	; 0x3e
 80088ee:	d91f      	bls.n	8008930 <USB_EPStartXfer+0xd36>
 80088f0:	463b      	mov	r3, r7
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088fc:	463b      	mov	r3, r7
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <USB_EPStartXfer+0xd1a>
 800890a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800890e:	3b01      	subs	r3, #1
 8008910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008918:	b29b      	uxth	r3, r3
 800891a:	029b      	lsls	r3, r3, #10
 800891c:	b29b      	uxth	r3, r3
 800891e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008926:	b29a      	uxth	r2, r3
 8008928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800892c:	801a      	strh	r2, [r3, #0]
 800892e:	e058      	b.n	80089e2 <USB_EPStartXfer+0xde8>
 8008930:	463b      	mov	r3, r7
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d116      	bne.n	8008968 <USB_EPStartXfer+0xd6e>
 800893a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008946:	b29a      	uxth	r2, r3
 8008948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895e:	b29a      	uxth	r2, r3
 8008960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	e03c      	b.n	80089e2 <USB_EPStartXfer+0xde8>
 8008968:	463b      	mov	r3, r7
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008974:	463b      	mov	r3, r7
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <USB_EPStartXfer+0xd92>
 8008982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008986:	3301      	adds	r3, #1
 8008988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800898c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008990:	b29b      	uxth	r3, r3
 8008992:	029b      	lsls	r3, r3, #10
 8008994:	b29a      	uxth	r2, r3
 8008996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	e021      	b.n	80089e2 <USB_EPStartXfer+0xde8>
 800899e:	463b      	mov	r3, r7
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d11c      	bne.n	80089e2 <USB_EPStartXfer+0xde8>
 80089a8:	1d3b      	adds	r3, r7, #4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089b8:	4413      	add	r3, r2
 80089ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089be:	463b      	mov	r3, r7
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	00da      	lsls	r2, r3, #3
 80089c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089ca:	4413      	add	r3, r2
 80089cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089d4:	463b      	mov	r3, r7
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	b29a      	uxth	r2, r3
 80089dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089e2:	463b      	mov	r3, r7
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 81a4 	beq.w	8008d36 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	463b      	mov	r3, r7
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <USB_EPStartXfer+0xe20>
 8008a0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10d      	bne.n	8008a36 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 8187 	bne.w	8008d36 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f040 8180 	bne.w	8008d36 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a36:	1d3b      	adds	r3, r7, #4
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a50:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a54:	1d3b      	adds	r3, r7, #4
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	463b      	mov	r3, r7
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	441a      	add	r2, r3
 8008a62:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	8013      	strh	r3, [r2, #0]
 8008a7a:	e15c      	b.n	8008d36 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	78db      	ldrb	r3, [r3, #3]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	f040 8155 	bne.w	8008d32 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a88:	463b      	mov	r3, r7
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	463b      	mov	r3, r7
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d90e      	bls.n	8008ab6 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008a98:	463b      	mov	r3, r7
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aac:	1ad2      	subs	r2, r2, r3
 8008aae:	463b      	mov	r3, r7
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	619a      	str	r2, [r3, #24]
 8008ab4:	e008      	b.n	8008ac8 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ac8:	463b      	mov	r3, r7
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d16f      	bne.n	8008bb2 <USB_EPStartXfer+0xfb8>
 8008ad2:	1d3b      	adds	r3, r7, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ada:	1d3b      	adds	r3, r7, #4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008aea:	4413      	add	r3, r2
 8008aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008af0:	463b      	mov	r3, r7
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	00da      	lsls	r2, r3, #3
 8008af8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008afc:	4413      	add	r3, r2
 8008afe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b0c:	d91d      	bls.n	8008b4a <USB_EPStartXfer+0xf50>
 8008b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b12:	095b      	lsrs	r3, r3, #5
 8008b14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b1c:	f003 031f 	and.w	r3, r3, #31
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d104      	bne.n	8008b2e <USB_EPStartXfer+0xf34>
 8008b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	029b      	lsls	r3, r3, #10
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b46:	801a      	strh	r2, [r3, #0]
 8008b48:	e058      	b.n	8008bfc <USB_EPStartXfer+0x1002>
 8008b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d116      	bne.n	8008b80 <USB_EPStartXfer+0xf86>
 8008b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b64:	801a      	strh	r2, [r3, #0]
 8008b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e03d      	b.n	8008bfc <USB_EPStartXfer+0x1002>
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d004      	beq.n	8008ba0 <USB_EPStartXfer+0xfa6>
 8008b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	029b      	lsls	r3, r3, #10
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bae:	801a      	strh	r2, [r3, #0]
 8008bb0:	e024      	b.n	8008bfc <USB_EPStartXfer+0x1002>
 8008bb2:	463b      	mov	r3, r7
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	785b      	ldrb	r3, [r3, #1]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d11f      	bne.n	8008bfc <USB_EPStartXfer+0x1002>
 8008bbc:	1d3b      	adds	r3, r7, #4
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bc4:	1d3b      	adds	r3, r7, #4
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bda:	463b      	mov	r3, r7
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	00da      	lsls	r2, r3, #3
 8008be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008be6:	4413      	add	r3, r2
 8008be8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008bfa:	801a      	strh	r2, [r3, #0]
 8008bfc:	1d3b      	adds	r3, r7, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c04:	463b      	mov	r3, r7
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d16f      	bne.n	8008cee <USB_EPStartXfer+0x10f4>
 8008c0e:	1d3b      	adds	r3, r7, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c26:	4413      	add	r3, r2
 8008c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	00da      	lsls	r2, r3, #3
 8008c34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c38:	4413      	add	r3, r2
 8008c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c46:	2b3e      	cmp	r3, #62	; 0x3e
 8008c48:	d91d      	bls.n	8008c86 <USB_EPStartXfer+0x108c>
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <USB_EPStartXfer+0x1070>
 8008c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c64:	3b01      	subs	r3, #1
 8008c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	029b      	lsls	r3, r3, #10
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c82:	801a      	strh	r2, [r3, #0]
 8008c84:	e057      	b.n	8008d36 <USB_EPStartXfer+0x113c>
 8008c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d116      	bne.n	8008cbc <USB_EPStartXfer+0x10c2>
 8008c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ca0:	801a      	strh	r2, [r3, #0]
 8008ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cb8:	801a      	strh	r2, [r3, #0]
 8008cba:	e03c      	b.n	8008d36 <USB_EPStartXfer+0x113c>
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <USB_EPStartXfer+0x10e2>
 8008cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	029b      	lsls	r3, r3, #10
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e023      	b.n	8008d36 <USB_EPStartXfer+0x113c>
 8008cee:	463b      	mov	r3, r7
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d11e      	bne.n	8008d36 <USB_EPStartXfer+0x113c>
 8008cf8:	1d3b      	adds	r3, r7, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d08:	4413      	add	r3, r2
 8008d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d0e:	463b      	mov	r3, r7
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	00da      	lsls	r2, r3, #3
 8008d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	e001      	b.n	8008d36 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e02e      	b.n	8008d94 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d36:	1d3b      	adds	r3, r7, #4
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d6c:	1d3b      	adds	r3, r7, #4
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	463b      	mov	r3, r7
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	441a      	add	r2, r3
 8008d7a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	785b      	ldrb	r3, [r3, #1]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d020      	beq.n	8008df2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc6:	81bb      	strh	r3, [r7, #12]
 8008dc8:	89bb      	ldrh	r3, [r7, #12]
 8008dca:	f083 0310 	eor.w	r3, r3, #16
 8008dce:	81bb      	strh	r3, [r7, #12]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	441a      	add	r2, r3
 8008dda:	89bb      	ldrh	r3, [r7, #12]
 8008ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	8013      	strh	r3, [r2, #0]
 8008df0:	e01f      	b.n	8008e32 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e08:	81fb      	strh	r3, [r7, #14]
 8008e0a:	89fb      	ldrh	r3, [r7, #14]
 8008e0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e10:	81fb      	strh	r3, [r7, #14]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	441a      	add	r2, r3
 8008e1c:	89fb      	ldrh	r3, [r7, #14]
 8008e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	7b1b      	ldrb	r3, [r3, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f040 809d 	bne.w	8008f8e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d04c      	beq.n	8008ef6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	823b      	strh	r3, [r7, #16]
 8008e6a:	8a3b      	ldrh	r3, [r7, #16]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01b      	beq.n	8008eac <USB_EPClearStall+0x6c>
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8a:	81fb      	strh	r3, [r7, #14]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	89fb      	ldrh	r3, [r7, #14]
 8008e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	78db      	ldrb	r3, [r3, #3]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d06c      	beq.n	8008f8e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eca:	81bb      	strh	r3, [r7, #12]
 8008ecc:	89bb      	ldrh	r3, [r7, #12]
 8008ece:	f083 0320 	eor.w	r3, r3, #32
 8008ed2:	81bb      	strh	r3, [r7, #12]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	441a      	add	r2, r3
 8008ede:	89bb      	ldrh	r3, [r7, #12]
 8008ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	8013      	strh	r3, [r2, #0]
 8008ef4:	e04b      	b.n	8008f8e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	82fb      	strh	r3, [r7, #22]
 8008f04:	8afb      	ldrh	r3, [r7, #22]
 8008f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01b      	beq.n	8008f46 <USB_EPClearStall+0x106>
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f24:	82bb      	strh	r3, [r7, #20]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	8abb      	ldrh	r3, [r7, #20]
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5c:	827b      	strh	r3, [r7, #18]
 8008f5e:	8a7b      	ldrh	r3, [r7, #18]
 8008f60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f64:	827b      	strh	r3, [r7, #18]
 8008f66:	8a7b      	ldrh	r3, [r7, #18]
 8008f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f6c:	827b      	strh	r3, [r7, #18]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	441a      	add	r2, r3
 8008f78:	8a7b      	ldrh	r3, [r7, #18]
 8008f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2280      	movs	r2, #128	; 0x80
 8008fb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009000:	b29b      	uxth	r3, r3
 8009002:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009004:	68fb      	ldr	r3, [r7, #12]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009012:	b480      	push	{r7}
 8009014:	b08d      	sub	sp, #52	; 0x34
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	4611      	mov	r1, r2
 800901e:	461a      	mov	r2, r3
 8009020:	460b      	mov	r3, r1
 8009022:	80fb      	strh	r3, [r7, #6]
 8009024:	4613      	mov	r3, r2
 8009026:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009028:	88bb      	ldrh	r3, [r7, #4]
 800902a:	3301      	adds	r3, #1
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009038:	88fa      	ldrh	r2, [r7, #6]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009042:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009048:	e01b      	b.n	8009082 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	3301      	adds	r3, #1
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	b29b      	uxth	r3, r3
 8009060:	461a      	mov	r2, r3
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	4313      	orrs	r3, r2
 8009066:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	b29a      	uxth	r2, r3
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	3302      	adds	r3, #2
 8009074:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	3301      	adds	r3, #1
 800907a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	3b01      	subs	r3, #1
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e0      	bne.n	800904a <USB_WritePMA+0x38>
  }
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	3734      	adds	r7, #52	; 0x34
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009096:	b480      	push	{r7}
 8009098:	b08b      	sub	sp, #44	; 0x2c
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	4611      	mov	r1, r2
 80090a2:	461a      	mov	r2, r3
 80090a4:	460b      	mov	r3, r1
 80090a6:	80fb      	strh	r3, [r7, #6]
 80090a8:	4613      	mov	r3, r2
 80090aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80090ac:	88bb      	ldrh	r3, [r7, #4]
 80090ae:	085b      	lsrs	r3, r3, #1
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090bc:	88fa      	ldrh	r2, [r7, #6]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090c6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
 80090cc:	e018      	b.n	8009100 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	3302      	adds	r3, #2
 80090da:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	3301      	adds	r3, #1
 80090e8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	3b01      	subs	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e3      	bne.n	80090ce <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009106:	88bb      	ldrh	r3, [r7, #4]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	701a      	strb	r2, [r3, #0]
  }
}
 8009122:	bf00      	nop
 8009124:	372c      	adds	r7, #44	; 0x2c
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800913a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800913e:	f002 f909 	bl	800b354 <USBD_static_malloc>
 8009142:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d105      	bne.n	8009156 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009152:	2302      	movs	r3, #2
 8009154:	e066      	b.n	8009224 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	7c1b      	ldrb	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d119      	bne.n	800919a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800916a:	2202      	movs	r2, #2
 800916c:	2181      	movs	r1, #129	; 0x81
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 ff95 	bl	800b09e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800917a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800917e:	2202      	movs	r2, #2
 8009180:	2101      	movs	r1, #1
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 ff8b 	bl	800b09e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2210      	movs	r2, #16
 8009194:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009198:	e016      	b.n	80091c8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800919a:	2340      	movs	r3, #64	; 0x40
 800919c:	2202      	movs	r2, #2
 800919e:	2181      	movs	r1, #129	; 0x81
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 ff7c 	bl	800b09e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091ac:	2340      	movs	r3, #64	; 0x40
 80091ae:	2202      	movs	r2, #2
 80091b0:	2101      	movs	r1, #1
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 ff73 	bl	800b09e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2210      	movs	r2, #16
 80091c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091c8:	2308      	movs	r3, #8
 80091ca:	2203      	movs	r2, #3
 80091cc:	2182      	movs	r1, #130	; 0x82
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 ff65 	bl	800b09e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7c1b      	ldrb	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009208:	2101      	movs	r1, #1
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f002 f837 	bl	800b27e <USBD_LL_PrepareReceive>
 8009210:	e007      	b.n	8009222 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009218:	2340      	movs	r3, #64	; 0x40
 800921a:	2101      	movs	r1, #1
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f002 f82e 	bl	800b27e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009238:	2181      	movs	r1, #129	; 0x81
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 ff55 	bl	800b0ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009246:	2101      	movs	r1, #1
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 ff4e 	bl	800b0ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009256:	2182      	movs	r1, #130	; 0x82
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 ff46 	bl	800b0ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00e      	beq.n	8009296 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009288:	4618      	mov	r0, r3
 800928a:	f002 f871 	bl	800b370 <USBD_static_free>
    pdev->pClassData = NULL;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e0af      	b.n	8009428 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d03f      	beq.n	8009354 <USBD_CDC_Setup+0xb4>
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	f040 809f 	bne.w	8009418 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d02e      	beq.n	8009340 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	b25b      	sxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da16      	bge.n	800931a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	88d2      	ldrh	r2, [r2, #6]
 80092fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	88db      	ldrh	r3, [r3, #6]
 8009304:	2b07      	cmp	r3, #7
 8009306:	bf28      	it	cs
 8009308:	2307      	movcs	r3, #7
 800930a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	89fa      	ldrh	r2, [r7, #14]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 facf 	bl	800a8b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009318:	e085      	b.n	8009426 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	785a      	ldrb	r2, [r3, #1]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	88db      	ldrh	r3, [r3, #6]
 8009328:	b2da      	uxtb	r2, r3
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009330:	6939      	ldr	r1, [r7, #16]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	88db      	ldrh	r3, [r3, #6]
 8009336:	461a      	mov	r2, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 fae8 	bl	800a90e <USBD_CtlPrepareRx>
      break;
 800933e:	e072      	b.n	8009426 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	7850      	ldrb	r0, [r2, #1]
 800934c:	2200      	movs	r2, #0
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	4798      	blx	r3
      break;
 8009352:	e068      	b.n	8009426 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b0b      	cmp	r3, #11
 800935a:	d852      	bhi.n	8009402 <USBD_CDC_Setup+0x162>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <USBD_CDC_Setup+0xc4>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	08009395 	.word	0x08009395
 8009368:	08009411 	.word	0x08009411
 800936c:	08009403 	.word	0x08009403
 8009370:	08009403 	.word	0x08009403
 8009374:	08009403 	.word	0x08009403
 8009378:	08009403 	.word	0x08009403
 800937c:	08009403 	.word	0x08009403
 8009380:	08009403 	.word	0x08009403
 8009384:	08009403 	.word	0x08009403
 8009388:	08009403 	.word	0x08009403
 800938c:	080093bf 	.word	0x080093bf
 8009390:	080093e9 	.word	0x080093e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b03      	cmp	r3, #3
 800939e:	d107      	bne.n	80093b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093a0:	f107 030a 	add.w	r3, r7, #10
 80093a4:	2202      	movs	r2, #2
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fa84 	bl	800a8b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093ae:	e032      	b.n	8009416 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fa0e 	bl	800a7d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80093b8:	2303      	movs	r3, #3
 80093ba:	75fb      	strb	r3, [r7, #23]
          break;
 80093bc:	e02b      	b.n	8009416 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d107      	bne.n	80093da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093ca:	f107 030d 	add.w	r3, r7, #13
 80093ce:	2201      	movs	r2, #1
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 fa6f 	bl	800a8b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093d8:	e01d      	b.n	8009416 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f9f9 	bl	800a7d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80093e2:	2303      	movs	r3, #3
 80093e4:	75fb      	strb	r3, [r7, #23]
          break;
 80093e6:	e016      	b.n	8009416 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d00f      	beq.n	8009414 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 f9ec 	bl	800a7d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80093fc:	2303      	movs	r3, #3
 80093fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009400:	e008      	b.n	8009414 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 f9e5 	bl	800a7d4 <USBD_CtlError>
          ret = USBD_FAIL;
 800940a:	2303      	movs	r3, #3
 800940c:	75fb      	strb	r3, [r7, #23]
          break;
 800940e:	e002      	b.n	8009416 <USBD_CDC_Setup+0x176>
          break;
 8009410:	bf00      	nop
 8009412:	e008      	b.n	8009426 <USBD_CDC_Setup+0x186>
          break;
 8009414:	bf00      	nop
      }
      break;
 8009416:	e006      	b.n	8009426 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f9da 	bl	800a7d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009420:	2303      	movs	r3, #3
 8009422:	75fb      	strb	r3, [r7, #23]
      break;
 8009424:	bf00      	nop
  }

  return (uint8_t)ret;
 8009426:	7dfb      	ldrb	r3, [r7, #23]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009442:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800944e:	2303      	movs	r3, #3
 8009450:	e04f      	b.n	80094f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009458:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	3318      	adds	r3, #24
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d029      	beq.n	80094c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	3318      	adds	r3, #24
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	78f9      	ldrb	r1, [r7, #3]
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	460b      	mov	r3, r1
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	4403      	add	r3, r0
 8009490:	3338      	adds	r3, #56	; 0x38
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	fbb2 f1f3 	udiv	r1, r2, r3
 8009498:	fb03 f301 	mul.w	r3, r3, r1
 800949c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d110      	bne.n	80094c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	6879      	ldr	r1, [r7, #4]
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	440b      	add	r3, r1
 80094b0:	3318      	adds	r3, #24
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094b6:	78f9      	ldrb	r1, [r7, #3]
 80094b8:	2300      	movs	r3, #0
 80094ba:	2200      	movs	r2, #0
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 febd 	bl	800b23c <USBD_LL_Transmit>
 80094c2:	e015      	b.n	80094f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800950c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009518:	2303      	movs	r3, #3
 800951a:	e015      	b.n	8009548 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f001 fecd 	bl	800b2c0 <USBD_LL_GetRxDataSize>
 8009526:	4602      	mov	r2, r0
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009542:	4611      	mov	r1, r2
 8009544:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800955e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	e01b      	b.n	80095a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d015      	beq.n	80095a0 <USBD_CDC_EP0_RxReady+0x50>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800957a:	2bff      	cmp	r3, #255	; 0xff
 800957c:	d010      	beq.n	80095a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800958c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009594:	b292      	uxth	r2, r2
 8009596:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	22ff      	movs	r2, #255	; 0xff
 800959c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2243      	movs	r2, #67	; 0x43
 80095b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80095ba:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	200000b0 	.word	0x200000b0

080095cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2243      	movs	r2, #67	; 0x43
 80095d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80095da:	4b03      	ldr	r3, [pc, #12]	; (80095e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	2000006c 	.word	0x2000006c

080095ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2243      	movs	r2, #67	; 0x43
 80095f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095fa:	4b03      	ldr	r3, [pc, #12]	; (8009608 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	200000f4 	.word	0x200000f4

0800960c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	220a      	movs	r2, #10
 8009618:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800961a:	4b03      	ldr	r3, [pc, #12]	; (8009628 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	20000028 	.word	0x20000028

0800962c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800963c:	2303      	movs	r3, #3
 800963e:	e004      	b.n	800964a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009656:	b480      	push	{r7}
 8009658:	b087      	sub	sp, #28
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009668:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009670:	2303      	movs	r3, #3
 8009672:	e008      	b.n	8009686 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e004      	b.n	80096b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80096d4:	2301      	movs	r3, #1
 80096d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e01a      	b.n	800971c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d114      	bne.n	800971a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800970e:	2181      	movs	r1, #129	; 0x81
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 fd93 	bl	800b23c <USBD_LL_Transmit>

    ret = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009732:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800973e:	2303      	movs	r3, #3
 8009740:	e016      	b.n	8009770 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	7c1b      	ldrb	r3, [r3, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d109      	bne.n	800975e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009754:	2101      	movs	r1, #1
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 fd91 	bl	800b27e <USBD_LL_PrepareReceive>
 800975c:	e007      	b.n	800976e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009764:	2340      	movs	r3, #64	; 0x40
 8009766:	2101      	movs	r1, #1
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 fd88 	bl	800b27e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	4613      	mov	r3, r2
 8009784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800978c:	2303      	movs	r3, #3
 800978e:	e01f      	b.n	80097d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	79fa      	ldrb	r2, [r7, #7]
 80097c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f001 fbef 	bl	800afa8 <USBD_LL_Init>
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e016      	b.n	800981e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	f107 020e 	add.w	r2, r7, #14
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
 8009814:	4602      	mov	r2, r0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 fc1a 	bl	800b068 <USBD_LL_Start>
 8009834:	4603      	mov	r3, r0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009860:	2303      	movs	r3, #3
 8009862:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	78fa      	ldrb	r2, [r7, #3]
 8009878:	4611      	mov	r1, r2
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	4798      	blx	r3
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	4611      	mov	r1, r2
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
  }

  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 ff46 	bl	800a760 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d01a      	beq.n	800992e <USBD_LL_SetupStage+0x72>
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d822      	bhi.n	8009942 <USBD_LL_SetupStage+0x86>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <USBD_LL_SetupStage+0x4a>
 8009900:	2b01      	cmp	r3, #1
 8009902:	d00a      	beq.n	800991a <USBD_LL_SetupStage+0x5e>
 8009904:	e01d      	b.n	8009942 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f9ee 	bl	8009cf0 <USBD_StdDevReq>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
      break;
 8009918:	e020      	b.n	800995c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa52 	bl	8009dcc <USBD_StdItfReq>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
      break;
 800992c:	e016      	b.n	800995c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa91 	bl	8009e5e <USBD_StdEPReq>
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
      break;
 8009940:	e00c      	b.n	800995c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800994c:	b2db      	uxtb	r3, r3
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 fbe9 	bl	800b128 <USBD_LL_StallEP>
 8009956:	4603      	mov	r3, r0
 8009958:	73fb      	strb	r3, [r7, #15]
      break;
 800995a:	bf00      	nop
  }

  return ret;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b086      	sub	sp, #24
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	460b      	mov	r3, r1
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009974:	7afb      	ldrb	r3, [r7, #11]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d138      	bne.n	80099ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009980:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009988:	2b03      	cmp	r3, #3
 800998a:	d14a      	bne.n	8009a22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	429a      	cmp	r2, r3
 8009996:	d913      	bls.n	80099c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	1ad2      	subs	r2, r2, r3
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	68da      	ldr	r2, [r3, #12]
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	4293      	cmp	r3, r2
 80099b0:	bf28      	it	cs
 80099b2:	4613      	movcs	r3, r2
 80099b4:	461a      	mov	r2, r3
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 ffc5 	bl	800a948 <USBD_CtlContinueRx>
 80099be:	e030      	b.n	8009a22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d10b      	bne.n	80099e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d005      	beq.n	80099e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 ffc0 	bl	800a96a <USBD_CtlSendStatus>
 80099ea:	e01a      	b.n	8009a22 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	d114      	bne.n	8009a22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00e      	beq.n	8009a22 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	7afa      	ldrb	r2, [r7, #11]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	4798      	blx	r3
 8009a14:	4603      	mov	r3, r0
 8009a16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	e000      	b.n	8009a24 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	460b      	mov	r3, r1
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d16b      	bne.n	8009b18 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3314      	adds	r3, #20
 8009a44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d156      	bne.n	8009afe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d914      	bls.n	8009a86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	689a      	ldr	r2, [r3, #8]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	1ad2      	subs	r2, r2, r3
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 ff3a 	bl	800a8ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f001 fbfd 	bl	800b27e <USBD_LL_PrepareReceive>
 8009a84:	e03b      	b.n	8009afe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d11c      	bne.n	8009acc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d316      	bcc.n	8009acc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d20f      	bcs.n	8009acc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 ff1b 	bl	800a8ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f001 fbda 	bl	800b27e <USBD_LL_PrepareReceive>
 8009aca:	e018      	b.n	8009afe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d10b      	bne.n	8009af0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d005      	beq.n	8009af0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009af0:	2180      	movs	r1, #128	; 0x80
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f001 fb18 	bl	800b128 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 ff49 	bl	800a990 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d122      	bne.n	8009b4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f7ff fe98 	bl	800983e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009b16:	e01a      	b.n	8009b4e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d114      	bne.n	8009b4e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00e      	beq.n	8009b4e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	7afa      	ldrb	r2, [r7, #11]
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	4798      	blx	r3
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	e000      	b.n	8009b50 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e02f      	b.n	8009bec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00f      	beq.n	8009bb6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	6852      	ldr	r2, [r2, #4]
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bb6:	2340      	movs	r3, #64	; 0x40
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2100      	movs	r1, #0
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 fa6e 	bl	800b09e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2240      	movs	r2, #64	; 0x40
 8009bce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bd2:	2340      	movs	r3, #64	; 0x40
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2180      	movs	r1, #128	; 0x80
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f001 fa60 	bl	800b09e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2240      	movs	r2, #64	; 0x40
 8009be8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	78fa      	ldrb	r2, [r7, #3]
 8009c04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2204      	movs	r2, #4
 8009c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d106      	bne.n	8009c62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e012      	b.n	8009cac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d10b      	bne.n	8009caa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d005      	beq.n	8009caa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cd2:	8a3b      	ldrh	r3, [r7, #16]
 8009cd4:	021b      	lsls	r3, r3, #8
 8009cd6:	b21a      	sxth	r2, r3
 8009cd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	b21b      	sxth	r3, r3
 8009ce0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ce2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	371c      	adds	r7, #28
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d06:	2b40      	cmp	r3, #64	; 0x40
 8009d08:	d005      	beq.n	8009d16 <USBD_StdDevReq+0x26>
 8009d0a:	2b40      	cmp	r3, #64	; 0x40
 8009d0c:	d853      	bhi.n	8009db6 <USBD_StdDevReq+0xc6>
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <USBD_StdDevReq+0x3a>
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d14f      	bne.n	8009db6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	4798      	blx	r3
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]
      break;
 8009d28:	e04a      	b.n	8009dc0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	d83b      	bhi.n	8009daa <USBD_StdDevReq+0xba>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <USBD_StdDevReq+0x48>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d8d 	.word	0x08009d8d
 8009d3c:	08009da1 	.word	0x08009da1
 8009d40:	08009dab 	.word	0x08009dab
 8009d44:	08009d97 	.word	0x08009d97
 8009d48:	08009dab 	.word	0x08009dab
 8009d4c:	08009d6b 	.word	0x08009d6b
 8009d50:	08009d61 	.word	0x08009d61
 8009d54:	08009dab 	.word	0x08009dab
 8009d58:	08009d83 	.word	0x08009d83
 8009d5c:	08009d75 	.word	0x08009d75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f9de 	bl	800a124 <USBD_GetDescriptor>
          break;
 8009d68:	e024      	b.n	8009db4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fb6d 	bl	800a44c <USBD_SetAddress>
          break;
 8009d72:	e01f      	b.n	8009db4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fbac 	bl	800a4d4 <USBD_SetConfig>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8009d80:	e018      	b.n	8009db4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fc4b 	bl	800a620 <USBD_GetConfig>
          break;
 8009d8a:	e013      	b.n	8009db4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fc7c 	bl	800a68c <USBD_GetStatus>
          break;
 8009d94:	e00e      	b.n	8009db4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fcab 	bl	800a6f4 <USBD_SetFeature>
          break;
 8009d9e:	e009      	b.n	8009db4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fcba 	bl	800a71c <USBD_ClrFeature>
          break;
 8009da8:	e004      	b.n	8009db4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fd11 	bl	800a7d4 <USBD_CtlError>
          break;
 8009db2:	bf00      	nop
      }
      break;
 8009db4:	e004      	b.n	8009dc0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fd0b 	bl	800a7d4 <USBD_CtlError>
      break;
 8009dbe:	bf00      	nop
  }

  return ret;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop

08009dcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d005      	beq.n	8009df2 <USBD_StdItfReq+0x26>
 8009de6:	2b40      	cmp	r3, #64	; 0x40
 8009de8:	d82f      	bhi.n	8009e4a <USBD_StdItfReq+0x7e>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <USBD_StdItfReq+0x26>
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d12b      	bne.n	8009e4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d81d      	bhi.n	8009e3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	889b      	ldrh	r3, [r3, #4]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d813      	bhi.n	8009e32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	4798      	blx	r3
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d110      	bne.n	8009e46 <USBD_StdItfReq+0x7a>
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10d      	bne.n	8009e46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fd9d 	bl	800a96a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e30:	e009      	b.n	8009e46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fccd 	bl	800a7d4 <USBD_CtlError>
          break;
 8009e3a:	e004      	b.n	8009e46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fcc8 	bl	800a7d4 <USBD_CtlError>
          break;
 8009e44:	e000      	b.n	8009e48 <USBD_StdItfReq+0x7c>
          break;
 8009e46:	bf00      	nop
      }
      break;
 8009e48:	e004      	b.n	8009e54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fcc1 	bl	800a7d4 <USBD_CtlError>
      break;
 8009e52:	bf00      	nop
  }

  return ret;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	889b      	ldrh	r3, [r3, #4]
 8009e70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e7a:	2b40      	cmp	r3, #64	; 0x40
 8009e7c:	d007      	beq.n	8009e8e <USBD_StdEPReq+0x30>
 8009e7e:	2b40      	cmp	r3, #64	; 0x40
 8009e80:	f200 8145 	bhi.w	800a10e <USBD_StdEPReq+0x2b0>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00c      	beq.n	8009ea2 <USBD_StdEPReq+0x44>
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	f040 8140 	bne.w	800a10e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	4798      	blx	r3
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea0:	e13a      	b.n	800a118 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d007      	beq.n	8009eba <USBD_StdEPReq+0x5c>
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	f300 8129 	bgt.w	800a102 <USBD_StdEPReq+0x2a4>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d07f      	beq.n	8009fb4 <USBD_StdEPReq+0x156>
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d03c      	beq.n	8009f32 <USBD_StdEPReq+0xd4>
 8009eb8:	e123      	b.n	800a102 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d002      	beq.n	8009ecc <USBD_StdEPReq+0x6e>
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d016      	beq.n	8009ef8 <USBD_StdEPReq+0x9a>
 8009eca:	e02c      	b.n	8009f26 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00d      	beq.n	8009eee <USBD_StdEPReq+0x90>
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	2b80      	cmp	r3, #128	; 0x80
 8009ed6:	d00a      	beq.n	8009eee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 f923 	bl	800b128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ee2:	2180      	movs	r1, #128	; 0x80
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 f91f 	bl	800b128 <USBD_LL_StallEP>
 8009eea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009eec:	e020      	b.n	8009f30 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fc6f 	bl	800a7d4 <USBD_CtlError>
              break;
 8009ef6:	e01b      	b.n	8009f30 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	885b      	ldrh	r3, [r3, #2]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10e      	bne.n	8009f1e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00b      	beq.n	8009f1e <USBD_StdEPReq+0xc0>
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b80      	cmp	r3, #128	; 0x80
 8009f0a:	d008      	beq.n	8009f1e <USBD_StdEPReq+0xc0>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	88db      	ldrh	r3, [r3, #6]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d104      	bne.n	8009f1e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f001 f905 	bl	800b128 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fd23 	bl	800a96a <USBD_CtlSendStatus>

              break;
 8009f24:	e004      	b.n	8009f30 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fc53 	bl	800a7d4 <USBD_CtlError>
              break;
 8009f2e:	bf00      	nop
          }
          break;
 8009f30:	e0ec      	b.n	800a10c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d002      	beq.n	8009f44 <USBD_StdEPReq+0xe6>
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d016      	beq.n	8009f70 <USBD_StdEPReq+0x112>
 8009f42:	e030      	b.n	8009fa6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00d      	beq.n	8009f66 <USBD_StdEPReq+0x108>
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	2b80      	cmp	r3, #128	; 0x80
 8009f4e:	d00a      	beq.n	8009f66 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f8e7 	bl	800b128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f5a:	2180      	movs	r1, #128	; 0x80
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 f8e3 	bl	800b128 <USBD_LL_StallEP>
 8009f62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f64:	e025      	b.n	8009fb2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fc33 	bl	800a7d4 <USBD_CtlError>
              break;
 8009f6e:	e020      	b.n	8009fb2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	885b      	ldrh	r3, [r3, #2]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d11b      	bne.n	8009fb0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d004      	beq.n	8009f8c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 f8ed 	bl	800b166 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fcec 	bl	800a96a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	4798      	blx	r3
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009fa4:	e004      	b.n	8009fb0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc13 	bl	800a7d4 <USBD_CtlError>
              break;
 8009fae:	e000      	b.n	8009fb2 <USBD_StdEPReq+0x154>
              break;
 8009fb0:	bf00      	nop
          }
          break;
 8009fb2:	e0ab      	b.n	800a10c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d002      	beq.n	8009fc6 <USBD_StdEPReq+0x168>
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d032      	beq.n	800a02a <USBD_StdEPReq+0x1cc>
 8009fc4:	e097      	b.n	800a0f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d007      	beq.n	8009fdc <USBD_StdEPReq+0x17e>
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	2b80      	cmp	r3, #128	; 0x80
 8009fd0:	d004      	beq.n	8009fdc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fbfd 	bl	800a7d4 <USBD_CtlError>
                break;
 8009fda:	e091      	b.n	800a100 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	da0b      	bge.n	8009ffc <USBD_StdEPReq+0x19e>
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	3310      	adds	r3, #16
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	e00b      	b.n	800a014 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	4413      	add	r3, r2
 800a012:	3304      	adds	r3, #4
 800a014:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2202      	movs	r2, #2
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fc47 	bl	800a8b6 <USBD_CtlSendData>
              break;
 800a028:	e06a      	b.n	800a100 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a02a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	da11      	bge.n	800a056 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	f003 020f 	and.w	r2, r3, #15
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	3324      	adds	r3, #36	; 0x24
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d117      	bne.n	800a07c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fbc0 	bl	800a7d4 <USBD_CtlError>
                  break;
 800a054:	e054      	b.n	800a100 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	f003 020f 	and.w	r2, r3, #15
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	4613      	mov	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	440b      	add	r3, r1
 800a068:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d104      	bne.n	800a07c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fbad 	bl	800a7d4 <USBD_CtlError>
                  break;
 800a07a:	e041      	b.n	800a100 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a07c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a080:	2b00      	cmp	r3, #0
 800a082:	da0b      	bge.n	800a09c <USBD_StdEPReq+0x23e>
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	3310      	adds	r3, #16
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	4413      	add	r3, r2
 800a098:	3304      	adds	r3, #4
 800a09a:	e00b      	b.n	800a0b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <USBD_StdEPReq+0x264>
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
 800a0be:	2b80      	cmp	r3, #128	; 0x80
 800a0c0:	d103      	bne.n	800a0ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	e00e      	b.n	800a0e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 f868 	bl	800b1a4 <USBD_LL_IsStallEP>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	e002      	b.n	800a0e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fbe1 	bl	800a8b6 <USBD_CtlSendData>
              break;
 800a0f4:	e004      	b.n	800a100 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb6b 	bl	800a7d4 <USBD_CtlError>
              break;
 800a0fe:	bf00      	nop
          }
          break;
 800a100:	e004      	b.n	800a10c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fb65 	bl	800a7d4 <USBD_CtlError>
          break;
 800a10a:	bf00      	nop
      }
      break;
 800a10c:	e004      	b.n	800a118 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fb5f 	bl	800a7d4 <USBD_CtlError>
      break;
 800a116:	bf00      	nop
  }

  return ret;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	885b      	ldrh	r3, [r3, #2]
 800a13e:	0a1b      	lsrs	r3, r3, #8
 800a140:	b29b      	uxth	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	2b0e      	cmp	r3, #14
 800a146:	f200 8152 	bhi.w	800a3ee <USBD_GetDescriptor+0x2ca>
 800a14a:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <USBD_GetDescriptor+0x2c>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a1c1 	.word	0x0800a1c1
 800a154:	0800a1d9 	.word	0x0800a1d9
 800a158:	0800a219 	.word	0x0800a219
 800a15c:	0800a3ef 	.word	0x0800a3ef
 800a160:	0800a3ef 	.word	0x0800a3ef
 800a164:	0800a38f 	.word	0x0800a38f
 800a168:	0800a3bb 	.word	0x0800a3bb
 800a16c:	0800a3ef 	.word	0x0800a3ef
 800a170:	0800a3ef 	.word	0x0800a3ef
 800a174:	0800a3ef 	.word	0x0800a3ef
 800a178:	0800a3ef 	.word	0x0800a3ef
 800a17c:	0800a3ef 	.word	0x0800a3ef
 800a180:	0800a3ef 	.word	0x0800a3ef
 800a184:	0800a3ef 	.word	0x0800a3ef
 800a188:	0800a18d 	.word	0x0800a18d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00b      	beq.n	800a1b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	7c12      	ldrb	r2, [r2, #16]
 800a1a4:	f107 0108 	add.w	r1, r7, #8
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	4798      	blx	r3
 800a1ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1ae:	e126      	b.n	800a3fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fb0e 	bl	800a7d4 <USBD_CtlError>
        err++;
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	72fb      	strb	r3, [r7, #11]
      break;
 800a1be:	e11e      	b.n	800a3fe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	7c12      	ldrb	r2, [r2, #16]
 800a1cc:	f107 0108 	add.w	r1, r7, #8
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	4798      	blx	r3
 800a1d4:	60f8      	str	r0, [r7, #12]
      break;
 800a1d6:	e112      	b.n	800a3fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	7c1b      	ldrb	r3, [r3, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10d      	bne.n	800a1fc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	f107 0208 	add.w	r2, r7, #8
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4798      	blx	r3
 800a1f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1fa:	e100      	b.n	800a3fe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	f107 0208 	add.w	r2, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3301      	adds	r3, #1
 800a212:	2202      	movs	r2, #2
 800a214:	701a      	strb	r2, [r3, #0]
      break;
 800a216:	e0f2      	b.n	800a3fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	885b      	ldrh	r3, [r3, #2]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b05      	cmp	r3, #5
 800a220:	f200 80ac 	bhi.w	800a37c <USBD_GetDescriptor+0x258>
 800a224:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <USBD_GetDescriptor+0x108>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a245 	.word	0x0800a245
 800a230:	0800a279 	.word	0x0800a279
 800a234:	0800a2ad 	.word	0x0800a2ad
 800a238:	0800a2e1 	.word	0x0800a2e1
 800a23c:	0800a315 	.word	0x0800a315
 800a240:	0800a349 	.word	0x0800a349
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	7c12      	ldrb	r2, [r2, #16]
 800a25c:	f107 0108 	add.w	r1, r7, #8
 800a260:	4610      	mov	r0, r2
 800a262:	4798      	blx	r3
 800a264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a266:	e091      	b.n	800a38c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fab2 	bl	800a7d4 <USBD_CtlError>
            err++;
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	3301      	adds	r3, #1
 800a274:	72fb      	strb	r3, [r7, #11]
          break;
 800a276:	e089      	b.n	800a38c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00b      	beq.n	800a29c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	7c12      	ldrb	r2, [r2, #16]
 800a290:	f107 0108 	add.w	r1, r7, #8
 800a294:	4610      	mov	r0, r2
 800a296:	4798      	blx	r3
 800a298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a29a:	e077      	b.n	800a38c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fa98 	bl	800a7d4 <USBD_CtlError>
            err++;
 800a2a4:	7afb      	ldrb	r3, [r7, #11]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2aa:	e06f      	b.n	800a38c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	7c12      	ldrb	r2, [r2, #16]
 800a2c4:	f107 0108 	add.w	r1, r7, #8
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	4798      	blx	r3
 800a2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ce:	e05d      	b.n	800a38c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa7e 	bl	800a7d4 <USBD_CtlError>
            err++;
 800a2d8:	7afb      	ldrb	r3, [r7, #11]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2de:	e055      	b.n	800a38c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00b      	beq.n	800a304 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	7c12      	ldrb	r2, [r2, #16]
 800a2f8:	f107 0108 	add.w	r1, r7, #8
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4798      	blx	r3
 800a300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a302:	e043      	b.n	800a38c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fa64 	bl	800a7d4 <USBD_CtlError>
            err++;
 800a30c:	7afb      	ldrb	r3, [r7, #11]
 800a30e:	3301      	adds	r3, #1
 800a310:	72fb      	strb	r3, [r7, #11]
          break;
 800a312:	e03b      	b.n	800a38c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	7c12      	ldrb	r2, [r2, #16]
 800a32c:	f107 0108 	add.w	r1, r7, #8
 800a330:	4610      	mov	r0, r2
 800a332:	4798      	blx	r3
 800a334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a336:	e029      	b.n	800a38c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fa4a 	bl	800a7d4 <USBD_CtlError>
            err++;
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	3301      	adds	r3, #1
 800a344:	72fb      	strb	r3, [r7, #11]
          break;
 800a346:	e021      	b.n	800a38c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	7c12      	ldrb	r2, [r2, #16]
 800a360:	f107 0108 	add.w	r1, r7, #8
 800a364:	4610      	mov	r0, r2
 800a366:	4798      	blx	r3
 800a368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36a:	e00f      	b.n	800a38c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa30 	bl	800a7d4 <USBD_CtlError>
            err++;
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	3301      	adds	r3, #1
 800a378:	72fb      	strb	r3, [r7, #11]
          break;
 800a37a:	e007      	b.n	800a38c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fa28 	bl	800a7d4 <USBD_CtlError>
          err++;
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	3301      	adds	r3, #1
 800a388:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a38a:	bf00      	nop
      }
      break;
 800a38c:	e037      	b.n	800a3fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	7c1b      	ldrb	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d109      	bne.n	800a3aa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39e:	f107 0208 	add.w	r2, r7, #8
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	4798      	blx	r3
 800a3a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3a8:	e029      	b.n	800a3fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fa11 	bl	800a7d4 <USBD_CtlError>
        err++;
 800a3b2:	7afb      	ldrb	r3, [r7, #11]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b8:	e021      	b.n	800a3fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	7c1b      	ldrb	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10d      	bne.n	800a3de <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ca:	f107 0208 	add.w	r2, r7, #8
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	4798      	blx	r3
 800a3d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	2207      	movs	r2, #7
 800a3da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3dc:	e00f      	b.n	800a3fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f9f7 	bl	800a7d4 <USBD_CtlError>
        err++;
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ec:	e007      	b.n	800a3fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f9ef 	bl	800a7d4 <USBD_CtlError>
      err++;
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	72fb      	strb	r3, [r7, #11]
      break;
 800a3fc:	bf00      	nop
  }

  if (err != 0U)
 800a3fe:	7afb      	ldrb	r3, [r7, #11]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d11e      	bne.n	800a442 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	88db      	ldrh	r3, [r3, #6]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d016      	beq.n	800a43a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a40c:	893b      	ldrh	r3, [r7, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00e      	beq.n	800a430 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	88da      	ldrh	r2, [r3, #6]
 800a416:	893b      	ldrh	r3, [r7, #8]
 800a418:	4293      	cmp	r3, r2
 800a41a:	bf28      	it	cs
 800a41c:	4613      	movcs	r3, r2
 800a41e:	b29b      	uxth	r3, r3
 800a420:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a422:	893b      	ldrh	r3, [r7, #8]
 800a424:	461a      	mov	r2, r3
 800a426:	68f9      	ldr	r1, [r7, #12]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa44 	bl	800a8b6 <USBD_CtlSendData>
 800a42e:	e009      	b.n	800a444 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f9ce 	bl	800a7d4 <USBD_CtlError>
 800a438:	e004      	b.n	800a444 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa95 	bl	800a96a <USBD_CtlSendStatus>
 800a440:	e000      	b.n	800a444 <USBD_GetDescriptor+0x320>
    return;
 800a442:	bf00      	nop
  }
}
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop

0800a44c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	889b      	ldrh	r3, [r3, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d131      	bne.n	800a4c2 <USBD_SetAddress+0x76>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	88db      	ldrh	r3, [r3, #6]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d12d      	bne.n	800a4c2 <USBD_SetAddress+0x76>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	885b      	ldrh	r3, [r3, #2]
 800a46a:	2b7f      	cmp	r3, #127	; 0x7f
 800a46c:	d829      	bhi.n	800a4c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	885b      	ldrh	r3, [r3, #2]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a478:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b03      	cmp	r3, #3
 800a484:	d104      	bne.n	800a490 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f9a3 	bl	800a7d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a48e:	e01d      	b.n	800a4cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7bfa      	ldrb	r2, [r7, #15]
 800a494:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 feae 	bl	800b1fe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa61 	bl	800a96a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d004      	beq.n	800a4b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b6:	e009      	b.n	800a4cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c0:	e004      	b.n	800a4cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f985 	bl	800a7d4 <USBD_CtlError>
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	bf00      	nop
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	885b      	ldrh	r3, [r3, #2]
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	4b4c      	ldr	r3, [pc, #304]	; (800a61c <USBD_SetConfig+0x148>)
 800a4ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4ec:	4b4b      	ldr	r3, [pc, #300]	; (800a61c <USBD_SetConfig+0x148>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d905      	bls.n	800a500 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f96c 	bl	800a7d4 <USBD_CtlError>
    return USBD_FAIL;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e088      	b.n	800a612 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d002      	beq.n	800a512 <USBD_SetConfig+0x3e>
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d025      	beq.n	800a55c <USBD_SetConfig+0x88>
 800a510:	e071      	b.n	800a5f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a512:	4b42      	ldr	r3, [pc, #264]	; (800a61c <USBD_SetConfig+0x148>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d01c      	beq.n	800a554 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a51a:	4b40      	ldr	r3, [pc, #256]	; (800a61c <USBD_SetConfig+0x148>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a524:	4b3d      	ldr	r3, [pc, #244]	; (800a61c <USBD_SetConfig+0x148>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	4619      	mov	r1, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff f992 	bl	8009854 <USBD_SetClassConfig>
 800a530:	4603      	mov	r3, r0
 800a532:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d004      	beq.n	800a544 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f949 	bl	800a7d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a542:	e065      	b.n	800a610 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fa10 	bl	800a96a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2203      	movs	r2, #3
 800a54e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a552:	e05d      	b.n	800a610 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fa08 	bl	800a96a <USBD_CtlSendStatus>
      break;
 800a55a:	e059      	b.n	800a610 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a55c:	4b2f      	ldr	r3, [pc, #188]	; (800a61c <USBD_SetConfig+0x148>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d112      	bne.n	800a58a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a56c:	4b2b      	ldr	r3, [pc, #172]	; (800a61c <USBD_SetConfig+0x148>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a576:	4b29      	ldr	r3, [pc, #164]	; (800a61c <USBD_SetConfig+0x148>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff f985 	bl	800988c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f9f1 	bl	800a96a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a588:	e042      	b.n	800a610 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a58a:	4b24      	ldr	r3, [pc, #144]	; (800a61c <USBD_SetConfig+0x148>)
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	429a      	cmp	r2, r3
 800a596:	d02a      	beq.n	800a5ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff f973 	bl	800988c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a5a6:	4b1d      	ldr	r3, [pc, #116]	; (800a61c <USBD_SetConfig+0x148>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5b0:	4b1a      	ldr	r3, [pc, #104]	; (800a61c <USBD_SetConfig+0x148>)
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff f94c 	bl	8009854 <USBD_SetClassConfig>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00f      	beq.n	800a5e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f903 	bl	800a7d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff f958 	bl	800988c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a5e4:	e014      	b.n	800a610 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f9bf 	bl	800a96a <USBD_CtlSendStatus>
      break;
 800a5ec:	e010      	b.n	800a610 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f9bb 	bl	800a96a <USBD_CtlSendStatus>
      break;
 800a5f4:	e00c      	b.n	800a610 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f8eb 	bl	800a7d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5fe:	4b07      	ldr	r3, [pc, #28]	; (800a61c <USBD_SetConfig+0x148>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff f941 	bl	800988c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a60a:	2303      	movs	r3, #3
 800a60c:	73fb      	strb	r3, [r7, #15]
      break;
 800a60e:	bf00      	nop
  }

  return ret;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000228 	.word	0x20000228

0800a620 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	88db      	ldrh	r3, [r3, #6]
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d004      	beq.n	800a63c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f8cd 	bl	800a7d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a63a:	e023      	b.n	800a684 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b02      	cmp	r3, #2
 800a646:	dc02      	bgt.n	800a64e <USBD_GetConfig+0x2e>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dc03      	bgt.n	800a654 <USBD_GetConfig+0x34>
 800a64c:	e015      	b.n	800a67a <USBD_GetConfig+0x5a>
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d00b      	beq.n	800a66a <USBD_GetConfig+0x4a>
 800a652:	e012      	b.n	800a67a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3308      	adds	r3, #8
 800a65e:	2201      	movs	r2, #1
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f927 	bl	800a8b6 <USBD_CtlSendData>
        break;
 800a668:	e00c      	b.n	800a684 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3304      	adds	r3, #4
 800a66e:	2201      	movs	r2, #1
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f91f 	bl	800a8b6 <USBD_CtlSendData>
        break;
 800a678:	e004      	b.n	800a684 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f8a9 	bl	800a7d4 <USBD_CtlError>
        break;
 800a682:	bf00      	nop
}
 800a684:	bf00      	nop
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d81e      	bhi.n	800a6e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	88db      	ldrh	r3, [r3, #6]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d004      	beq.n	800a6b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f890 	bl	800a7d4 <USBD_CtlError>
        break;
 800a6b4:	e01a      	b.n	800a6ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d005      	beq.n	800a6d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f043 0202 	orr.w	r2, r3, #2
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	330c      	adds	r3, #12
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f8eb 	bl	800a8b6 <USBD_CtlSendData>
      break;
 800a6e0:	e004      	b.n	800a6ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f875 	bl	800a7d4 <USBD_CtlError>
      break;
 800a6ea:	bf00      	nop
  }
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	885b      	ldrh	r3, [r3, #2]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d106      	bne.n	800a714 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f92b 	bl	800a96a <USBD_CtlSendStatus>
  }
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	3b01      	subs	r3, #1
 800a730:	2b02      	cmp	r3, #2
 800a732:	d80b      	bhi.n	800a74c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	885b      	ldrh	r3, [r3, #2]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d10c      	bne.n	800a756 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f910 	bl	800a96a <USBD_CtlSendStatus>
      }
      break;
 800a74a:	e004      	b.n	800a756 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f840 	bl	800a7d4 <USBD_CtlError>
      break;
 800a754:	e000      	b.n	800a758 <USBD_ClrFeature+0x3c>
      break;
 800a756:	bf00      	nop
  }
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3301      	adds	r3, #1
 800a77a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3301      	adds	r3, #1
 800a788:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f7ff fa92 	bl	8009cb4 <SWAPBYTE>
 800a790:	4603      	mov	r3, r0
 800a792:	461a      	mov	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3301      	adds	r3, #1
 800a79c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff fa85 	bl	8009cb4 <SWAPBYTE>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f7ff fa78 	bl	8009cb4 <SWAPBYTE>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	80da      	strh	r2, [r3, #6]
}
 800a7cc:	bf00      	nop
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7de:	2180      	movs	r1, #128	; 0x80
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fca1 	bl	800b128 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fc9d 	bl	800b128 <USBD_LL_StallEP>
}
 800a7ee:	bf00      	nop
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b086      	sub	sp, #24
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d036      	beq.n	800a87a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a810:	6938      	ldr	r0, [r7, #16]
 800a812:	f000 f836 	bl	800a882 <USBD_GetLen>
 800a816:	4603      	mov	r3, r0
 800a818:	3301      	adds	r3, #1
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	b29a      	uxth	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	4413      	add	r3, r2
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	7812      	ldrb	r2, [r2, #0]
 800a82e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	3301      	adds	r3, #1
 800a834:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	4413      	add	r3, r2
 800a83c:	2203      	movs	r2, #3
 800a83e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	3301      	adds	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a846:	e013      	b.n	800a870 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	7812      	ldrb	r2, [r2, #0]
 800a852:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	3301      	adds	r3, #1
 800a858:	613b      	str	r3, [r7, #16]
    idx++;
 800a85a:	7dfb      	ldrb	r3, [r7, #23]
 800a85c:	3301      	adds	r3, #1
 800a85e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	4413      	add	r3, r2
 800a866:	2200      	movs	r2, #0
 800a868:	701a      	strb	r2, [r3, #0]
    idx++;
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	3301      	adds	r3, #1
 800a86e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1e7      	bne.n	800a848 <USBD_GetString+0x52>
 800a878:	e000      	b.n	800a87c <USBD_GetString+0x86>
    return;
 800a87a:	bf00      	nop
  }
}
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a882:	b480      	push	{r7}
 800a884:	b085      	sub	sp, #20
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a892:	e005      	b.n	800a8a0 <USBD_GetLen+0x1e>
  {
    len++;
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	3301      	adds	r3, #1
 800a898:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	3301      	adds	r3, #1
 800a89e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1f5      	bne.n	800a894 <USBD_GetLen+0x12>
  }

  return len;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	2100      	movs	r1, #0
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fcad 	bl	800b23c <USBD_LL_Transmit>

  return USBD_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 fc9c 	bl	800b23c <USBD_LL_Transmit>

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2203      	movs	r2, #3
 800a91e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	2100      	movs	r1, #0
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 fca0 	bl	800b27e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	2100      	movs	r1, #0
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f000 fc8f 	bl	800b27e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2204      	movs	r2, #4
 800a976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a97a:	2300      	movs	r3, #0
 800a97c:	2200      	movs	r2, #0
 800a97e:	2100      	movs	r1, #0
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fc5b 	bl	800b23c <USBD_LL_Transmit>

  return USBD_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2205      	movs	r2, #5
 800a99c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fc69 	bl	800b27e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4912      	ldr	r1, [pc, #72]	; (800aa08 <MX_USB_Device_Init+0x50>)
 800a9c0:	4812      	ldr	r0, [pc, #72]	; (800aa0c <MX_USB_Device_Init+0x54>)
 800a9c2:	f7fe fed9 	bl	8009778 <USBD_Init>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a9cc:	f7f7 f9ee 	bl	8001dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a9d0:	490f      	ldr	r1, [pc, #60]	; (800aa10 <MX_USB_Device_Init+0x58>)
 800a9d2:	480e      	ldr	r0, [pc, #56]	; (800aa0c <MX_USB_Device_Init+0x54>)
 800a9d4:	f7fe ff00 	bl	80097d8 <USBD_RegisterClass>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a9de:	f7f7 f9e5 	bl	8001dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a9e2:	490c      	ldr	r1, [pc, #48]	; (800aa14 <MX_USB_Device_Init+0x5c>)
 800a9e4:	4809      	ldr	r0, [pc, #36]	; (800aa0c <MX_USB_Device_Init+0x54>)
 800a9e6:	f7fe fe21 	bl	800962c <USBD_CDC_RegisterInterface>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a9f0:	f7f7 f9dc 	bl	8001dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9f4:	4805      	ldr	r0, [pc, #20]	; (800aa0c <MX_USB_Device_Init+0x54>)
 800a9f6:	f7fe ff16 	bl	8009826 <USBD_Start>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aa00:	f7f7 f9d4 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aa04:	bf00      	nop
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	2000014c 	.word	0x2000014c
 800aa0c:	20000748 	.word	0x20000748
 800aa10:	20000034 	.word	0x20000034
 800aa14:	20000138 	.word	0x20000138

0800aa18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4905      	ldr	r1, [pc, #20]	; (800aa34 <CDC_Init_FS+0x1c>)
 800aa20:	4805      	ldr	r0, [pc, #20]	; (800aa38 <CDC_Init_FS+0x20>)
 800aa22:	f7fe fe18 	bl	8009656 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa26:	4905      	ldr	r1, [pc, #20]	; (800aa3c <CDC_Init_FS+0x24>)
 800aa28:	4803      	ldr	r0, [pc, #12]	; (800aa38 <CDC_Init_FS+0x20>)
 800aa2a:	f7fe fe32 	bl	8009692 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20000e00 	.word	0x20000e00
 800aa38:	20000748 	.word	0x20000748
 800aa3c:	20000a18 	.word	0x20000a18

0800aa40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2b23      	cmp	r3, #35	; 0x23
 800aa64:	d84a      	bhi.n	800aafc <CDC_Control_FS+0xac>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <CDC_Control_FS+0x1c>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aafd 	.word	0x0800aafd
 800aa70:	0800aafd 	.word	0x0800aafd
 800aa74:	0800aafd 	.word	0x0800aafd
 800aa78:	0800aafd 	.word	0x0800aafd
 800aa7c:	0800aafd 	.word	0x0800aafd
 800aa80:	0800aafd 	.word	0x0800aafd
 800aa84:	0800aafd 	.word	0x0800aafd
 800aa88:	0800aafd 	.word	0x0800aafd
 800aa8c:	0800aafd 	.word	0x0800aafd
 800aa90:	0800aafd 	.word	0x0800aafd
 800aa94:	0800aafd 	.word	0x0800aafd
 800aa98:	0800aafd 	.word	0x0800aafd
 800aa9c:	0800aafd 	.word	0x0800aafd
 800aaa0:	0800aafd 	.word	0x0800aafd
 800aaa4:	0800aafd 	.word	0x0800aafd
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800aafd 	.word	0x0800aafd
 800aab0:	0800aafd 	.word	0x0800aafd
 800aab4:	0800aafd 	.word	0x0800aafd
 800aab8:	0800aafd 	.word	0x0800aafd
 800aabc:	0800aafd 	.word	0x0800aafd
 800aac0:	0800aafd 	.word	0x0800aafd
 800aac4:	0800aafd 	.word	0x0800aafd
 800aac8:	0800aafd 	.word	0x0800aafd
 800aacc:	0800aafd 	.word	0x0800aafd
 800aad0:	0800aafd 	.word	0x0800aafd
 800aad4:	0800aafd 	.word	0x0800aafd
 800aad8:	0800aafd 	.word	0x0800aafd
 800aadc:	0800aafd 	.word	0x0800aafd
 800aae0:	0800aafd 	.word	0x0800aafd
 800aae4:	0800aafd 	.word	0x0800aafd
 800aae8:	0800aafd 	.word	0x0800aafd
 800aaec:	0800aafd 	.word	0x0800aafd
 800aaf0:	0800aafd 	.word	0x0800aafd
 800aaf4:	0800aafd 	.word	0x0800aafd
 800aaf8:	0800aafd 	.word	0x0800aafd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aafc:	bf00      	nop
  }

  return (USBD_OK);
 800aafe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7f5 fffb 	bl	8000b14 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	4805      	ldr	r0, [pc, #20]	; (800ab38 <CDC_Receive_FS+0x2c>)
 800ab22:	f7fe fdb6 	bl	8009692 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab26:	4804      	ldr	r0, [pc, #16]	; (800ab38 <CDC_Receive_FS+0x2c>)
 800ab28:	f7fe fdfc 	bl	8009724 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20000748 	.word	0x20000748

0800ab3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <CDC_Transmit_FS+0x48>)
 800ab4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e00b      	b.n	800ab7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab62:	887b      	ldrh	r3, [r7, #2]
 800ab64:	461a      	mov	r2, r3
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4806      	ldr	r0, [pc, #24]	; (800ab84 <CDC_Transmit_FS+0x48>)
 800ab6a:	f7fe fd74 	bl	8009656 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab6e:	4805      	ldr	r0, [pc, #20]	; (800ab84 <CDC_Transmit_FS+0x48>)
 800ab70:	f7fe fda8 	bl	80096c4 <USBD_CDC_TransmitPacket>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20000748 	.word	0x20000748

0800ab88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	4613      	mov	r3, r2
 800ab94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
	...

0800abac <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2212      	movs	r2, #18
 800abbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800abbe:	4b03      	ldr	r3, [pc, #12]	; (800abcc <USBD_CDC_DeviceDescriptor+0x20>)
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	2000016c 	.word	0x2000016c

0800abd0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	6039      	str	r1, [r7, #0]
 800abda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	2204      	movs	r2, #4
 800abe0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abe2:	4b03      	ldr	r3, [pc, #12]	; (800abf0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	20000180 	.word	0x20000180

0800abf4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d105      	bne.n	800ac12 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	4907      	ldr	r1, [pc, #28]	; (800ac28 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac0a:	4808      	ldr	r0, [pc, #32]	; (800ac2c <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac0c:	f7ff fdf3 	bl	800a7f6 <USBD_GetString>
 800ac10:	e004      	b.n	800ac1c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	4904      	ldr	r1, [pc, #16]	; (800ac28 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac16:	4805      	ldr	r0, [pc, #20]	; (800ac2c <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac18:	f7ff fded 	bl	800a7f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200011e8 	.word	0x200011e8
 800ac2c:	0800b474 	.word	0x0800b474

0800ac30 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	6039      	str	r1, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	4904      	ldr	r1, [pc, #16]	; (800ac50 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac40:	4804      	ldr	r0, [pc, #16]	; (800ac54 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac42:	f7ff fdd8 	bl	800a7f6 <USBD_GetString>
  return USBD_StrDesc;
 800ac46:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	200011e8 	.word	0x200011e8
 800ac54:	0800b48c 	.word	0x0800b48c

0800ac58 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	6039      	str	r1, [r7, #0]
 800ac62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	221a      	movs	r2, #26
 800ac68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac6a:	f000 f843 	bl	800acf4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac6e:	4b02      	ldr	r3, [pc, #8]	; (800ac78 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000184 	.word	0x20000184

0800ac7c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	6039      	str	r1, [r7, #0]
 800ac86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d105      	bne.n	800ac9a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	4907      	ldr	r1, [pc, #28]	; (800acb0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac92:	4808      	ldr	r0, [pc, #32]	; (800acb4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac94:	f7ff fdaf 	bl	800a7f6 <USBD_GetString>
 800ac98:	e004      	b.n	800aca4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4904      	ldr	r1, [pc, #16]	; (800acb0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac9e:	4805      	ldr	r0, [pc, #20]	; (800acb4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800aca0:	f7ff fda9 	bl	800a7f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aca4:	4b02      	ldr	r3, [pc, #8]	; (800acb0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	200011e8 	.word	0x200011e8
 800acb4:	0800b4a0 	.word	0x0800b4a0

0800acb8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d105      	bne.n	800acd6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	4907      	ldr	r1, [pc, #28]	; (800acec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acce:	4808      	ldr	r0, [pc, #32]	; (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acd0:	f7ff fd91 	bl	800a7f6 <USBD_GetString>
 800acd4:	e004      	b.n	800ace0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	4904      	ldr	r1, [pc, #16]	; (800acec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acda:	4805      	ldr	r0, [pc, #20]	; (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acdc:	f7ff fd8b 	bl	800a7f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ace0:	4b02      	ldr	r3, [pc, #8]	; (800acec <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	200011e8 	.word	0x200011e8
 800acf0:	0800b4ac 	.word	0x0800b4ac

0800acf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acfa:	4b0f      	ldr	r3, [pc, #60]	; (800ad38 <Get_SerialNum+0x44>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad00:	4b0e      	ldr	r3, [pc, #56]	; (800ad3c <Get_SerialNum+0x48>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad06:	4b0e      	ldr	r3, [pc, #56]	; (800ad40 <Get_SerialNum+0x4c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4413      	add	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d009      	beq.n	800ad2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	4909      	ldr	r1, [pc, #36]	; (800ad44 <Get_SerialNum+0x50>)
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f000 f814 	bl	800ad4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad24:	2204      	movs	r2, #4
 800ad26:	4908      	ldr	r1, [pc, #32]	; (800ad48 <Get_SerialNum+0x54>)
 800ad28:	68b8      	ldr	r0, [r7, #8]
 800ad2a:	f000 f80f 	bl	800ad4c <IntToUnicode>
  }
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	1fff7590 	.word	0x1fff7590
 800ad3c:	1fff7594 	.word	0x1fff7594
 800ad40:	1fff7598 	.word	0x1fff7598
 800ad44:	20000186 	.word	0x20000186
 800ad48:	20000196 	.word	0x20000196

0800ad4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad5e:	2300      	movs	r3, #0
 800ad60:	75fb      	strb	r3, [r7, #23]
 800ad62:	e027      	b.n	800adb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	0f1b      	lsrs	r3, r3, #28
 800ad68:	2b09      	cmp	r3, #9
 800ad6a:	d80b      	bhi.n	800ad84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	0f1b      	lsrs	r3, r3, #28
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	4619      	mov	r1, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	440b      	add	r3, r1
 800ad7c:	3230      	adds	r2, #48	; 0x30
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]
 800ad82:	e00a      	b.n	800ad9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	0f1b      	lsrs	r3, r3, #28
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	4619      	mov	r1, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	440b      	add	r3, r1
 800ad94:	3237      	adds	r2, #55	; 0x37
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ada0:	7dfb      	ldrb	r3, [r7, #23]
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	3301      	adds	r3, #1
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	4413      	add	r3, r2
 800adaa:	2200      	movs	r2, #0
 800adac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	3301      	adds	r3, #1
 800adb2:	75fb      	strb	r3, [r7, #23]
 800adb4:	7dfa      	ldrb	r2, [r7, #23]
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d3d3      	bcc.n	800ad64 <IntToUnicode+0x18>
  }
}
 800adbc:	bf00      	nop
 800adbe:	bf00      	nop
 800adc0:	371c      	adds	r7, #28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
	...

0800adcc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b094      	sub	sp, #80	; 0x50
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800add4:	f107 030c 	add.w	r3, r7, #12
 800add8:	2244      	movs	r2, #68	; 0x44
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fb35 	bl	800b44c <memset>
  if(pcdHandle->Instance==USB)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a19      	ldr	r2, [pc, #100]	; (800ae4c <HAL_PCD_MspInit+0x80>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d12b      	bne.n	800ae44 <HAL_PCD_MspInit+0x78>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800adec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adf0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800adf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adf6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800adf8:	f107 030c 	add.w	r3, r7, #12
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fa fa83 	bl	8005308 <HAL_RCCEx_PeriphCLKConfig>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ae08:	f7f6 ffd0 	bl	8001dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae0c:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <HAL_PCD_MspInit+0x84>)
 800ae0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae10:	4a0f      	ldr	r2, [pc, #60]	; (800ae50 <HAL_PCD_MspInit+0x84>)
 800ae12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae16:	6593      	str	r3, [r2, #88]	; 0x58
 800ae18:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <HAL_PCD_MspInit+0x84>)
 800ae1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae20:	60bb      	str	r3, [r7, #8]
 800ae22:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800ae24:	2200      	movs	r2, #0
 800ae26:	2100      	movs	r1, #0
 800ae28:	2013      	movs	r0, #19
 800ae2a:	f7f7 fc7c 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800ae2e:	2013      	movs	r0, #19
 800ae30:	f7f7 fc93 	bl	800275a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae34:	2200      	movs	r2, #0
 800ae36:	2100      	movs	r1, #0
 800ae38:	2014      	movs	r0, #20
 800ae3a:	f7f7 fc74 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae3e:	2014      	movs	r0, #20
 800ae40:	f7f7 fc8b 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae44:	bf00      	nop
 800ae46:	3750      	adds	r7, #80	; 0x50
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	40005c00 	.word	0x40005c00
 800ae50:	40021000 	.word	0x40021000

0800ae54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f7fe fd26 	bl	80098bc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae8a:	78fa      	ldrb	r2, [r7, #3]
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	440b      	add	r3, r1
 800ae98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	4619      	mov	r1, r3
 800aea2:	f7fe fd60 	bl	8009966 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800aec0:	78fa      	ldrb	r2, [r7, #3]
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	4613      	mov	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	440b      	add	r3, r1
 800aece:	333c      	adds	r3, #60	; 0x3c
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	78fb      	ldrb	r3, [r7, #3]
 800aed4:	4619      	mov	r1, r3
 800aed6:	f7fe fda9 	bl	8009a2c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aeda:	bf00      	nop
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe febd 	bl	8009c70 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af06:	2301      	movs	r3, #1
 800af08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d001      	beq.n	800af16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af12:	f7f6 ff4b 	bl	8001dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af1c:	7bfa      	ldrb	r2, [r7, #15]
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe fe67 	bl	8009bf4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fe fe13 	bl	8009b58 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe fe62 	bl	8009c14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d005      	beq.n	800af64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <HAL_PCD_SuspendCallback+0x30>)
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	4a03      	ldr	r2, [pc, #12]	; (800af6c <HAL_PCD_SuspendCallback+0x30>)
 800af5e:	f043 0306 	orr.w	r3, r3, #6
 800af62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	e000ed00 	.word	0xe000ed00

0800af70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af80:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <HAL_PCD_ResumeCallback+0x34>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	4a07      	ldr	r2, [pc, #28]	; (800afa4 <HAL_PCD_ResumeCallback+0x34>)
 800af86:	f023 0306 	bic.w	r3, r3, #6
 800af8a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af8c:	f000 f9fa 	bl	800b384 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fe52 	bl	8009c40 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	e000ed00 	.word	0xe000ed00

0800afa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800afb0:	4a2b      	ldr	r2, [pc, #172]	; (800b060 <USBD_LL_Init+0xb8>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a29      	ldr	r2, [pc, #164]	; (800b060 <USBD_LL_Init+0xb8>)
 800afbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800afc0:	4b27      	ldr	r3, [pc, #156]	; (800b060 <USBD_LL_Init+0xb8>)
 800afc2:	4a28      	ldr	r2, [pc, #160]	; (800b064 <USBD_LL_Init+0xbc>)
 800afc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afc6:	4b26      	ldr	r3, [pc, #152]	; (800b060 <USBD_LL_Init+0xb8>)
 800afc8:	2208      	movs	r2, #8
 800afca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afcc:	4b24      	ldr	r3, [pc, #144]	; (800b060 <USBD_LL_Init+0xb8>)
 800afce:	2202      	movs	r2, #2
 800afd0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afd2:	4b23      	ldr	r3, [pc, #140]	; (800b060 <USBD_LL_Init+0xb8>)
 800afd4:	2202      	movs	r2, #2
 800afd6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afd8:	4b21      	ldr	r3, [pc, #132]	; (800b060 <USBD_LL_Init+0xb8>)
 800afda:	2200      	movs	r2, #0
 800afdc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afde:	4b20      	ldr	r3, [pc, #128]	; (800b060 <USBD_LL_Init+0xb8>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afe4:	4b1e      	ldr	r3, [pc, #120]	; (800b060 <USBD_LL_Init+0xb8>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afea:	4b1d      	ldr	r3, [pc, #116]	; (800b060 <USBD_LL_Init+0xb8>)
 800afec:	2200      	movs	r2, #0
 800afee:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aff0:	481b      	ldr	r0, [pc, #108]	; (800b060 <USBD_LL_Init+0xb8>)
 800aff2:	f7f7 fea5 	bl	8002d40 <HAL_PCD_Init>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800affc:	f7f6 fed6 	bl	8001dac <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b006:	2318      	movs	r3, #24
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	f7f9 fb5e 	bl	80046cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b016:	2358      	movs	r3, #88	; 0x58
 800b018:	2200      	movs	r2, #0
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	f7f9 fb56 	bl	80046cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b026:	23c0      	movs	r3, #192	; 0xc0
 800b028:	2200      	movs	r2, #0
 800b02a:	2181      	movs	r1, #129	; 0x81
 800b02c:	f7f9 fb4e 	bl	80046cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b036:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b03a:	2200      	movs	r2, #0
 800b03c:	2101      	movs	r1, #1
 800b03e:	f7f9 fb45 	bl	80046cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b04c:	2200      	movs	r2, #0
 800b04e:	2182      	movs	r1, #130	; 0x82
 800b050:	f7f9 fb3c 	bl	80046cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	200013e8 	.word	0x200013e8
 800b064:	40005c00 	.word	0x40005c00

0800b068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f7 ff43 	bl	8002f0a <HAL_PCD_Start>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 f980 	bl	800b390 <USBD_Get_USB_Status>
 800b090:	4603      	mov	r3, r0
 800b092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b094:	7bbb      	ldrb	r3, [r7, #14]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	70fb      	strb	r3, [r7, #3]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70bb      	strb	r3, [r7, #2]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0c6:	78bb      	ldrb	r3, [r7, #2]
 800b0c8:	883a      	ldrh	r2, [r7, #0]
 800b0ca:	78f9      	ldrb	r1, [r7, #3]
 800b0cc:	f7f8 f88b 	bl	80031e6 <HAL_PCD_EP_Open>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 f95a 	bl	800b390 <USBD_Get_USB_Status>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b104:	78fa      	ldrb	r2, [r7, #3]
 800b106:	4611      	mov	r1, r2
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f8 f8d2 	bl	80032b2 <HAL_PCD_EP_Close>
 800b10e:	4603      	mov	r3, r0
 800b110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 f93b 	bl	800b390 <USBD_Get_USB_Status>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b142:	78fa      	ldrb	r2, [r7, #3]
 800b144:	4611      	mov	r1, r2
 800b146:	4618      	mov	r0, r3
 800b148:	f7f8 f993 	bl	8003472 <HAL_PCD_EP_SetStall>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	4618      	mov	r0, r3
 800b154:	f000 f91c 	bl	800b390 <USBD_Get_USB_Status>
 800b158:	4603      	mov	r3, r0
 800b15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	460b      	mov	r3, r1
 800b170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b180:	78fa      	ldrb	r2, [r7, #3]
 800b182:	4611      	mov	r1, r2
 800b184:	4618      	mov	r0, r3
 800b186:	f7f8 f9c6 	bl	8003516 <HAL_PCD_EP_ClrStall>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	4618      	mov	r0, r3
 800b192:	f000 f8fd 	bl	800b390 <USBD_Get_USB_Status>
 800b196:	4603      	mov	r3, r0
 800b198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da0c      	bge.n	800b1da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1c6:	68f9      	ldr	r1, [r7, #12]
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	00db      	lsls	r3, r3, #3
 800b1d2:	440b      	add	r3, r1
 800b1d4:	3302      	adds	r3, #2
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	e00b      	b.n	800b1f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1da:	78fb      	ldrb	r3, [r7, #3]
 800b1dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e0:	68f9      	ldr	r1, [r7, #12]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	440b      	add	r3, r1
 800b1ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b1f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3714      	adds	r7, #20
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	460b      	mov	r3, r1
 800b208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b218:	78fa      	ldrb	r2, [r7, #3]
 800b21a:	4611      	mov	r1, r2
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f7 ffbd 	bl	800319c <HAL_PCD_SetAddress>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 f8b1 	bl	800b390 <USBD_Get_USB_Status>
 800b22e:	4603      	mov	r3, r0
 800b230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b232:	7bbb      	ldrb	r3, [r7, #14]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	607a      	str	r2, [r7, #4]
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	460b      	mov	r3, r1
 800b24a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b25a:	7af9      	ldrb	r1, [r7, #11]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	f7f8 f8c4 	bl	80033ec <HAL_PCD_EP_Transmit>
 800b264:	4603      	mov	r3, r0
 800b266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 f890 	bl	800b390 <USBD_Get_USB_Status>
 800b270:	4603      	mov	r3, r0
 800b272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b274:	7dbb      	ldrb	r3, [r7, #22]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b086      	sub	sp, #24
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	603b      	str	r3, [r7, #0]
 800b28a:	460b      	mov	r3, r1
 800b28c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b29c:	7af9      	ldrb	r1, [r7, #11]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	f7f8 f84e 	bl	8003342 <HAL_PCD_EP_Receive>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 f86f 	bl	800b390 <USBD_Get_USB_Status>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2d2:	78fa      	ldrb	r2, [r7, #3]
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7f8 f870 	bl	80033bc <HAL_PCD_EP_GetRxCount>
 800b2dc:	4603      	mov	r3, r0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2f4:	78fb      	ldrb	r3, [r7, #3]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <HAL_PCDEx_LPM_Callback+0x18>
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d013      	beq.n	800b326 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2fe:	e023      	b.n	800b348 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d007      	beq.n	800b318 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b308:	f000 f83c 	bl	800b384 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b30c:	4b10      	ldr	r3, [pc, #64]	; (800b350 <HAL_PCDEx_LPM_Callback+0x68>)
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	4a0f      	ldr	r2, [pc, #60]	; (800b350 <HAL_PCDEx_LPM_Callback+0x68>)
 800b312:	f023 0306 	bic.w	r3, r3, #6
 800b316:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe fc8e 	bl	8009c40 <USBD_LL_Resume>
    break;
 800b324:	e010      	b.n	800b348 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe fc71 	bl	8009c14 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b33a:	4b05      	ldr	r3, [pc, #20]	; (800b350 <HAL_PCDEx_LPM_Callback+0x68>)
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	4a04      	ldr	r2, [pc, #16]	; (800b350 <HAL_PCDEx_LPM_Callback+0x68>)
 800b340:	f043 0306 	orr.w	r3, r3, #6
 800b344:	6113      	str	r3, [r2, #16]
    break;
 800b346:	bf00      	nop
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	e000ed00 	.word	0xe000ed00

0800b354 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b35c:	4b03      	ldr	r3, [pc, #12]	; (800b36c <USBD_static_malloc+0x18>)
}
 800b35e:	4618      	mov	r0, r3
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	2000022c 	.word	0x2000022c

0800b370 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]

}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b388:	f7f6 f836 	bl	80013f8 <SystemClock_Config>
}
 800b38c:	bf00      	nop
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b39e:	79fb      	ldrb	r3, [r7, #7]
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d817      	bhi.n	800b3d4 <USBD_Get_USB_Status+0x44>
 800b3a4:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <USBD_Get_USB_Status+0x1c>)
 800b3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3aa:	bf00      	nop
 800b3ac:	0800b3bd 	.word	0x0800b3bd
 800b3b0:	0800b3c3 	.word	0x0800b3c3
 800b3b4:	0800b3c9 	.word	0x0800b3c9
 800b3b8:	0800b3cf 	.word	0x0800b3cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c0:	e00b      	b.n	800b3da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c6:	e008      	b.n	800b3da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b3cc:	e005      	b.n	800b3da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d2:	e002      	b.n	800b3da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d8:	bf00      	nop
  }
  return usb_status;
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <__libc_init_array>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	4d0d      	ldr	r5, [pc, #52]	; (800b420 <__libc_init_array+0x38>)
 800b3ec:	4c0d      	ldr	r4, [pc, #52]	; (800b424 <__libc_init_array+0x3c>)
 800b3ee:	1b64      	subs	r4, r4, r5
 800b3f0:	10a4      	asrs	r4, r4, #2
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	42a6      	cmp	r6, r4
 800b3f6:	d109      	bne.n	800b40c <__libc_init_array+0x24>
 800b3f8:	4d0b      	ldr	r5, [pc, #44]	; (800b428 <__libc_init_array+0x40>)
 800b3fa:	4c0c      	ldr	r4, [pc, #48]	; (800b42c <__libc_init_array+0x44>)
 800b3fc:	f000 f82e 	bl	800b45c <_init>
 800b400:	1b64      	subs	r4, r4, r5
 800b402:	10a4      	asrs	r4, r4, #2
 800b404:	2600      	movs	r6, #0
 800b406:	42a6      	cmp	r6, r4
 800b408:	d105      	bne.n	800b416 <__libc_init_array+0x2e>
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b410:	4798      	blx	r3
 800b412:	3601      	adds	r6, #1
 800b414:	e7ee      	b.n	800b3f4 <__libc_init_array+0xc>
 800b416:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41a:	4798      	blx	r3
 800b41c:	3601      	adds	r6, #1
 800b41e:	e7f2      	b.n	800b406 <__libc_init_array+0x1e>
 800b420:	0800b4cc 	.word	0x0800b4cc
 800b424:	0800b4cc 	.word	0x0800b4cc
 800b428:	0800b4cc 	.word	0x0800b4cc
 800b42c:	0800b4d0 	.word	0x0800b4d0

0800b430 <memcpy>:
 800b430:	440a      	add	r2, r1
 800b432:	4291      	cmp	r1, r2
 800b434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b438:	d100      	bne.n	800b43c <memcpy+0xc>
 800b43a:	4770      	bx	lr
 800b43c:	b510      	push	{r4, lr}
 800b43e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b442:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b446:	4291      	cmp	r1, r2
 800b448:	d1f9      	bne.n	800b43e <memcpy+0xe>
 800b44a:	bd10      	pop	{r4, pc}

0800b44c <memset>:
 800b44c:	4402      	add	r2, r0
 800b44e:	4603      	mov	r3, r0
 800b450:	4293      	cmp	r3, r2
 800b452:	d100      	bne.n	800b456 <memset+0xa>
 800b454:	4770      	bx	lr
 800b456:	f803 1b01 	strb.w	r1, [r3], #1
 800b45a:	e7f9      	b.n	800b450 <memset+0x4>

0800b45c <_init>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr

0800b468 <_fini>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr
