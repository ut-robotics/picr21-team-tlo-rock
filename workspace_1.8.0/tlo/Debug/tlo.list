
tlo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2a0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b478  0800b478  0001b478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d0  0800b4d0  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4d0  0800b4d0  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4d0  0800b4d0  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4d0  0800b4d0  0001b4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d4  0800b4d4  0001b4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b4d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  200001a0  0800b678  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016dc  0800b678  000216dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205e3  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  000407b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021731  00000000  00000000  00047048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a606  00000000  00000000  00068779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a2a  00000000  00000000  00082d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c7a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f20  00000000  00000000  0014c7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b460 	.word	0x0800b460

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0800b460 	.word	0x0800b460

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <CDC_On_Receive>:
Feedback feedback = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .bools = 0, .deliminer = 0xAAAA};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) //uint8_t* Buf, uint32_t* Len
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)){
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	d104      	bne.n	8000b30 <CDC_On_Receive+0x1c>
		memcpy(&command, buffer, sizeof(Command));
 8000b26:	2210      	movs	r2, #16
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b2c:	f00a fc82 	bl	800b434 <memcpy>
	}
	if (command.delimiter == 0xAAAA){
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <CDC_On_Receive+0x2e>
		isCommandReceived = 1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <CDC_On_Receive+0x3c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
	}
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000227 	.word	0x20000227

08000b54 <throw>:

void throw(uint32_t speed)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (speed > 7500) speed = 7500;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d902      	bls.n	8000b6c <throw+0x18>
 8000b66:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000b6a:	607b      	str	r3, [r7, #4]
	if (speed < 2500) speed = 2500;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d802      	bhi.n	8000b7c <throw+0x28>
 8000b76:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b7a:	607b      	str	r3, [r7, #4]
	TIM16->CCR1 = speed;
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <throw+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(400);
 8000b82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b86:	f001 fcd3 	bl	8002530 <HAL_Delay>
	TIM17->CCR1 = 1000;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <throw+0x78>)
 8000b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
	int n = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
	while (n)
 8000b96:	e009      	b.n	8000bac <throw+0x58>
	{
		n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8000b98:	2120      	movs	r1, #32
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 ff7b 	bl	8002a98 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(200);
 8000ba6:	20c8      	movs	r0, #200	; 0xc8
 8000ba8:	f001 fcc2 	bl	8002530 <HAL_Delay>
	while (n)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f2      	bne.n	8000b98 <throw+0x44>
	}
	TIM17->CCR1 = 0;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <throw+0x78>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = 2500;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <throw+0x74>)
 8000bba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40014400 	.word	0x40014400
 8000bcc:	40014800 	.word	0x40014800

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b0a2      	sub	sp, #136	; 0x88
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	int16_t Cpos_M1 = (int16_t)TIM3->CNT;
 8000bd8:	4bab      	ldr	r3, [pc, #684]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		feedback.speed1  = Cpos_M1;
 8000be0:	4aaa      	ldr	r2, [pc, #680]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000be2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000be6:	8013      	strh	r3, [r2, #0]
		double dif_M1 = Cpos_M1 - Lpos_M1;
 8000be8:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc65 	bl	80004bc <__aeabi_i2d>
 8000bf2:	4ba7      	ldr	r3, [pc, #668]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf8:	f7ff fb12 	bl	8000220 <__aeabi_dsub>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		Lpos_M1 = Cpos_M1;
 8000c04:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc57 	bl	80004bc <__aeabi_i2d>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	499f      	ldr	r1, [pc, #636]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c14:	e9c1 2300 	strd	r2, r3, [r1]

		int16_t Cpos_M2 = (int16_t)TIM4->CNT;
 8000c18:	4b9e      	ldr	r3, [pc, #632]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		feedback.speed2  = Cpos_M2;
 8000c20:	4a9a      	ldr	r2, [pc, #616]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000c26:	8053      	strh	r3, [r2, #2]
		double dif_M2 = Cpos_M2 - Lpos_M2;
 8000c28:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fc45 	bl	80004bc <__aeabi_i2d>
 8000c32:	4b99      	ldr	r3, [pc, #612]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	f7ff faf2 	bl	8000220 <__aeabi_dsub>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		Lpos_M2 = Cpos_M2;
 8000c44:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fc37 	bl	80004bc <__aeabi_i2d>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4991      	ldr	r1, [pc, #580]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c54:	e9c1 2300 	strd	r2, r3, [r1]

		int16_t Cpos_M3 = (int16_t)TIM8->CNT;
 8000c58:	4b90      	ldr	r3, [pc, #576]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		feedback.speed3  = Cpos_M3;
 8000c60:	4a8a      	ldr	r2, [pc, #552]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c62:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c66:	8093      	strh	r3, [r2, #4]
		double dif_M3 = Cpos_M3 - Lpos_M3;
 8000c68:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc25 	bl	80004bc <__aeabi_i2d>
 8000c72:	4b8b      	ldr	r3, [pc, #556]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fad2 	bl	8000220 <__aeabi_dsub>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		Lpos_M3 = Cpos_M3;
 8000c84:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc17 	bl	80004bc <__aeabi_i2d>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4983      	ldr	r1, [pc, #524]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c94:	e9c1 2300 	strd	r2, r3, [r1]


		double Err1 = tgt_M1/15 - dif_M1;
 8000c98:	4b82      	ldr	r3, [pc, #520]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ca4:	f7ff fd9e 	bl	80007e4 <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000cb4:	f7ff fab4 	bl	8000220 <__aeabi_dsub>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		double Err2 = tgt_M2/15 - dif_M2;
 8000cc0:	4b7a      	ldr	r3, [pc, #488]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ccc:	f7ff fd8a 	bl	80007e4 <__aeabi_ddiv>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000cdc:	f7ff faa0 	bl	8000220 <__aeabi_dsub>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		double Err3 = tgt_M3/15 - dif_M3;
 8000ce8:	4b71      	ldr	r3, [pc, #452]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	4b6d      	ldr	r3, [pc, #436]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cf4:	f7ff fd76 	bl	80007e4 <__aeabi_ddiv>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000d04:	f7ff fa8c 	bl	8000220 <__aeabi_dsub>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		double kp = 4000;
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	4b67      	ldr	r3, [pc, #412]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d16:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double ki = 700;
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b66      	ldr	r3, [pc, #408]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double kd = 300;
 8000d24:	a356      	add	r3, pc, #344	; (adr r3, 8000e80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	e9c7 2308 	strd	r2, r3, [r7, #32]

		integral_M1 += Err1;
 8000d2e:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d38:	f7ff fa74 	bl	8000224 <__adddf3>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	495e      	ldr	r1, [pc, #376]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d42:	e9c1 2300 	strd	r2, r3, [r1]
		integral_M2 += Err2;
 8000d46:	4b5e      	ldr	r3, [pc, #376]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d50:	f7ff fa68 	bl	8000224 <__adddf3>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4959      	ldr	r1, [pc, #356]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d5a:	e9c1 2300 	strd	r2, r3, [r1]
		integral_M3 += Err3;
 8000d5e:	4b59      	ldr	r3, [pc, #356]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000d68:	f7ff fa5c 	bl	8000224 <__adddf3>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4954      	ldr	r1, [pc, #336]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d72:	e9c1 2300 	strd	r2, r3, [r1]

		if (integral_M1 > 40) integral_M1 = 40;
 8000d76:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000d82:	f7ff fe95 	bl	8000ab0 <__aeabi_dcmpgt>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000d8c:	494b      	ldr	r1, [pc, #300]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000d94:	e9c1 2300 	strd	r2, r3, [r1]
		if (integral_M1 < -40) integral_M1 = -40;
 8000d98:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000da4:	f7ff fe66 	bl	8000a74 <__aeabi_dcmplt>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8000dae:	4943      	ldr	r1, [pc, #268]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000db6:	e9c1 2300 	strd	r2, r3, [r1]

		if (integral_M2 > 40) integral_M2 = 40;
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000dc6:	f7ff fe73 	bl	8000ab0 <__aeabi_dcmpgt>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x20c>
 8000dd0:	493b      	ldr	r1, [pc, #236]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]
		if (integral_M2 < -40) integral_M2 = -40;
 8000ddc:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000de8:	f7ff fe44 	bl	8000a74 <__aeabi_dcmplt>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x22e>
 8000df2:	4933      	ldr	r1, [pc, #204]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000dfa:	e9c1 2300 	strd	r2, r3, [r1]

		if (integral_M3 > 40) integral_M3 = 40;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e0a:	f7ff fe51 	bl	8000ab0 <__aeabi_dcmpgt>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x250>
 8000e14:	492b      	ldr	r1, [pc, #172]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e1c:	e9c1 2300 	strd	r2, r3, [r1]
		if (integral_M3 < -40) integral_M3 = -40;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e2c:	f7ff fe22 	bl	8000a74 <__aeabi_dcmplt>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x272>
 8000e36:	4923      	ldr	r1, [pc, #140]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e3e:	e9c1 2300 	strd	r2, r3, [r1]

		double derivative_M1 = (Err1 - last_err_M1);
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000e4c:	f7ff f9e8 	bl	8000220 <__aeabi_dsub>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double derivative_M2 = (Err2 - last_err_M2);
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e62:	f7ff f9dd 	bl	8000220 <__aeabi_dsub>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double derivative_M3 = (Err3 - last_err_M3);
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000e78:	e030      	b.n	8000edc <HAL_TIM_PeriodElapsedCallback+0x30c>
 8000e7a:	bf00      	nop
 8000e7c:	f3af 8000 	nop.w
 8000e80:	00000000 	.word	0x00000000
 8000e84:	4072c000 	.word	0x4072c000
 8000e88:	40000400 	.word	0x40000400
 8000e8c:	20000010 	.word	0x20000010
 8000e90:	200001c0 	.word	0x200001c0
 8000e94:	40000800 	.word	0x40000800
 8000e98:	200001c8 	.word	0x200001c8
 8000e9c:	40013400 	.word	0x40013400
 8000ea0:	200001d0 	.word	0x200001d0
 8000ea4:	200001d8 	.word	0x200001d8
 8000ea8:	402e0000 	.word	0x402e0000
 8000eac:	200001e0 	.word	0x200001e0
 8000eb0:	200001e8 	.word	0x200001e8
 8000eb4:	40af4000 	.word	0x40af4000
 8000eb8:	4085e000 	.word	0x4085e000
 8000ebc:	200001f0 	.word	0x200001f0
 8000ec0:	200001f8 	.word	0x200001f8
 8000ec4:	20000200 	.word	0x20000200
 8000ec8:	40440000 	.word	0x40440000
 8000ecc:	c0440000 	.word	0xc0440000
 8000ed0:	20000208 	.word	0x20000208
 8000ed4:	20000210 	.word	0x20000210
 8000ed8:	20000218 	.word	0x20000218
 8000edc:	f7ff f9a0 	bl	8000220 <__aeabi_dsub>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]

		last_err_M1 = Err1;
 8000ee8:	4999      	ldr	r1, [pc, #612]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000eea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000eee:	e9c1 2300 	strd	r2, r3, [r1]
		last_err_M2 = Err2;
 8000ef2:	4998      	ldr	r1, [pc, #608]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000ef4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ef8:	e9c1 2300 	strd	r2, r3, [r1]
		last_err_M3 = Err3;
 8000efc:	4996      	ldr	r1, [pc, #600]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000efe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f02:	e9c1 2300 	strd	r2, r3, [r1]

		int32_t Speed_M1 = (int32_t) Err1 * kp + integral_M1 * ki + derivative_M1 * kd;
 8000f06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000f0a:	f7ff fddb 	bl	8000ac4 <__aeabi_d2iz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fad3 	bl	80004bc <__aeabi_i2d>
 8000f16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f1a:	f7ff fb39 	bl	8000590 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4614      	mov	r4, r2
 8000f24:	461d      	mov	r5, r3
 8000f26:	4b8d      	ldr	r3, [pc, #564]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f30:	f7ff fb2e 	bl	8000590 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4620      	mov	r0, r4
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	f7ff f972 	bl	8000224 <__adddf3>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f50:	f7ff fb1e 	bl	8000590 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff f962 	bl	8000224 <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fdac 	bl	8000ac4 <__aeabi_d2iz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		int32_t Speed_M2 = (int32_t) Err2 * kp + integral_M2 * ki + derivative_M2 * kd;
 8000f72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000f76:	f7ff fda5 	bl	8000ac4 <__aeabi_d2iz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa9d 	bl	80004bc <__aeabi_i2d>
 8000f82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f86:	f7ff fb03 	bl	8000590 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4614      	mov	r4, r2
 8000f90:	461d      	mov	r5, r3
 8000f92:	4b73      	ldr	r3, [pc, #460]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f9c:	f7ff faf8 	bl	8000590 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	f7ff f93c 	bl	8000224 <__adddf3>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fbc:	f7ff fae8 	bl	8000590 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff f92c 	bl	8000224 <__adddf3>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd76 	bl	8000ac4 <__aeabi_d2iz>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int32_t Speed_M3 = (int32_t) Err3 * kp + integral_M3 * ki + derivative_M3 * kd;
 8000fde:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000fe2:	f7ff fd6f 	bl	8000ac4 <__aeabi_d2iz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa67 	bl	80004bc <__aeabi_i2d>
 8000fee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ff2:	f7ff facd 	bl	8000590 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001008:	f7ff fac2 	bl	8000590 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4620      	mov	r0, r4
 8001012:	4629      	mov	r1, r5
 8001014:	f7ff f906 	bl	8000224 <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4614      	mov	r4, r2
 800101e:	461d      	mov	r5, r3
 8001020:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001024:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001028:	f7ff fab2 	bl	8000590 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff f8f6 	bl	8000224 <__adddf3>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fd40 	bl	8000ac4 <__aeabi_d2iz>
 8001044:	4603      	mov	r3, r0
 8001046:	67fb      	str	r3, [r7, #124]	; 0x7c

		if (tgt_M1 == 0){
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800104a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	f7ff fd03 	bl	8000a60 <__aeabi_dcmpeq>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x496>
			Speed_M1 = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		}
		if (tgt_M2 == 0){
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	f7ff fcf4 	bl	8000a60 <__aeabi_dcmpeq>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x4b4>
				Speed_M2 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}
		if (tgt_M3 == 0){
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f7ff fce5 	bl	8000a60 <__aeabi_dcmpeq>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x4d0>
				Speed_M3 = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	67fb      	str	r3, [r7, #124]	; 0x7c
			}
		if (Speed_M1 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 80010a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db06      	blt.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x4e6>
 80010a8:	2200      	movs	r2, #0
 80010aa:	2102      	movs	r1, #2
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f001 fd0a 	bl	8002ac8 <HAL_GPIO_WritePin>
 80010b4:	e005      	b.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x4f2>
		else HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2102      	movs	r1, #2
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f001 fd03 	bl	8002ac8 <HAL_GPIO_WritePin>

		if (Speed_M2 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80010c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db07      	blt.n	80010da <HAL_TIM_PeriodElapsedCallback+0x50a>
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f001 fcf8 	bl	8002ac8 <HAL_GPIO_WritePin>
 80010d8:	e006      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x518>
		else HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f001 fcf0 	bl	8002ac8 <HAL_GPIO_WritePin>

		if (Speed_M3 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80010e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db06      	blt.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x52c>
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f001 fce7 	bl	8002ac8 <HAL_GPIO_WritePin>
 80010fa:	e005      	b.n	8001108 <HAL_TIM_PeriodElapsedCallback+0x538>
		else HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2108      	movs	r1, #8
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f001 fce0 	bl	8002ac8 <HAL_GPIO_WritePin>

		TIM2->CCR1 = abs(Speed_M1);
 8001108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800110c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001110:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = abs(Speed_M2);
 800111a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800111e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001122:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM15->CCR1 = abs(Speed_M3);
 800112c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800112e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001132:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

		safety_iters++;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	3788      	adds	r7, #136	; 0x88
 800114a:	46bd      	mov	sp, r7
 800114c:	bdb0      	pop	{r4, r5, r7, pc}
 800114e:	bf00      	nop
 8001150:	20000208 	.word	0x20000208
 8001154:	20000210 	.word	0x20000210
 8001158:	20000218 	.word	0x20000218
 800115c:	200001f0 	.word	0x200001f0
 8001160:	200001f8 	.word	0x200001f8
 8001164:	20000200 	.word	0x20000200
 8001168:	200001d8 	.word	0x200001d8
 800116c:	200001e0 	.word	0x200001e0
 8001170:	200001e8 	.word	0x200001e8
 8001174:	40014000 	.word	0x40014000
 8001178:	20000226 	.word	0x20000226

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f001 f964 	bl	800244e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f939 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f000 fdaf 	bl	8001cec <MX_GPIO_Init>
  MX_TIM3_Init();
 800118e:	f000 fad9 	bl	8001744 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001192:	f000 fb2d 	bl	80017f0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001196:	f000 fb81 	bl	800189c <MX_TIM6_Init>
  MX_TIM8_Init();
 800119a:	f000 fbb5 	bl	8001908 <MX_TIM8_Init>
  MX_TIM2_Init();
 800119e:	f000 fa45 	bl	800162c <MX_TIM2_Init>
  MX_TIM16_Init();
 80011a2:	f000 fcaf 	bl	8001b04 <MX_TIM16_Init>
  MX_TIM17_Init();
 80011a6:	f000 fd27 	bl	8001bf8 <MX_TIM17_Init>
  MX_TIM15_Init();
 80011aa:	f000 fc07 	bl	80019bc <MX_TIM15_Init>
  MX_I2C3_Init();
 80011ae:	f000 f971 	bl	8001494 <MX_I2C3_Init>
  MX_TIM1_Init();
 80011b2:	f000 f9af 	bl	8001514 <MX_TIM1_Init>
  MX_USB_Device_Init();
 80011b6:	f009 fc01 	bl	800a9bc <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2101      	movs	r1, #1
 80011be:	4879      	ldr	r0, [pc, #484]	; (80013a4 <main+0x228>)
 80011c0:	f001 fc82 	bl	8002ac8 <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c8:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011ce:	2104      	movs	r1, #4
 80011d0:	4875      	ldr	r0, [pc, #468]	; (80013a8 <main+0x22c>)
 80011d2:	f004 fba5 	bl	8005920 <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 80011d6:	2064      	movs	r0, #100	; 0x64
 80011d8:	f001 f9aa 	bl	8002530 <HAL_Delay>
  TIM2->CCR2 = 65536;
 80011dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38

  //motor speeds to zero
  TIM2->CCR1 = 0;
 80011e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 80011ee:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <main+0x230>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011fc:	2100      	movs	r1, #0
 80011fe:	486a      	ldr	r0, [pc, #424]	; (80013a8 <main+0x22c>)
 8001200:	f004 fb8e 	bl	8005920 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001204:	2108      	movs	r1, #8
 8001206:	4868      	ldr	r0, [pc, #416]	; (80013a8 <main+0x22c>)
 8001208:	f004 fb8a 	bl	8005920 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	4868      	ldr	r0, [pc, #416]	; (80013b0 <main+0x234>)
 8001210:	f004 fb86 	bl	8005920 <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001214:	2100      	movs	r1, #0
 8001216:	4867      	ldr	r0, [pc, #412]	; (80013b4 <main+0x238>)
 8001218:	f004 fb82 	bl	8005920 <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 800121c:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <main+0x23c>)
 800121e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 8001224:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001228:	f001 f982 	bl	8002530 <HAL_Delay>

  //enable grabber and set its speed to zero
  TIM17->CCR1 = 0;
 800122c:	4b63      	ldr	r3, [pc, #396]	; (80013bc <main+0x240>)
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001232:	2100      	movs	r1, #0
 8001234:	4862      	ldr	r0, [pc, #392]	; (80013c0 <main+0x244>)
 8001236:	f004 fb73 	bl	8005920 <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800123a:	2104      	movs	r1, #4
 800123c:	4861      	ldr	r0, [pc, #388]	; (80013c4 <main+0x248>)
 800123e:	f004 fd15 	bl	8005c6c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001242:	2104      	movs	r1, #4
 8001244:	4860      	ldr	r0, [pc, #384]	; (80013c8 <main+0x24c>)
 8001246:	f004 fd11 	bl	8005c6c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800124a:	2104      	movs	r1, #4
 800124c:	485f      	ldr	r0, [pc, #380]	; (80013cc <main+0x250>)
 800124e:	f004 fd0d 	bl	8005c6c <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 8001252:	485f      	ldr	r0, [pc, #380]	; (80013d0 <main+0x254>)
 8001254:	f004 faa2 	bl	800579c <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  uint8_t n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8001258:	2120      	movs	r1, #32
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f001 fc1b 	bl	8002a98 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	71bb      	strb	r3, [r7, #6]

	  if (isCommandReceived){
 8001266:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <main+0x258>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d04d      	beq.n	800130c <main+0x190>
		  isCommandReceived = 0;
 8001270:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <main+0x258>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
		  tgt_M1 = 0;
 8001276:	4958      	ldr	r1, [pc, #352]	; (80013d8 <main+0x25c>)
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = 0;
 8001284:	4955      	ldr	r1, [pc, #340]	; (80013dc <main+0x260>)
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = 0;
 8001292:	4953      	ldr	r1, [pc, #332]	; (80013e0 <main+0x264>)
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9c1 2300 	strd	r2, r3, [r1]
		  thrower_speed = command.thrower_speed;
 80012a0:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <main+0x268>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <main+0x26c>)
 80012a6:	6013      	str	r3, [r2, #0]
		  uint8_t bools = command.bools;
 80012a8:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <main+0x268>)
 80012aa:	88db      	ldrh	r3, [r3, #6]
 80012ac:	71fb      	strb	r3, [r7, #7]

		  if (bools >= 2)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d906      	bls.n	80012c2 <main+0x146>
		  {
		  	  bools -= 2;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	3b02      	subs	r3, #2
 80012b8:	71fb      	strb	r3, [r7, #7]
		  	  grabber_on = 1;
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <main+0x270>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e002      	b.n	80012c8 <main+0x14c>
		  }

		  else
		  {
			  grabber_on = 0;
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <main+0x270>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
		  }

		  if (bools >= 1)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <main+0x15e>
		  {
			  bools -= 1;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
			  thrower = 1;
 80012d4:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <main+0x274>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2101      	movs	r1, #1
 80012de:	4831      	ldr	r0, [pc, #196]	; (80013a4 <main+0x228>)
 80012e0:	f001 fbf2 	bl	8002ac8 <HAL_GPIO_WritePin>

		  safety_iters = 0;
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <main+0x278>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]

		  feedback.bools = (uint8_t)HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80012ea:	2120      	movs	r1, #32
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f001 fbd2 	bl	8002a98 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <main+0x27c>)
 80012fa:	80da      	strh	r2, [r3, #6]
		  feedback.deliminer = 0xAAAA;
 80012fc:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <main+0x27c>)
 80012fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001302:	609a      	str	r2, [r3, #8]
		  CDC_Transmit_FS(&feedback, sizeof(feedback));
 8001304:	210c      	movs	r1, #12
 8001306:	483c      	ldr	r0, [pc, #240]	; (80013f8 <main+0x27c>)
 8001308:	f009 fc1a 	bl	800ab40 <CDC_Transmit_FS>

	  }



	  if (grabber_on){
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <main+0x270>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00e      	beq.n	8001332 <main+0x1b6>

		  if (n)
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <main+0x1ac>
		  {
			  TIM17->CCR1 = 0;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <main+0x240>)
 800131c:	2200      	movs	r2, #0
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
			  grabber_on = 0;
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <main+0x270>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e007      	b.n	8001338 <main+0x1bc>

		  }
		  else TIM17->CCR1 = 1000;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <main+0x240>)
 800132a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
 8001330:	e002      	b.n	8001338 <main+0x1bc>

	  }

	  else TIM17->CCR1 = 0;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <main+0x240>)
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
	  if (n) grabber_on = 0;
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <main+0x1c8>
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <main+0x270>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

	  if(thrower && n){
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <main+0x274>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <main+0x1e2>
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <main+0x1e2>
		  throw(thrower_speed);
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <main+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fbfc 	bl	8000b54 <throw>
 800135c:	e002      	b.n	8001364 <main+0x1e8>
	  }
	  else thrower = 0;
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <main+0x274>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]

	  if (safety_iters > 100){
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <main+0x278>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b64      	cmp	r3, #100	; 0x64
 800136a:	f67f af75 	bls.w	8001258 <main+0xdc>
		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	2101      	movs	r1, #1
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <main+0x228>)
 8001374:	f001 fba8 	bl	8002ac8 <HAL_GPIO_WritePin>
		  tgt_M1 = 0;
 8001378:	4917      	ldr	r1, [pc, #92]	; (80013d8 <main+0x25c>)
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = 0;
 8001386:	4915      	ldr	r1, [pc, #84]	; (80013dc <main+0x260>)
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = 0;
 8001394:	4912      	ldr	r1, [pc, #72]	; (80013e0 <main+0x264>)
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
  {
 80013a2:	e759      	b.n	8001258 <main+0xdc>
 80013a4:	48000400 	.word	0x48000400
 80013a8:	200006ac 	.word	0x200006ac
 80013ac:	40014000 	.word	0x40014000
 80013b0:	20000530 	.word	0x20000530
 80013b4:	200006f8 	.word	0x200006f8
 80013b8:	40014400 	.word	0x40014400
 80013bc:	40014800 	.word	0x40014800
 80013c0:	2000057c 	.word	0x2000057c
 80013c4:	200005c8 	.word	0x200005c8
 80013c8:	200004e4 	.word	0x200004e4
 80013cc:	20000498 	.word	0x20000498
 80013d0:	20000614 	.word	0x20000614
 80013d4:	20000227 	.word	0x20000227
 80013d8:	200001d8 	.word	0x200001d8
 80013dc:	200001e0 	.word	0x200001e0
 80013e0:	200001e8 	.word	0x200001e8
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000220 	.word	0x20000220
 80013ec:	20000224 	.word	0x20000224
 80013f0:	20000225 	.word	0x20000225
 80013f4:	20000226 	.word	0x20000226
 80013f8:	20000010 	.word	0x20000010

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2238      	movs	r2, #56	; 0x38
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f00a f820 	bl	800b450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001422:	f003 f9c3 	bl	80047ac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800143c:	2301      	movs	r3, #1
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001440:	230c      	movs	r3, #12
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001448:	2304      	movs	r3, #4
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fa5d 	bl	8004914 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001460:	f000 fca6 	bl	8001db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001464:	230f      	movs	r3, #15
 8001466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001468:	2301      	movs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fd61 	bl	8004f44 <HAL_RCC_ClockConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001488:	f000 fc92 	bl	8001db0 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3750      	adds	r7, #80	; 0x50
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_I2C3_Init+0x74>)
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <MX_I2C3_Init+0x78>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_I2C3_Init+0x74>)
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <MX_I2C3_Init+0x7c>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <MX_I2C3_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_I2C3_Init+0x74>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_I2C3_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_I2C3_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_I2C3_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_I2C3_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_I2C3_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <MX_I2C3_Init+0x74>)
 80014d0:	f001 fb12 	bl	8002af8 <HAL_I2C_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014da:	f000 fc69 	bl	8001db0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <MX_I2C3_Init+0x74>)
 80014e2:	f001 fb98 	bl	8002c16 <HAL_I2CEx_ConfigAnalogFilter>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014ec:	f000 fc60 	bl	8001db0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_I2C3_Init+0x74>)
 80014f4:	f001 fbda 	bl	8002cac <HAL_I2CEx_ConfigDigitalFilter>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014fe:	f000 fc57 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000044c 	.word	0x2000044c
 800150c:	40007800 	.word	0x40007800
 8001510:	00303d5b 	.word	0x00303d5b

08001514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b098      	sub	sp, #96	; 0x60
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2234      	movs	r2, #52	; 0x34
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f009 ff85 	bl	800b450 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <MX_TIM1_Init+0x110>)
 8001548:	4a37      	ldr	r2, [pc, #220]	; (8001628 <MX_TIM1_Init+0x114>)
 800154a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800154c:	4b35      	ldr	r3, [pc, #212]	; (8001624 <MX_TIM1_Init+0x110>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <MX_TIM1_Init+0x110>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001558:	4b32      	ldr	r3, [pc, #200]	; (8001624 <MX_TIM1_Init+0x110>)
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <MX_TIM1_Init+0x110>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <MX_TIM1_Init+0x110>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <MX_TIM1_Init+0x110>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001572:	482c      	ldr	r0, [pc, #176]	; (8001624 <MX_TIM1_Init+0x110>)
 8001574:	f004 f97c 	bl	8005870 <HAL_TIM_PWM_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 fc17 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001592:	4619      	mov	r1, r3
 8001594:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_TIM1_Init+0x110>)
 8001596:	f005 fbf5 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015a0:	f000 fc06 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	; 0x60
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80015b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015bc:	2210      	movs	r2, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	; (8001624 <MX_TIM1_Init+0x110>)
 80015c2:	f004 fd61 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80015cc:	f000 fbf0 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_TIM1_Init+0x110>)
 800160e:	f005 fc3b 	bl	8006e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001618:	f000 fbca 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	3760      	adds	r7, #96	; 0x60
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000660 	.word	0x20000660
 8001628:	40012c00 	.word	0x40012c00

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <MX_TIM2_Init+0x114>)
 8001660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MX_TIM2_Init+0x114>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <MX_TIM2_Init+0x114>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <MX_TIM2_Init+0x114>)
 8001674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <MX_TIM2_Init+0x114>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <MX_TIM2_Init+0x114>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001686:	482e      	ldr	r0, [pc, #184]	; (8001740 <MX_TIM2_Init+0x114>)
 8001688:	f004 f830 	bl	80056ec <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001692:	f000 fb8d 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4827      	ldr	r0, [pc, #156]	; (8001740 <MX_TIM2_Init+0x114>)
 80016a4:	f004 fe04 	bl	80062b0 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016ae:	f000 fb7f 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016b2:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_TIM2_Init+0x114>)
 80016b4:	f004 f8dc 	bl	8005870 <HAL_TIM_PWM_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016be:	f000 fb77 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	481b      	ldr	r0, [pc, #108]	; (8001740 <MX_TIM2_Init+0x114>)
 80016d2:	f005 fb57 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016dc:	f000 fb68 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4812      	ldr	r0, [pc, #72]	; (8001740 <MX_TIM2_Init+0x114>)
 80016f8:	f004 fcc6 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001702:	f000 fb55 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	2204      	movs	r2, #4
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM2_Init+0x114>)
 800170e:	f004 fcbb 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001718:	f000 fb4a 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	2208      	movs	r2, #8
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM2_Init+0x114>)
 8001724:	f004 fcb0 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800172e:	f000 fb3f 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM2_Init+0x114>)
 8001734:	f000 fd36 	bl	80021a4 <HAL_TIM_MspPostInit>

}
 8001738:	bf00      	nop
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200006ac 	.word	0x200006ac

08001744 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f009 fe7c 	bl	800b450 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_TIM3_Init+0xa4>)
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <MX_TIM3_Init+0xa8>)
 8001766:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_TIM3_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM3_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_TIM3_Init+0xa4>)
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM3_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_TIM3_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001788:	2301      	movs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_TIM3_Init+0xa4>)
 80017b4:	f004 f9b4 	bl	8005b20 <HAL_TIM_Encoder_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017be:	f000 faf7 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <MX_TIM3_Init+0xa4>)
 80017d0:	f005 fad8 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017da:	f000 fae9 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200005c8 	.word	0x200005c8
 80017ec:	40000400 	.word	0x40000400

080017f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2224      	movs	r2, #36	; 0x24
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f009 fe26 	bl	800b450 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_TIM4_Init+0xa4>)
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <MX_TIM4_Init+0xa8>)
 8001812:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_TIM4_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_TIM4_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_TIM4_Init+0xa4>)
 8001822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001826:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_TIM4_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_TIM4_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001834:	2301      	movs	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800183c:	2301      	movs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800184c:	2301      	movs	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_TIM4_Init+0xa4>)
 8001860:	f004 f95e 	bl	8005b20 <HAL_TIM_Encoder_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800186a:	f000 faa1 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001876:	463b      	mov	r3, r7
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_TIM4_Init+0xa4>)
 800187c:	f005 fa82 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001886:	f000 fa93 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3730      	adds	r7, #48	; 0x30
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200004e4 	.word	0x200004e4
 8001898:	40000800 	.word	0x40000800

0800189c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <MX_TIM6_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <MX_TIM6_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_TIM6_Init+0x64>)
 80018c0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80018c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_TIM6_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ce:	f003 ff0d 	bl	80056ec <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018d8:	f000 fa6a 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ea:	f005 fa4b 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018f4:	f000 fa5c 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000614 	.word	0x20000614
 8001904:	40001000 	.word	0x40001000

08001908 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2224      	movs	r2, #36	; 0x24
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f009 fd9a 	bl	800b450 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <MX_TIM8_Init+0xac>)
 8001928:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <MX_TIM8_Init+0xb0>)
 800192a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <MX_TIM8_Init+0xac>)
 800192e:	2205      	movs	r2, #5
 8001930:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <MX_TIM8_Init+0xac>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64000;
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_TIM8_Init+0xac>)
 800193a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800193e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <MX_TIM8_Init+0xac>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_TIM8_Init+0xac>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <MX_TIM8_Init+0xac>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001952:	2301      	movs	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800196a:	2301      	movs	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4619      	mov	r1, r3
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_TIM8_Init+0xac>)
 800197e:	f004 f8cf 	bl	8005b20 <HAL_TIM_Encoder_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001988:	f000 fa12 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_TIM8_Init+0xac>)
 800199e:	f005 f9f1 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80019a8:	f000 fa02 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3730      	adds	r7, #48	; 0x30
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000498 	.word	0x20000498
 80019b8:	40013400 	.word	0x40013400

080019bc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09c      	sub	sp, #112	; 0x70
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	615a      	str	r2, [r3, #20]
 80019ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2234      	movs	r2, #52	; 0x34
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f009 fd2a 	bl	800b450 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <MX_TIM15_Init+0x140>)
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <MX_TIM15_Init+0x144>)
 8001a00:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a02:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a14:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a28:	4834      	ldr	r0, [pc, #208]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a2a:	f003 fe5f 	bl	80056ec <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a34:	f000 f9bc 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a42:	4619      	mov	r1, r3
 8001a44:	482d      	ldr	r0, [pc, #180]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a46:	f004 fc33 	bl	80062b0 <HAL_TIM_ConfigClockSource>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a50:	f000 f9ae 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a54:	4829      	ldr	r0, [pc, #164]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a56:	f003 ff0b 	bl	8005870 <HAL_TIM_PWM_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a60:	f000 f9a6 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a70:	4619      	mov	r1, r3
 8001a72:	4822      	ldr	r0, [pc, #136]	; (8001afc <MX_TIM15_Init+0x140>)
 8001a74:	f005 f986 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a7e:	f000 f997 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a82:	2360      	movs	r3, #96	; 0x60
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4815      	ldr	r0, [pc, #84]	; (8001afc <MX_TIM15_Init+0x140>)
 8001aa8:	f004 faee 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001ab2:	f000 f97d 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ace:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4807      	ldr	r0, [pc, #28]	; (8001afc <MX_TIM15_Init+0x140>)
 8001ade:	f005 f9d3 	bl	8006e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001ae8:	f000 f962 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <MX_TIM15_Init+0x140>)
 8001aee:	f000 fb59 	bl	80021a4 <HAL_TIM_MspPostInit>

}
 8001af2:	bf00      	nop
 8001af4:	3770      	adds	r7, #112	; 0x70
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000530 	.word	0x20000530
 8001b00:	40014000 	.word	0x40014000

08001b04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b094      	sub	sp, #80	; 0x50
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	615a      	str	r2, [r3, #20]
 8001b1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2234      	movs	r2, #52	; 0x34
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f009 fc93 	bl	800b450 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b2a:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b2c:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <MX_TIM16_Init+0xf0>)
 8001b2e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b32:	2204      	movs	r2, #4
 8001b34:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b3e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001b42:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b4a:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b56:	4826      	ldr	r0, [pc, #152]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b58:	f003 fdc8 	bl	80056ec <HAL_TIM_Base_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b62:	f000 f925 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b66:	4822      	ldr	r0, [pc, #136]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b68:	f003 fe82 	bl	8005870 <HAL_TIM_PWM_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b72:	f000 f91d 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b76:	2360      	movs	r3, #96	; 0x60
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b82:	2300      	movs	r3, #0
 8001b84:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b96:	2200      	movs	r2, #0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4815      	ldr	r0, [pc, #84]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001b9c:	f004 fa74 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001ba6:	f000 f903 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001bd2:	f005 f959 	bl	8006e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001bdc:	f000 f8e8 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <MX_TIM16_Init+0xec>)
 8001be2:	f000 fadf 	bl	80021a4 <HAL_TIM_MspPostInit>

}
 8001be6:	bf00      	nop
 8001be8:	3750      	adds	r7, #80	; 0x50
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200006f8 	.word	0x200006f8
 8001bf4:	40014400 	.word	0x40014400

08001bf8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b094      	sub	sp, #80	; 0x50
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c12:	463b      	mov	r3, r7
 8001c14:	2234      	movs	r2, #52	; 0x34
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f009 fc19 	bl	800b450 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c1e:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c20:	4a31      	ldr	r2, [pc, #196]	; (8001ce8 <MX_TIM17_Init+0xf0>)
 8001c22:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c26:	2204      	movs	r2, #4
 8001c28:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c32:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001c36:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c4a:	4826      	ldr	r0, [pc, #152]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c4c:	f003 fd4e 	bl	80056ec <HAL_TIM_Base_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001c56:	f000 f8ab 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001c5a:	4822      	ldr	r0, [pc, #136]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c5c:	f003 fe08 	bl	8005870 <HAL_TIM_PWM_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001c66:	f000 f8a3 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6a:	2360      	movs	r3, #96	; 0x60
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001c90:	f004 f9fa 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001c9a:	f000 f889 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001cc6:	f005 f8df 	bl	8006e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001cd0:	f000 f86e 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <MX_TIM17_Init+0xec>)
 8001cd6:	f000 fa65 	bl	80021a4 <HAL_TIM_MspPostInit>

}
 8001cda:	bf00      	nop
 8001cdc:	3750      	adds	r7, #80	; 0x50
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000057c 	.word	0x2000057c
 8001ce8:	40014800 	.word	0x40014800

08001cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f240 410a 	movw	r1, #1034	; 0x40a
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f000 fec4 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2101      	movs	r1, #1
 8001d44:	4819      	ldr	r0, [pc, #100]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d46:	f000 febf 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8001d4a:	f240 430a 	movw	r3, #1034	; 0x40a
 8001d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f000 fd15 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d80:	f000 fd08 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8001d84:	2301      	movs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d9c:	f000 fcfa 	bl	8002794 <HAL_GPIO_Init>

}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	48000400 	.word	0x48000400

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>
	...

08001dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x44>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_MspInit+0x44>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_MspInit+0x44>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x44>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x44>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6593      	str	r3, [r2, #88]	; 0x58
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x44>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001df2:	f002 fd7f 	bl	80048f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09c      	sub	sp, #112	; 0x70
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	2244      	movs	r2, #68	; 0x44
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f009 fb13 	bl	800b450 <memset>
  if(hi2c->Instance==I2C3)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <HAL_I2C_MspInit+0xe4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d154      	bne.n	8001ede <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3e:	f107 0318 	add.w	r3, r7, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fa62 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e4e:	f7ff ffaf 	bl	8001db0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e88:	2312      	movs	r3, #18
 8001e8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001e94:	2302      	movs	r3, #2
 8001e96:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea2:	f000 fc77 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <HAL_I2C_MspInit+0xec>)
 8001ec2:	f000 fc67 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_I2C_MspInit+0xe8>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3770      	adds	r7, #112	; 0x70
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40007800 	.word	0x40007800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000400 	.word	0x48000400

08001ef4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_TIM_PWM_MspInit+0x38>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10b      	bne.n	8001f1e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d10c      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f46:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f5e:	e04e      	b.n	8001ffe <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a29      	ldr	r2, [pc, #164]	; (800200c <HAL_TIM_Base_MspInit+0xd8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d114      	bne.n	8001f94 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	6593      	str	r3, [r2, #88]	; 0x58
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2036      	movs	r0, #54	; 0x36
 8001f88:	f000 fbcf 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f8c:	2036      	movs	r0, #54	; 0x36
 8001f8e:	f000 fbe6 	bl	800275e <HAL_NVIC_EnableIRQ>
}
 8001f92:	e034      	b.n	8001ffe <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_TIM_Base_MspInit+0xdc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
}
 8001fb6:	e022      	b.n	8001ffe <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a15      	ldr	r2, [pc, #84]	; (8002014 <HAL_TIM_Base_MspInit+0xe0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10c      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
}
 8001fda:	e010      	b.n	8001ffe <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0xe4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10b      	bne.n	8001ffe <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_TIM_Base_MspInit+0xd4>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
}
 8001ffe:	bf00      	nop
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40001000 	.word	0x40001000
 8002010:	40014000 	.word	0x40014000
 8002014:	40014400 	.word	0x40014400
 8002018:	40014800 	.word	0x40014800

0800201c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	; 0x38
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a55      	ldr	r2, [pc, #340]	; (8002190 <HAL_TIM_Encoder_MspInit+0x174>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d129      	bne.n	8002092 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203e:	4b55      	ldr	r3, [pc, #340]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
 800204a:	4b52      	ldr	r3, [pc, #328]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	4a4e      	ldr	r2, [pc, #312]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002062:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 800206e:	2350      	movs	r3, #80	; 0x50
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800207e:	2302      	movs	r3, #2
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f000 fb82 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002090:	e079      	b.n	8002186 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a40      	ldr	r2, [pc, #256]	; (8002198 <HAL_TIM_Encoder_MspInit+0x17c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d128      	bne.n	80020ee <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800209c:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6593      	str	r3, [r2, #88]	; 0x58
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	4a36      	ldr	r2, [pc, #216]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c0:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020dc:	2302      	movs	r3, #2
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	482d      	ldr	r0, [pc, #180]	; (800219c <HAL_TIM_Encoder_MspInit+0x180>)
 80020e8:	f000 fb54 	bl	8002794 <HAL_GPIO_Init>
}
 80020ec:	e04b      	b.n	8002186 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_TIM_Encoder_MspInit+0x184>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d146      	bne.n	8002186 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fc:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 80020fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002102:	6613      	str	r3, [r2, #96]	; 0x60
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_TIM_Encoder_MspInit+0x178>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCA_Pin;
 8002140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002152:	2302      	movs	r3, #2
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_ENCA_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f000 fb18 	bl	8002794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8_CH2_ENCB_Pin;
 8002164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002176:	230a      	movs	r3, #10
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH2_ENCB_GPIO_Port, &GPIO_InitStruct);
 800217a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217e:	4619      	mov	r1, r3
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <HAL_TIM_Encoder_MspInit+0x180>)
 8002182:	f000 fb07 	bl	8002794 <HAL_GPIO_Init>
}
 8002186:	bf00      	nop
 8002188:	3738      	adds	r7, #56	; 0x38
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40000400 	.word	0x40000400
 8002194:	40021000 	.word	0x40021000
 8002198:	40000800 	.word	0x40000800
 800219c:	48000400 	.word	0x48000400
 80021a0:	40013400 	.word	0x40013400

080021a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d14b      	bne.n	800225e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a5a      	ldr	r2, [pc, #360]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a54      	ldr	r2, [pc, #336]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b52      	ldr	r3, [pc, #328]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_VH1_M1_PWM_Pin;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002206:	2301      	movs	r3, #1
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_VH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002214:	f000 fabe 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 8002218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800222a:	230a      	movs	r3, #10
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002238:	f000 faac 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 800223c:	2308      	movs	r3, #8
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800224c:	2301      	movs	r3, #1
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4619      	mov	r1, r3
 8002256:	4838      	ldr	r0, [pc, #224]	; (8002338 <HAL_TIM_MspPostInit+0x194>)
 8002258:	f000 fa9c 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800225c:	e066      	b.n	800232c <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a36      	ldr	r2, [pc, #216]	; (800233c <HAL_TIM_MspPostInit+0x198>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d11d      	bne.n	80022a4 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	4a31      	ldr	r2, [pc, #196]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 8002280:	2304      	movs	r3, #4
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002290:	2309      	movs	r3, #9
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	4619      	mov	r1, r3
 800229a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229e:	f000 fa79 	bl	8002794 <HAL_GPIO_Init>
}
 80022a2:	e043      	b.n	800232c <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_TIM_MspPostInit+0x19c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d11c      	bne.n	80022e8 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 80022c6:	2310      	movs	r3, #16
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	4815      	ldr	r0, [pc, #84]	; (8002338 <HAL_TIM_MspPostInit+0x194>)
 80022e2:	f000 fa57 	bl	8002794 <HAL_GPIO_Init>
}
 80022e6:	e021      	b.n	800232c <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <HAL_TIM_MspPostInit+0x1a0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d11c      	bne.n	800232c <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_TIM_MspPostInit+0x190>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800231a:	2301      	movs	r3, #1
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002328:	f000 fa34 	bl	8002794 <HAL_GPIO_Init>
}
 800232c:	bf00      	nop
 800232e:	3730      	adds	r7, #48	; 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	48000400 	.word	0x48000400
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800

08002348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800234c:	e7fe      	b.n	800234c <NMI_Handler+0x4>

0800234e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <MemManage_Handler+0x4>

0800235a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <UsageFault_Handler+0x4>

08002366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002394:	f000 f8ae 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <USB_HP_IRQHandler+0x10>)
 80023a2:	f000 fdd6 	bl	8002f52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200013e8 	.word	0x200013e8

080023b0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <USB_LP_IRQHandler+0x10>)
 80023b6:	f000 fdcc 	bl	8002f52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200013e8 	.word	0x200013e8

080023c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <TIM6_DAC_IRQHandler+0x10>)
 80023ca:	f003 fcdd 	bl	8005d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000614 	.word	0x20000614

080023d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <LoopForever+0x6>)
  ldr r1, =_edata
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002404:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <LoopForever+0xe>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002418:	4c0b      	ldr	r4, [pc, #44]	; (8002448 <LoopForever+0x16>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002426:	f7ff ffd7 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242a:	f008 ffdf 	bl	800b3ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242e:	f7fe fea5 	bl	800117c <main>

08002432 <LoopForever>:

LoopForever:
    b LoopForever
 8002432:	e7fe      	b.n	8002432 <LoopForever>
  ldr   r0, =_estack
 8002434:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002440:	0800b4d8 	.word	0x0800b4d8
  ldr r2, =_sbss
 8002444:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002448:	200016dc 	.word	0x200016dc

0800244c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC1_2_IRQHandler>

0800244e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 f95b 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245e:	200f      	movs	r0, #15
 8002460:	f000 f80e 	bl	8002480 <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	e001      	b.n	8002474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002470:	f7ff fca4 	bl	8001dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002474:	79fb      	ldrb	r3, [r7, #7]

}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_InitTick+0x68>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d022      	beq.n	80024da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_InitTick+0x6c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_InitTick+0x68>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f966 	bl	800277a <HAL_SYSTICK_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10f      	bne.n	80024d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d809      	bhi.n	80024ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ba:	2200      	movs	r2, #0
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c2:	f000 f932 	bl	800272a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_InitTick+0x70>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e007      	b.n	80024de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e004      	b.n	80024de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e001      	b.n	80024de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000024 	.word	0x20000024
 80024ec:	2000001c 	.word	0x2000001c
 80024f0:	20000020 	.word	0x20000020

080024f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x1c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_IncTick+0x20>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4413      	add	r3, r2
 8002502:	4a03      	ldr	r2, [pc, #12]	; (8002510 <HAL_IncTick+0x1c>)
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20000744 	.word	0x20000744
 8002514:	20000024 	.word	0x20000024

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000744 	.word	0x20000744

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002548:	d004      	beq.n	8002554 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_Delay+0x40>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002554:	bf00      	nop
 8002556:	f7ff ffdf 	bl	8002518 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	429a      	cmp	r2, r3
 8002564:	d8f7      	bhi.n	8002556 <HAL_Delay+0x26>
  {
  }
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000024 	.word	0x20000024

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f4:	f7ff ff8e 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff29 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff40 	bl	80025bc <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff90 	bl	8002668 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5f 	bl	8002614 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff33 	bl	80025d8 <__NVIC_EnableIRQ>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ffa4 	bl	80026d0 <SysTick_Config>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027a2:	e15a      	b.n	8002a5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 814c 	beq.w	8002a54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d005      	beq.n	80027d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d130      	bne.n	8002836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800280a:	2201      	movs	r2, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0201 	and.w	r2, r3, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b03      	cmp	r3, #3
 8002840:	d017      	beq.n	8002872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d123      	bne.n	80028c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	6939      	ldr	r1, [r7, #16]
 80028c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80a6 	beq.w	8002a54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_GPIO_Init+0x2e4>)
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	4a5a      	ldr	r2, [pc, #360]	; (8002a78 <HAL_GPIO_Init+0x2e4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6613      	str	r3, [r2, #96]	; 0x60
 8002914:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <HAL_GPIO_Init+0x2e4>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_GPIO_Init+0x2e8>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800294a:	d01f      	beq.n	800298c <HAL_GPIO_Init+0x1f8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <HAL_GPIO_Init+0x2ec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d019      	beq.n	8002988 <HAL_GPIO_Init+0x1f4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a4b      	ldr	r2, [pc, #300]	; (8002a84 <HAL_GPIO_Init+0x2f0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_GPIO_Init+0x1f0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a4a      	ldr	r2, [pc, #296]	; (8002a88 <HAL_GPIO_Init+0x2f4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00d      	beq.n	8002980 <HAL_GPIO_Init+0x1ec>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a49      	ldr	r2, [pc, #292]	; (8002a8c <HAL_GPIO_Init+0x2f8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <HAL_GPIO_Init+0x1e8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a48      	ldr	r2, [pc, #288]	; (8002a90 <HAL_GPIO_Init+0x2fc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002974:	2305      	movs	r3, #5
 8002976:	e00a      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002978:	2306      	movs	r3, #6
 800297a:	e008      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 800297c:	2304      	movs	r3, #4
 800297e:	e006      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002980:	2303      	movs	r3, #3
 8002982:	e004      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002984:	2302      	movs	r3, #2
 8002986:	e002      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 800298c:	2300      	movs	r3, #0
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	f002 0203 	and.w	r2, r2, #3
 8002994:	0092      	lsls	r2, r2, #2
 8002996:	4093      	lsls	r3, r2
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800299e:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_GPIO_Init+0x2e8>)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ac:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <HAL_GPIO_Init+0x300>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029d0:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <HAL_GPIO_Init+0x300>)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029d6:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <HAL_GPIO_Init+0x300>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029fa:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <HAL_GPIO_Init+0x300>)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_GPIO_Init+0x300>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_GPIO_Init+0x300>)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_GPIO_Init+0x300>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_GPIO_Init+0x300>)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f47f ae9d 	bne.w	80027a4 <HAL_GPIO_Init+0x10>
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	48000400 	.word	0x48000400
 8002a84:	48000800 	.word	0x48000800
 8002a88:	48000c00 	.word	0x48000c00
 8002a8c:	48001000 	.word	0x48001000
 8002a90:	48001400 	.word	0x48001400
 8002a94:	40010400 	.word	0x40010400

08002a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e001      	b.n	8002aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e081      	b.n	8002c0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff f970 	bl	8001e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e006      	b.n	8002b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d104      	bne.n	8002b92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69d9      	ldr	r1, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d138      	bne.n	8002c9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e032      	b.n	8002ca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d139      	bne.n	8002d36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e033      	b.n	8002d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d46:	b08b      	sub	sp, #44	; 0x2c
 8002d48:	af06      	add	r7, sp, #24
 8002d4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0d7      	b.n	8002f06 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f008 f830 	bl	800add0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2203      	movs	r2, #3
 8002d74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f004 f980 	bl	8007082 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e04c      	b.n	8002e22 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	3301      	adds	r3, #1
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	b298      	uxth	r0, r3
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3336      	adds	r3, #54	; 0x36
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	3303      	adds	r3, #3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	3338      	adds	r3, #56	; 0x38
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	333c      	adds	r3, #60	; 0x3c
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	3340      	adds	r3, #64	; 0x40
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d3ad      	bcc.n	8002d88 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e044      	b.n	8002ebc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3b5      	bcc.n	8002e32 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	687e      	ldr	r6, [r7, #4]
 8002ece:	466d      	mov	r5, sp
 8002ed0:	f106 0410 	add.w	r4, r6, #16
 8002ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	602b      	str	r3, [r5, #0]
 8002edc:	1d33      	adds	r3, r6, #4
 8002ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee0:	6838      	ldr	r0, [r7, #0]
 8002ee2:	f004 f8e9 	bl	80070b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f001 fc29 	bl	8004756 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_PCD_Start+0x16>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e012      	b.n	8002f4a <HAL_PCD_Start+0x3c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 f88f 	bl	8007054 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f006 f844 	bl	8008fc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f006 f849 	bl	8008ff6 <USB_ReadInterrupts>
 8002f64:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fb26 	bl	80035c2 <PCD_EP_ISR_Handler>

    return;
 8002f76:	e110      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d013      	beq.n	8002faa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f94:	b292      	uxth	r2, r2
 8002f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f007 ffb1 	bl	800af02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8fc 	bl	80031a0 <HAL_PCD_SetAddress>

    return;
 8002fa8:	e0f7      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00c      	beq.n	8002fce <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fcc:	e0e5      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fea:	b292      	uxth	r2, r2
 8002fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ff0:	e0d3      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d034      	beq.n	8003066 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0204 	bic.w	r2, r2, #4
 800300e:	b292      	uxth	r2, r2
 8003010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0208 	bic.w	r2, r2, #8
 8003026:	b292      	uxth	r2, r2
 8003028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800303e:	2100      	movs	r1, #0
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f008 f953 	bl	800b2ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f007 ff94 	bl	800af74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003054:	b29a      	uxth	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800305e:	b292      	uxth	r2, r2
 8003060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003064:	e099      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306c:	2b00      	cmp	r3, #0
 800306e:	d027      	beq.n	80030c0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003078:	b29a      	uxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0208 	orr.w	r2, r2, #8
 8003082:	b292      	uxth	r2, r2
 8003084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	b292      	uxth	r2, r2
 800309c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0204 	orr.w	r2, r2, #4
 80030b2:	b292      	uxth	r2, r2
 80030b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f007 ff41 	bl	800af40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030be:	e06c      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d040      	beq.n	800314c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030dc:	b292      	uxth	r2, r2
 80030de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d12b      	bne.n	8003144 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0204 	orr.w	r2, r2, #4
 80030fe:	b292      	uxth	r2, r2
 8003100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	b292      	uxth	r2, r2
 8003118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800312c:	b29b      	uxth	r3, r3
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800313a:	2101      	movs	r1, #1
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f008 f8d5 	bl	800b2ec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003142:	e02a      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f007 fefb 	bl	800af40 <HAL_PCD_SuspendCallback>
    return;
 800314a:	e026      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00f      	beq.n	8003176 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003168:	b292      	uxth	r2, r2
 800316a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f007 feb9 	bl	800aee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003174:	e011      	b.n	800319a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00c      	beq.n	800319a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003192:	b292      	uxth	r2, r2
 8003194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003198:	bf00      	nop
  }
}
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_PCD_SetAddress+0x1a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e013      	b.n	80031e2 <HAL_PCD_SetAddress+0x42>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f005 fee4 	bl	8008fa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	4608      	mov	r0, r1
 80031f4:	4611      	mov	r1, r2
 80031f6:	461a      	mov	r2, r3
 80031f8:	4603      	mov	r3, r0
 80031fa:	70fb      	strb	r3, [r7, #3]
 80031fc:	460b      	mov	r3, r1
 80031fe:	803b      	strh	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800320c:	2b00      	cmp	r3, #0
 800320e:	da0e      	bge.n	800322e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	705a      	strb	r2, [r3, #1]
 800322c:	e00e      	b.n	800324c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 0207 	and.w	r2, r3, #7
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003258:	883a      	ldrh	r2, [r7, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	78ba      	ldrb	r2, [r7, #2]
 8003262:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003276:	78bb      	ldrb	r3, [r7, #2]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d102      	bne.n	8003282 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_PCD_EP_Open+0xa6>
 800328c:	2302      	movs	r3, #2
 800328e:	e00e      	b.n	80032ae <HAL_PCD_EP_Open+0xc4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68f9      	ldr	r1, [r7, #12]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 ff2c 	bl	80070fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80032ac:	7afb      	ldrb	r3, [r7, #11]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da0e      	bge.n	80032e8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	705a      	strb	r2, [r3, #1]
 80032e6:	e00e      	b.n	8003306 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_PCD_EP_Close+0x6a>
 800331c:	2302      	movs	r3, #2
 800331e:	e00e      	b.n	800333e <HAL_PCD_EP_Close+0x88>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	4618      	mov	r0, r3
 8003330:	f004 fa78 	bl	8007824 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	460b      	mov	r3, r1
 8003354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003356:	7afb      	ldrb	r3, [r7, #11]
 8003358:	f003 0207 	and.w	r2, r3, #7
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	b2da      	uxtb	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003392:	7afb      	ldrb	r3, [r7, #11]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	2b00      	cmp	r3, #0
 800339a:	d106      	bne.n	80033aa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6979      	ldr	r1, [r7, #20]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 fc2b 	bl	8007bfe <USB_EPStartXfer>
 80033a8:	e005      	b.n	80033b6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fc24 	bl	8007bfe <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 0207 	and.w	r2, r3, #7
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	440b      	add	r3, r1
 80033de:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2201      	movs	r2, #1
 800343a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343c:	7afb      	ldrb	r3, [r7, #11]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	b2da      	uxtb	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6979      	ldr	r1, [r7, #20]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 fbd0 	bl	8007bfe <USB_EPStartXfer>
 800345e:	e005      	b.n	800346c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6979      	ldr	r1, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f004 fbc9 	bl	8007bfe <USB_EPStartXfer>
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	f003 0207 	and.w	r2, r3, #7
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d901      	bls.n	8003494 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e03e      	b.n	8003512 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da0e      	bge.n	80034ba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	705a      	strb	r2, [r3, #1]
 80034b8:	e00c      	b.n	80034d4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_PCD_EP_SetStall+0x7e>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e00e      	b.n	8003512 <HAL_PCD_EP_SetStall+0x9c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	4618      	mov	r0, r3
 8003504:	f005 fc4d 	bl	8008da2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d901      	bls.n	8003538 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e040      	b.n	80035ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353c:	2b00      	cmp	r3, #0
 800353e:	da0e      	bge.n	800355e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	705a      	strb	r2, [r3, #1]
 800355c:	e00e      	b.n	800357c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 0207 	and.w	r2, r3, #7
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_PCD_EP_ClrStall+0x82>
 8003598:	2302      	movs	r3, #2
 800359a:	e00e      	b.n	80035ba <HAL_PCD_EP_ClrStall+0xa0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 fc4a 	bl	8008e44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b096      	sub	sp, #88	; 0x58
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035ca:	e39c      	b.n	8003d06 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80035e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 815e 	bne.w	80038ac <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d150      	bne.n	800369e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	81fb      	strh	r3, [r7, #14]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361c:	b29b      	uxth	r3, r3
 800361e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3328      	adds	r3, #40	; 0x28
 8003624:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	4413      	add	r3, r2
 8003640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	441a      	add	r2, r3
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800365c:	2100      	movs	r1, #0
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f007 fc27 	bl	800aeb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 834a 	beq.w	8003d06 <PCD_EP_ISR_Handler+0x744>
 8003672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 8345 	bne.w	8003d06 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003688:	b2da      	uxtb	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b292      	uxth	r2, r2
 8003690:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800369c:	e333      	b.n	8003d06 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036a4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d032      	beq.n	8003722 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	4413      	add	r3, r2
 80036d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80036ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f005 fccf 	bl	800909a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29a      	uxth	r2, r3
 8003704:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003708:	4013      	ands	r3, r2
 800370a:	823b      	strh	r3, [r7, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	8a3a      	ldrh	r2, [r7, #16]
 8003712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003716:	b292      	uxth	r2, r2
 8003718:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f007 fb9c 	bl	800ae58 <HAL_PCD_SetupStageCallback>
 8003720:	e2f1      	b.n	8003d06 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003722:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003726:	2b00      	cmp	r3, #0
 8003728:	f280 82ed 	bge.w	8003d06 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29a      	uxth	r2, r3
 8003734:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003738:	4013      	ands	r3, r2
 800373a:	83fb      	strh	r3, [r7, #30]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	8bfa      	ldrh	r2, [r7, #30]
 8003742:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003746:	b292      	uxth	r2, r2
 8003748:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	4413      	add	r3, r2
 8003764:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800376e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003770:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d019      	beq.n	80037ae <PCD_EP_ISR_Handler+0x1ec>
 800377a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d015      	beq.n	80037ae <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	6959      	ldr	r1, [r3, #20]
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003792:	b29b      	uxth	r3, r3
 8003794:	f005 fc81 	bl	800909a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	441a      	add	r2, r3
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037a6:	2100      	movs	r1, #0
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f007 fb67 	bl	800ae7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 82a3 	bne.w	8003d06 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b3e      	cmp	r3, #62	; 0x3e
 80037e6:	d918      	bls.n	800381a <PCD_EP_ISR_Handler+0x258>
 80037e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
 80037f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <PCD_EP_ISR_Handler+0x240>
 80037fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fe:	3b01      	subs	r3, #1
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
 8003802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003804:	b29b      	uxth	r3, r3
 8003806:	029b      	lsls	r3, r3, #10
 8003808:	b29b      	uxth	r3, r3
 800380a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800380e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003812:	b29a      	uxth	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	801a      	strh	r2, [r3, #0]
 8003818:	e029      	b.n	800386e <PCD_EP_ISR_Handler+0x2ac>
 800381a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d112      	bne.n	8003848 <PCD_EP_ISR_Handler+0x286>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800382c:	b29a      	uxth	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003840:	b29a      	uxth	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	e012      	b.n	800386e <PCD_EP_ISR_Handler+0x2ac>
 8003848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
 8003850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <PCD_EP_ISR_Handler+0x2a0>
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	3301      	adds	r3, #1
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003864:	b29b      	uxth	r3, r3
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	b29a      	uxth	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	827b      	strh	r3, [r7, #18]
 8003880:	8a7b      	ldrh	r3, [r7, #18]
 8003882:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003886:	827b      	strh	r3, [r7, #18]
 8003888:	8a7b      	ldrh	r3, [r7, #18]
 800388a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800388e:	827b      	strh	r3, [r7, #18]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	8a7b      	ldrh	r3, [r7, #18]
 8003896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8013      	strh	r3, [r2, #0]
 80038aa:	e22c      	b.n	8003d06 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038c0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f280 80f6 	bge.w	8003ab6 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038e0:	4013      	ands	r3, r2
 80038e2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80038f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038fc:	b292      	uxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003900:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	7b1b      	ldrb	r3, [r3, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d123      	bne.n	8003966 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	4413      	add	r3, r2
 8003938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003942:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8003946:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 808e 	beq.w	8003a6c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003956:	6959      	ldr	r1, [r3, #20]
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395a:	88da      	ldrh	r2, [r3, #6]
 800395c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003960:	f005 fb9b 	bl	800909a <USB_ReadPMA>
 8003964:	e082      	b.n	8003a6c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d10a      	bne.n	8003984 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800396e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003972:	461a      	mov	r2, r3
 8003974:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9d3 	bl	8003d22 <HAL_PCD_EP_DB_Receive>
 800397c:	4603      	mov	r3, r0
 800397e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003982:	e073      	b.n	8003a6c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d022      	beq.n	8003a28 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02c      	beq.n	8003a6c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a18:	6959      	ldr	r1, [r3, #20]
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1c:	891a      	ldrh	r2, [r3, #8]
 8003a1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a22:	f005 fb3a 	bl	800909a <USB_ReadPMA>
 8003a26:	e021      	b.n	8003a6c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5e:	6959      	ldr	r1, [r3, #20]
 8003a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a62:	895a      	ldrh	r2, [r3, #10]
 8003a64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a68:	f005 fb17 	bl	800909a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a74:	441a      	add	r2, r3
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a82:	441a      	add	r2, r3
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <PCD_EP_ISR_Handler+0x4da>
 8003a90:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d206      	bcs.n	8003aaa <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f007 f9ea 	bl	800ae7c <HAL_PCD_DataOutStageCallback>
 8003aa8:	e005      	b.n	8003ab6 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f004 f8a4 	bl	8007bfe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ab6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8121 	beq.w	8003d06 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ac4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b16:	78db      	ldrb	r3, [r3, #3]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	f000 80a2 	beq.w	8003c62 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b20:	2200      	movs	r2, #0
 8003b22:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	7b1b      	ldrb	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8093 	beq.w	8003c54 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d046      	beq.n	8003bc8 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d126      	bne.n	8003b90 <PCD_EP_ISR_Handler+0x5ce>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	4413      	add	r3, r2
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	00da      	lsls	r2, r3, #3
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	4413      	add	r3, r2
 8003b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b68:	623b      	str	r3, [r7, #32]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	e061      	b.n	8003c54 <PCD_EP_ISR_Handler+0x692>
 8003b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d15d      	bne.n	8003c54 <PCD_EP_ISR_Handler+0x692>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	4413      	add	r3, r2
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	00da      	lsls	r2, r3, #3
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	4413      	add	r3, r2
 8003bba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	e045      	b.n	8003c54 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d126      	bne.n	8003c24 <PCD_EP_ISR_Handler+0x662>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bea:	4413      	add	r3, r2
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
 8003bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e017      	b.n	8003c54 <PCD_EP_ISR_Handler+0x692>
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d113      	bne.n	8003c54 <PCD_EP_ISR_Handler+0x692>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3a:	4413      	add	r3, r2
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	00da      	lsls	r2, r3, #3
 8003c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c46:	4413      	add	r3, r2
 8003c48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2200      	movs	r2, #0
 8003c52:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f007 f929 	bl	800aeb2 <HAL_PCD_DataInStageCallback>
 8003c60:	e051      	b.n	8003d06 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d144      	bne.n	8003cf8 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d907      	bls.n	8003cb2 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cae:	619a      	str	r2, [r3, #24]
 8003cb0:	e002      	b.n	8003cb8 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f007 f8f3 	bl	800aeb2 <HAL_PCD_DataInStageCallback>
 8003ccc:	e01b      	b.n	8003d06 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cd6:	441a      	add	r2, r3
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ce4:	441a      	add	r2, r3
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f003 ff84 	bl	8007bfe <USB_EPStartXfer>
 8003cf6:	e006      	b.n	8003d06 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003cf8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f917 	bl	8003f34 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f6ff ac5a 	blt.w	80035cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3758      	adds	r7, #88	; 0x58
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b088      	sub	sp, #32
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d07c      	beq.n	8003e34 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	8b7b      	ldrh	r3, [r7, #26]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d306      	bcc.n	8003d78 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	8b7b      	ldrh	r3, [r7, #26]
 8003d70:	1ad2      	subs	r2, r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	619a      	str	r2, [r3, #24]
 8003d76:	e002      	b.n	8003d7e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d123      	bne.n	8003dce <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da0:	833b      	strh	r3, [r7, #24]
 8003da2:	8b3b      	ldrh	r3, [r7, #24]
 8003da4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003da8:	833b      	strh	r3, [r7, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	8b3b      	ldrh	r3, [r7, #24]
 8003dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01f      	beq.n	8003e18 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	82fb      	strh	r3, [r7, #22]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	8afb      	ldrh	r3, [r7, #22]
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e18:	8b7b      	ldrh	r3, [r7, #26]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8085 	beq.w	8003f2a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6959      	ldr	r1, [r3, #20]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	891a      	ldrh	r2, [r3, #8]
 8003e2c:	8b7b      	ldrh	r3, [r7, #26]
 8003e2e:	f005 f934 	bl	800909a <USB_ReadPMA>
 8003e32:	e07a      	b.n	8003f2a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e58:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	8b7b      	ldrh	r3, [r7, #26]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d306      	bcc.n	8003e72 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	8b7b      	ldrh	r3, [r7, #26]
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	619a      	str	r2, [r3, #24]
 8003e70:	e002      	b.n	8003e78 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2200      	movs	r2, #0
 8003e76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d123      	bne.n	8003ec8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	83fb      	strh	r3, [r7, #30]
 8003e9c:	8bfb      	ldrh	r3, [r7, #30]
 8003e9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ea2:	83fb      	strh	r3, [r7, #30]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	8bfb      	ldrh	r3, [r7, #30]
 8003eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d11f      	bne.n	8003f12 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eec:	83bb      	strh	r3, [r7, #28]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	8bbb      	ldrh	r3, [r7, #28]
 8003efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f12:	8b7b      	ldrh	r3, [r7, #26]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6959      	ldr	r1, [r3, #20]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	895a      	ldrh	r2, [r3, #10]
 8003f24:	8b7b      	ldrh	r3, [r7, #26]
 8003f26:	f005 f8b8 	bl	800909a <USB_ReadPMA>
    }
  }

  return count;
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0a2      	sub	sp, #136	; 0x88
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 81c5 	beq.w	80042d8 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d907      	bls.n	8003f92 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f8a:	1ad2      	subs	r2, r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	619a      	str	r2, [r3, #24]
 8003f90:	e002      	b.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2200      	movs	r2, #0
 8003f96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 80b9 	bne.w	8004114 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d126      	bne.n	8003ff8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	4413      	add	r3, r2
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	00da      	lsls	r2, r3, #3
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	4413      	add	r3, r2
 8003fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	e01a      	b.n	800402e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d116      	bne.n	800402e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	4413      	add	r3, r2
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	00da      	lsls	r2, r3, #3
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	4413      	add	r3, r2
 8004022:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	2200      	movs	r2, #0
 800402c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d126      	bne.n	800408a <HAL_PCD_EP_DB_Transmit+0x156>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4413      	add	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00da      	lsls	r2, r3, #3
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	4413      	add	r3, r2
 800405e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800406e:	b29a      	uxth	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004082:	b29a      	uxth	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	801a      	strh	r2, [r3, #0]
 8004088:	e017      	b.n	80040ba <HAL_PCD_EP_DB_Transmit+0x186>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d113      	bne.n	80040ba <HAL_PCD_EP_DB_Transmit+0x186>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	4413      	add	r3, r2
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	00da      	lsls	r2, r3, #3
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	4413      	add	r3, r2
 80040ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2200      	movs	r2, #0
 80040b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f006 fef6 	bl	800aeb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 82d2 	beq.w	8004676 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	827b      	strh	r3, [r7, #18]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	8a7b      	ldrh	r3, [r7, #18]
 80040fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800410a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410e:	b29b      	uxth	r3, r3
 8004110:	8013      	strh	r3, [r2, #0]
 8004112:	e2b0      	b.n	8004676 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004138:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800414e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800415a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415e:	b29b      	uxth	r3, r3
 8004160:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004168:	2b01      	cmp	r3, #1
 800416a:	f040 8284 	bne.w	8004676 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004176:	441a      	add	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004184:	441a      	add	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	429a      	cmp	r2, r3
 8004194:	d309      	bcc.n	80041aa <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6a1a      	ldr	r2, [r3, #32]
 80041a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	621a      	str	r2, [r3, #32]
 80041a8:	e015      	b.n	80041d6 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80041b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041c0:	e009      	b.n	80041d6 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d155      	bne.n	800428a <HAL_PCD_EP_DB_Transmit+0x356>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	4413      	add	r3, r2
 80041f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	00da      	lsls	r2, r3, #3
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	4413      	add	r3, r2
 8004200:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	2b3e      	cmp	r3, #62	; 0x3e
 800420a:	d916      	bls.n	800423a <HAL_PCD_EP_DB_Transmit+0x306>
 800420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	64bb      	str	r3, [r7, #72]	; 0x48
 8004212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800421c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421e:	3b01      	subs	r3, #1
 8004220:	64bb      	str	r3, [r7, #72]	; 0x48
 8004222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004224:	b29b      	uxth	r3, r3
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	b29b      	uxth	r3, r3
 800422a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004232:	b29a      	uxth	r2, r3
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	e043      	b.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x38e>
 800423a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d112      	bne.n	8004266 <HAL_PCD_EP_DB_Transmit+0x332>
 8004240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800424a:	b29a      	uxth	r2, r3
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425e:	b29a      	uxth	r2, r3
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	e02d      	b.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	64bb      	str	r3, [r7, #72]	; 0x48
 800426c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_PCD_EP_DB_Transmit+0x348>
 8004276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004278:	3301      	adds	r3, #1
 800427a:	64bb      	str	r3, [r7, #72]	; 0x48
 800427c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427e:	b29b      	uxth	r3, r3
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	b29a      	uxth	r2, r3
 8004284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	e01b      	b.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x38e>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d117      	bne.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a6:	4413      	add	r3, r2
 80042a8:	643b      	str	r3, [r7, #64]	; 0x40
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00da      	lsls	r2, r3, #3
 80042b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b2:	4413      	add	r3, r2
 80042b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6959      	ldr	r1, [r3, #20]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	891a      	ldrh	r2, [r3, #8]
 80042ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f004 fea0 	bl	8009016 <USB_WritePMA>
 80042d6:	e1ce      	b.n	8004676 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004308:	429a      	cmp	r2, r3
 800430a:	d307      	bcc.n	800431c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004314:	1ad2      	subs	r2, r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	619a      	str	r2, [r3, #24]
 800431a:	e002      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 80c4 	bne.w	80044b4 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d126      	bne.n	8004382 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	66bb      	str	r3, [r7, #104]	; 0x68
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004342:	b29b      	uxth	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004348:	4413      	add	r3, r2
 800434a:	66bb      	str	r3, [r7, #104]	; 0x68
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	00da      	lsls	r2, r3, #3
 8004352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004354:	4413      	add	r3, r2
 8004356:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800435a:	667b      	str	r3, [r7, #100]	; 0x64
 800435c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004366:	b29a      	uxth	r2, r3
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437a:	b29a      	uxth	r2, r3
 800437c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e01a      	b.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x484>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d116      	bne.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x484>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	673b      	str	r3, [r7, #112]	; 0x70
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004398:	b29b      	uxth	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800439e:	4413      	add	r3, r2
 80043a0:	673b      	str	r3, [r7, #112]	; 0x70
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	00da      	lsls	r2, r3, #3
 80043a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043aa:	4413      	add	r3, r2
 80043ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b4:	2200      	movs	r2, #0
 80043b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d12f      	bne.n	8004426 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043de:	4413      	add	r3, r2
 80043e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	00da      	lsls	r2, r3, #3
 80043ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ee:	4413      	add	r3, r2
 80043f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004404:	b29a      	uxth	r2, r3
 8004406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441c:	b29a      	uxth	r2, r3
 800441e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e017      	b.n	8004456 <HAL_PCD_EP_DB_Transmit+0x522>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d113      	bne.n	8004456 <HAL_PCD_EP_DB_Transmit+0x522>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004436:	b29b      	uxth	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800443c:	4413      	add	r3, r2
 800443e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	00da      	lsls	r2, r3, #3
 8004446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004448:	4413      	add	r3, r2
 800444a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800444e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004452:	2200      	movs	r2, #0
 8004454:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	4619      	mov	r1, r3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f006 fd28 	bl	800aeb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004468:	2b00      	cmp	r3, #0
 800446a:	f040 8104 	bne.w	8004676 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]
 80044b2:	e0e0      	b.n	8004676 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fe:	b29b      	uxth	r3, r3
 8004500:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004508:	2b01      	cmp	r3, #1
 800450a:	f040 80b4 	bne.w	8004676 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004516:	441a      	add	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004524:	441a      	add	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6a1a      	ldr	r2, [r3, #32]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	429a      	cmp	r2, r3
 8004534:	d309      	bcc.n	800454a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004542:	1ad2      	subs	r2, r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	621a      	str	r2, [r3, #32]
 8004548:	e015      	b.n	8004576 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d107      	bne.n	8004562 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004560:	e009      	b.n	8004576 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	663b      	str	r3, [r7, #96]	; 0x60
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d155      	bne.n	8004630 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	65bb      	str	r3, [r7, #88]	; 0x58
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004598:	4413      	add	r3, r2
 800459a:	65bb      	str	r3, [r7, #88]	; 0x58
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	00da      	lsls	r2, r3, #3
 80045a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045aa:	657b      	str	r3, [r7, #84]	; 0x54
 80045ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ae:	2b3e      	cmp	r3, #62	; 0x3e
 80045b0:	d916      	bls.n	80045e0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80045b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	677b      	str	r3, [r7, #116]	; 0x74
 80045b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x694>
 80045c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c4:	3b01      	subs	r3, #1
 80045c6:	677b      	str	r3, [r7, #116]	; 0x74
 80045c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d8:	b29a      	uxth	r2, r3
 80045da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	e040      	b.n	8004662 <HAL_PCD_EP_DB_Transmit+0x72e>
 80045e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d112      	bne.n	800460c <HAL_PCD_EP_DB_Transmit+0x6d8>
 80045e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004604:	b29a      	uxth	r2, r3
 8004606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e02a      	b.n	8004662 <HAL_PCD_EP_DB_Transmit+0x72e>
 800460c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	677b      	str	r3, [r7, #116]	; 0x74
 8004612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800461c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800461e:	3301      	adds	r3, #1
 8004620:	677b      	str	r3, [r7, #116]	; 0x74
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	b29b      	uxth	r3, r3
 8004626:	029b      	lsls	r3, r3, #10
 8004628:	b29a      	uxth	r2, r3
 800462a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e018      	b.n	8004662 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d114      	bne.n	8004662 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004640:	b29b      	uxth	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004646:	4413      	add	r3, r2
 8004648:	663b      	str	r3, [r7, #96]	; 0x60
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	00da      	lsls	r2, r3, #3
 8004650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004652:	4413      	add	r3, r2
 8004654:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800465a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465c:	b29a      	uxth	r2, r3
 800465e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004660:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6959      	ldr	r1, [r3, #20]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	895a      	ldrh	r2, [r3, #10]
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	b29b      	uxth	r3, r3
 8004672:	f004 fcd0 	bl	8009016 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	823b      	strh	r3, [r7, #16]
 8004692:	8a3b      	ldrh	r3, [r7, #16]
 8004694:	f083 0310 	eor.w	r3, r3, #16
 8004698:	823b      	strh	r3, [r7, #16]
 800469a:	8a3b      	ldrh	r3, [r7, #16]
 800469c:	f083 0320 	eor.w	r3, r3, #32
 80046a0:	823b      	strh	r3, [r7, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	8a3b      	ldrh	r3, [r7, #16]
 80046b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3788      	adds	r7, #136	; 0x88
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	4613      	mov	r3, r2
 80046e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e009      	b.n	800471a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004706:	897a      	ldrh	r2, [r7, #10]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800471a:	893b      	ldrh	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	b29a      	uxth	r2, r3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	80da      	strh	r2, [r3, #6]
 800472e:	e00b      	b.n	8004748 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2201      	movs	r2, #1
 8004734:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	b29a      	uxth	r2, r3
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	b29a      	uxth	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800477a:	b29b      	uxth	r3, r3
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800478e:	b29b      	uxth	r3, r3
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d141      	bne.n	800483e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ba:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c6:	d131      	bne.n	800482c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047c8:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ce:	4a46      	ldr	r2, [pc, #280]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047d8:	4b43      	ldr	r3, [pc, #268]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047e0:	4a41      	ldr	r2, [pc, #260]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047e8:	4b40      	ldr	r3, [pc, #256]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2232      	movs	r2, #50	; 0x32
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	4a3f      	ldr	r2, [pc, #252]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	0c9b      	lsrs	r3, r3, #18
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fe:	e002      	b.n	8004806 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3b01      	subs	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004812:	d102      	bne.n	800481a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f2      	bne.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800481a:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d158      	bne.n	80048da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e057      	b.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800482c:	4b2e      	ldr	r3, [pc, #184]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004832:	4a2d      	ldr	r2, [pc, #180]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800483c:	e04d      	b.n	80048da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d141      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d131      	bne.n	80048b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485a:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004864:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800486c:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004872:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004874:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2232      	movs	r2, #50	; 0x32
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	0c9b      	lsrs	r3, r3, #18
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488a:	e002      	b.n	8004892 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b01      	subs	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	d102      	bne.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f2      	bne.n	800488c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d112      	bne.n	80048da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e011      	b.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048c8:	e007      	b.n	80048da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048d2:	4a05      	ldr	r2, [pc, #20]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40007000 	.word	0x40007000
 80048ec:	2000001c 	.word	0x2000001c
 80048f0:	431bde83 	.word	0x431bde83

080048f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004902:	6093      	str	r3, [r2, #8]
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40007000 	.word	0x40007000

08004914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e308      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d075      	beq.n	8004a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004932:	4ba3      	ldr	r3, [pc, #652]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800493c:	4ba0      	ldr	r3, [pc, #640]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d102      	bne.n	8004952 <HAL_RCC_OscConfig+0x3e>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d002      	beq.n	8004958 <HAL_RCC_OscConfig+0x44>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d10b      	bne.n	8004970 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	4b99      	ldr	r3, [pc, #612]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d05b      	beq.n	8004a1c <HAL_RCC_OscConfig+0x108>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d157      	bne.n	8004a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e2e3      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x74>
 800497a:	4b91      	ldr	r3, [pc, #580]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a90      	ldr	r2, [pc, #576]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e01d      	b.n	80049c4 <HAL_RCC_OscConfig+0xb0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x98>
 8004992:	4b8b      	ldr	r3, [pc, #556]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a8a      	ldr	r2, [pc, #552]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4b88      	ldr	r3, [pc, #544]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a87      	ldr	r2, [pc, #540]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0xb0>
 80049ac:	4b84      	ldr	r3, [pc, #528]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a83      	ldr	r2, [pc, #524]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	4b81      	ldr	r3, [pc, #516]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a80      	ldr	r2, [pc, #512]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 80049be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d013      	beq.n	80049f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fd fda4 	bl	8002518 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fd fda0 	bl	8002518 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	; 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e2a8      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e6:	4b76      	ldr	r3, [pc, #472]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0xc0>
 80049f2:	e014      	b.n	8004a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fd90 	bl	8002518 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fd fd8c 	bl	8002518 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e294      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0xe8>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d075      	beq.n	8004b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2a:	4b65      	ldr	r3, [pc, #404]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a34:	4b62      	ldr	r3, [pc, #392]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	d102      	bne.n	8004a4a <HAL_RCC_OscConfig+0x136>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_OscConfig+0x13c>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d11f      	bne.n	8004a90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a50:	4b5b      	ldr	r3, [pc, #364]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_OscConfig+0x154>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e267      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b55      	ldr	r3, [pc, #340]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	4952      	ldr	r1, [pc, #328]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a7c:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <HAL_RCC_OscConfig+0x2b0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fd fcfd 	bl	8002480 <HAL_InitTick>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d043      	beq.n	8004b14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e253      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d023      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a98:	4b49      	ldr	r3, [pc, #292]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a48      	ldr	r2, [pc, #288]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fd38 	bl	8002518 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aac:	f7fd fd34 	bl	8002518 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e23c      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004abe:	4b40      	ldr	r3, [pc, #256]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aca:	4b3d      	ldr	r3, [pc, #244]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	4939      	ldr	r1, [pc, #228]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
 8004ade:	e01a      	b.n	8004b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae0:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fd fd14 	bl	8002518 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af4:	f7fd fd10 	bl	8002518 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e218      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b06:	4b2e      	ldr	r3, [pc, #184]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x1e0>
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d03c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01c      	beq.n	8004b64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2a:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b30:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fd fced 	bl	8002518 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b42:	f7fd fce9 	bl	8002518 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e1f1      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0ef      	beq.n	8004b42 <HAL_RCC_OscConfig+0x22e>
 8004b62:	e01b      	b.n	8004b9c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b64:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fd fcd0 	bl	8002518 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7c:	f7fd fccc 	bl	8002518 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e1d4      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ef      	bne.n	8004b7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80ab 	beq.w	8004d00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x2b4>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e005      	b.n	8004bca <HAL_RCC_OscConfig+0x2b6>
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	20000020 	.word	0x20000020
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00d      	beq.n	8004bea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4baf      	ldr	r3, [pc, #700]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	4aae      	ldr	r2, [pc, #696]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bda:	4bac      	ldr	r3, [pc, #688]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004be6:	2301      	movs	r3, #1
 8004be8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bea:	4ba9      	ldr	r3, [pc, #676]	; (8004e90 <HAL_RCC_OscConfig+0x57c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d118      	bne.n	8004c28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf6:	4ba6      	ldr	r3, [pc, #664]	; (8004e90 <HAL_RCC_OscConfig+0x57c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4aa5      	ldr	r2, [pc, #660]	; (8004e90 <HAL_RCC_OscConfig+0x57c>)
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c02:	f7fd fc89 	bl	8002518 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c0a:	f7fd fc85 	bl	8002518 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e18d      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1c:	4b9c      	ldr	r3, [pc, #624]	; (8004e90 <HAL_RCC_OscConfig+0x57c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d108      	bne.n	8004c42 <HAL_RCC_OscConfig+0x32e>
 8004c30:	4b96      	ldr	r3, [pc, #600]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	4a95      	ldr	r2, [pc, #596]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c40:	e024      	b.n	8004c8c <HAL_RCC_OscConfig+0x378>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d110      	bne.n	8004c6c <HAL_RCC_OscConfig+0x358>
 8004c4a:	4b90      	ldr	r3, [pc, #576]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	4a8e      	ldr	r2, [pc, #568]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c52:	f043 0304 	orr.w	r3, r3, #4
 8004c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c5a:	4b8c      	ldr	r3, [pc, #560]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	4a8a      	ldr	r2, [pc, #552]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6a:	e00f      	b.n	8004c8c <HAL_RCC_OscConfig+0x378>
 8004c6c:	4b87      	ldr	r3, [pc, #540]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	4a86      	ldr	r2, [pc, #536]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7c:	4b83      	ldr	r3, [pc, #524]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	4a82      	ldr	r2, [pc, #520]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d016      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fd fc40 	bl	8002518 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9c:	f7fd fc3c 	bl	8002518 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e142      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb2:	4b76      	ldr	r3, [pc, #472]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ed      	beq.n	8004c9c <HAL_RCC_OscConfig+0x388>
 8004cc0:	e015      	b.n	8004cee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc2:	f7fd fc29 	bl	8002518 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc8:	e00a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fd fc25 	bl	8002518 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e12b      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce0:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ed      	bne.n	8004cca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cee:	7ffb      	ldrb	r3, [r7, #31]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf4:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf8:	4a64      	ldr	r2, [pc, #400]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d03c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d14:	4b5d      	ldr	r3, [pc, #372]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d1a:	4a5c      	ldr	r2, [pc, #368]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d24:	f7fd fbf8 	bl	8002518 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d2c:	f7fd fbf4 	bl	8002518 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0fc      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d3e:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0ef      	beq.n	8004d2c <HAL_RCC_OscConfig+0x418>
 8004d4c:	e01b      	b.n	8004d86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d4e:	4b4f      	ldr	r3, [pc, #316]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d54:	4a4d      	ldr	r2, [pc, #308]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fbdb 	bl	8002518 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d66:	f7fd fbd7 	bl	8002518 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e0df      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d78:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1ef      	bne.n	8004d66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80d3 	beq.w	8004f36 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d90:	4b3e      	ldr	r3, [pc, #248]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	f000 808d 	beq.w	8004eb8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d15a      	bne.n	8004e5c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da6:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a38      	ldr	r2, [pc, #224]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fd fbb1 	bl	8002518 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dba:	f7fd fbad 	bl	8002518 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e0b5      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <HAL_RCC_OscConfig+0x580>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6a11      	ldr	r1, [r2, #32]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de8:	3a01      	subs	r2, #1
 8004dea:	0112      	lsls	r2, r2, #4
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004df2:	0212      	lsls	r2, r2, #8
 8004df4:	4311      	orrs	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	0552      	lsls	r2, r2, #21
 8004e00:	4311      	orrs	r1, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e06:	0852      	lsrs	r2, r2, #1
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	0652      	lsls	r2, r2, #25
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e12:	06d2      	lsls	r2, r2, #27
 8004e14:	430a      	orrs	r2, r1
 8004e16:	491d      	ldr	r1, [pc, #116]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e28:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd fb70 	bl	8002518 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3c:	f7fd fb6c 	bl	8002518 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e074      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x528>
 8004e5a:	e06c      	b.n	8004f36 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a07      	ldr	r2, [pc, #28]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <HAL_RCC_OscConfig+0x578>)
 8004e7a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fd fb48 	bl	8002518 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8a:	e00e      	b.n	8004eaa <HAL_RCC_OscConfig+0x596>
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40007000 	.word	0x40007000
 8004e94:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd fb3e 	bl	8002518 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e046      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_OscConfig+0x62c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0x584>
 8004eb6:	e03e      	b.n	8004f36 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e039      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ec4:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <HAL_RCC_OscConfig+0x62c>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f003 0203 	and.w	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d12c      	bne.n	8004f32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d123      	bne.n	8004f32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d11b      	bne.n	8004f32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d113      	bne.n	8004f32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	3b01      	subs	r3, #1
 8004f18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d109      	bne.n	8004f32 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40021000 	.word	0x40021000

08004f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e11e      	b.n	800519a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b91      	ldr	r3, [pc, #580]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d910      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b8e      	ldr	r3, [pc, #568]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 020f 	bic.w	r2, r3, #15
 8004f72:	498c      	ldr	r1, [pc, #560]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b8a      	ldr	r3, [pc, #552]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e106      	b.n	800519a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d073      	beq.n	8005080 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d129      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa0:	4b81      	ldr	r3, [pc, #516]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0f4      	b.n	800519a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fb0:	f000 f966 	bl	8005280 <RCC_GetSysClockFreqFromPLLSource>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4a7c      	ldr	r2, [pc, #496]	; (80051ac <HAL_RCC_ClockConfig+0x268>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d93f      	bls.n	800503e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fbe:	4b7a      	ldr	r3, [pc, #488]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d033      	beq.n	800503e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d12f      	bne.n	800503e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fde:	4b72      	ldr	r3, [pc, #456]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe6:	4a70      	ldr	r2, [pc, #448]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e024      	b.n	800503e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ffc:	4b6a      	ldr	r3, [pc, #424]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0c6      	b.n	800519a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800500c:	4b66      	ldr	r3, [pc, #408]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0be      	b.n	800519a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800501c:	f000 f8ce 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 8005020:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4a61      	ldr	r2, [pc, #388]	; (80051ac <HAL_RCC_ClockConfig+0x268>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d909      	bls.n	800503e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800502a:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005032:	4a5d      	ldr	r2, [pc, #372]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800503e:	4b5a      	ldr	r3, [pc, #360]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 0203 	bic.w	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4957      	ldr	r1, [pc, #348]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005050:	f7fd fa62 	bl	8002518 <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	e00a      	b.n	800506e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005058:	f7fd fa5e 	bl	8002518 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	; 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e095      	b.n	800519a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	4b4e      	ldr	r3, [pc, #312]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 020c 	and.w	r2, r3, #12
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	429a      	cmp	r2, r3
 800507e:	d1eb      	bne.n	8005058 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d023      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005098:	4b43      	ldr	r3, [pc, #268]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4a42      	ldr	r2, [pc, #264]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800509e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050b0:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050b8:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 80050ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4936      	ldr	r1, [pc, #216]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	d105      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050da:	4b33      	ldr	r3, [pc, #204]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4a32      	ldr	r2, [pc, #200]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 80050e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d21d      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f023 020f 	bic.w	r2, r3, #15
 80050fc:	4929      	ldr	r1, [pc, #164]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005104:	f7fd fa08 	bl	8002518 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fd fa04 	bl	8002518 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e03b      	b.n	800519a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <HAL_RCC_ClockConfig+0x260>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d1ed      	bne.n	800510c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4917      	ldr	r1, [pc, #92]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	490f      	ldr	r1, [pc, #60]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800516e:	f000 f825 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 8005172:	4602      	mov	r2, r0
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <HAL_RCC_ClockConfig+0x264>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	490c      	ldr	r1, [pc, #48]	; (80051b0 <HAL_RCC_ClockConfig+0x26c>)
 8005180:	5ccb      	ldrb	r3, [r1, r3]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	fa22 f303 	lsr.w	r3, r2, r3
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 800518c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <HAL_RCC_ClockConfig+0x274>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd f974 	bl	8002480 <HAL_InitTick>
 8005198:	4603      	mov	r3, r0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40022000 	.word	0x40022000
 80051a8:	40021000 	.word	0x40021000
 80051ac:	04c4b400 	.word	0x04c4b400
 80051b0:	0800b4c0 	.word	0x0800b4c0
 80051b4:	2000001c 	.word	0x2000001c
 80051b8:	20000020 	.word	0x20000020

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051c2:	4b2c      	ldr	r3, [pc, #176]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d102      	bne.n	80051d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ce:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e047      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051d4:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d102      	bne.n	80051e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051e0:	4b26      	ldr	r3, [pc, #152]	; (800527c <HAL_RCC_GetSysClockFreq+0xc0>)
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	e03e      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051e6:	4b23      	ldr	r3, [pc, #140]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d136      	bne.n	8005260 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051f2:	4b20      	ldr	r3, [pc, #128]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051fc:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	3301      	adds	r3, #1
 8005208:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d10c      	bne.n	800522a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005210:	4a1a      	ldr	r2, [pc, #104]	; (800527c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	4a16      	ldr	r2, [pc, #88]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 800521a:	68d2      	ldr	r2, [r2, #12]
 800521c:	0a12      	lsrs	r2, r2, #8
 800521e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	617b      	str	r3, [r7, #20]
      break;
 8005228:	e00c      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800522a:	4a13      	ldr	r2, [pc, #76]	; (8005278 <HAL_RCC_GetSysClockFreq+0xbc>)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005234:	68d2      	ldr	r2, [r2, #12]
 8005236:	0a12      	lsrs	r2, r2, #8
 8005238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800523c:	fb02 f303 	mul.w	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]
      break;
 8005242:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	0e5b      	lsrs	r3, r3, #25
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	3301      	adds	r3, #1
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	e001      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005264:	693b      	ldr	r3, [r7, #16]
}
 8005266:	4618      	mov	r0, r3
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40021000 	.word	0x40021000
 8005278:	00f42400 	.word	0x00f42400
 800527c:	007a1200 	.word	0x007a1200

08005280 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005286:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	3301      	adds	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d10c      	bne.n	80052be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052a4:	4a17      	ldr	r2, [pc, #92]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ae:	68d2      	ldr	r2, [r2, #12]
 80052b0:	0a12      	lsrs	r2, r2, #8
 80052b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	617b      	str	r3, [r7, #20]
    break;
 80052bc:	e00c      	b.n	80052d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052be:	4a12      	ldr	r2, [pc, #72]	; (8005308 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052c8:	68d2      	ldr	r2, [r2, #12]
 80052ca:	0a12      	lsrs	r2, r2, #8
 80052cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]
    break;
 80052d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	0e5b      	lsrs	r3, r3, #25
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	3301      	adds	r3, #1
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052f2:	687b      	ldr	r3, [r7, #4]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40021000 	.word	0x40021000
 8005304:	007a1200 	.word	0x007a1200
 8005308:	00f42400 	.word	0x00f42400

0800530c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005314:	2300      	movs	r3, #0
 8005316:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005318:	2300      	movs	r3, #0
 800531a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8098 	beq.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532a:	2300      	movs	r3, #0
 800532c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800532e:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10d      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800533a:	4b40      	ldr	r3, [pc, #256]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	4a3f      	ldr	r2, [pc, #252]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	6593      	str	r3, [r2, #88]	; 0x58
 8005346:	4b3d      	ldr	r3, [pc, #244]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005352:	2301      	movs	r3, #1
 8005354:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005356:	4b3a      	ldr	r3, [pc, #232]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a39      	ldr	r2, [pc, #228]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800535c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005360:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005362:	f7fd f8d9 	bl	8002518 <HAL_GetTick>
 8005366:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005368:	e009      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536a:	f7fd f8d5 	bl	8002518 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d902      	bls.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	74fb      	strb	r3, [r7, #19]
        break;
 800537c:	e005      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0ef      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d159      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005390:	4b2a      	ldr	r3, [pc, #168]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01e      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d019      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053ac:	4b23      	ldr	r3, [pc, #140]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053b8:	4b20      	ldr	r3, [pc, #128]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053c8:	4b1c      	ldr	r3, [pc, #112]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ea:	f7fd f895 	bl	8002518 <HAL_GetTick>
 80053ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f0:	e00b      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fd f891 	bl	8002518 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d902      	bls.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	74fb      	strb	r3, [r7, #19]
            break;
 8005408:	e006      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0ec      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800541e:	4b07      	ldr	r3, [pc, #28]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	4903      	ldr	r1, [pc, #12]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005434:	e008      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	74bb      	strb	r3, [r7, #18]
 800543a:	e005      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800543c:	40021000 	.word	0x40021000
 8005440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005448:	7c7b      	ldrb	r3, [r7, #17]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d105      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544e:	4ba6      	ldr	r3, [pc, #664]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	4aa5      	ldr	r2, [pc, #660]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005458:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005466:	4ba0      	ldr	r3, [pc, #640]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f023 0203 	bic.w	r2, r3, #3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	499c      	ldr	r1, [pc, #624]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005488:	4b97      	ldr	r3, [pc, #604]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f023 020c 	bic.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4994      	ldr	r1, [pc, #592]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054aa:	4b8f      	ldr	r3, [pc, #572]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	498b      	ldr	r1, [pc, #556]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054cc:	4b86      	ldr	r3, [pc, #536]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	4983      	ldr	r1, [pc, #524]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054ee:	4b7e      	ldr	r3, [pc, #504]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	497a      	ldr	r1, [pc, #488]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005510:	4b75      	ldr	r3, [pc, #468]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	4972      	ldr	r1, [pc, #456]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005532:	4b6d      	ldr	r3, [pc, #436]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	4969      	ldr	r1, [pc, #420]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	4961      	ldr	r1, [pc, #388]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	4958      	ldr	r1, [pc, #352]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005598:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4950      	ldr	r1, [pc, #320]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b8:	4b4b      	ldr	r3, [pc, #300]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a4a      	ldr	r2, [pc, #296]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055d0:	4b45      	ldr	r3, [pc, #276]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4942      	ldr	r1, [pc, #264]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ee:	d105      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f0:	4b3d      	ldr	r3, [pc, #244]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a3c      	ldr	r2, [pc, #240]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005608:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	4934      	ldr	r1, [pc, #208]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005626:	d105      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005628:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a2e      	ldr	r2, [pc, #184]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005632:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d015      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005640:	4b29      	ldr	r3, [pc, #164]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	4926      	ldr	r1, [pc, #152]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565e:	d105      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005660:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a20      	ldr	r2, [pc, #128]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005678:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	4918      	ldr	r1, [pc, #96]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005696:	d105      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d015      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	490a      	ldr	r1, [pc, #40]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ce:	d105      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40021000 	.word	0x40021000

080056ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e049      	b.n	8005792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fc fc0e 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f000 fee2 	bl	80064f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d001      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e04a      	b.n	800584a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a21      	ldr	r2, [pc, #132]	; (8005858 <HAL_TIM_Base_Start_IT+0xbc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d018      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057de:	d013      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1d      	ldr	r2, [pc, #116]	; (800585c <HAL_TIM_Base_Start_IT+0xc0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00e      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <HAL_TIM_Base_Start_IT+0xc4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d009      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1a      	ldr	r2, [pc, #104]	; (8005864 <HAL_TIM_Base_Start_IT+0xc8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x6c>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a19      	ldr	r2, [pc, #100]	; (8005868 <HAL_TIM_Base_Start_IT+0xcc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d115      	bne.n	8005834 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	4b17      	ldr	r3, [pc, #92]	; (800586c <HAL_TIM_Base_Start_IT+0xd0>)
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b06      	cmp	r3, #6
 8005818:	d015      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0xaa>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d011      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	e008      	b.n	8005846 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e000      	b.n	8005848 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	00010007 	.word	0x00010007

08005870 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e049      	b.n	8005916 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc fb2c 	bl	8001ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 fe20 	bl	80064f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_TIM_PWM_Start+0x24>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	e03c      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d109      	bne.n	800595e <HAL_TIM_PWM_Start+0x3e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	bf14      	ite	ne
 8005956:	2301      	movne	r3, #1
 8005958:	2300      	moveq	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	e02f      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d109      	bne.n	8005978 <HAL_TIM_PWM_Start+0x58>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e022      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b0c      	cmp	r3, #12
 800597c:	d109      	bne.n	8005992 <HAL_TIM_PWM_Start+0x72>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	bf14      	ite	ne
 800598a:	2301      	movne	r3, #1
 800598c:	2300      	moveq	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	e015      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b10      	cmp	r3, #16
 8005996:	d109      	bne.n	80059ac <HAL_TIM_PWM_Start+0x8c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	e008      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e097      	b.n	8005af6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0xb6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d4:	e023      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_PWM_Start+0xc6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	e01b      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Start+0xd6>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f4:	e013      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Start+0xe6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a04:	e00b      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xf6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a14:	e003      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 f986 	bl	8006d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a33      	ldr	r2, [pc, #204]	; (8005b00 <HAL_TIM_PWM_Start+0x1e0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x13e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a32      	ldr	r2, [pc, #200]	; (8005b04 <HAL_TIM_PWM_Start+0x1e4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x13e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a30      	ldr	r2, [pc, #192]	; (8005b08 <HAL_TIM_PWM_Start+0x1e8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x13e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <HAL_TIM_PWM_Start+0x1ec>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x13e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2d      	ldr	r2, [pc, #180]	; (8005b10 <HAL_TIM_PWM_Start+0x1f0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d101      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x142>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <HAL_TIM_PWM_Start+0x144>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <HAL_TIM_PWM_Start+0x1e0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d018      	beq.n	8005ab4 <HAL_TIM_PWM_Start+0x194>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8a:	d013      	beq.n	8005ab4 <HAL_TIM_PWM_Start+0x194>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <HAL_TIM_PWM_Start+0x1f4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00e      	beq.n	8005ab4 <HAL_TIM_PWM_Start+0x194>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <HAL_TIM_PWM_Start+0x1f8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIM_PWM_Start+0x194>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <HAL_TIM_PWM_Start+0x1e4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIM_PWM_Start+0x194>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <HAL_TIM_PWM_Start+0x1e8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d115      	bne.n	8005ae0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <HAL_TIM_PWM_Start+0x1fc>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d015      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x1d2>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d011      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ade:	e008      	b.n	8005af2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e000      	b.n	8005af4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	00010007 	.word	0x00010007

08005b20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e097      	b.n	8005c64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fc fa67 	bl	800201c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005b64:	f023 0307 	bic.w	r3, r3, #7
 8005b68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 fcbd 	bl	80064f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bc0:	f023 030c 	bic.w	r3, r3, #12
 8005bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	031b      	lsls	r3, r3, #12
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	4313      	orrs	r3, r2
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d110      	bne.n	8005cbe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d102      	bne.n	8005ca8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca2:	7b7b      	ldrb	r3, [r7, #13]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e069      	b.n	8005d80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cbc:	e031      	b.n	8005d22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d110      	bne.n	8005ce6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d102      	bne.n	8005cd0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cca:	7b3b      	ldrb	r3, [r7, #12]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d001      	beq.n	8005cd4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e055      	b.n	8005d80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce4:	e01d      	b.n	8005d22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d108      	bne.n	8005cfe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d105      	bne.n	8005cfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cf2:	7b7b      	ldrb	r3, [r7, #13]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d102      	bne.n	8005cfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cf8:	7b3b      	ldrb	r3, [r7, #12]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d001      	beq.n	8005d02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e03e      	b.n	8005d80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_TIM_Encoder_Start+0xc4>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d008      	beq.n	8005d40 <HAL_TIM_Encoder_Start+0xd4>
 8005d2e:	e00f      	b.n	8005d50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2201      	movs	r2, #1
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fffd 	bl	8006d38 <TIM_CCxChannelCmd>
      break;
 8005d3e:	e016      	b.n	8005d6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2201      	movs	r2, #1
 8005d46:	2104      	movs	r1, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fff5 	bl	8006d38 <TIM_CCxChannelCmd>
      break;
 8005d4e:	e00e      	b.n	8005d6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2201      	movs	r2, #1
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 ffed 	bl	8006d38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2201      	movs	r2, #1
 8005d64:	2104      	movs	r1, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 ffe6 	bl	8006d38 <TIM_CCxChannelCmd>
      break;
 8005d6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d122      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d11b      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0202 	mvn.w	r2, #2
 8005db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fb74 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb66 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb77 	bl	80064cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d122      	bne.n	8005e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d11b      	bne.n	8005e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0204 	mvn.w	r2, #4
 8005e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb4a 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 8005e24:	e005      	b.n	8005e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fb3c 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb4d 	bl	80064cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d122      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d11b      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0208 	mvn.w	r2, #8
 8005e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2204      	movs	r2, #4
 8005e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fb20 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 8005e78:	e005      	b.n	8005e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fb12 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb23 	bl	80064cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 0310 	and.w	r3, r3, #16
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d122      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d11b      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0210 	mvn.w	r2, #16
 8005eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 faf6 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 8005ecc:	e005      	b.n	8005eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fae8 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 faf9 	bl	80064cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d10e      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0201 	mvn.w	r2, #1
 8005f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fa fe62 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	d10e      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f24:	2b80      	cmp	r3, #128	; 0x80
 8005f26:	d107      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 f852 	bl	8006fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f46:	d10e      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d107      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 f845 	bl	8006ff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d10e      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 faa7 	bl	80064e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d10e      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d107      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0220 	mvn.w	r2, #32
 8005fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 f805 	bl	8006fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fcc:	d10f      	bne.n	8005fee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fdc:	d107      	bne.n	8005fee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 f80b 	bl	8007004 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ffc:	d10f      	bne.n	800601e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800600c:	d107      	bne.n	800601e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fffd 	bl	8007018 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800602c:	d10f      	bne.n	800604e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800603c:	d107      	bne.n	800604e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 ffef 	bl	800702c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800605c:	d10f      	bne.n	800607e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606c:	d107      	bne.n	800607e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 ffe1 	bl	8007040 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0ff      	b.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b14      	cmp	r3, #20
 80060b2:	f200 80f0 	bhi.w	8006296 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006111 	.word	0x08006111
 80060c0:	08006297 	.word	0x08006297
 80060c4:	08006297 	.word	0x08006297
 80060c8:	08006297 	.word	0x08006297
 80060cc:	08006151 	.word	0x08006151
 80060d0:	08006297 	.word	0x08006297
 80060d4:	08006297 	.word	0x08006297
 80060d8:	08006297 	.word	0x08006297
 80060dc:	08006193 	.word	0x08006193
 80060e0:	08006297 	.word	0x08006297
 80060e4:	08006297 	.word	0x08006297
 80060e8:	08006297 	.word	0x08006297
 80060ec:	080061d3 	.word	0x080061d3
 80060f0:	08006297 	.word	0x08006297
 80060f4:	08006297 	.word	0x08006297
 80060f8:	08006297 	.word	0x08006297
 80060fc:	08006215 	.word	0x08006215
 8006100:	08006297 	.word	0x08006297
 8006104:	08006297 	.word	0x08006297
 8006108:	08006297 	.word	0x08006297
 800610c:	08006255 	.word	0x08006255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fa7c 	bl	8006614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0208 	orr.w	r2, r2, #8
 800612a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6999      	ldr	r1, [r3, #24]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	619a      	str	r2, [r3, #24]
      break;
 800614e:	e0a5      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 faec 	bl	8006734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	619a      	str	r2, [r3, #24]
      break;
 8006190:	e084      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fb55 	bl	8006848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0208 	orr.w	r2, r2, #8
 80061ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0204 	bic.w	r2, r2, #4
 80061bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	61da      	str	r2, [r3, #28]
      break;
 80061d0:	e064      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fbbd 	bl	8006958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69d9      	ldr	r1, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	021a      	lsls	r2, r3, #8
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	61da      	str	r2, [r3, #28]
      break;
 8006212:	e043      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fc26 	bl	8006a6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0208 	orr.w	r2, r2, #8
 800622e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0204 	bic.w	r2, r2, #4
 800623e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006252:	e023      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fc6a 	bl	8006b34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	021a      	lsls	r2, r3, #8
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006294:	e002      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
      break;
 800629a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop

080062b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIM_ConfigClockSource+0x1c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e0de      	b.n	800648a <HAL_TIM_ConfigClockSource+0x1da>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a63      	ldr	r2, [pc, #396]	; (8006494 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	f000 80a9 	beq.w	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 800630c:	4a61      	ldr	r2, [pc, #388]	; (8006494 <HAL_TIM_ConfigClockSource+0x1e4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	f200 80ae 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006314:	4a60      	ldr	r2, [pc, #384]	; (8006498 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	f000 80a1 	beq.w	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 800631c:	4a5e      	ldr	r2, [pc, #376]	; (8006498 <HAL_TIM_ConfigClockSource+0x1e8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	f200 80a6 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006324:	4a5d      	ldr	r2, [pc, #372]	; (800649c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006326:	4293      	cmp	r3, r2
 8006328:	f000 8099 	beq.w	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 800632c:	4a5b      	ldr	r2, [pc, #364]	; (800649c <HAL_TIM_ConfigClockSource+0x1ec>)
 800632e:	4293      	cmp	r3, r2
 8006330:	f200 809e 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006334:	4a5a      	ldr	r2, [pc, #360]	; (80064a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	f000 8091 	beq.w	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 800633c:	4a58      	ldr	r2, [pc, #352]	; (80064a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f200 8096 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006344:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006348:	f000 8089 	beq.w	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 800634c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006350:	f200 808e 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006358:	d03e      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0x128>
 800635a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635e:	f200 8087 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	f000 8086 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1c6>
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d87f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006370:	2b70      	cmp	r3, #112	; 0x70
 8006372:	d01a      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xfa>
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d87b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006378:	2b60      	cmp	r3, #96	; 0x60
 800637a:	d050      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x16e>
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d877      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006380:	2b50      	cmp	r3, #80	; 0x50
 8006382:	d03c      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x14e>
 8006384:	2b50      	cmp	r3, #80	; 0x50
 8006386:	d873      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d058      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x18e>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d86f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d064      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d86b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 8006398:	2b20      	cmp	r3, #32
 800639a:	d060      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d867      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05c      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d05a      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x1ae>
 80063a8:	e062      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6899      	ldr	r1, [r3, #8]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f000 fc9d 	bl	8006cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	609a      	str	r2, [r3, #8]
      break;
 80063d6:	e04f      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6899      	ldr	r1, [r3, #8]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f000 fc86 	bl	8006cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063fa:	609a      	str	r2, [r3, #8]
      break;
 80063fc:	e03c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	461a      	mov	r2, r3
 800640c:	f000 fbf8 	bl	8006c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2150      	movs	r1, #80	; 0x50
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fc51 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 800641c:	e02c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	461a      	mov	r2, r3
 800642c:	f000 fc17 	bl	8006c5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2160      	movs	r1, #96	; 0x60
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fc41 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 800643c:	e01c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 fbd8 	bl	8006c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2140      	movs	r1, #64	; 0x40
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fc31 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 800645c:	e00c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f000 fc28 	bl	8006cbe <TIM_ITRx_SetConfig>
      break;
 800646e:	e003      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e000      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	00100070 	.word	0x00100070
 8006498:	00100040 	.word	0x00100040
 800649c:	00100030 	.word	0x00100030
 80064a0:	00100020 	.word	0x00100020

080064a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3c      	ldr	r2, [pc, #240]	; (80065f8 <TIM_Base_SetConfig+0x104>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00f      	beq.n	800652c <TIM_Base_SetConfig+0x38>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006512:	d00b      	beq.n	800652c <TIM_Base_SetConfig+0x38>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a39      	ldr	r2, [pc, #228]	; (80065fc <TIM_Base_SetConfig+0x108>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d007      	beq.n	800652c <TIM_Base_SetConfig+0x38>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a38      	ldr	r2, [pc, #224]	; (8006600 <TIM_Base_SetConfig+0x10c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_Base_SetConfig+0x38>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a37      	ldr	r2, [pc, #220]	; (8006604 <TIM_Base_SetConfig+0x110>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d108      	bne.n	800653e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <TIM_Base_SetConfig+0x104>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01b      	beq.n	800657e <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d017      	beq.n	800657e <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <TIM_Base_SetConfig+0x108>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a29      	ldr	r2, [pc, #164]	; (8006600 <TIM_Base_SetConfig+0x10c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_Base_SetConfig+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a28      	ldr	r2, [pc, #160]	; (8006604 <TIM_Base_SetConfig+0x110>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_Base_SetConfig+0x8a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a27      	ldr	r2, [pc, #156]	; (8006608 <TIM_Base_SetConfig+0x114>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_Base_SetConfig+0x8a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a26      	ldr	r2, [pc, #152]	; (800660c <TIM_Base_SetConfig+0x118>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_Base_SetConfig+0x8a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a25      	ldr	r2, [pc, #148]	; (8006610 <TIM_Base_SetConfig+0x11c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <TIM_Base_SetConfig+0x104>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00f      	beq.n	80065dc <TIM_Base_SetConfig+0xe8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a11      	ldr	r2, [pc, #68]	; (8006604 <TIM_Base_SetConfig+0x110>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00b      	beq.n	80065dc <TIM_Base_SetConfig+0xe8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a10      	ldr	r2, [pc, #64]	; (8006608 <TIM_Base_SetConfig+0x114>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <TIM_Base_SetConfig+0xe8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a0f      	ldr	r2, [pc, #60]	; (800660c <TIM_Base_SetConfig+0x118>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_Base_SetConfig+0xe8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <TIM_Base_SetConfig+0x11c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d103      	bne.n	80065e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	615a      	str	r2, [r3, #20]
}
 80065ea:	bf00      	nop
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40013400 	.word	0x40013400
 8006608:	40014000 	.word	0x40014000
 800660c:	40014400 	.word	0x40014400
 8006610:	40014800 	.word	0x40014800

08006614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 0302 	bic.w	r3, r3, #2
 8006660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a2c      	ldr	r2, [pc, #176]	; (8006720 <TIM_OC1_SetConfig+0x10c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00f      	beq.n	8006694 <TIM_OC1_SetConfig+0x80>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a2b      	ldr	r2, [pc, #172]	; (8006724 <TIM_OC1_SetConfig+0x110>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00b      	beq.n	8006694 <TIM_OC1_SetConfig+0x80>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <TIM_OC1_SetConfig+0x114>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_OC1_SetConfig+0x80>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a29      	ldr	r2, [pc, #164]	; (800672c <TIM_OC1_SetConfig+0x118>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC1_SetConfig+0x80>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a28      	ldr	r2, [pc, #160]	; (8006730 <TIM_OC1_SetConfig+0x11c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d10c      	bne.n	80066ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0308 	bic.w	r3, r3, #8
 800669a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 0304 	bic.w	r3, r3, #4
 80066ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <TIM_OC1_SetConfig+0x10c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_OC1_SetConfig+0xc2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <TIM_OC1_SetConfig+0x110>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_OC1_SetConfig+0xc2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a19      	ldr	r2, [pc, #100]	; (8006728 <TIM_OC1_SetConfig+0x114>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_OC1_SetConfig+0xc2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a18      	ldr	r2, [pc, #96]	; (800672c <TIM_OC1_SetConfig+0x118>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_OC1_SetConfig+0xc2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <TIM_OC1_SetConfig+0x11c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d111      	bne.n	80066fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40013400 	.word	0x40013400
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f023 0210 	bic.w	r2, r3, #16
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 0320 	bic.w	r3, r3, #32
 8006782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a28      	ldr	r2, [pc, #160]	; (8006834 <TIM_OC2_SetConfig+0x100>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_OC2_SetConfig+0x6c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a27      	ldr	r2, [pc, #156]	; (8006838 <TIM_OC2_SetConfig+0x104>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10d      	bne.n	80067bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <TIM_OC2_SetConfig+0x100>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00f      	beq.n	80067e4 <TIM_OC2_SetConfig+0xb0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <TIM_OC2_SetConfig+0x104>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00b      	beq.n	80067e4 <TIM_OC2_SetConfig+0xb0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a1b      	ldr	r2, [pc, #108]	; (800683c <TIM_OC2_SetConfig+0x108>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_OC2_SetConfig+0xb0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <TIM_OC2_SetConfig+0x10c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_OC2_SetConfig+0xb0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a19      	ldr	r2, [pc, #100]	; (8006844 <TIM_OC2_SetConfig+0x110>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d113      	bne.n	800680c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40014000 	.word	0x40014000
 8006840:	40014400 	.word	0x40014400
 8006844:	40014800 	.word	0x40014800

08006848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a27      	ldr	r2, [pc, #156]	; (8006944 <TIM_OC3_SetConfig+0xfc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC3_SetConfig+0x6a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a26      	ldr	r2, [pc, #152]	; (8006948 <TIM_OC3_SetConfig+0x100>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10d      	bne.n	80068ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <TIM_OC3_SetConfig+0xfc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00f      	beq.n	80068f6 <TIM_OC3_SetConfig+0xae>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <TIM_OC3_SetConfig+0x100>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <TIM_OC3_SetConfig+0xae>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <TIM_OC3_SetConfig+0x104>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_OC3_SetConfig+0xae>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a19      	ldr	r2, [pc, #100]	; (8006950 <TIM_OC3_SetConfig+0x108>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_OC3_SetConfig+0xae>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <TIM_OC3_SetConfig+0x10c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d113      	bne.n	800691e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a28      	ldr	r2, [pc, #160]	; (8006a58 <TIM_OC4_SetConfig+0x100>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_OC4_SetConfig+0x6c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a27      	ldr	r2, [pc, #156]	; (8006a5c <TIM_OC4_SetConfig+0x104>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d10d      	bne.n	80069e0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	031b      	lsls	r3, r3, #12
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <TIM_OC4_SetConfig+0x100>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00f      	beq.n	8006a08 <TIM_OC4_SetConfig+0xb0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a1c      	ldr	r2, [pc, #112]	; (8006a5c <TIM_OC4_SetConfig+0x104>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00b      	beq.n	8006a08 <TIM_OC4_SetConfig+0xb0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <TIM_OC4_SetConfig+0x108>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <TIM_OC4_SetConfig+0xb0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1a      	ldr	r2, [pc, #104]	; (8006a64 <TIM_OC4_SetConfig+0x10c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_OC4_SetConfig+0xb0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <TIM_OC4_SetConfig+0x110>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d113      	bne.n	8006a30 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a16:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	019b      	lsls	r3, r3, #6
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	019b      	lsls	r3, r3, #6
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40013400 	.word	0x40013400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ab0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a17      	ldr	r2, [pc, #92]	; (8006b20 <TIM_OC5_SetConfig+0xb4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00f      	beq.n	8006ae6 <TIM_OC5_SetConfig+0x7a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <TIM_OC5_SetConfig+0xb8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00b      	beq.n	8006ae6 <TIM_OC5_SetConfig+0x7a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <TIM_OC5_SetConfig+0xbc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d007      	beq.n	8006ae6 <TIM_OC5_SetConfig+0x7a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <TIM_OC5_SetConfig+0xc0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d003      	beq.n	8006ae6 <TIM_OC5_SetConfig+0x7a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a13      	ldr	r2, [pc, #76]	; (8006b30 <TIM_OC5_SetConfig+0xc4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d109      	bne.n	8006afa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	621a      	str	r2, [r3, #32]
}
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40013400 	.word	0x40013400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40014400 	.word	0x40014400
 8006b30:	40014800 	.word	0x40014800

08006b34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	051b      	lsls	r3, r3, #20
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a18      	ldr	r2, [pc, #96]	; (8006bec <TIM_OC6_SetConfig+0xb8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00f      	beq.n	8006bb0 <TIM_OC6_SetConfig+0x7c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a17      	ldr	r2, [pc, #92]	; (8006bf0 <TIM_OC6_SetConfig+0xbc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_OC6_SetConfig+0x7c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <TIM_OC6_SetConfig+0xc0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_OC6_SetConfig+0x7c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <TIM_OC6_SetConfig+0xc4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC6_SetConfig+0x7c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <TIM_OC6_SetConfig+0xc8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d109      	bne.n	8006bc4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	029b      	lsls	r3, r3, #10
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40013400 	.word	0x40013400
 8006bf4:	40014000 	.word	0x40014000
 8006bf8:	40014400 	.word	0x40014400
 8006bfc:	40014800 	.word	0x40014800

08006c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 030a 	bic.w	r3, r3, #10
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0210 	bic.w	r2, r3, #16
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	031b      	lsls	r3, r3, #12
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f043 0307 	orr.w	r3, r3, #7
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	021a      	lsls	r2, r3, #8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	609a      	str	r2, [r3, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1a      	ldr	r2, [r3, #32]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e065      	b.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a2c      	ldr	r2, [pc, #176]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a2b      	ldr	r2, [pc, #172]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d108      	bne.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d018      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e12:	d013      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00e      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a12      	ldr	r2, [pc, #72]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d10c      	bne.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40013400 	.word	0x40013400
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40014000 	.word	0x40014000

08006e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e087      	b.n	8006fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a27      	ldr	r2, [pc, #156]	; (8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d106      	bne.n	8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d126      	bne.n	8006fa2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5e:	051b      	lsls	r3, r3, #20
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a0e      	ldr	r2, [pc, #56]	; (8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	; (8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d106      	bne.n	8006fa2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40013400 	.word	0x40013400

08006fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007064:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007068:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800708a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800708e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	b29b      	uxth	r3, r3
 800709c:	43db      	mvns	r3, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4013      	ands	r3, r2
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070b8:	b084      	sub	sp, #16
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	f107 0014 	add.w	r0, r7, #20
 80070c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	b004      	add	sp, #16
 80070f8:	4770      	bx	lr
	...

080070fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b09d      	sub	sp, #116	; 0x74
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800711e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007122:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	78db      	ldrb	r3, [r3, #3]
 800712a:	2b03      	cmp	r3, #3
 800712c:	d81f      	bhi.n	800716e <USB_ActivateEndpoint+0x72>
 800712e:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <USB_ActivateEndpoint+0x38>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007145 	.word	0x08007145
 8007138:	08007161 	.word	0x08007161
 800713c:	08007177 	.word	0x08007177
 8007140:	08007153 	.word	0x08007153
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007144:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800714c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007150:	e012      	b.n	8007178 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007152:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007156:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800715a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800715e:	e00b      	b.n	8007178 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007168:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800716c:	e004      	b.n	8007178 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007174:	e000      	b.n	8007178 <USB_ActivateEndpoint+0x7c>
      break;
 8007176:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	b21b      	sxth	r3, r3
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b2:	b21a      	sxth	r2, r3
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b21b      	sxth	r3, r3
 80071ba:	4313      	orrs	r3, r2
 80071bc:	b21b      	sxth	r3, r3
 80071be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	441a      	add	r2, r3
 80071cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80071d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	7b1b      	ldrb	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 8149 	bne.w	8007480 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8084 	beq.w	8007300 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007202:	b29b      	uxth	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	4413      	add	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	00da      	lsls	r2, r3, #3
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	88db      	ldrh	r3, [r3, #6]
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	b29b      	uxth	r3, r3
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	b29a      	uxth	r2, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	827b      	strh	r3, [r7, #18]
 800723a:	8a7b      	ldrh	r3, [r7, #18]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01b      	beq.n	800727c <USB_ActivateEndpoint+0x180>
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	823b      	strh	r3, [r7, #16]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	8a3b      	ldrh	r3, [r7, #16]
 8007268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007278:	b29b      	uxth	r3, r3
 800727a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	78db      	ldrb	r3, [r3, #3]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d020      	beq.n	80072c6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729a:	81bb      	strh	r3, [r7, #12]
 800729c:	89bb      	ldrh	r3, [r7, #12]
 800729e:	f083 0320 	eor.w	r3, r3, #32
 80072a2:	81bb      	strh	r3, [r7, #12]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	89bb      	ldrh	r3, [r7, #12]
 80072b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	8013      	strh	r3, [r2, #0]
 80072c4:	e2a6      	b.n	8007814 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072dc:	81fb      	strh	r3, [r7, #14]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	441a      	add	r2, r3
 80072e8:	89fb      	ldrh	r3, [r7, #14]
 80072ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	8013      	strh	r3, [r2, #0]
 80072fe:	e289      	b.n	8007814 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	633b      	str	r3, [r7, #48]	; 0x30
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	4413      	add	r3, r2
 8007312:	633b      	str	r3, [r7, #48]	; 0x30
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	00da      	lsls	r2, r3, #3
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	4413      	add	r3, r2
 800731e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	88db      	ldrh	r3, [r3, #6]
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	b29b      	uxth	r3, r3
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	4413      	add	r3, r2
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	00da      	lsls	r2, r3, #3
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	4413      	add	r3, r2
 8007352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b3e      	cmp	r3, #62	; 0x3e
 800735e:	d918      	bls.n	8007392 <USB_ActivateEndpoint+0x296>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	66bb      	str	r3, [r7, #104]	; 0x68
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 031f 	and.w	r3, r3, #31
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <USB_ActivateEndpoint+0x27e>
 8007374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007376:	3b01      	subs	r3, #1
 8007378:	66bb      	str	r3, [r7, #104]	; 0x68
 800737a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800737c:	b29b      	uxth	r3, r3
 800737e:	029b      	lsls	r3, r3, #10
 8007380:	b29b      	uxth	r3, r3
 8007382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738a:	b29a      	uxth	r2, r3
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	e029      	b.n	80073e6 <USB_ActivateEndpoint+0x2ea>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d112      	bne.n	80073c0 <USB_ActivateEndpoint+0x2c4>
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e012      	b.n	80073e6 <USB_ActivateEndpoint+0x2ea>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <USB_ActivateEndpoint+0x2de>
 80073d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d6:	3301      	adds	r3, #1
 80073d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073dc:	b29b      	uxth	r3, r3
 80073de:	029b      	lsls	r3, r3, #10
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80073f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01b      	beq.n	8007436 <USB_ActivateEndpoint+0x33a>
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007414:	843b      	strh	r3, [r7, #32]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	8c3b      	ldrh	r3, [r7, #32]
 8007422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800742a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800742e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744c:	83fb      	strh	r3, [r7, #30]
 800744e:	8bfb      	ldrh	r3, [r7, #30]
 8007450:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007454:	83fb      	strh	r3, [r7, #30]
 8007456:	8bfb      	ldrh	r3, [r7, #30]
 8007458:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800745c:	83fb      	strh	r3, [r7, #30]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	441a      	add	r2, r3
 8007468:	8bfb      	ldrh	r3, [r7, #30]
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]
 800747e:	e1c9      	b.n	8007814 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	78db      	ldrb	r3, [r3, #3]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d11e      	bne.n	80074c6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	441a      	add	r2, r3
 80074ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	8013      	strh	r3, [r2, #0]
 80074c4:	e01d      	b.n	8007502 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	441a      	add	r2, r3
 80074ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750c:	b29b      	uxth	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007512:	4413      	add	r3, r2
 8007514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	00da      	lsls	r2, r3, #3
 800751c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751e:	4413      	add	r3, r2
 8007520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007524:	65bb      	str	r3, [r7, #88]	; 0x58
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	891b      	ldrh	r3, [r3, #8]
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	b29b      	uxth	r3, r3
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	657b      	str	r3, [r7, #84]	; 0x54
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007546:	4413      	add	r3, r2
 8007548:	657b      	str	r3, [r7, #84]	; 0x54
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	00da      	lsls	r2, r3, #3
 8007550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007552:	4413      	add	r3, r2
 8007554:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007558:	653b      	str	r3, [r7, #80]	; 0x50
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	895b      	ldrh	r3, [r3, #10]
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	b29b      	uxth	r3, r3
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007568:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f040 8093 	bne.w	800769a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007584:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01b      	beq.n	80075c8 <USB_ActivateEndpoint+0x4cc>
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	441a      	add	r2, r3
 80075b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80075b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80075d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01b      	beq.n	8007618 <USB_ActivateEndpoint+0x51c>
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	441a      	add	r2, r3
 8007602:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800760c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007614:	b29b      	uxth	r3, r3
 8007616:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007630:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007632:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007636:	873b      	strh	r3, [r7, #56]	; 0x38
 8007638:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800763a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800763e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800764c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765c:	b29b      	uxth	r3, r3
 800765e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007676:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	b29b      	uxth	r3, r3
 8007696:	8013      	strh	r3, [r2, #0]
 8007698:	e0bc      	b.n	8007814 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80076aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d01d      	beq.n	80076f2 <USB_ActivateEndpoint+0x5f6>
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007702:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01d      	beq.n	800774a <USB_ActivateEndpoint+0x64e>
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007724:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	441a      	add	r2, r3
 8007732:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007746:	b29b      	uxth	r3, r3
 8007748:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	78db      	ldrb	r3, [r3, #3]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d024      	beq.n	800779c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007768:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800776c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007770:	f083 0320 	eor.w	r3, r3, #32
 8007774:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	441a      	add	r2, r3
 8007782:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
 800779a:	e01d      	b.n	80077d8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	441a      	add	r2, r3
 80077c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80077c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	441a      	add	r2, r3
 80077fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	b29b      	uxth	r3, r3
 8007812:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007814:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007818:	4618      	mov	r0, r3
 800781a:	3774      	adds	r7, #116	; 0x74
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007824:	b480      	push	{r7}
 8007826:	b08d      	sub	sp, #52	; 0x34
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	7b1b      	ldrb	r3, [r3, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 808e 	bne.w	8007954 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d044      	beq.n	80078ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	81bb      	strh	r3, [r7, #12]
 800784e:	89bb      	ldrh	r3, [r7, #12]
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01b      	beq.n	8007890 <USB_DeactivateEndpoint+0x6c>
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786e:	817b      	strh	r3, [r7, #10]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	441a      	add	r2, r3
 800787a:	897b      	ldrh	r3, [r7, #10]
 800787c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800788c:	b29b      	uxth	r3, r3
 800788e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a6:	813b      	strh	r3, [r7, #8]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	441a      	add	r2, r3
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	8013      	strh	r3, [r2, #0]
 80078c8:	e192      	b.n	8007bf0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	827b      	strh	r3, [r7, #18]
 80078d8:	8a7b      	ldrh	r3, [r7, #18]
 80078da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01b      	beq.n	800791a <USB_DeactivateEndpoint+0xf6>
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f8:	823b      	strh	r3, [r7, #16]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	8a3b      	ldrh	r3, [r7, #16]
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007930:	81fb      	strh	r3, [r7, #14]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	441a      	add	r2, r3
 800793c:	89fb      	ldrh	r3, [r7, #14]
 800793e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794e:	b29b      	uxth	r3, r3
 8007950:	8013      	strh	r3, [r2, #0]
 8007952:	e14d      	b.n	8007bf0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f040 80a5 	bne.w	8007aa8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	843b      	strh	r3, [r7, #32]
 800796c:	8c3b      	ldrh	r3, [r7, #32]
 800796e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01b      	beq.n	80079ae <USB_DeactivateEndpoint+0x18a>
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798c:	83fb      	strh	r3, [r7, #30]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	441a      	add	r2, r3
 8007998:	8bfb      	ldrh	r3, [r7, #30]
 800799a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	83bb      	strh	r3, [r7, #28]
 80079bc:	8bbb      	ldrh	r3, [r7, #28]
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01b      	beq.n	80079fe <USB_DeactivateEndpoint+0x1da>
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079dc:	837b      	strh	r3, [r7, #26]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8b7b      	ldrh	r3, [r7, #26]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a14:	833b      	strh	r3, [r7, #24]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	441a      	add	r2, r3
 8007a20:	8b3b      	ldrh	r3, [r7, #24]
 8007a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	82fb      	strh	r3, [r7, #22]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	8afb      	ldrh	r3, [r7, #22]
 8007a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a84:	82bb      	strh	r3, [r7, #20]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	8abb      	ldrh	r3, [r7, #20]
 8007a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	8013      	strh	r3, [r2, #0]
 8007aa6:	e0a3      	b.n	8007bf0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ab6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01b      	beq.n	8007af8 <USB_DeactivateEndpoint+0x2d4>
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	441a      	add	r2, r3
 8007ae2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007b06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01b      	beq.n	8007b48 <USB_DeactivateEndpoint+0x324>
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b26:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	441a      	add	r2, r3
 8007b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	847b      	strh	r3, [r7, #34]	; 0x22
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3734      	adds	r7, #52	; 0x34
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b0c2      	sub	sp, #264	; 0x108
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	6018      	str	r0, [r3, #0]
 8007c08:	463b      	mov	r3, r7
 8007c0a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	f040 8509 	bne.w	800862a <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c18:	463b      	mov	r3, r7
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	463b      	mov	r3, r7
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d905      	bls.n	8007c34 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007c28:	463b      	mov	r3, r7
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c32:	e004      	b.n	8007c3e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007c34:	463b      	mov	r3, r7
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c3e:	463b      	mov	r3, r7
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	7b1b      	ldrb	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d128      	bne.n	8007c9a <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c48:	463b      	mov	r3, r7
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6959      	ldr	r1, [r3, #20]
 8007c4e:	463b      	mov	r3, r7
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	88da      	ldrh	r2, [r3, #6]
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	1d38      	adds	r0, r7, #4
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f001 f9da 	bl	8009016 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c62:	1d3b      	adds	r3, r7, #4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	1d3b      	adds	r3, r7, #4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	4413      	add	r3, r2
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	00da      	lsls	r2, r3, #3
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	4413      	add	r3, r2
 8007c86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	801a      	strh	r2, [r3, #0]
 8007c96:	f000 bc9f 	b.w	80085d8 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	78db      	ldrb	r3, [r3, #3]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f040 8347 	bne.w	8008334 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6a1a      	ldr	r2, [r3, #32]
 8007cac:	463b      	mov	r3, r7
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	f240 82eb 	bls.w	800828e <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007cb8:	1d3b      	adds	r3, r7, #4
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007cd6:	1d3b      	adds	r3, r7, #4
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	463b      	mov	r3, r7
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	441a      	add	r2, r3
 8007ce4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a1a      	ldr	r2, [r3, #32]
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	463b      	mov	r3, r7
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d0e:	1d3b      	adds	r3, r7, #4
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	463b      	mov	r3, r7
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8159 	beq.w	8007fdc <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d2a:	1d3b      	adds	r3, r7, #4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d30:	463b      	mov	r3, r7
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	785b      	ldrb	r3, [r3, #1]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d164      	bne.n	8007e04 <USB_EPStartXfer+0x206>
 8007d3a:	1d3b      	adds	r3, r7, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	4413      	add	r3, r2
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d52:	463b      	mov	r3, r7
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	00da      	lsls	r2, r3, #3
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d68:	2b3e      	cmp	r3, #62	; 0x3e
 8007d6a:	d91c      	bls.n	8007da6 <USB_EPStartXfer+0x1a8>
 8007d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <USB_EPStartXfer+0x18e>
 8007d82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d86:	3b01      	subs	r3, #1
 8007d88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	029b      	lsls	r3, r3, #10
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	e04a      	b.n	8007e3c <USB_EPStartXfer+0x23e>
 8007da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d112      	bne.n	8007dd4 <USB_EPStartXfer+0x1d6>
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	e033      	b.n	8007e3c <USB_EPStartXfer+0x23e>
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <USB_EPStartXfer+0x1f6>
 8007dea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dee:	3301      	adds	r3, #1
 8007df0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007df4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	029b      	lsls	r3, r3, #10
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e01b      	b.n	8007e3c <USB_EPStartXfer+0x23e>
 8007e04:	463b      	mov	r3, r7
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	785b      	ldrb	r3, [r3, #1]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d116      	bne.n	8007e3c <USB_EPStartXfer+0x23e>
 8007e0e:	1d3b      	adds	r3, r7, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	4413      	add	r3, r2
 8007e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e20:	463b      	mov	r3, r7
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	00da      	lsls	r2, r3, #3
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	895b      	ldrh	r3, [r3, #10]
 8007e42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e46:	463b      	mov	r3, r7
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6959      	ldr	r1, [r3, #20]
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e56:	1d38      	adds	r0, r7, #4
 8007e58:	6800      	ldr	r0, [r0, #0]
 8007e5a:	f001 f8dc 	bl	8009016 <USB_WritePMA>
            ep->xfer_buff += len;
 8007e5e:	463b      	mov	r3, r7
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695a      	ldr	r2, [r3, #20]
 8007e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e68:	441a      	add	r2, r3
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e70:	463b      	mov	r3, r7
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a1a      	ldr	r2, [r3, #32]
 8007e76:	463b      	mov	r3, r7
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d909      	bls.n	8007e94 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007e80:	463b      	mov	r3, r7
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	621a      	str	r2, [r3, #32]
 8007e92:	e008      	b.n	8007ea6 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e94:	463b      	mov	r3, r7
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d164      	bne.n	8007f7a <USB_EPStartXfer+0x37c>
 8007eb0:	1d3b      	adds	r3, r7, #4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	1d3b      	adds	r3, r7, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
 8007ec8:	463b      	mov	r3, r7
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	00da      	lsls	r2, r3, #3
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ede:	2b3e      	cmp	r3, #62	; 0x3e
 8007ee0:	d91c      	bls.n	8007f1c <USB_EPStartXfer+0x31e>
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef0:	f003 031f 	and.w	r3, r3, #31
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <USB_EPStartXfer+0x304>
 8007ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efc:	3b01      	subs	r3, #1
 8007efe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	029b      	lsls	r3, r3, #10
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	801a      	strh	r2, [r3, #0]
 8007f1a:	e04d      	b.n	8007fb8 <USB_EPStartXfer+0x3ba>
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d112      	bne.n	8007f4a <USB_EPStartXfer+0x34c>
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	801a      	strh	r2, [r3, #0]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	e036      	b.n	8007fb8 <USB_EPStartXfer+0x3ba>
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <USB_EPStartXfer+0x36c>
 8007f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f64:	3301      	adds	r3, #1
 8007f66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	029b      	lsls	r3, r3, #10
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	e01e      	b.n	8007fb8 <USB_EPStartXfer+0x3ba>
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d119      	bne.n	8007fb8 <USB_EPStartXfer+0x3ba>
 8007f84:	1d3b      	adds	r3, r7, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	623b      	str	r3, [r7, #32]
 8007f8a:	1d3b      	adds	r3, r7, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	4413      	add	r3, r2
 8007f9a:	623b      	str	r3, [r7, #32]
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	00da      	lsls	r2, r3, #3
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fb8:	463b      	mov	r3, r7
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	891b      	ldrh	r3, [r3, #8]
 8007fbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6959      	ldr	r1, [r3, #20]
 8007fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fd2:	1d38      	adds	r0, r7, #4
 8007fd4:	6800      	ldr	r0, [r0, #0]
 8007fd6:	f001 f81e 	bl	8009016 <USB_WritePMA>
 8007fda:	e2fd      	b.n	80085d8 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fdc:	463b      	mov	r3, r7
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	785b      	ldrb	r3, [r3, #1]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d164      	bne.n	80080b0 <USB_EPStartXfer+0x4b2>
 8007fe6:	1d3b      	adds	r3, r7, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fec:	1d3b      	adds	r3, r7, #4
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ffa:	4413      	add	r3, r2
 8007ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ffe:	463b      	mov	r3, r7
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	00da      	lsls	r2, r3, #3
 8008006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008008:	4413      	add	r3, r2
 800800a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800800e:	647b      	str	r3, [r7, #68]	; 0x44
 8008010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008014:	2b3e      	cmp	r3, #62	; 0x3e
 8008016:	d91c      	bls.n	8008052 <USB_EPStartXfer+0x454>
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2b00      	cmp	r3, #0
 800802c:	d104      	bne.n	8008038 <USB_EPStartXfer+0x43a>
 800802e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008032:	3b01      	subs	r3, #1
 8008034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008038:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800803c:	b29b      	uxth	r3, r3
 800803e:	029b      	lsls	r3, r3, #10
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804a:	b29a      	uxth	r2, r3
 800804c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e04d      	b.n	80080ee <USB_EPStartXfer+0x4f0>
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	2b00      	cmp	r3, #0
 8008058:	d112      	bne.n	8008080 <USB_EPStartXfer+0x482>
 800805a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008064:	b29a      	uxth	r2, r3
 8008066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008078:	b29a      	uxth	r2, r3
 800807a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	e036      	b.n	80080ee <USB_EPStartXfer+0x4f0>
 8008080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800808a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d004      	beq.n	80080a0 <USB_EPStartXfer+0x4a2>
 8008096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800809a:	3301      	adds	r3, #1
 800809c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	029b      	lsls	r3, r3, #10
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	e01e      	b.n	80080ee <USB_EPStartXfer+0x4f0>
 80080b0:	463b      	mov	r3, r7
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d119      	bne.n	80080ee <USB_EPStartXfer+0x4f0>
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	653b      	str	r3, [r7, #80]	; 0x50
 80080c0:	1d3b      	adds	r3, r7, #4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ce:	4413      	add	r3, r2
 80080d0:	653b      	str	r3, [r7, #80]	; 0x50
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	00da      	lsls	r2, r3, #3
 80080da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080dc:	4413      	add	r3, r2
 80080de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080ee:	463b      	mov	r3, r7
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	891b      	ldrh	r3, [r3, #8]
 80080f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080f8:	463b      	mov	r3, r7
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6959      	ldr	r1, [r3, #20]
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008102:	b29b      	uxth	r3, r3
 8008104:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008108:	1d38      	adds	r0, r7, #4
 800810a:	6800      	ldr	r0, [r0, #0]
 800810c:	f000 ff83 	bl	8009016 <USB_WritePMA>
            ep->xfer_buff += len;
 8008110:	463b      	mov	r3, r7
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695a      	ldr	r2, [r3, #20]
 8008116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811a:	441a      	add	r2, r3
 800811c:	463b      	mov	r3, r7
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008122:	463b      	mov	r3, r7
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	463b      	mov	r3, r7
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d909      	bls.n	8008146 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8008132:	463b      	mov	r3, r7
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a1a      	ldr	r2, [r3, #32]
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813c:	1ad2      	subs	r2, r2, r3
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	621a      	str	r2, [r3, #32]
 8008144:	e008      	b.n	8008158 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008146:	463b      	mov	r3, r7
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008150:	463b      	mov	r3, r7
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2200      	movs	r2, #0
 8008156:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008158:	1d3b      	adds	r3, r7, #4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	643b      	str	r3, [r7, #64]	; 0x40
 800815e:	463b      	mov	r3, r7
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d164      	bne.n	8008232 <USB_EPStartXfer+0x634>
 8008168:	1d3b      	adds	r3, r7, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	63bb      	str	r3, [r7, #56]	; 0x38
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	4413      	add	r3, r2
 800817e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008180:	463b      	mov	r3, r7
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	00da      	lsls	r2, r3, #3
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	4413      	add	r3, r2
 800818c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008190:	637b      	str	r3, [r7, #52]	; 0x34
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008196:	2b3e      	cmp	r3, #62	; 0x3e
 8008198:	d91c      	bls.n	80081d4 <USB_EPStartXfer+0x5d6>
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a8:	f003 031f 	and.w	r3, r3, #31
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <USB_EPStartXfer+0x5bc>
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b4:	3b01      	subs	r3, #1
 80081b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081be:	b29b      	uxth	r3, r3
 80081c0:	029b      	lsls	r3, r3, #10
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d0:	801a      	strh	r2, [r3, #0]
 80081d2:	e04a      	b.n	800826a <USB_EPStartXfer+0x66c>
 80081d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d112      	bne.n	8008202 <USB_EPStartXfer+0x604>
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ea:	801a      	strh	r2, [r3, #0]
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	e033      	b.n	800826a <USB_EPStartXfer+0x66c>
 8008202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800820c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <USB_EPStartXfer+0x624>
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	3301      	adds	r3, #1
 800821e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008226:	b29b      	uxth	r3, r3
 8008228:	029b      	lsls	r3, r3, #10
 800822a:	b29a      	uxth	r2, r3
 800822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	e01b      	b.n	800826a <USB_EPStartXfer+0x66c>
 8008232:	463b      	mov	r3, r7
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d116      	bne.n	800826a <USB_EPStartXfer+0x66c>
 800823c:	1d3b      	adds	r3, r7, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008244:	b29b      	uxth	r3, r3
 8008246:	461a      	mov	r2, r3
 8008248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824a:	4413      	add	r3, r2
 800824c:	643b      	str	r3, [r7, #64]	; 0x40
 800824e:	463b      	mov	r3, r7
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	00da      	lsls	r2, r3, #3
 8008256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008258:	4413      	add	r3, r2
 800825a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008264:	b29a      	uxth	r2, r3
 8008266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008268:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800826a:	463b      	mov	r3, r7
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	895b      	ldrh	r3, [r3, #10]
 8008270:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008274:	463b      	mov	r3, r7
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6959      	ldr	r1, [r3, #20]
 800827a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827e:	b29b      	uxth	r3, r3
 8008280:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008284:	1d38      	adds	r0, r7, #4
 8008286:	6800      	ldr	r0, [r0, #0]
 8008288:	f000 fec5 	bl	8009016 <USB_WritePMA>
 800828c:	e1a4      	b.n	80085d8 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800828e:	463b      	mov	r3, r7
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008298:	1d3b      	adds	r3, r7, #4
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	463b      	mov	r3, r7
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80082ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80082b6:	1d3b      	adds	r3, r7, #4
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	463b      	mov	r3, r7
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	441a      	add	r2, r3
 80082c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80082c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d8:	b29b      	uxth	r3, r3
 80082da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082dc:	1d3b      	adds	r3, r7, #4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082f0:	4413      	add	r3, r2
 80082f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082f4:	463b      	mov	r3, r7
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	00da      	lsls	r2, r3, #3
 80082fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fe:	4413      	add	r3, r2
 8008300:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008304:	65bb      	str	r3, [r7, #88]	; 0x58
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830a:	b29a      	uxth	r2, r3
 800830c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008310:	463b      	mov	r3, r7
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	891b      	ldrh	r3, [r3, #8]
 8008316:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800831a:	463b      	mov	r3, r7
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6959      	ldr	r1, [r3, #20]
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008324:	b29b      	uxth	r3, r3
 8008326:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800832a:	1d38      	adds	r0, r7, #4
 800832c:	6800      	ldr	r0, [r0, #0]
 800832e:	f000 fe72 	bl	8009016 <USB_WritePMA>
 8008332:	e151      	b.n	80085d8 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008334:	463b      	mov	r3, r7
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6a1a      	ldr	r2, [r3, #32]
 800833a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	463b      	mov	r3, r7
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	463b      	mov	r3, r7
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 809b 	beq.w	8008498 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008362:	1d3b      	adds	r3, r7, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	673b      	str	r3, [r7, #112]	; 0x70
 8008368:	463b      	mov	r3, r7
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d164      	bne.n	800843c <USB_EPStartXfer+0x83e>
 8008372:	1d3b      	adds	r3, r7, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	66bb      	str	r3, [r7, #104]	; 0x68
 8008378:	1d3b      	adds	r3, r7, #4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008380:	b29b      	uxth	r3, r3
 8008382:	461a      	mov	r2, r3
 8008384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008386:	4413      	add	r3, r2
 8008388:	66bb      	str	r3, [r7, #104]	; 0x68
 800838a:	463b      	mov	r3, r7
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	00da      	lsls	r2, r3, #3
 8008392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008394:	4413      	add	r3, r2
 8008396:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800839a:	667b      	str	r3, [r7, #100]	; 0x64
 800839c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a0:	2b3e      	cmp	r3, #62	; 0x3e
 80083a2:	d91c      	bls.n	80083de <USB_EPStartXfer+0x7e0>
 80083a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b2:	f003 031f 	and.w	r3, r3, #31
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d104      	bne.n	80083c4 <USB_EPStartXfer+0x7c6>
 80083ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083be:	3b01      	subs	r3, #1
 80083c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	029b      	lsls	r3, r3, #10
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	e04a      	b.n	8008474 <USB_EPStartXfer+0x876>
 80083de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d112      	bne.n	800840c <USB_EPStartXfer+0x80e>
 80083e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f4:	801a      	strh	r2, [r3, #0]
 80083f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008404:	b29a      	uxth	r2, r3
 8008406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	e033      	b.n	8008474 <USB_EPStartXfer+0x876>
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <USB_EPStartXfer+0x82e>
 8008422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008426:	3301      	adds	r3, #1
 8008428:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800842c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008430:	b29b      	uxth	r3, r3
 8008432:	029b      	lsls	r3, r3, #10
 8008434:	b29a      	uxth	r2, r3
 8008436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	e01b      	b.n	8008474 <USB_EPStartXfer+0x876>
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d116      	bne.n	8008474 <USB_EPStartXfer+0x876>
 8008446:	1d3b      	adds	r3, r7, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800844e:	b29b      	uxth	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008454:	4413      	add	r3, r2
 8008456:	673b      	str	r3, [r7, #112]	; 0x70
 8008458:	463b      	mov	r3, r7
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	00da      	lsls	r2, r3, #3
 8008460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008462:	4413      	add	r3, r2
 8008464:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800846a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846e:	b29a      	uxth	r2, r3
 8008470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008472:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008474:	463b      	mov	r3, r7
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	895b      	ldrh	r3, [r3, #10]
 800847a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800847e:	463b      	mov	r3, r7
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6959      	ldr	r1, [r3, #20]
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008488:	b29b      	uxth	r3, r3
 800848a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800848e:	1d38      	adds	r0, r7, #4
 8008490:	6800      	ldr	r0, [r0, #0]
 8008492:	f000 fdc0 	bl	8009016 <USB_WritePMA>
 8008496:	e09f      	b.n	80085d8 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008498:	463b      	mov	r3, r7
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d164      	bne.n	800856c <USB_EPStartXfer+0x96e>
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084a8:	1d3b      	adds	r3, r7, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084b6:	4413      	add	r3, r2
 80084b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084ba:	463b      	mov	r3, r7
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	00da      	lsls	r2, r3, #3
 80084c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084c4:	4413      	add	r3, r2
 80084c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80084cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d0:	2b3e      	cmp	r3, #62	; 0x3e
 80084d2:	d91c      	bls.n	800850e <USB_EPStartXfer+0x910>
 80084d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e2:	f003 031f 	and.w	r3, r3, #31
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <USB_EPStartXfer+0x8f6>
 80084ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084ee:	3b01      	subs	r3, #1
 80084f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	029b      	lsls	r3, r3, #10
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008506:	b29a      	uxth	r2, r3
 8008508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	e053      	b.n	80085b6 <USB_EPStartXfer+0x9b8>
 800850e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008512:	2b00      	cmp	r3, #0
 8008514:	d112      	bne.n	800853c <USB_EPStartXfer+0x93e>
 8008516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008520:	b29a      	uxth	r2, r3
 8008522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008524:	801a      	strh	r2, [r3, #0]
 8008526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008534:	b29a      	uxth	r2, r3
 8008536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	e03c      	b.n	80085b6 <USB_EPStartXfer+0x9b8>
 800853c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008540:	085b      	lsrs	r3, r3, #1
 8008542:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <USB_EPStartXfer+0x95e>
 8008552:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008556:	3301      	adds	r3, #1
 8008558:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800855c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008560:	b29b      	uxth	r3, r3
 8008562:	029b      	lsls	r3, r3, #10
 8008564:	b29a      	uxth	r2, r3
 8008566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	e024      	b.n	80085b6 <USB_EPStartXfer+0x9b8>
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d11f      	bne.n	80085b6 <USB_EPStartXfer+0x9b8>
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008586:	b29b      	uxth	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800858e:	4413      	add	r3, r2
 8008590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008594:	463b      	mov	r3, r7
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	00da      	lsls	r2, r3, #3
 800859c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085a0:	4413      	add	r3, r2
 80085a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80085b6:	463b      	mov	r3, r7
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	891b      	ldrh	r3, [r3, #8]
 80085bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6959      	ldr	r1, [r3, #20]
 80085c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085d0:	1d38      	adds	r0, r7, #4
 80085d2:	6800      	ldr	r0, [r0, #0]
 80085d4:	f000 fd1f 	bl	8009016 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80085d8:	1d3b      	adds	r3, r7, #4
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	463b      	mov	r3, r7
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f2:	817b      	strh	r3, [r7, #10]
 80085f4:	897b      	ldrh	r3, [r7, #10]
 80085f6:	f083 0310 	eor.w	r3, r3, #16
 80085fa:	817b      	strh	r3, [r7, #10]
 80085fc:	897b      	ldrh	r3, [r7, #10]
 80085fe:	f083 0320 	eor.w	r3, r3, #32
 8008602:	817b      	strh	r3, [r7, #10]
 8008604:	1d3b      	adds	r3, r7, #4
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	463b      	mov	r3, r7
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	441a      	add	r2, r3
 8008612:	897b      	ldrh	r3, [r7, #10]
 8008614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008624:	b29b      	uxth	r3, r3
 8008626:	8013      	strh	r3, [r2, #0]
 8008628:	e3b5      	b.n	8008d96 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800862a:	463b      	mov	r3, r7
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	7b1b      	ldrb	r3, [r3, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 8090 	bne.w	8008756 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008636:	463b      	mov	r3, r7
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	463b      	mov	r3, r7
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	429a      	cmp	r2, r3
 8008644:	d90e      	bls.n	8008664 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8008646:	463b      	mov	r3, r7
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008650:	463b      	mov	r3, r7
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	619a      	str	r2, [r3, #24]
 8008662:	e008      	b.n	8008676 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8008664:	463b      	mov	r3, r7
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800866e:	463b      	mov	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800867e:	1d3b      	adds	r3, r7, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800868e:	4413      	add	r3, r2
 8008690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008694:	463b      	mov	r3, r7
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	00da      	lsls	r2, r3, #3
 800869c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086a0:	4413      	add	r3, r2
 80086a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ae:	2b3e      	cmp	r3, #62	; 0x3e
 80086b0:	d91d      	bls.n	80086ee <USB_EPStartXfer+0xaf0>
 80086b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b6:	095b      	lsrs	r3, r3, #5
 80086b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c0:	f003 031f 	and.w	r3, r3, #31
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <USB_EPStartXfer+0xad4>
 80086c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086cc:	3b01      	subs	r3, #1
 80086ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	029b      	lsls	r3, r3, #10
 80086da:	b29b      	uxth	r3, r3
 80086dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e325      	b.n	8008d3a <USB_EPStartXfer+0x113c>
 80086ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d116      	bne.n	8008724 <USB_EPStartXfer+0xb26>
 80086f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008708:	801a      	strh	r2, [r3, #0]
 800870a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800871a:	b29a      	uxth	r2, r3
 800871c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008720:	801a      	strh	r2, [r3, #0]
 8008722:	e30a      	b.n	8008d3a <USB_EPStartXfer+0x113c>
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800872e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <USB_EPStartXfer+0xb46>
 800873a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800873e:	3301      	adds	r3, #1
 8008740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008748:	b29b      	uxth	r3, r3
 800874a:	029b      	lsls	r3, r3, #10
 800874c:	b29a      	uxth	r2, r3
 800874e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	e2f1      	b.n	8008d3a <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008756:	463b      	mov	r3, r7
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	78db      	ldrb	r3, [r3, #3]
 800875c:	2b02      	cmp	r3, #2
 800875e:	f040 818f 	bne.w	8008a80 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008762:	463b      	mov	r3, r7
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d175      	bne.n	8008858 <USB_EPStartXfer+0xc5a>
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008774:	1d3b      	adds	r3, r7, #4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008784:	4413      	add	r3, r2
 8008786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800878a:	463b      	mov	r3, r7
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	00da      	lsls	r2, r3, #3
 8008792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008796:	4413      	add	r3, r2
 8008798:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800879c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087a0:	463b      	mov	r3, r7
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	2b3e      	cmp	r3, #62	; 0x3e
 80087a8:	d91f      	bls.n	80087ea <USB_EPStartXfer+0xbec>
 80087aa:	463b      	mov	r3, r7
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	095b      	lsrs	r3, r3, #5
 80087b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087b6:	463b      	mov	r3, r7
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f003 031f 	and.w	r3, r3, #31
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d104      	bne.n	80087ce <USB_EPStartXfer+0xbd0>
 80087c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c8:	3b01      	subs	r3, #1
 80087ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	029b      	lsls	r3, r3, #10
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	e05c      	b.n	80088a4 <USB_EPStartXfer+0xca6>
 80087ea:	463b      	mov	r3, r7
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d116      	bne.n	8008822 <USB_EPStartXfer+0xc24>
 80087f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008800:	b29a      	uxth	r2, r3
 8008802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008818:	b29a      	uxth	r2, r3
 800881a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800881e:	801a      	strh	r2, [r3, #0]
 8008820:	e040      	b.n	80088a4 <USB_EPStartXfer+0xca6>
 8008822:	463b      	mov	r3, r7
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800882e:	463b      	mov	r3, r7
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d004      	beq.n	8008846 <USB_EPStartXfer+0xc48>
 800883c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008840:	3301      	adds	r3, #1
 8008842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884a:	b29b      	uxth	r3, r3
 800884c:	029b      	lsls	r3, r3, #10
 800884e:	b29a      	uxth	r2, r3
 8008850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	e025      	b.n	80088a4 <USB_EPStartXfer+0xca6>
 8008858:	463b      	mov	r3, r7
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d120      	bne.n	80088a4 <USB_EPStartXfer+0xca6>
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800886a:	1d3b      	adds	r3, r7, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008872:	b29b      	uxth	r3, r3
 8008874:	461a      	mov	r2, r3
 8008876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800887a:	4413      	add	r3, r2
 800887c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008880:	463b      	mov	r3, r7
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	00da      	lsls	r2, r3, #3
 8008888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800888c:	4413      	add	r3, r2
 800888e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008892:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008896:	463b      	mov	r3, r7
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	b29a      	uxth	r2, r3
 800889e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088a2:	801a      	strh	r2, [r3, #0]
 80088a4:	1d3b      	adds	r3, r7, #4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088ac:	463b      	mov	r3, r7
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d175      	bne.n	80089a2 <USB_EPStartXfer+0xda4>
 80088b6:	1d3b      	adds	r3, r7, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088be:	1d3b      	adds	r3, r7, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ce:	4413      	add	r3, r2
 80088d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088d4:	463b      	mov	r3, r7
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	00da      	lsls	r2, r3, #3
 80088dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e0:	4413      	add	r3, r2
 80088e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088ea:	463b      	mov	r3, r7
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	2b3e      	cmp	r3, #62	; 0x3e
 80088f2:	d91f      	bls.n	8008934 <USB_EPStartXfer+0xd36>
 80088f4:	463b      	mov	r3, r7
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	095b      	lsrs	r3, r3, #5
 80088fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008900:	463b      	mov	r3, r7
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 031f 	and.w	r3, r3, #31
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <USB_EPStartXfer+0xd1a>
 800890e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008912:	3b01      	subs	r3, #1
 8008914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800891c:	b29b      	uxth	r3, r3
 800891e:	029b      	lsls	r3, r3, #10
 8008920:	b29b      	uxth	r3, r3
 8008922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800892a:	b29a      	uxth	r2, r3
 800892c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	e058      	b.n	80089e6 <USB_EPStartXfer+0xde8>
 8008934:	463b      	mov	r3, r7
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d116      	bne.n	800896c <USB_EPStartXfer+0xd6e>
 800893e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800894a:	b29a      	uxth	r2, r3
 800894c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008962:	b29a      	uxth	r2, r3
 8008964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	e03c      	b.n	80089e6 <USB_EPStartXfer+0xde8>
 800896c:	463b      	mov	r3, r7
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	085b      	lsrs	r3, r3, #1
 8008974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008978:	463b      	mov	r3, r7
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d004      	beq.n	8008990 <USB_EPStartXfer+0xd92>
 8008986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800898a:	3301      	adds	r3, #1
 800898c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008994:	b29b      	uxth	r3, r3
 8008996:	029b      	lsls	r3, r3, #10
 8008998:	b29a      	uxth	r2, r3
 800899a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800899e:	801a      	strh	r2, [r3, #0]
 80089a0:	e021      	b.n	80089e6 <USB_EPStartXfer+0xde8>
 80089a2:	463b      	mov	r3, r7
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d11c      	bne.n	80089e6 <USB_EPStartXfer+0xde8>
 80089ac:	1d3b      	adds	r3, r7, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	461a      	mov	r2, r3
 80089b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089bc:	4413      	add	r3, r2
 80089be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089c2:	463b      	mov	r3, r7
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	00da      	lsls	r2, r3, #3
 80089ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089ce:	4413      	add	r3, r2
 80089d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089d8:	463b      	mov	r3, r7
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	b29a      	uxth	r2, r3
 80089e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089e4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089e6:	463b      	mov	r3, r7
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 81a4 	beq.w	8008d3a <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089f2:	1d3b      	adds	r3, r7, #4
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	463b      	mov	r3, r7
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <USB_EPStartXfer+0xe20>
 8008a12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10d      	bne.n	8008a3a <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f040 8187 	bne.w	8008d3a <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f040 8180 	bne.w	8008d3a <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	463b      	mov	r3, r7
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a54:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a58:	1d3b      	adds	r3, r7, #4
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	463b      	mov	r3, r7
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	441a      	add	r2, r3
 8008a66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	8013      	strh	r3, [r2, #0]
 8008a7e:	e15c      	b.n	8008d3a <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a80:	463b      	mov	r3, r7
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	78db      	ldrb	r3, [r3, #3]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	f040 8155 	bne.w	8008d36 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	463b      	mov	r3, r7
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d90e      	bls.n	8008aba <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008a9c:	463b      	mov	r3, r7
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	699a      	ldr	r2, [r3, #24]
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab0:	1ad2      	subs	r2, r2, r3
 8008ab2:	463b      	mov	r3, r7
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	619a      	str	r2, [r3, #24]
 8008ab8:	e008      	b.n	8008acc <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8008aba:	463b      	mov	r3, r7
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008acc:	463b      	mov	r3, r7
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d16f      	bne.n	8008bb6 <USB_EPStartXfer+0xfb8>
 8008ad6:	1d3b      	adds	r3, r7, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ade:	1d3b      	adds	r3, r7, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	461a      	mov	r2, r3
 8008aea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008aee:	4413      	add	r3, r2
 8008af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008af4:	463b      	mov	r3, r7
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	00da      	lsls	r2, r3, #3
 8008afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b00:	4413      	add	r3, r2
 8008b02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b10:	d91d      	bls.n	8008b4e <USB_EPStartXfer+0xf50>
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b20:	f003 031f 	and.w	r3, r3, #31
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <USB_EPStartXfer+0xf34>
 8008b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	029b      	lsls	r3, r3, #10
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b4a:	801a      	strh	r2, [r3, #0]
 8008b4c:	e058      	b.n	8008c00 <USB_EPStartXfer+0x1002>
 8008b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d116      	bne.n	8008b84 <USB_EPStartXfer+0xf86>
 8008b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b68:	801a      	strh	r2, [r3, #0]
 8008b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b80:	801a      	strh	r2, [r3, #0]
 8008b82:	e03d      	b.n	8008c00 <USB_EPStartXfer+0x1002>
 8008b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <USB_EPStartXfer+0xfa6>
 8008b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	029b      	lsls	r3, r3, #10
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bb2:	801a      	strh	r2, [r3, #0]
 8008bb4:	e024      	b.n	8008c00 <USB_EPStartXfer+0x1002>
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	785b      	ldrb	r3, [r3, #1]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d11f      	bne.n	8008c00 <USB_EPStartXfer+0x1002>
 8008bc0:	1d3b      	adds	r3, r7, #4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bc8:	1d3b      	adds	r3, r7, #4
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bd8:	4413      	add	r3, r2
 8008bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bde:	463b      	mov	r3, r7
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	00da      	lsls	r2, r3, #3
 8008be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bea:	4413      	add	r3, r2
 8008bec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	1d3b      	adds	r3, r7, #4
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c08:	463b      	mov	r3, r7
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d16f      	bne.n	8008cf2 <USB_EPStartXfer+0x10f4>
 8008c12:	1d3b      	adds	r3, r7, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c1a:	1d3b      	adds	r3, r7, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c30:	463b      	mov	r3, r7
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	00da      	lsls	r2, r3, #3
 8008c38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c4c:	d91d      	bls.n	8008c8a <USB_EPStartXfer+0x108c>
 8008c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5c:	f003 031f 	and.w	r3, r3, #31
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <USB_EPStartXfer+0x1070>
 8008c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	029b      	lsls	r3, r3, #10
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c86:	801a      	strh	r2, [r3, #0]
 8008c88:	e057      	b.n	8008d3a <USB_EPStartXfer+0x113c>
 8008c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d116      	bne.n	8008cc0 <USB_EPStartXfer+0x10c2>
 8008c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cbc:	801a      	strh	r2, [r3, #0]
 8008cbe:	e03c      	b.n	8008d3a <USB_EPStartXfer+0x113c>
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc4:	085b      	lsrs	r3, r3, #1
 8008cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d004      	beq.n	8008ce0 <USB_EPStartXfer+0x10e2>
 8008cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cda:	3301      	adds	r3, #1
 8008cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	029b      	lsls	r3, r3, #10
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cee:	801a      	strh	r2, [r3, #0]
 8008cf0:	e023      	b.n	8008d3a <USB_EPStartXfer+0x113c>
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d11e      	bne.n	8008d3a <USB_EPStartXfer+0x113c>
 8008cfc:	1d3b      	adds	r3, r7, #4
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d12:	463b      	mov	r3, r7
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	00da      	lsls	r2, r3, #3
 8008d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d1e:	4413      	add	r3, r2
 8008d20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d32:	801a      	strh	r2, [r3, #0]
 8008d34:	e001      	b.n	8008d3a <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e02e      	b.n	8008d98 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d3a:	1d3b      	adds	r3, r7, #4
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	463b      	mov	r3, r7
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d70:	1d3b      	adds	r3, r7, #4
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	463b      	mov	r3, r7
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	441a      	add	r2, r3
 8008d7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d020      	beq.n	8008df6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dca:	81bb      	strh	r3, [r7, #12]
 8008dcc:	89bb      	ldrh	r3, [r7, #12]
 8008dce:	f083 0310 	eor.w	r3, r3, #16
 8008dd2:	81bb      	strh	r3, [r7, #12]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	441a      	add	r2, r3
 8008dde:	89bb      	ldrh	r3, [r7, #12]
 8008de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	8013      	strh	r3, [r2, #0]
 8008df4:	e01f      	b.n	8008e36 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0c:	81fb      	strh	r3, [r7, #14]
 8008e0e:	89fb      	ldrh	r3, [r7, #14]
 8008e10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e14:	81fb      	strh	r3, [r7, #14]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	441a      	add	r2, r3
 8008e20:	89fb      	ldrh	r3, [r7, #14]
 8008e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	7b1b      	ldrb	r3, [r3, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f040 809d 	bne.w	8008f92 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	785b      	ldrb	r3, [r3, #1]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d04c      	beq.n	8008efa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	823b      	strh	r3, [r7, #16]
 8008e6e:	8a3b      	ldrh	r3, [r7, #16]
 8008e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01b      	beq.n	8008eb0 <USB_EPClearStall+0x6c>
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8e:	81fb      	strh	r3, [r7, #14]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	441a      	add	r2, r3
 8008e9a:	89fb      	ldrh	r3, [r7, #14]
 8008e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	78db      	ldrb	r3, [r3, #3]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d06c      	beq.n	8008f92 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ece:	81bb      	strh	r3, [r7, #12]
 8008ed0:	89bb      	ldrh	r3, [r7, #12]
 8008ed2:	f083 0320 	eor.w	r3, r3, #32
 8008ed6:	81bb      	strh	r3, [r7, #12]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	441a      	add	r2, r3
 8008ee2:	89bb      	ldrh	r3, [r7, #12]
 8008ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	8013      	strh	r3, [r2, #0]
 8008ef8:	e04b      	b.n	8008f92 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	82fb      	strh	r3, [r7, #22]
 8008f08:	8afb      	ldrh	r3, [r7, #22]
 8008f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01b      	beq.n	8008f4a <USB_EPClearStall+0x106>
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f28:	82bb      	strh	r3, [r7, #20]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	441a      	add	r2, r3
 8008f34:	8abb      	ldrh	r3, [r7, #20]
 8008f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f60:	827b      	strh	r3, [r7, #18]
 8008f62:	8a7b      	ldrh	r3, [r7, #18]
 8008f64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f68:	827b      	strh	r3, [r7, #18]
 8008f6a:	8a7b      	ldrh	r3, [r7, #18]
 8008f6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f70:	827b      	strh	r3, [r7, #18]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	441a      	add	r2, r3
 8008f7c:	8a7b      	ldrh	r3, [r7, #18]
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d103      	bne.n	8008fba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2280      	movs	r2, #128	; 0x80
 8008fb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009004:	b29b      	uxth	r3, r3
 8009006:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009008:	68fb      	ldr	r3, [r7, #12]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009016:	b480      	push	{r7}
 8009018:	b08d      	sub	sp, #52	; 0x34
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	4611      	mov	r1, r2
 8009022:	461a      	mov	r2, r3
 8009024:	460b      	mov	r3, r1
 8009026:	80fb      	strh	r3, [r7, #6]
 8009028:	4613      	mov	r3, r2
 800902a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800902c:	88bb      	ldrh	r3, [r7, #4]
 800902e:	3301      	adds	r3, #1
 8009030:	085b      	lsrs	r3, r3, #1
 8009032:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800903c:	88fa      	ldrh	r2, [r7, #6]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009046:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904c:	e01b      	b.n	8009086 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	3301      	adds	r3, #1
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	021b      	lsls	r3, r3, #8
 8009062:	b29b      	uxth	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	4313      	orrs	r3, r2
 800906a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	b29a      	uxth	r2, r3
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	3302      	adds	r3, #2
 8009078:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	3301      	adds	r3, #1
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	3b01      	subs	r3, #1
 8009084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e0      	bne.n	800904e <USB_WritePMA+0x38>
  }
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	3734      	adds	r7, #52	; 0x34
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800909a:	b480      	push	{r7}
 800909c:	b08b      	sub	sp, #44	; 0x2c
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	4611      	mov	r1, r2
 80090a6:	461a      	mov	r2, r3
 80090a8:	460b      	mov	r3, r1
 80090aa:	80fb      	strh	r3, [r7, #6]
 80090ac:	4613      	mov	r3, r2
 80090ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80090b0:	88bb      	ldrh	r3, [r7, #4]
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090c0:	88fa      	ldrh	r2, [r7, #6]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	627b      	str	r3, [r7, #36]	; 0x24
 80090d0:	e018      	b.n	8009104 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	3302      	adds	r3, #2
 80090de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	3301      	adds	r3, #1
 80090ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	0a1b      	lsrs	r3, r3, #8
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	3301      	adds	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	3b01      	subs	r3, #1
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e3      	bne.n	80090d2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800910a:	88bb      	ldrh	r3, [r7, #4]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	701a      	strb	r2, [r3, #0]
  }
}
 8009126:	bf00      	nop
 8009128:	372c      	adds	r7, #44	; 0x2c
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800913e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009142:	f002 f909 	bl	800b358 <USBD_static_malloc>
 8009146:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009156:	2302      	movs	r3, #2
 8009158:	e066      	b.n	8009228 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7c1b      	ldrb	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d119      	bne.n	800919e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800916a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800916e:	2202      	movs	r2, #2
 8009170:	2181      	movs	r1, #129	; 0x81
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 ff95 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800917e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009182:	2202      	movs	r2, #2
 8009184:	2101      	movs	r1, #1
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 ff8b 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2210      	movs	r2, #16
 8009198:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800919c:	e016      	b.n	80091cc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	2202      	movs	r2, #2
 80091a2:	2181      	movs	r1, #129	; 0x81
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 ff7c 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091b0:	2340      	movs	r3, #64	; 0x40
 80091b2:	2202      	movs	r2, #2
 80091b4:	2101      	movs	r1, #1
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 ff73 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2210      	movs	r2, #16
 80091c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091cc:	2308      	movs	r3, #8
 80091ce:	2203      	movs	r2, #3
 80091d0:	2182      	movs	r1, #130	; 0x82
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 ff65 	bl	800b0a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7c1b      	ldrb	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d109      	bne.n	8009216 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800920c:	2101      	movs	r1, #1
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f002 f837 	bl	800b282 <USBD_LL_PrepareReceive>
 8009214:	e007      	b.n	8009226 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	2101      	movs	r1, #1
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f002 f82e 	bl	800b282 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800923c:	2181      	movs	r1, #129	; 0x81
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 ff55 	bl	800b0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800924a:	2101      	movs	r1, #1
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 ff4e 	bl	800b0ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800925a:	2182      	movs	r1, #130	; 0x82
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 ff46 	bl	800b0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00e      	beq.n	800929a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800928c:	4618      	mov	r0, r3
 800928e:	f002 f871 	bl	800b374 <USBD_static_free>
    pdev->pClassData = NULL;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e0af      	b.n	800942c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d03f      	beq.n	8009358 <USBD_CDC_Setup+0xb4>
 80092d8:	2b20      	cmp	r3, #32
 80092da:	f040 809f 	bne.w	800941c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	88db      	ldrh	r3, [r3, #6]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d02e      	beq.n	8009344 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b25b      	sxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	da16      	bge.n	800931e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	88d2      	ldrh	r2, [r2, #6]
 8009302:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	88db      	ldrh	r3, [r3, #6]
 8009308:	2b07      	cmp	r3, #7
 800930a:	bf28      	it	cs
 800930c:	2307      	movcs	r3, #7
 800930e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	89fa      	ldrh	r2, [r7, #14]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 facf 	bl	800a8ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800931c:	e085      	b.n	800942a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785a      	ldrb	r2, [r3, #1]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	88db      	ldrh	r3, [r3, #6]
 800932c:	b2da      	uxtb	r2, r3
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009334:	6939      	ldr	r1, [r7, #16]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	88db      	ldrh	r3, [r3, #6]
 800933a:	461a      	mov	r2, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 fae8 	bl	800a912 <USBD_CtlPrepareRx>
      break;
 8009342:	e072      	b.n	800942a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	7850      	ldrb	r0, [r2, #1]
 8009350:	2200      	movs	r2, #0
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	4798      	blx	r3
      break;
 8009356:	e068      	b.n	800942a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	2b0b      	cmp	r3, #11
 800935e:	d852      	bhi.n	8009406 <USBD_CDC_Setup+0x162>
 8009360:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <USBD_CDC_Setup+0xc4>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	08009399 	.word	0x08009399
 800936c:	08009415 	.word	0x08009415
 8009370:	08009407 	.word	0x08009407
 8009374:	08009407 	.word	0x08009407
 8009378:	08009407 	.word	0x08009407
 800937c:	08009407 	.word	0x08009407
 8009380:	08009407 	.word	0x08009407
 8009384:	08009407 	.word	0x08009407
 8009388:	08009407 	.word	0x08009407
 800938c:	08009407 	.word	0x08009407
 8009390:	080093c3 	.word	0x080093c3
 8009394:	080093ed 	.word	0x080093ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d107      	bne.n	80093b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093a4:	f107 030a 	add.w	r3, r7, #10
 80093a8:	2202      	movs	r2, #2
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fa84 	bl	800a8ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093b2:	e032      	b.n	800941a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 fa0e 	bl	800a7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80093bc:	2303      	movs	r3, #3
 80093be:	75fb      	strb	r3, [r7, #23]
          break;
 80093c0:	e02b      	b.n	800941a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d107      	bne.n	80093de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093ce:	f107 030d 	add.w	r3, r7, #13
 80093d2:	2201      	movs	r2, #1
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fa6f 	bl	800a8ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093dc:	e01d      	b.n	800941a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f9f9 	bl	800a7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80093e6:	2303      	movs	r3, #3
 80093e8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ea:	e016      	b.n	800941a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d00f      	beq.n	8009418 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 f9ec 	bl	800a7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009400:	2303      	movs	r3, #3
 8009402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009404:	e008      	b.n	8009418 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 f9e5 	bl	800a7d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800940e:	2303      	movs	r3, #3
 8009410:	75fb      	strb	r3, [r7, #23]
          break;
 8009412:	e002      	b.n	800941a <USBD_CDC_Setup+0x176>
          break;
 8009414:	bf00      	nop
 8009416:	e008      	b.n	800942a <USBD_CDC_Setup+0x186>
          break;
 8009418:	bf00      	nop
      }
      break;
 800941a:	e006      	b.n	800942a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f001 f9da 	bl	800a7d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8009424:	2303      	movs	r3, #3
 8009426:	75fb      	strb	r3, [r7, #23]
      break;
 8009428:	bf00      	nop
  }

  return (uint8_t)ret;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009452:	2303      	movs	r3, #3
 8009454:	e04f      	b.n	80094f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800945c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800945e:	78fa      	ldrb	r2, [r7, #3]
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	3318      	adds	r3, #24
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d029      	beq.n	80094c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009474:	78fa      	ldrb	r2, [r7, #3]
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	3318      	adds	r3, #24
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	78f9      	ldrb	r1, [r7, #3]
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	460b      	mov	r3, r1
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	440b      	add	r3, r1
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	4403      	add	r3, r0
 8009494:	3338      	adds	r3, #56	; 0x38
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	fbb2 f1f3 	udiv	r1, r2, r3
 800949c:	fb03 f301 	mul.w	r3, r3, r1
 80094a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d110      	bne.n	80094c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	3318      	adds	r3, #24
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094ba:	78f9      	ldrb	r1, [r7, #3]
 80094bc:	2300      	movs	r3, #0
 80094be:	2200      	movs	r2, #0
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 febd 	bl	800b240 <USBD_LL_Transmit>
 80094c6:	e015      	b.n	80094f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009510:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800951c:	2303      	movs	r3, #3
 800951e:	e015      	b.n	800954c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fecd 	bl	800b2c4 <USBD_LL_GetRxDataSize>
 800952a:	4602      	mov	r2, r0
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009546:	4611      	mov	r1, r2
 8009548:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009562:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800956a:	2303      	movs	r3, #3
 800956c:	e01b      	b.n	80095a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d015      	beq.n	80095a4 <USBD_CDC_EP0_RxReady+0x50>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800957e:	2bff      	cmp	r3, #255	; 0xff
 8009580:	d010      	beq.n	80095a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009590:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009598:	b292      	uxth	r2, r2
 800959a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	22ff      	movs	r2, #255	; 0xff
 80095a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2243      	movs	r2, #67	; 0x43
 80095bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80095be:	4b03      	ldr	r3, [pc, #12]	; (80095cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	200000b0 	.word	0x200000b0

080095d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2243      	movs	r2, #67	; 0x43
 80095dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80095de:	4b03      	ldr	r3, [pc, #12]	; (80095ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	2000006c 	.word	0x2000006c

080095f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2243      	movs	r2, #67	; 0x43
 80095fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095fe:	4b03      	ldr	r3, [pc, #12]	; (800960c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	200000f4 	.word	0x200000f4

08009610 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	220a      	movs	r2, #10
 800961c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800961e:	4b03      	ldr	r3, [pc, #12]	; (800962c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	20000028 	.word	0x20000028

08009630 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009640:	2303      	movs	r3, #3
 8009642:	e004      	b.n	800964e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800965a:	b480      	push	{r7}
 800965c:	b087      	sub	sp, #28
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800966c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009674:	2303      	movs	r3, #3
 8009676:	e008      	b.n	800968a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e004      	b.n	80096bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80096d8:	2301      	movs	r3, #1
 80096da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e01a      	b.n	8009720 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d114      	bne.n	800971e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009712:	2181      	movs	r1, #129	; 0x81
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 fd93 	bl	800b240 <USBD_LL_Transmit>

    ret = USBD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009736:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009742:	2303      	movs	r3, #3
 8009744:	e016      	b.n	8009774 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7c1b      	ldrb	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009758:	2101      	movs	r1, #1
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 fd91 	bl	800b282 <USBD_LL_PrepareReceive>
 8009760:	e007      	b.n	8009772 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009768:	2340      	movs	r3, #64	; 0x40
 800976a:	2101      	movs	r1, #1
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 fd88 	bl	800b282 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	4613      	mov	r3, r2
 8009788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	e01f      	b.n	80097d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	79fa      	ldrb	r2, [r7, #7]
 80097c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f001 fbef 	bl	800afac <USBD_LL_Init>
 80097ce:	4603      	mov	r3, r0
 80097d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e016      	b.n	8009822 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	f107 020e 	add.w	r2, r7, #14
 8009814:	4610      	mov	r0, r2
 8009816:	4798      	blx	r3
 8009818:	4602      	mov	r2, r0
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 fc1a 	bl	800b06c <USBD_LL_Start>
 8009838:	4603      	mov	r3, r0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009842:	b480      	push	{r7}
 8009844:	b083      	sub	sp, #12
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009864:	2303      	movs	r3, #3
 8009866:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d009      	beq.n	8009886 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	4798      	blx	r3
 8009882:	4603      	mov	r3, r0
 8009884:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d007      	beq.n	80098b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	4611      	mov	r1, r2
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
  }

  return USBD_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 ff46 	bl	800a764 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80098e6:	461a      	mov	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098f4:	f003 031f 	and.w	r3, r3, #31
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d01a      	beq.n	8009932 <USBD_LL_SetupStage+0x72>
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d822      	bhi.n	8009946 <USBD_LL_SetupStage+0x86>
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <USBD_LL_SetupStage+0x4a>
 8009904:	2b01      	cmp	r3, #1
 8009906:	d00a      	beq.n	800991e <USBD_LL_SetupStage+0x5e>
 8009908:	e01d      	b.n	8009946 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f9ee 	bl	8009cf4 <USBD_StdDevReq>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
      break;
 800991c:	e020      	b.n	8009960 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa52 	bl	8009dd0 <USBD_StdItfReq>
 800992c:	4603      	mov	r3, r0
 800992e:	73fb      	strb	r3, [r7, #15]
      break;
 8009930:	e016      	b.n	8009960 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fa91 	bl	8009e62 <USBD_StdEPReq>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]
      break;
 8009944:	e00c      	b.n	8009960 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800994c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 fbe9 	bl	800b12c <USBD_LL_StallEP>
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]
      break;
 800995e:	bf00      	nop
  }

  return ret;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	460b      	mov	r3, r1
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d138      	bne.n	80099f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009984:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800998c:	2b03      	cmp	r3, #3
 800998e:	d14a      	bne.n	8009a26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	429a      	cmp	r2, r3
 800999a:	d913      	bls.n	80099c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	1ad2      	subs	r2, r2, r3
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	4293      	cmp	r3, r2
 80099b4:	bf28      	it	cs
 80099b6:	4613      	movcs	r3, r2
 80099b8:	461a      	mov	r2, r3
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 ffc5 	bl	800a94c <USBD_CtlContinueRx>
 80099c2:	e030      	b.n	8009a26 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d10b      	bne.n	80099e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 ffc0 	bl	800a96e <USBD_CtlSendStatus>
 80099ee:	e01a      	b.n	8009a26 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d114      	bne.n	8009a26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00e      	beq.n	8009a26 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	7afa      	ldrb	r2, [r7, #11]
 8009a12:	4611      	mov	r1, r2
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	4798      	blx	r3
 8009a18:	4603      	mov	r3, r0
 8009a1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	e000      	b.n	8009a28 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d16b      	bne.n	8009b1c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3314      	adds	r3, #20
 8009a48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d156      	bne.n	8009b02 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d914      	bls.n	8009a8a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	461a      	mov	r2, r3
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 ff3a 	bl	800a8f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2100      	movs	r1, #0
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f001 fbfd 	bl	800b282 <USBD_LL_PrepareReceive>
 8009a88:	e03b      	b.n	8009b02 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d11c      	bne.n	8009ad0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d316      	bcc.n	8009ad0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d20f      	bcs.n	8009ad0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 ff1b 	bl	800a8f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f001 fbda 	bl	800b282 <USBD_LL_PrepareReceive>
 8009ace:	e018      	b.n	8009b02 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d10b      	bne.n	8009af4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009af4:	2180      	movs	r1, #128	; 0x80
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f001 fb18 	bl	800b12c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 ff49 	bl	800a994 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d122      	bne.n	8009b52 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7ff fe98 	bl	8009842 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009b1a:	e01a      	b.n	8009b52 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d114      	bne.n	8009b52 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00e      	beq.n	8009b52 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	7afa      	ldrb	r2, [r7, #11]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	4798      	blx	r3
 8009b44:	4603      	mov	r3, r0
 8009b46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	e000      	b.n	8009b54 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e02f      	b.n	8009bf0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00f      	beq.n	8009bba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d009      	beq.n	8009bba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6852      	ldr	r2, [r2, #4]
 8009bb2:	b2d2      	uxtb	r2, r2
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bba:	2340      	movs	r3, #64	; 0x40
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 fa6e 	bl	800b0a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2240      	movs	r2, #64	; 0x40
 8009bd2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bd6:	2340      	movs	r3, #64	; 0x40
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2180      	movs	r1, #128	; 0x80
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 fa60 	bl	800b0a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2240      	movs	r2, #64	; 0x40
 8009bec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2204      	movs	r2, #4
 8009c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d106      	bne.n	8009c66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e012      	b.n	8009cb0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d10b      	bne.n	8009cae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d005      	beq.n	8009cae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cd6:	8a3b      	ldrh	r3, [r7, #16]
 8009cd8:	021b      	lsls	r3, r3, #8
 8009cda:	b21a      	sxth	r2, r3
 8009cdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	b21b      	sxth	r3, r3
 8009ce4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d0a:	2b40      	cmp	r3, #64	; 0x40
 8009d0c:	d005      	beq.n	8009d1a <USBD_StdDevReq+0x26>
 8009d0e:	2b40      	cmp	r3, #64	; 0x40
 8009d10:	d853      	bhi.n	8009dba <USBD_StdDevReq+0xc6>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00b      	beq.n	8009d2e <USBD_StdDevReq+0x3a>
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	d14f      	bne.n	8009dba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	4798      	blx	r3
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2c:	e04a      	b.n	8009dc4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	785b      	ldrb	r3, [r3, #1]
 8009d32:	2b09      	cmp	r3, #9
 8009d34:	d83b      	bhi.n	8009dae <USBD_StdDevReq+0xba>
 8009d36:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <USBD_StdDevReq+0x48>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d91 	.word	0x08009d91
 8009d40:	08009da5 	.word	0x08009da5
 8009d44:	08009daf 	.word	0x08009daf
 8009d48:	08009d9b 	.word	0x08009d9b
 8009d4c:	08009daf 	.word	0x08009daf
 8009d50:	08009d6f 	.word	0x08009d6f
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009daf 	.word	0x08009daf
 8009d5c:	08009d87 	.word	0x08009d87
 8009d60:	08009d79 	.word	0x08009d79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f9de 	bl	800a128 <USBD_GetDescriptor>
          break;
 8009d6c:	e024      	b.n	8009db8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fb6d 	bl	800a450 <USBD_SetAddress>
          break;
 8009d76:	e01f      	b.n	8009db8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fbac 	bl	800a4d8 <USBD_SetConfig>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]
          break;
 8009d84:	e018      	b.n	8009db8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fc4b 	bl	800a624 <USBD_GetConfig>
          break;
 8009d8e:	e013      	b.n	8009db8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fc7c 	bl	800a690 <USBD_GetStatus>
          break;
 8009d98:	e00e      	b.n	8009db8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fcab 	bl	800a6f8 <USBD_SetFeature>
          break;
 8009da2:	e009      	b.n	8009db8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fcba 	bl	800a720 <USBD_ClrFeature>
          break;
 8009dac:	e004      	b.n	8009db8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fd11 	bl	800a7d8 <USBD_CtlError>
          break;
 8009db6:	bf00      	nop
      }
      break;
 8009db8:	e004      	b.n	8009dc4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fd0b 	bl	800a7d8 <USBD_CtlError>
      break;
 8009dc2:	bf00      	nop
  }

  return ret;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop

08009dd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009de6:	2b40      	cmp	r3, #64	; 0x40
 8009de8:	d005      	beq.n	8009df6 <USBD_StdItfReq+0x26>
 8009dea:	2b40      	cmp	r3, #64	; 0x40
 8009dec:	d82f      	bhi.n	8009e4e <USBD_StdItfReq+0x7e>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <USBD_StdItfReq+0x26>
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d12b      	bne.n	8009e4e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d81d      	bhi.n	8009e40 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	889b      	ldrh	r3, [r3, #4]
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d813      	bhi.n	8009e36 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	4798      	blx	r3
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	88db      	ldrh	r3, [r3, #6]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d110      	bne.n	8009e4a <USBD_StdItfReq+0x7a>
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10d      	bne.n	8009e4a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fd9d 	bl	800a96e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e34:	e009      	b.n	8009e4a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fccd 	bl	800a7d8 <USBD_CtlError>
          break;
 8009e3e:	e004      	b.n	8009e4a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fcc8 	bl	800a7d8 <USBD_CtlError>
          break;
 8009e48:	e000      	b.n	8009e4c <USBD_StdItfReq+0x7c>
          break;
 8009e4a:	bf00      	nop
      }
      break;
 8009e4c:	e004      	b.n	8009e58 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fcc1 	bl	800a7d8 <USBD_CtlError>
      break;
 8009e56:	bf00      	nop
  }

  return ret;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	889b      	ldrh	r3, [r3, #4]
 8009e74:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e7e:	2b40      	cmp	r3, #64	; 0x40
 8009e80:	d007      	beq.n	8009e92 <USBD_StdEPReq+0x30>
 8009e82:	2b40      	cmp	r3, #64	; 0x40
 8009e84:	f200 8145 	bhi.w	800a112 <USBD_StdEPReq+0x2b0>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00c      	beq.n	8009ea6 <USBD_StdEPReq+0x44>
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	f040 8140 	bne.w	800a112 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea4:	e13a      	b.n	800a11c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d007      	beq.n	8009ebe <USBD_StdEPReq+0x5c>
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	f300 8129 	bgt.w	800a106 <USBD_StdEPReq+0x2a4>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d07f      	beq.n	8009fb8 <USBD_StdEPReq+0x156>
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d03c      	beq.n	8009f36 <USBD_StdEPReq+0xd4>
 8009ebc:	e123      	b.n	800a106 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d002      	beq.n	8009ed0 <USBD_StdEPReq+0x6e>
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d016      	beq.n	8009efc <USBD_StdEPReq+0x9a>
 8009ece:	e02c      	b.n	8009f2a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00d      	beq.n	8009ef2 <USBD_StdEPReq+0x90>
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	2b80      	cmp	r3, #128	; 0x80
 8009eda:	d00a      	beq.n	8009ef2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 f923 	bl	800b12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ee6:	2180      	movs	r1, #128	; 0x80
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f91f 	bl	800b12c <USBD_LL_StallEP>
 8009eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ef0:	e020      	b.n	8009f34 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fc6f 	bl	800a7d8 <USBD_CtlError>
              break;
 8009efa:	e01b      	b.n	8009f34 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	885b      	ldrh	r3, [r3, #2]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10e      	bne.n	8009f22 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00b      	beq.n	8009f22 <USBD_StdEPReq+0xc0>
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	2b80      	cmp	r3, #128	; 0x80
 8009f0e:	d008      	beq.n	8009f22 <USBD_StdEPReq+0xc0>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	88db      	ldrh	r3, [r3, #6]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d104      	bne.n	8009f22 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 f905 	bl	800b12c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fd23 	bl	800a96e <USBD_CtlSendStatus>

              break;
 8009f28:	e004      	b.n	8009f34 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fc53 	bl	800a7d8 <USBD_CtlError>
              break;
 8009f32:	bf00      	nop
          }
          break;
 8009f34:	e0ec      	b.n	800a110 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d002      	beq.n	8009f48 <USBD_StdEPReq+0xe6>
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d016      	beq.n	8009f74 <USBD_StdEPReq+0x112>
 8009f46:	e030      	b.n	8009faa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00d      	beq.n	8009f6a <USBD_StdEPReq+0x108>
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	2b80      	cmp	r3, #128	; 0x80
 8009f52:	d00a      	beq.n	8009f6a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 f8e7 	bl	800b12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f5e:	2180      	movs	r1, #128	; 0x80
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f8e3 	bl	800b12c <USBD_LL_StallEP>
 8009f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f68:	e025      	b.n	8009fb6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fc33 	bl	800a7d8 <USBD_CtlError>
              break;
 8009f72:	e020      	b.n	8009fb6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	885b      	ldrh	r3, [r3, #2]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d11b      	bne.n	8009fb4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d004      	beq.n	8009f90 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f8ed 	bl	800b16a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fcec 	bl	800a96e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009fa8:	e004      	b.n	8009fb4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fc13 	bl	800a7d8 <USBD_CtlError>
              break;
 8009fb2:	e000      	b.n	8009fb6 <USBD_StdEPReq+0x154>
              break;
 8009fb4:	bf00      	nop
          }
          break;
 8009fb6:	e0ab      	b.n	800a110 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d002      	beq.n	8009fca <USBD_StdEPReq+0x168>
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d032      	beq.n	800a02e <USBD_StdEPReq+0x1cc>
 8009fc8:	e097      	b.n	800a0fa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d007      	beq.n	8009fe0 <USBD_StdEPReq+0x17e>
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b80      	cmp	r3, #128	; 0x80
 8009fd4:	d004      	beq.n	8009fe0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fbfd 	bl	800a7d8 <USBD_CtlError>
                break;
 8009fde:	e091      	b.n	800a104 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da0b      	bge.n	800a000 <USBD_StdEPReq+0x19e>
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	3310      	adds	r3, #16
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	e00b      	b.n	800a018 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	3304      	adds	r3, #4
 800a018:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2202      	movs	r2, #2
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fc47 	bl	800a8ba <USBD_CtlSendData>
              break;
 800a02c:	e06a      	b.n	800a104 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a02e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a032:	2b00      	cmp	r3, #0
 800a034:	da11      	bge.n	800a05a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	f003 020f 	and.w	r2, r3, #15
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	3324      	adds	r3, #36	; 0x24
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d117      	bne.n	800a080 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fbc0 	bl	800a7d8 <USBD_CtlError>
                  break;
 800a058:	e054      	b.n	800a104 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	f003 020f 	and.w	r2, r3, #15
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d104      	bne.n	800a080 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fbad 	bl	800a7d8 <USBD_CtlError>
                  break;
 800a07e:	e041      	b.n	800a104 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a084:	2b00      	cmp	r3, #0
 800a086:	da0b      	bge.n	800a0a0 <USBD_StdEPReq+0x23e>
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	3310      	adds	r3, #16
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	4413      	add	r3, r2
 800a09c:	3304      	adds	r3, #4
 800a09e:	e00b      	b.n	800a0b8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <USBD_StdEPReq+0x264>
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	2b80      	cmp	r3, #128	; 0x80
 800a0c4:	d103      	bne.n	800a0ce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e00e      	b.n	800a0ec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 f868 	bl	800b1a8 <USBD_LL_IsStallEP>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e002      	b.n	800a0ec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fbe1 	bl	800a8ba <USBD_CtlSendData>
              break;
 800a0f8:	e004      	b.n	800a104 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fb6b 	bl	800a7d8 <USBD_CtlError>
              break;
 800a102:	bf00      	nop
          }
          break;
 800a104:	e004      	b.n	800a110 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fb65 	bl	800a7d8 <USBD_CtlError>
          break;
 800a10e:	bf00      	nop
      }
      break;
 800a110:	e004      	b.n	800a11c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb5f 	bl	800a7d8 <USBD_CtlError>
      break;
 800a11a:	bf00      	nop
  }

  return ret;
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	0a1b      	lsrs	r3, r3, #8
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	2b0e      	cmp	r3, #14
 800a14a:	f200 8152 	bhi.w	800a3f2 <USBD_GetDescriptor+0x2ca>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <USBD_GetDescriptor+0x2c>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a1c5 	.word	0x0800a1c5
 800a158:	0800a1dd 	.word	0x0800a1dd
 800a15c:	0800a21d 	.word	0x0800a21d
 800a160:	0800a3f3 	.word	0x0800a3f3
 800a164:	0800a3f3 	.word	0x0800a3f3
 800a168:	0800a393 	.word	0x0800a393
 800a16c:	0800a3bf 	.word	0x0800a3bf
 800a170:	0800a3f3 	.word	0x0800a3f3
 800a174:	0800a3f3 	.word	0x0800a3f3
 800a178:	0800a3f3 	.word	0x0800a3f3
 800a17c:	0800a3f3 	.word	0x0800a3f3
 800a180:	0800a3f3 	.word	0x0800a3f3
 800a184:	0800a3f3 	.word	0x0800a3f3
 800a188:	0800a3f3 	.word	0x0800a3f3
 800a18c:	0800a191 	.word	0x0800a191
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	7c12      	ldrb	r2, [r2, #16]
 800a1a8:	f107 0108 	add.w	r1, r7, #8
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1b2:	e126      	b.n	800a402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fb0e 	bl	800a7d8 <USBD_CtlError>
        err++;
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	72fb      	strb	r3, [r7, #11]
      break;
 800a1c2:	e11e      	b.n	800a402 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
      break;
 800a1da:	e112      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	7c1b      	ldrb	r3, [r3, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10d      	bne.n	800a200 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ec:	f107 0208 	add.w	r2, r7, #8
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1fe:	e100      	b.n	800a402 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	f107 0208 	add.w	r2, r7, #8
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
 800a210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3301      	adds	r3, #1
 800a216:	2202      	movs	r2, #2
 800a218:	701a      	strb	r2, [r3, #0]
      break;
 800a21a:	e0f2      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	885b      	ldrh	r3, [r3, #2]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b05      	cmp	r3, #5
 800a224:	f200 80ac 	bhi.w	800a380 <USBD_GetDescriptor+0x258>
 800a228:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <USBD_GetDescriptor+0x108>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a249 	.word	0x0800a249
 800a234:	0800a27d 	.word	0x0800a27d
 800a238:	0800a2b1 	.word	0x0800a2b1
 800a23c:	0800a2e5 	.word	0x0800a2e5
 800a240:	0800a319 	.word	0x0800a319
 800a244:	0800a34d 	.word	0x0800a34d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00b      	beq.n	800a26c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	7c12      	ldrb	r2, [r2, #16]
 800a260:	f107 0108 	add.w	r1, r7, #8
 800a264:	4610      	mov	r0, r2
 800a266:	4798      	blx	r3
 800a268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a26a:	e091      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fab2 	bl	800a7d8 <USBD_CtlError>
            err++;
 800a274:	7afb      	ldrb	r3, [r7, #11]
 800a276:	3301      	adds	r3, #1
 800a278:	72fb      	strb	r3, [r7, #11]
          break;
 800a27a:	e089      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00b      	beq.n	800a2a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	7c12      	ldrb	r2, [r2, #16]
 800a294:	f107 0108 	add.w	r1, r7, #8
 800a298:	4610      	mov	r0, r2
 800a29a:	4798      	blx	r3
 800a29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a29e:	e077      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fa98 	bl	800a7d8 <USBD_CtlError>
            err++;
 800a2a8:	7afb      	ldrb	r3, [r7, #11]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ae:	e06f      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00b      	beq.n	800a2d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	7c12      	ldrb	r2, [r2, #16]
 800a2c8:	f107 0108 	add.w	r1, r7, #8
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4798      	blx	r3
 800a2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2d2:	e05d      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fa7e 	bl	800a7d8 <USBD_CtlError>
            err++;
 800a2dc:	7afb      	ldrb	r3, [r7, #11]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2e2:	e055      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	7c12      	ldrb	r2, [r2, #16]
 800a2fc:	f107 0108 	add.w	r1, r7, #8
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
 800a304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a306:	e043      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa64 	bl	800a7d8 <USBD_CtlError>
            err++;
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	3301      	adds	r3, #1
 800a314:	72fb      	strb	r3, [r7, #11]
          break;
 800a316:	e03b      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	7c12      	ldrb	r2, [r2, #16]
 800a330:	f107 0108 	add.w	r1, r7, #8
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3
 800a338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a33a:	e029      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa4a 	bl	800a7d8 <USBD_CtlError>
            err++;
 800a344:	7afb      	ldrb	r3, [r7, #11]
 800a346:	3301      	adds	r3, #1
 800a348:	72fb      	strb	r3, [r7, #11]
          break;
 800a34a:	e021      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	7c12      	ldrb	r2, [r2, #16]
 800a364:	f107 0108 	add.w	r1, r7, #8
 800a368:	4610      	mov	r0, r2
 800a36a:	4798      	blx	r3
 800a36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36e:	e00f      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa30 	bl	800a7d8 <USBD_CtlError>
            err++;
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	3301      	adds	r3, #1
 800a37c:	72fb      	strb	r3, [r7, #11]
          break;
 800a37e:	e007      	b.n	800a390 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa28 	bl	800a7d8 <USBD_CtlError>
          err++;
 800a388:	7afb      	ldrb	r3, [r7, #11]
 800a38a:	3301      	adds	r3, #1
 800a38c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a38e:	bf00      	nop
      }
      break;
 800a390:	e037      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7c1b      	ldrb	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	f107 0208 	add.w	r2, r7, #8
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	4798      	blx	r3
 800a3aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3ac:	e029      	b.n	800a402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fa11 	bl	800a7d8 <USBD_CtlError>
        err++;
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a3bc:	e021      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	7c1b      	ldrb	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10d      	bne.n	800a3e2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ce:	f107 0208 	add.w	r2, r7, #8
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	4798      	blx	r3
 800a3d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	2207      	movs	r2, #7
 800a3de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3e0:	e00f      	b.n	800a402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f9f7 	bl	800a7d8 <USBD_CtlError>
        err++;
 800a3ea:	7afb      	ldrb	r3, [r7, #11]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f0:	e007      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f9ef 	bl	800a7d8 <USBD_CtlError>
      err++;
 800a3fa:	7afb      	ldrb	r3, [r7, #11]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a400:	bf00      	nop
  }

  if (err != 0U)
 800a402:	7afb      	ldrb	r3, [r7, #11]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11e      	bne.n	800a446 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	88db      	ldrh	r3, [r3, #6]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d016      	beq.n	800a43e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a410:	893b      	ldrh	r3, [r7, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00e      	beq.n	800a434 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	88da      	ldrh	r2, [r3, #6]
 800a41a:	893b      	ldrh	r3, [r7, #8]
 800a41c:	4293      	cmp	r3, r2
 800a41e:	bf28      	it	cs
 800a420:	4613      	movcs	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a426:	893b      	ldrh	r3, [r7, #8]
 800a428:	461a      	mov	r2, r3
 800a42a:	68f9      	ldr	r1, [r7, #12]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fa44 	bl	800a8ba <USBD_CtlSendData>
 800a432:	e009      	b.n	800a448 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f9ce 	bl	800a7d8 <USBD_CtlError>
 800a43c:	e004      	b.n	800a448 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fa95 	bl	800a96e <USBD_CtlSendStatus>
 800a444:	e000      	b.n	800a448 <USBD_GetDescriptor+0x320>
    return;
 800a446:	bf00      	nop
  }
}
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop

0800a450 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	889b      	ldrh	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d131      	bne.n	800a4c6 <USBD_SetAddress+0x76>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	88db      	ldrh	r3, [r3, #6]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d12d      	bne.n	800a4c6 <USBD_SetAddress+0x76>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	885b      	ldrh	r3, [r3, #2]
 800a46e:	2b7f      	cmp	r3, #127	; 0x7f
 800a470:	d829      	bhi.n	800a4c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	885b      	ldrh	r3, [r3, #2]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b03      	cmp	r3, #3
 800a488:	d104      	bne.n	800a494 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f9a3 	bl	800a7d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a492:	e01d      	b.n	800a4d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7bfa      	ldrb	r2, [r7, #15]
 800a498:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 feae 	bl	800b202 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fa61 	bl	800a96e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d004      	beq.n	800a4bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ba:	e009      	b.n	800a4d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c4:	e004      	b.n	800a4d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f985 	bl	800a7d8 <USBD_CtlError>
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	885b      	ldrh	r3, [r3, #2]
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	4b4c      	ldr	r3, [pc, #304]	; (800a620 <USBD_SetConfig+0x148>)
 800a4ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4f0:	4b4b      	ldr	r3, [pc, #300]	; (800a620 <USBD_SetConfig+0x148>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d905      	bls.n	800a504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f96c 	bl	800a7d8 <USBD_CtlError>
    return USBD_FAIL;
 800a500:	2303      	movs	r3, #3
 800a502:	e088      	b.n	800a616 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d002      	beq.n	800a516 <USBD_SetConfig+0x3e>
 800a510:	2b03      	cmp	r3, #3
 800a512:	d025      	beq.n	800a560 <USBD_SetConfig+0x88>
 800a514:	e071      	b.n	800a5fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a516:	4b42      	ldr	r3, [pc, #264]	; (800a620 <USBD_SetConfig+0x148>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d01c      	beq.n	800a558 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a51e:	4b40      	ldr	r3, [pc, #256]	; (800a620 <USBD_SetConfig+0x148>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a528:	4b3d      	ldr	r3, [pc, #244]	; (800a620 <USBD_SetConfig+0x148>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff f992 	bl	8009858 <USBD_SetClassConfig>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d004      	beq.n	800a548 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f949 	bl	800a7d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a546:	e065      	b.n	800a614 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fa10 	bl	800a96e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2203      	movs	r2, #3
 800a552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a556:	e05d      	b.n	800a614 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fa08 	bl	800a96e <USBD_CtlSendStatus>
      break;
 800a55e:	e059      	b.n	800a614 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a560:	4b2f      	ldr	r3, [pc, #188]	; (800a620 <USBD_SetConfig+0x148>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d112      	bne.n	800a58e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2202      	movs	r2, #2
 800a56c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a570:	4b2b      	ldr	r3, [pc, #172]	; (800a620 <USBD_SetConfig+0x148>)
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	461a      	mov	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a57a:	4b29      	ldr	r3, [pc, #164]	; (800a620 <USBD_SetConfig+0x148>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff f985 	bl	8009890 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f9f1 	bl	800a96e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a58c:	e042      	b.n	800a614 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a58e:	4b24      	ldr	r3, [pc, #144]	; (800a620 <USBD_SetConfig+0x148>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d02a      	beq.n	800a5f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff f973 	bl	8009890 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a5aa:	4b1d      	ldr	r3, [pc, #116]	; (800a620 <USBD_SetConfig+0x148>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5b4:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <USBD_SetConfig+0x148>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff f94c 	bl	8009858 <USBD_SetClassConfig>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00f      	beq.n	800a5ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f903 	bl	800a7d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff f958 	bl	8009890 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a5e8:	e014      	b.n	800a614 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f9bf 	bl	800a96e <USBD_CtlSendStatus>
      break;
 800a5f0:	e010      	b.n	800a614 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f9bb 	bl	800a96e <USBD_CtlSendStatus>
      break;
 800a5f8:	e00c      	b.n	800a614 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f8eb 	bl	800a7d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a602:	4b07      	ldr	r3, [pc, #28]	; (800a620 <USBD_SetConfig+0x148>)
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff f941 	bl	8009890 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a60e:	2303      	movs	r3, #3
 800a610:	73fb      	strb	r3, [r7, #15]
      break;
 800a612:	bf00      	nop
  }

  return ret;
 800a614:	7bfb      	ldrb	r3, [r7, #15]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20000228 	.word	0x20000228

0800a624 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	88db      	ldrh	r3, [r3, #6]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d004      	beq.n	800a640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f8cd 	bl	800a7d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a63e:	e023      	b.n	800a688 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b02      	cmp	r3, #2
 800a64a:	dc02      	bgt.n	800a652 <USBD_GetConfig+0x2e>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dc03      	bgt.n	800a658 <USBD_GetConfig+0x34>
 800a650:	e015      	b.n	800a67e <USBD_GetConfig+0x5a>
 800a652:	2b03      	cmp	r3, #3
 800a654:	d00b      	beq.n	800a66e <USBD_GetConfig+0x4a>
 800a656:	e012      	b.n	800a67e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3308      	adds	r3, #8
 800a662:	2201      	movs	r2, #1
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f927 	bl	800a8ba <USBD_CtlSendData>
        break;
 800a66c:	e00c      	b.n	800a688 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3304      	adds	r3, #4
 800a672:	2201      	movs	r2, #1
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f91f 	bl	800a8ba <USBD_CtlSendData>
        break;
 800a67c:	e004      	b.n	800a688 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f8a9 	bl	800a7d8 <USBD_CtlError>
        break;
 800a686:	bf00      	nop
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d81e      	bhi.n	800a6e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	88db      	ldrh	r3, [r3, #6]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d004      	beq.n	800a6ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f890 	bl	800a7d8 <USBD_CtlError>
        break;
 800a6b8:	e01a      	b.n	800a6f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d005      	beq.n	800a6d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f043 0202 	orr.w	r2, r3, #2
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	330c      	adds	r3, #12
 800a6da:	2202      	movs	r2, #2
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f8eb 	bl	800a8ba <USBD_CtlSendData>
      break;
 800a6e4:	e004      	b.n	800a6f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f875 	bl	800a7d8 <USBD_CtlError>
      break;
 800a6ee:	bf00      	nop
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	885b      	ldrh	r3, [r3, #2]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d106      	bne.n	800a718 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f92b 	bl	800a96e <USBD_CtlSendStatus>
  }
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a730:	b2db      	uxtb	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	2b02      	cmp	r3, #2
 800a736:	d80b      	bhi.n	800a750 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	885b      	ldrh	r3, [r3, #2]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d10c      	bne.n	800a75a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f910 	bl	800a96e <USBD_CtlSendStatus>
      }
      break;
 800a74e:	e004      	b.n	800a75a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f840 	bl	800a7d8 <USBD_CtlError>
      break;
 800a758:	e000      	b.n	800a75c <USBD_ClrFeature+0x3c>
      break;
 800a75a:	bf00      	nop
  }
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	781a      	ldrb	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3301      	adds	r3, #1
 800a78c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7ff fa92 	bl	8009cb8 <SWAPBYTE>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f7ff fa85 	bl	8009cb8 <SWAPBYTE>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff fa78 	bl	8009cb8 <SWAPBYTE>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	80da      	strh	r2, [r3, #6]
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7e2:	2180      	movs	r1, #128	; 0x80
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fca1 	bl	800b12c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc9d 	bl	800b12c <USBD_LL_StallEP>
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b086      	sub	sp, #24
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d036      	beq.n	800a87e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	f000 f836 	bl	800a886 <USBD_GetLen>
 800a81a:	4603      	mov	r3, r0
 800a81c:	3301      	adds	r3, #1
 800a81e:	b29b      	uxth	r3, r3
 800a820:	005b      	lsls	r3, r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	4413      	add	r3, r2
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	7812      	ldrb	r2, [r2, #0]
 800a832:	701a      	strb	r2, [r3, #0]
  idx++;
 800a834:	7dfb      	ldrb	r3, [r7, #23]
 800a836:	3301      	adds	r3, #1
 800a838:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	4413      	add	r3, r2
 800a840:	2203      	movs	r2, #3
 800a842:	701a      	strb	r2, [r3, #0]
  idx++;
 800a844:	7dfb      	ldrb	r3, [r7, #23]
 800a846:	3301      	adds	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a84a:	e013      	b.n	800a874 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	4413      	add	r3, r2
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	7812      	ldrb	r2, [r2, #0]
 800a856:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	3301      	adds	r3, #1
 800a85c:	613b      	str	r3, [r7, #16]
    idx++;
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	3301      	adds	r3, #1
 800a862:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	4413      	add	r3, r2
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	3301      	adds	r3, #1
 800a872:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e7      	bne.n	800a84c <USBD_GetString+0x52>
 800a87c:	e000      	b.n	800a880 <USBD_GetString+0x86>
    return;
 800a87e:	bf00      	nop
  }
}
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a896:	e005      	b.n	800a8a4 <USBD_GetLen+0x1e>
  {
    len++;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	3301      	adds	r3, #1
 800a89c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1f5      	bne.n	800a898 <USBD_GetLen+0x12>
  }

  return len;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	60b9      	str	r1, [r7, #8]
 800a8c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	2100      	movs	r1, #0
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 fcad 	bl	800b240 <USBD_LL_Transmit>

  return USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	2100      	movs	r1, #0
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fc9c 	bl	800b240 <USBD_LL_Transmit>

  return USBD_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2203      	movs	r2, #3
 800a922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	2100      	movs	r1, #0
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fca0 	bl	800b282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	2100      	movs	r1, #0
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 fc8f 	bl	800b282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2204      	movs	r2, #4
 800a97a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a97e:	2300      	movs	r3, #0
 800a980:	2200      	movs	r2, #0
 800a982:	2100      	movs	r1, #0
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fc5b 	bl	800b240 <USBD_LL_Transmit>

  return USBD_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2205      	movs	r2, #5
 800a9a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fc69 	bl	800b282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4912      	ldr	r1, [pc, #72]	; (800aa0c <MX_USB_Device_Init+0x50>)
 800a9c4:	4812      	ldr	r0, [pc, #72]	; (800aa10 <MX_USB_Device_Init+0x54>)
 800a9c6:	f7fe fed9 	bl	800977c <USBD_Init>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a9d0:	f7f7 f9ee 	bl	8001db0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a9d4:	490f      	ldr	r1, [pc, #60]	; (800aa14 <MX_USB_Device_Init+0x58>)
 800a9d6:	480e      	ldr	r0, [pc, #56]	; (800aa10 <MX_USB_Device_Init+0x54>)
 800a9d8:	f7fe ff00 	bl	80097dc <USBD_RegisterClass>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a9e2:	f7f7 f9e5 	bl	8001db0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a9e6:	490c      	ldr	r1, [pc, #48]	; (800aa18 <MX_USB_Device_Init+0x5c>)
 800a9e8:	4809      	ldr	r0, [pc, #36]	; (800aa10 <MX_USB_Device_Init+0x54>)
 800a9ea:	f7fe fe21 	bl	8009630 <USBD_CDC_RegisterInterface>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a9f4:	f7f7 f9dc 	bl	8001db0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9f8:	4805      	ldr	r0, [pc, #20]	; (800aa10 <MX_USB_Device_Init+0x54>)
 800a9fa:	f7fe ff16 	bl	800982a <USBD_Start>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aa04:	f7f7 f9d4 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aa08:	bf00      	nop
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	2000014c 	.word	0x2000014c
 800aa10:	20000748 	.word	0x20000748
 800aa14:	20000034 	.word	0x20000034
 800aa18:	20000138 	.word	0x20000138

0800aa1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa20:	2200      	movs	r2, #0
 800aa22:	4905      	ldr	r1, [pc, #20]	; (800aa38 <CDC_Init_FS+0x1c>)
 800aa24:	4805      	ldr	r0, [pc, #20]	; (800aa3c <CDC_Init_FS+0x20>)
 800aa26:	f7fe fe18 	bl	800965a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa2a:	4905      	ldr	r1, [pc, #20]	; (800aa40 <CDC_Init_FS+0x24>)
 800aa2c:	4803      	ldr	r0, [pc, #12]	; (800aa3c <CDC_Init_FS+0x20>)
 800aa2e:	f7fe fe32 	bl	8009696 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	20000e00 	.word	0x20000e00
 800aa3c:	20000748 	.word	0x20000748
 800aa40:	20000a18 	.word	0x20000a18

0800aa44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
 800aa60:	4613      	mov	r3, r2
 800aa62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	2b23      	cmp	r3, #35	; 0x23
 800aa68:	d84a      	bhi.n	800ab00 <CDC_Control_FS+0xac>
 800aa6a:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <CDC_Control_FS+0x1c>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800ab01 	.word	0x0800ab01
 800aa74:	0800ab01 	.word	0x0800ab01
 800aa78:	0800ab01 	.word	0x0800ab01
 800aa7c:	0800ab01 	.word	0x0800ab01
 800aa80:	0800ab01 	.word	0x0800ab01
 800aa84:	0800ab01 	.word	0x0800ab01
 800aa88:	0800ab01 	.word	0x0800ab01
 800aa8c:	0800ab01 	.word	0x0800ab01
 800aa90:	0800ab01 	.word	0x0800ab01
 800aa94:	0800ab01 	.word	0x0800ab01
 800aa98:	0800ab01 	.word	0x0800ab01
 800aa9c:	0800ab01 	.word	0x0800ab01
 800aaa0:	0800ab01 	.word	0x0800ab01
 800aaa4:	0800ab01 	.word	0x0800ab01
 800aaa8:	0800ab01 	.word	0x0800ab01
 800aaac:	0800ab01 	.word	0x0800ab01
 800aab0:	0800ab01 	.word	0x0800ab01
 800aab4:	0800ab01 	.word	0x0800ab01
 800aab8:	0800ab01 	.word	0x0800ab01
 800aabc:	0800ab01 	.word	0x0800ab01
 800aac0:	0800ab01 	.word	0x0800ab01
 800aac4:	0800ab01 	.word	0x0800ab01
 800aac8:	0800ab01 	.word	0x0800ab01
 800aacc:	0800ab01 	.word	0x0800ab01
 800aad0:	0800ab01 	.word	0x0800ab01
 800aad4:	0800ab01 	.word	0x0800ab01
 800aad8:	0800ab01 	.word	0x0800ab01
 800aadc:	0800ab01 	.word	0x0800ab01
 800aae0:	0800ab01 	.word	0x0800ab01
 800aae4:	0800ab01 	.word	0x0800ab01
 800aae8:	0800ab01 	.word	0x0800ab01
 800aaec:	0800ab01 	.word	0x0800ab01
 800aaf0:	0800ab01 	.word	0x0800ab01
 800aaf4:	0800ab01 	.word	0x0800ab01
 800aaf8:	0800ab01 	.word	0x0800ab01
 800aafc:	0800ab01 	.word	0x0800ab01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab00:	bf00      	nop
  }

  return (USBD_OK);
 800ab02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7f5 fff9 	bl	8000b14 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4805      	ldr	r0, [pc, #20]	; (800ab3c <CDC_Receive_FS+0x2c>)
 800ab26:	f7fe fdb6 	bl	8009696 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab2a:	4804      	ldr	r0, [pc, #16]	; (800ab3c <CDC_Receive_FS+0x2c>)
 800ab2c:	f7fe fdfc 	bl	8009728 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000748 	.word	0x20000748

0800ab40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab50:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <CDC_Transmit_FS+0x48>)
 800ab52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e00b      	b.n	800ab7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab66:	887b      	ldrh	r3, [r7, #2]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	4806      	ldr	r0, [pc, #24]	; (800ab88 <CDC_Transmit_FS+0x48>)
 800ab6e:	f7fe fd74 	bl	800965a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab72:	4805      	ldr	r0, [pc, #20]	; (800ab88 <CDC_Transmit_FS+0x48>)
 800ab74:	f7fe fda8 	bl	80096c8 <USBD_CDC_TransmitPacket>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000748 	.word	0x20000748

0800ab8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4613      	mov	r3, r2
 800ab98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	6039      	str	r1, [r7, #0]
 800abba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2212      	movs	r2, #18
 800abc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800abc2:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	2000016c 	.word	0x2000016c

0800abd4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	6039      	str	r1, [r7, #0]
 800abde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	2204      	movs	r2, #4
 800abe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abe6:	4b03      	ldr	r3, [pc, #12]	; (800abf4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	20000180 	.word	0x20000180

0800abf8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	6039      	str	r1, [r7, #0]
 800ac02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d105      	bne.n	800ac16 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	4907      	ldr	r1, [pc, #28]	; (800ac2c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac0e:	4808      	ldr	r0, [pc, #32]	; (800ac30 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac10:	f7ff fdf3 	bl	800a7fa <USBD_GetString>
 800ac14:	e004      	b.n	800ac20 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4904      	ldr	r1, [pc, #16]	; (800ac2c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac1a:	4805      	ldr	r0, [pc, #20]	; (800ac30 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac1c:	f7ff fded 	bl	800a7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac20:	4b02      	ldr	r3, [pc, #8]	; (800ac2c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200011e8 	.word	0x200011e8
 800ac30:	0800b478 	.word	0x0800b478

0800ac34 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	4904      	ldr	r1, [pc, #16]	; (800ac54 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac44:	4804      	ldr	r0, [pc, #16]	; (800ac58 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac46:	f7ff fdd8 	bl	800a7fa <USBD_GetString>
  return USBD_StrDesc;
 800ac4a:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	200011e8 	.word	0x200011e8
 800ac58:	0800b490 	.word	0x0800b490

0800ac5c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	221a      	movs	r2, #26
 800ac6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac6e:	f000 f843 	bl	800acf8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac72:	4b02      	ldr	r3, [pc, #8]	; (800ac7c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	20000184 	.word	0x20000184

0800ac80 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	6039      	str	r1, [r7, #0]
 800ac8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d105      	bne.n	800ac9e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	4907      	ldr	r1, [pc, #28]	; (800acb4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac96:	4808      	ldr	r0, [pc, #32]	; (800acb8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac98:	f7ff fdaf 	bl	800a7fa <USBD_GetString>
 800ac9c:	e004      	b.n	800aca8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	4904      	ldr	r1, [pc, #16]	; (800acb4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800aca2:	4805      	ldr	r0, [pc, #20]	; (800acb8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800aca4:	f7ff fda9 	bl	800a7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800aca8:	4b02      	ldr	r3, [pc, #8]	; (800acb4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200011e8 	.word	0x200011e8
 800acb8:	0800b4a4 	.word	0x0800b4a4

0800acbc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	6039      	str	r1, [r7, #0]
 800acc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d105      	bne.n	800acda <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	4907      	ldr	r1, [pc, #28]	; (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acd2:	4808      	ldr	r0, [pc, #32]	; (800acf4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acd4:	f7ff fd91 	bl	800a7fa <USBD_GetString>
 800acd8:	e004      	b.n	800ace4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4904      	ldr	r1, [pc, #16]	; (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acde:	4805      	ldr	r0, [pc, #20]	; (800acf4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ace0:	f7ff fd8b 	bl	800a7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ace4:	4b02      	ldr	r3, [pc, #8]	; (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	200011e8 	.word	0x200011e8
 800acf4:	0800b4b0 	.word	0x0800b4b0

0800acf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acfe:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <Get_SerialNum+0x44>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad04:	4b0e      	ldr	r3, [pc, #56]	; (800ad40 <Get_SerialNum+0x48>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad0a:	4b0e      	ldr	r3, [pc, #56]	; (800ad44 <Get_SerialNum+0x4c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4413      	add	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad1e:	2208      	movs	r2, #8
 800ad20:	4909      	ldr	r1, [pc, #36]	; (800ad48 <Get_SerialNum+0x50>)
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f814 	bl	800ad50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad28:	2204      	movs	r2, #4
 800ad2a:	4908      	ldr	r1, [pc, #32]	; (800ad4c <Get_SerialNum+0x54>)
 800ad2c:	68b8      	ldr	r0, [r7, #8]
 800ad2e:	f000 f80f 	bl	800ad50 <IntToUnicode>
  }
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	1fff7590 	.word	0x1fff7590
 800ad40:	1fff7594 	.word	0x1fff7594
 800ad44:	1fff7598 	.word	0x1fff7598
 800ad48:	20000186 	.word	0x20000186
 800ad4c:	20000196 	.word	0x20000196

0800ad50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]
 800ad66:	e027      	b.n	800adb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	0f1b      	lsrs	r3, r3, #28
 800ad6c:	2b09      	cmp	r3, #9
 800ad6e:	d80b      	bhi.n	800ad88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	0f1b      	lsrs	r3, r3, #28
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	440b      	add	r3, r1
 800ad80:	3230      	adds	r2, #48	; 0x30
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e00a      	b.n	800ad9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	0f1b      	lsrs	r3, r3, #28
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	4619      	mov	r1, r3
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	440b      	add	r3, r1
 800ad98:	3237      	adds	r2, #55	; 0x37
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	011b      	lsls	r3, r3, #4
 800ada2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	3301      	adds	r3, #1
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	4413      	add	r3, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	3301      	adds	r3, #1
 800adb6:	75fb      	strb	r3, [r7, #23]
 800adb8:	7dfa      	ldrb	r2, [r7, #23]
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d3d3      	bcc.n	800ad68 <IntToUnicode+0x18>
  }
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	371c      	adds	r7, #28
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
	...

0800add0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b094      	sub	sp, #80	; 0x50
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800add8:	f107 030c 	add.w	r3, r7, #12
 800addc:	2244      	movs	r2, #68	; 0x44
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fb35 	bl	800b450 <memset>
  if(pcdHandle->Instance==USB)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a19      	ldr	r2, [pc, #100]	; (800ae50 <HAL_PCD_MspInit+0x80>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d12b      	bne.n	800ae48 <HAL_PCD_MspInit+0x78>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800adf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adf4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800adf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adfa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800adfc:	f107 030c 	add.w	r3, r7, #12
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fa fa83 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ae0c:	f7f6 ffd0 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae10:	4b10      	ldr	r3, [pc, #64]	; (800ae54 <HAL_PCD_MspInit+0x84>)
 800ae12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae14:	4a0f      	ldr	r2, [pc, #60]	; (800ae54 <HAL_PCD_MspInit+0x84>)
 800ae16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae1a:	6593      	str	r3, [r2, #88]	; 0x58
 800ae1c:	4b0d      	ldr	r3, [pc, #52]	; (800ae54 <HAL_PCD_MspInit+0x84>)
 800ae1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae24:	60bb      	str	r3, [r7, #8]
 800ae26:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	2013      	movs	r0, #19
 800ae2e:	f7f7 fc7c 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800ae32:	2013      	movs	r0, #19
 800ae34:	f7f7 fc93 	bl	800275e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	2014      	movs	r0, #20
 800ae3e:	f7f7 fc74 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae42:	2014      	movs	r0, #20
 800ae44:	f7f7 fc8b 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae48:	bf00      	nop
 800ae4a:	3750      	adds	r7, #80	; 0x50
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40005c00 	.word	0x40005c00
 800ae54:	40021000 	.word	0x40021000

0800ae58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	f7fe fd26 	bl	80098c0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae74:	bf00      	nop
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae8e:	78fa      	ldrb	r2, [r7, #3]
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	4613      	mov	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	00db      	lsls	r3, r3, #3
 800ae9a:	440b      	add	r3, r1
 800ae9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	78fb      	ldrb	r3, [r7, #3]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f7fe fd60 	bl	800996a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	460b      	mov	r3, r1
 800aebc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800aec4:	78fa      	ldrb	r2, [r7, #3]
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	4613      	mov	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	440b      	add	r3, r1
 800aed2:	333c      	adds	r3, #60	; 0x3c
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	4619      	mov	r1, r3
 800aeda:	f7fe fda9 	bl	8009a30 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe febd 	bl	8009c74 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b084      	sub	sp, #16
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af0a:	2301      	movs	r3, #1
 800af0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	2b02      	cmp	r3, #2
 800af14:	d001      	beq.n	800af1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af16:	f7f6 ff4b 	bl	8001db0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af20:	7bfa      	ldrb	r2, [r7, #15]
 800af22:	4611      	mov	r1, r2
 800af24:	4618      	mov	r0, r3
 800af26:	f7fe fe67 	bl	8009bf8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe fe13 	bl	8009b5c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe fe62 	bl	8009c18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <HAL_PCD_SuspendCallback+0x30>)
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	4a03      	ldr	r2, [pc, #12]	; (800af70 <HAL_PCD_SuspendCallback+0x30>)
 800af62:	f043 0306 	orr.w	r3, r3, #6
 800af66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	e000ed00 	.word	0xe000ed00

0800af74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d007      	beq.n	800af94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af84:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <HAL_PCD_ResumeCallback+0x34>)
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	4a07      	ldr	r2, [pc, #28]	; (800afa8 <HAL_PCD_ResumeCallback+0x34>)
 800af8a:	f023 0306 	bic.w	r3, r3, #6
 800af8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af90:	f000 f9fa 	bl	800b388 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fe fe52 	bl	8009c44 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	e000ed00 	.word	0xe000ed00

0800afac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800afb4:	4a2b      	ldr	r2, [pc, #172]	; (800b064 <USBD_LL_Init+0xb8>)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a29      	ldr	r2, [pc, #164]	; (800b064 <USBD_LL_Init+0xb8>)
 800afc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800afc4:	4b27      	ldr	r3, [pc, #156]	; (800b064 <USBD_LL_Init+0xb8>)
 800afc6:	4a28      	ldr	r2, [pc, #160]	; (800b068 <USBD_LL_Init+0xbc>)
 800afc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afca:	4b26      	ldr	r3, [pc, #152]	; (800b064 <USBD_LL_Init+0xb8>)
 800afcc:	2208      	movs	r2, #8
 800afce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afd0:	4b24      	ldr	r3, [pc, #144]	; (800b064 <USBD_LL_Init+0xb8>)
 800afd2:	2202      	movs	r2, #2
 800afd4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afd6:	4b23      	ldr	r3, [pc, #140]	; (800b064 <USBD_LL_Init+0xb8>)
 800afd8:	2202      	movs	r2, #2
 800afda:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afdc:	4b21      	ldr	r3, [pc, #132]	; (800b064 <USBD_LL_Init+0xb8>)
 800afde:	2200      	movs	r2, #0
 800afe0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afe2:	4b20      	ldr	r3, [pc, #128]	; (800b064 <USBD_LL_Init+0xb8>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afe8:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <USBD_LL_Init+0xb8>)
 800afea:	2200      	movs	r2, #0
 800afec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afee:	4b1d      	ldr	r3, [pc, #116]	; (800b064 <USBD_LL_Init+0xb8>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aff4:	481b      	ldr	r0, [pc, #108]	; (800b064 <USBD_LL_Init+0xb8>)
 800aff6:	f7f7 fea5 	bl	8002d44 <HAL_PCD_Init>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b000:	f7f6 fed6 	bl	8001db0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b00a:	2318      	movs	r3, #24
 800b00c:	2200      	movs	r2, #0
 800b00e:	2100      	movs	r1, #0
 800b010:	f7f9 fb5e 	bl	80046d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b01a:	2358      	movs	r3, #88	; 0x58
 800b01c:	2200      	movs	r2, #0
 800b01e:	2180      	movs	r1, #128	; 0x80
 800b020:	f7f9 fb56 	bl	80046d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b02a:	23c0      	movs	r3, #192	; 0xc0
 800b02c:	2200      	movs	r2, #0
 800b02e:	2181      	movs	r1, #129	; 0x81
 800b030:	f7f9 fb4e 	bl	80046d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b03a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b03e:	2200      	movs	r2, #0
 800b040:	2101      	movs	r1, #1
 800b042:	f7f9 fb45 	bl	80046d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b04c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b050:	2200      	movs	r2, #0
 800b052:	2182      	movs	r1, #130	; 0x82
 800b054:	f7f9 fb3c 	bl	80046d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	200013e8 	.word	0x200013e8
 800b068:	40005c00 	.word	0x40005c00

0800b06c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b082:	4618      	mov	r0, r3
 800b084:	f7f7 ff43 	bl	8002f0e <HAL_PCD_Start>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f980 	bl	800b394 <USBD_Get_USB_Status>
 800b094:	4603      	mov	r3, r0
 800b096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b098:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	70fb      	strb	r3, [r7, #3]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	70bb      	strb	r3, [r7, #2]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0ca:	78bb      	ldrb	r3, [r7, #2]
 800b0cc:	883a      	ldrh	r2, [r7, #0]
 800b0ce:	78f9      	ldrb	r1, [r7, #3]
 800b0d0:	f7f8 f88b 	bl	80031ea <HAL_PCD_EP_Open>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f95a 	bl	800b394 <USBD_Get_USB_Status>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b108:	78fa      	ldrb	r2, [r7, #3]
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f8 f8d2 	bl	80032b6 <HAL_PCD_EP_Close>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 f93b 	bl	800b394 <USBD_Get_USB_Status>
 800b11e:	4603      	mov	r3, r0
 800b120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b122:	7bbb      	ldrb	r3, [r7, #14]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b146:	78fa      	ldrb	r2, [r7, #3]
 800b148:	4611      	mov	r1, r2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7f8 f993 	bl	8003476 <HAL_PCD_EP_SetStall>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f91c 	bl	800b394 <USBD_Get_USB_Status>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b160:	7bbb      	ldrb	r3, [r7, #14]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f8 f9c6 	bl	800351a <HAL_PCD_EP_ClrStall>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 f8fd 	bl	800b394 <USBD_Get_USB_Status>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	da0c      	bge.n	800b1de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1c4:	78fb      	ldrb	r3, [r7, #3]
 800b1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ca:	68f9      	ldr	r1, [r7, #12]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	440b      	add	r3, r1
 800b1d8:	3302      	adds	r3, #2
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	e00b      	b.n	800b1f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e4:	68f9      	ldr	r1, [r7, #12]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	440b      	add	r3, r1
 800b1f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b1f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4611      	mov	r1, r2
 800b220:	4618      	mov	r0, r3
 800b222:	f7f7 ffbd 	bl	80031a0 <HAL_PCD_SetAddress>
 800b226:	4603      	mov	r3, r0
 800b228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 f8b1 	bl	800b394 <USBD_Get_USB_Status>
 800b232:	4603      	mov	r3, r0
 800b234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b236:	7bbb      	ldrb	r3, [r7, #14]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	603b      	str	r3, [r7, #0]
 800b24c:	460b      	mov	r3, r1
 800b24e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b25e:	7af9      	ldrb	r1, [r7, #11]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	f7f8 f8c4 	bl	80033f0 <HAL_PCD_EP_Transmit>
 800b268:	4603      	mov	r3, r0
 800b26a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b26c:	7dfb      	ldrb	r3, [r7, #23]
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 f890 	bl	800b394 <USBD_Get_USB_Status>
 800b274:	4603      	mov	r3, r0
 800b276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b278:	7dbb      	ldrb	r3, [r7, #22]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b086      	sub	sp, #24
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	460b      	mov	r3, r1
 800b290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2a0:	7af9      	ldrb	r1, [r7, #11]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	f7f8 f84e 	bl	8003346 <HAL_PCD_EP_Receive>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 f86f 	bl	800b394 <USBD_Get_USB_Status>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2d6:	78fa      	ldrb	r2, [r7, #3]
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7f8 f870 	bl	80033c0 <HAL_PCD_EP_GetRxCount>
 800b2e0:	4603      	mov	r3, r0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <HAL_PCDEx_LPM_Callback+0x18>
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d013      	beq.n	800b32a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b302:	e023      	b.n	800b34c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d007      	beq.n	800b31c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b30c:	f000 f83c 	bl	800b388 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b310:	4b10      	ldr	r3, [pc, #64]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	4a0f      	ldr	r2, [pc, #60]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b316:	f023 0306 	bic.w	r3, r3, #6
 800b31a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe fc8e 	bl	8009c44 <USBD_LL_Resume>
    break;
 800b328:	e010      	b.n	800b34c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe fc71 	bl	8009c18 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d005      	beq.n	800b34a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b33e:	4b05      	ldr	r3, [pc, #20]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	4a04      	ldr	r2, [pc, #16]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b344:	f043 0306 	orr.w	r3, r3, #6
 800b348:	6113      	str	r3, [r2, #16]
    break;
 800b34a:	bf00      	nop
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	e000ed00 	.word	0xe000ed00

0800b358 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b360:	4b03      	ldr	r3, [pc, #12]	; (800b370 <USBD_static_malloc+0x18>)
}
 800b362:	4618      	mov	r0, r3
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	2000022c 	.word	0x2000022c

0800b374 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]

}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b38c:	f7f6 f836 	bl	80013fc <SystemClock_Config>
}
 800b390:	bf00      	nop
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d817      	bhi.n	800b3d8 <USBD_Get_USB_Status+0x44>
 800b3a8:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <USBD_Get_USB_Status+0x1c>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b3c1 	.word	0x0800b3c1
 800b3b4:	0800b3c7 	.word	0x0800b3c7
 800b3b8:	0800b3cd 	.word	0x0800b3cd
 800b3bc:	0800b3d3 	.word	0x0800b3d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c4:	e00b      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ca:	e008      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d0:	e005      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d6:	e002      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	73fb      	strb	r3, [r7, #15]
    break;
 800b3dc:	bf00      	nop
  }
  return usb_status;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <__libc_init_array>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	4d0d      	ldr	r5, [pc, #52]	; (800b424 <__libc_init_array+0x38>)
 800b3f0:	4c0d      	ldr	r4, [pc, #52]	; (800b428 <__libc_init_array+0x3c>)
 800b3f2:	1b64      	subs	r4, r4, r5
 800b3f4:	10a4      	asrs	r4, r4, #2
 800b3f6:	2600      	movs	r6, #0
 800b3f8:	42a6      	cmp	r6, r4
 800b3fa:	d109      	bne.n	800b410 <__libc_init_array+0x24>
 800b3fc:	4d0b      	ldr	r5, [pc, #44]	; (800b42c <__libc_init_array+0x40>)
 800b3fe:	4c0c      	ldr	r4, [pc, #48]	; (800b430 <__libc_init_array+0x44>)
 800b400:	f000 f82e 	bl	800b460 <_init>
 800b404:	1b64      	subs	r4, r4, r5
 800b406:	10a4      	asrs	r4, r4, #2
 800b408:	2600      	movs	r6, #0
 800b40a:	42a6      	cmp	r6, r4
 800b40c:	d105      	bne.n	800b41a <__libc_init_array+0x2e>
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	f855 3b04 	ldr.w	r3, [r5], #4
 800b414:	4798      	blx	r3
 800b416:	3601      	adds	r6, #1
 800b418:	e7ee      	b.n	800b3f8 <__libc_init_array+0xc>
 800b41a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41e:	4798      	blx	r3
 800b420:	3601      	adds	r6, #1
 800b422:	e7f2      	b.n	800b40a <__libc_init_array+0x1e>
 800b424:	0800b4d0 	.word	0x0800b4d0
 800b428:	0800b4d0 	.word	0x0800b4d0
 800b42c:	0800b4d0 	.word	0x0800b4d0
 800b430:	0800b4d4 	.word	0x0800b4d4

0800b434 <memcpy>:
 800b434:	440a      	add	r2, r1
 800b436:	4291      	cmp	r1, r2
 800b438:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b43c:	d100      	bne.n	800b440 <memcpy+0xc>
 800b43e:	4770      	bx	lr
 800b440:	b510      	push	{r4, lr}
 800b442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44a:	4291      	cmp	r1, r2
 800b44c:	d1f9      	bne.n	800b442 <memcpy+0xe>
 800b44e:	bd10      	pop	{r4, pc}

0800b450 <memset>:
 800b450:	4402      	add	r2, r0
 800b452:	4603      	mov	r3, r0
 800b454:	4293      	cmp	r3, r2
 800b456:	d100      	bne.n	800b45a <memset+0xa>
 800b458:	4770      	bx	lr
 800b45a:	f803 1b01 	strb.w	r1, [r3], #1
 800b45e:	e7f9      	b.n	800b454 <memset+0x4>

0800b460 <_init>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	bf00      	nop
 800b464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b466:	bc08      	pop	{r3}
 800b468:	469e      	mov	lr, r3
 800b46a:	4770      	bx	lr

0800b46c <_fini>:
 800b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46e:	bf00      	nop
 800b470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b472:	bc08      	pop	{r3}
 800b474:	469e      	mov	lr, r3
 800b476:	4770      	bx	lr
