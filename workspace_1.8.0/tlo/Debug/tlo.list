
tlo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a64c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a824  0800a824  0001a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a87c  0800a87c  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a87c  0800a87c  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a87c  0800a87c  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800a884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  200001a0  0800aa24  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016ac  0800aa24  000216ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205e4  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  000407b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021731  00000000  00000000  00047048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a58f  00000000  00000000  00068779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a2a  00000000  00000000  00082d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d38  00000000  00000000  0014c788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a80c 	.word	0x0800a80c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0800a80c 	.word	0x0800a80c

08000218 <CDC_On_Receive>:
Feedback feedback = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .bools = 0, .deliminer = 0xAAAA};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) //uint8_t* Buf, uint32_t* Len
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)){
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b10      	cmp	r3, #16
 8000228:	d104      	bne.n	8000234 <CDC_On_Receive+0x1c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2210      	movs	r2, #16
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4818      	ldr	r0, [pc, #96]	; (8000290 <CDC_On_Receive+0x78>)
 8000230:	f00a fad6 	bl	800a7e0 <memcpy>
	}
	if (command.delimiter == 0xAAAA){
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <CDC_On_Receive+0x78>)
 8000236:	89db      	ldrh	r3, [r3, #14]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
		isCommandReceived = 1;
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <CDC_On_Receive+0x7c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}
	feedback.speed1 = return_M1;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <CDC_On_Receive+0x80>)
 8000248:	f9b3 2000 	ldrsh.w	r2, [r3]
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <CDC_On_Receive+0x84>)
 800024e:	801a      	strh	r2, [r3, #0]
	feedback.speed2 = return_M2;
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <CDC_On_Receive+0x88>)
 8000252:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <CDC_On_Receive+0x84>)
 8000258:	805a      	strh	r2, [r3, #2]
	feedback.speed3 = return_M3;
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <CDC_On_Receive+0x8c>)
 800025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <CDC_On_Receive+0x84>)
 8000262:	809a      	strh	r2, [r3, #4]
	feedback.bools = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8000264:	2120      	movs	r1, #32
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f001 fdeb 	bl	8001e44 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	461a      	mov	r2, r3
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <CDC_On_Receive+0x84>)
 8000274:	719a      	strb	r2, [r3, #6]
	feedback.deliminer = 0xAAAA;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <CDC_On_Receive+0x84>)
 8000278:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800027c:	811a      	strh	r2, [r3, #8]
    CDC_Transmit_FS(&feedback, sizeof(feedback));
 800027e:	210a      	movs	r1, #10
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <CDC_On_Receive+0x84>)
 8000282:	f009 fe33 	bl	8009eec <CDC_Transmit_FS>
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000000 	.word	0x20000000
 8000294:	200001fa 	.word	0x200001fa
 8000298:	200001f4 	.word	0x200001f4
 800029c:	20000010 	.word	0x20000010
 80002a0:	200001f6 	.word	0x200001f6
 80002a4:	200001f8 	.word	0x200001f8

080002a8 <throw>:

void throw(uint32_t speed)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if (speed > 7500) speed = 7500;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d902      	bls.n	80002c0 <throw+0x18>
 80002ba:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80002be:	607b      	str	r3, [r7, #4]
	if (speed < 2500) speed = 2500;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d802      	bhi.n	80002d0 <throw+0x28>
 80002ca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80002ce:	607b      	str	r3, [r7, #4]
	TIM16->CCR1 = speed;
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <throw+0x74>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(400);
 80002d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80002da:	f001 faff 	bl	80018dc <HAL_Delay>
	TIM17->CCR1 = 1000;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <throw+0x78>)
 80002e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34
	int n = 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	60fb      	str	r3, [r7, #12]
	while (n)
 80002ea:	e009      	b.n	8000300 <throw+0x58>
	{
		n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80002ec:	2120      	movs	r1, #32
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f001 fda7 	bl	8001e44 <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	60fb      	str	r3, [r7, #12]
		HAL_Delay(200);
 80002fa:	20c8      	movs	r0, #200	; 0xc8
 80002fc:	f001 faee 	bl	80018dc <HAL_Delay>
	while (n)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d1f2      	bne.n	80002ec <throw+0x44>
	}
	TIM17->CCR1 = 0;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <throw+0x78>)
 8000308:	2200      	movs	r2, #0
 800030a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = 2500;
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <throw+0x74>)
 800030e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000312:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40014400 	.word	0x40014400
 8000320:	40014800 	.word	0x40014800

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032a:	f001 fa66 	bl	80017fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032e:	f000 f907 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000332:	f000 fd7d 	bl	8000e30 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000336:	f000 faa7 	bl	8000888 <MX_TIM3_Init>
  MX_TIM4_Init();
 800033a:	f000 fafb 	bl	8000934 <MX_TIM4_Init>
  MX_TIM6_Init();
 800033e:	f000 fb4f 	bl	80009e0 <MX_TIM6_Init>
  MX_TIM8_Init();
 8000342:	f000 fb83 	bl	8000a4c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000346:	f000 fa13 	bl	8000770 <MX_TIM2_Init>
  MX_TIM16_Init();
 800034a:	f000 fc7d 	bl	8000c48 <MX_TIM16_Init>
  MX_TIM17_Init();
 800034e:	f000 fcf5 	bl	8000d3c <MX_TIM17_Init>
  MX_TIM15_Init();
 8000352:	f000 fbd5 	bl	8000b00 <MX_TIM15_Init>
  MX_I2C3_Init();
 8000356:	f000 f93f 	bl	80005d8 <MX_I2C3_Init>
  MX_TIM1_Init();
 800035a:	f000 f97d 	bl	8000658 <MX_TIM1_Init>
  MX_USB_Device_Init();
 800035e:	f009 fd03 	bl	8009d68 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 8000362:	2201      	movs	r2, #1
 8000364:	2101      	movs	r1, #1
 8000366:	4861      	ldr	r0, [pc, #388]	; (80004ec <main+0x1c8>)
 8000368:	f001 fd84 	bl	8001e74 <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 800036c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000370:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 8000374:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000376:	2104      	movs	r1, #4
 8000378:	485d      	ldr	r0, [pc, #372]	; (80004f0 <main+0x1cc>)
 800037a:	f004 fca7 	bl	8004ccc <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 800037e:	2064      	movs	r0, #100	; 0x64
 8000380:	f001 faac 	bl	80018dc <HAL_Delay>
  TIM2->CCR2 = 65536;
 8000384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000388:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800038c:	639a      	str	r2, [r3, #56]	; 0x38

  //motor speeds to zero
  TIM2->CCR1 = 0;
 800038e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000392:	2200      	movs	r2, #0
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 8000396:	4b57      	ldr	r3, [pc, #348]	; (80004f4 <main+0x1d0>)
 8000398:	2200      	movs	r2, #0
 800039a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 800039c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a0:	2200      	movs	r2, #0
 80003a2:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003a4:	2100      	movs	r1, #0
 80003a6:	4852      	ldr	r0, [pc, #328]	; (80004f0 <main+0x1cc>)
 80003a8:	f004 fc90 	bl	8004ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80003ac:	2108      	movs	r1, #8
 80003ae:	4850      	ldr	r0, [pc, #320]	; (80004f0 <main+0x1cc>)
 80003b0:	f004 fc8c 	bl	8004ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80003b4:	2100      	movs	r1, #0
 80003b6:	4850      	ldr	r0, [pc, #320]	; (80004f8 <main+0x1d4>)
 80003b8:	f004 fc88 	bl	8004ccc <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80003bc:	2100      	movs	r1, #0
 80003be:	484f      	ldr	r0, [pc, #316]	; (80004fc <main+0x1d8>)
 80003c0:	f004 fc84 	bl	8004ccc <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 80003c4:	4b4e      	ldr	r3, [pc, #312]	; (8000500 <main+0x1dc>)
 80003c6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80003ca:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 80003cc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80003d0:	f001 fa84 	bl	80018dc <HAL_Delay>

  //enable grabber and set its speed to zero
  TIM17->CCR1 = 0;
 80003d4:	4b4b      	ldr	r3, [pc, #300]	; (8000504 <main+0x1e0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80003da:	2100      	movs	r1, #0
 80003dc:	484a      	ldr	r0, [pc, #296]	; (8000508 <main+0x1e4>)
 80003de:	f004 fc75 	bl	8004ccc <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003e2:	2104      	movs	r1, #4
 80003e4:	4849      	ldr	r0, [pc, #292]	; (800050c <main+0x1e8>)
 80003e6:	f004 fe17 	bl	8005018 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003ea:	2104      	movs	r1, #4
 80003ec:	4848      	ldr	r0, [pc, #288]	; (8000510 <main+0x1ec>)
 80003ee:	f004 fe13 	bl	8005018 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003f2:	2104      	movs	r1, #4
 80003f4:	4847      	ldr	r0, [pc, #284]	; (8000514 <main+0x1f0>)
 80003f6:	f004 fe0f 	bl	8005018 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 80003fa:	4847      	ldr	r0, [pc, #284]	; (8000518 <main+0x1f4>)
 80003fc:	f004 fba4 	bl	8004b48 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  uint8_t n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8000400:	2120      	movs	r1, #32
 8000402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000406:	f001 fd1d 	bl	8001e44 <HAL_GPIO_ReadPin>
 800040a:	4603      	mov	r3, r0
 800040c:	71bb      	strb	r3, [r7, #6]

	  if (isCommandReceived){
 800040e:	4b43      	ldr	r3, [pc, #268]	; (800051c <main+0x1f8>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d033      	beq.n	8000480 <main+0x15c>
		  tgt_M1 = command.speed1;
 8000418:	4b41      	ldr	r3, [pc, #260]	; (8000520 <main+0x1fc>)
 800041a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800041e:	461a      	mov	r2, r3
 8000420:	4b40      	ldr	r3, [pc, #256]	; (8000524 <main+0x200>)
 8000422:	601a      	str	r2, [r3, #0]
		  tgt_M2 = command.speed2;
 8000424:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <main+0x1fc>)
 8000426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800042a:	461a      	mov	r2, r3
 800042c:	4b3e      	ldr	r3, [pc, #248]	; (8000528 <main+0x204>)
 800042e:	601a      	str	r2, [r3, #0]
		  tgt_M3 = command.speed3;
 8000430:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <main+0x1fc>)
 8000432:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000436:	461a      	mov	r2, r3
 8000438:	4b3c      	ldr	r3, [pc, #240]	; (800052c <main+0x208>)
 800043a:	601a      	str	r2, [r3, #0]
		  thrower_speed = command.thrower_speed;
 800043c:	4b38      	ldr	r3, [pc, #224]	; (8000520 <main+0x1fc>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a3b      	ldr	r2, [pc, #236]	; (8000530 <main+0x20c>)
 8000442:	6013      	str	r3, [r2, #0]
		  uint8_t bools = command.bools;
 8000444:	4b36      	ldr	r3, [pc, #216]	; (8000520 <main+0x1fc>)
 8000446:	7b1b      	ldrb	r3, [r3, #12]
 8000448:	71fb      	strb	r3, [r7, #7]

		  if (bools >= 2)
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d906      	bls.n	800045e <main+0x13a>
		  {
		  	  bools -= 2;
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	3b02      	subs	r3, #2
 8000454:	71fb      	strb	r3, [r7, #7]
		  	  grabber_on = 1;
 8000456:	4b37      	ldr	r3, [pc, #220]	; (8000534 <main+0x210>)
 8000458:	2201      	movs	r2, #1
 800045a:	701a      	strb	r2, [r3, #0]
 800045c:	e002      	b.n	8000464 <main+0x140>
		  }

		  else
		  {
			  grabber_on = 0;
 800045e:	4b35      	ldr	r3, [pc, #212]	; (8000534 <main+0x210>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
		  }

		  if (bools >= 1)
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d005      	beq.n	8000476 <main+0x152>
		  {
			  bools -= 1;
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3b01      	subs	r3, #1
 800046e:	71fb      	strb	r3, [r7, #7]
			  thrower = 1;
 8000470:	4b31      	ldr	r3, [pc, #196]	; (8000538 <main+0x214>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2101      	movs	r1, #1
 800047a:	481c      	ldr	r0, [pc, #112]	; (80004ec <main+0x1c8>)
 800047c:	f001 fcfa 	bl	8001e74 <HAL_GPIO_WritePin>

	  }



	  if (grabber_on){
 8000480:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <main+0x210>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d00b      	beq.n	80004a0 <main+0x17c>

		  if (n) TIM17->CCR1 = 0;
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d003      	beq.n	8000496 <main+0x172>
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <main+0x1e0>)
 8000490:	2200      	movs	r2, #0
 8000492:	635a      	str	r2, [r3, #52]	; 0x34
 8000494:	e007      	b.n	80004a6 <main+0x182>
		  else TIM17->CCR1 = 1000;
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <main+0x1e0>)
 8000498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
 800049e:	e002      	b.n	80004a6 <main+0x182>

	  }

	  else TIM17->CCR1 = 0;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <main+0x1e0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34

	  if(thrower && n){
 80004a6:	4b24      	ldr	r3, [pc, #144]	; (8000538 <main+0x214>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <main+0x19c>
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d005      	beq.n	80004c0 <main+0x19c>
		  throw(thrower_speed);
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <main+0x20c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fef5 	bl	80002a8 <throw>
 80004be:	e002      	b.n	80004c6 <main+0x1a2>
	  }
	  else thrower = 0;
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <main+0x214>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]

	  if (safety_iters > 100){
 80004c6:	4b1d      	ldr	r3, [pc, #116]	; (800053c <main+0x218>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b64      	cmp	r3, #100	; 0x64
 80004cc:	d998      	bls.n	8000400 <main+0xdc>
		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2101      	movs	r1, #1
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <main+0x1c8>)
 80004d4:	f001 fcce 	bl	8001e74 <HAL_GPIO_WritePin>
		  tgt_M1 = 0;
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <main+0x200>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
		  tgt_M2 = 0;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <main+0x204>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
		  tgt_M3 = 0;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <main+0x208>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
  {
 80004ea:	e789      	b.n	8000400 <main+0xdc>
 80004ec:	48000400 	.word	0x48000400
 80004f0:	2000067c 	.word	0x2000067c
 80004f4:	40014000 	.word	0x40014000
 80004f8:	20000500 	.word	0x20000500
 80004fc:	200006c8 	.word	0x200006c8
 8000500:	40014400 	.word	0x40014400
 8000504:	40014800 	.word	0x40014800
 8000508:	2000054c 	.word	0x2000054c
 800050c:	20000598 	.word	0x20000598
 8000510:	200004b4 	.word	0x200004b4
 8000514:	20000468 	.word	0x20000468
 8000518:	200005e4 	.word	0x200005e4
 800051c:	200001fa 	.word	0x200001fa
 8000520:	20000000 	.word	0x20000000
 8000524:	200001c8 	.word	0x200001c8
 8000528:	200001cc 	.word	0x200001cc
 800052c:	200001d0 	.word	0x200001d0
 8000530:	200001ec 	.word	0x200001ec
 8000534:	200001f0 	.word	0x200001f0
 8000538:	200001f1 	.word	0x200001f1
 800053c:	200001f2 	.word	0x200001f2

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	; 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f00a f954 	bl	800a7fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f003 faf7 	bl	8003b58 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2340      	movs	r3, #64	; 0x40
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000580:	2301      	movs	r3, #1
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000584:	230c      	movs	r3, #12
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800058c:	2304      	movs	r3, #4
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fb91 	bl	8003cc0 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005a4:	f000 fdda 	bl	800115c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fe95 	bl	80042f0 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005cc:	f000 fdc6 	bl	800115c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_I2C3_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_I2C3_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_I2C3_Init+0x74>)
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <MX_I2C3_Init+0x7c>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_I2C3_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_I2C3_Init+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_I2C3_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_I2C3_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C3_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C3_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C3_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <MX_I2C3_Init+0x74>)
 8000614:	f001 fc46 	bl	8001ea4 <HAL_I2C_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800061e:	f000 fd9d 	bl	800115c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <MX_I2C3_Init+0x74>)
 8000626:	f001 fccc 	bl	8001fc2 <HAL_I2CEx_ConfigAnalogFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fd94 	bl	800115c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000634:	2100      	movs	r1, #0
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_I2C3_Init+0x74>)
 8000638:	f001 fd0e 	bl	8002058 <HAL_I2CEx_ConfigDigitalFilter>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fd8b 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000041c 	.word	0x2000041c
 8000650:	40007800 	.word	0x40007800
 8000654:	00303d5b 	.word	0x00303d5b

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b098      	sub	sp, #96	; 0x60
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2234      	movs	r2, #52	; 0x34
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00a f8b9 	bl	800a7fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <MX_TIM1_Init+0x110>)
 800068c:	4a37      	ldr	r2, [pc, #220]	; (800076c <MX_TIM1_Init+0x114>)
 800068e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000690:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_TIM1_Init+0x110>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <MX_TIM1_Init+0x110>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_TIM1_Init+0x110>)
 800069e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_TIM1_Init+0x110>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_TIM1_Init+0x110>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_TIM1_Init+0x110>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b6:	482c      	ldr	r0, [pc, #176]	; (8000768 <MX_TIM1_Init+0x110>)
 80006b8:	f004 fab0 	bl	8004c1c <HAL_TIM_PWM_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 fd4b 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d6:	4619      	mov	r1, r3
 80006d8:	4823      	ldr	r0, [pc, #140]	; (8000768 <MX_TIM1_Init+0x110>)
 80006da:	f005 fd29 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006e4:	f000 fd3a 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80006fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000700:	2210      	movs	r2, #16
 8000702:	4619      	mov	r1, r3
 8000704:	4818      	ldr	r0, [pc, #96]	; (8000768 <MX_TIM1_Init+0x110>)
 8000706:	f004 fe95 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000710:	f000 fd24 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800073a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_TIM1_Init+0x110>)
 8000752:	f005 fd6f 	bl	8006234 <HAL_TIMEx_ConfigBreakDeadTime>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800075c:	f000 fcfe 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3760      	adds	r7, #96	; 0x60
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000630 	.word	0x20000630
 800076c:	40012c00 	.word	0x40012c00

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08e      	sub	sp, #56	; 0x38
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <MX_TIM2_Init+0x114>)
 80007a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <MX_TIM2_Init+0x114>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <MX_TIM2_Init+0x114>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <MX_TIM2_Init+0x114>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MX_TIM2_Init+0x114>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <MX_TIM2_Init+0x114>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ca:	482e      	ldr	r0, [pc, #184]	; (8000884 <MX_TIM2_Init+0x114>)
 80007cc:	f004 f964 	bl	8004a98 <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 fcc1 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4827      	ldr	r0, [pc, #156]	; (8000884 <MX_TIM2_Init+0x114>)
 80007e8:	f004 ff38 	bl	800565c <HAL_TIM_ConfigClockSource>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007f2:	f000 fcb3 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f6:	4823      	ldr	r0, [pc, #140]	; (8000884 <MX_TIM2_Init+0x114>)
 80007f8:	f004 fa10 	bl	8004c1c <HAL_TIM_PWM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000802:	f000 fcab 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_TIM2_Init+0x114>)
 8000816:	f005 fc8b 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000820:	f000 fc9c 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000824:	2360      	movs	r3, #96	; 0x60
 8000826:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_TIM2_Init+0x114>)
 800083c:	f004 fdfa 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000846:	f000 fc89 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	2204      	movs	r2, #4
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_TIM2_Init+0x114>)
 8000852:	f004 fdef 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800085c:	f000 fc7e 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	2208      	movs	r2, #8
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM2_Init+0x114>)
 8000868:	f004 fde4 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000872:	f000 fc73 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM2_Init+0x114>)
 8000878:	f000 fe6a 	bl	8001550 <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	; 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000067c 	.word	0x2000067c

08000888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2224      	movs	r2, #36	; 0x24
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f009 ffb0 	bl	800a7fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_TIM3_Init+0xa4>)
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_TIM3_Init+0xa8>)
 80008aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_TIM3_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM3_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_TIM3_Init+0xa4>)
 80008ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM3_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_TIM3_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008d4:	2301      	movs	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e4:	2301      	movs	r3, #1
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_TIM3_Init+0xa4>)
 80008f8:	f004 fae8 	bl	8004ecc <HAL_TIM_Encoder_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000902:	f000 fc2b 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_TIM3_Init+0xa4>)
 8000914:	f005 fc0c 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800091e:	f000 fc1d 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	; 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000598 	.word	0x20000598
 8000930:	40000400 	.word	0x40000400

08000934 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f009 ff5a 	bl	800a7fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <MX_TIM4_Init+0xa8>)
 8000956:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_TIM4_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_TIM4_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000978:	2301      	movs	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000980:	2301      	movs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_TIM4_Init+0xa4>)
 80009a4:	f004 fa92 	bl	8004ecc <HAL_TIM_Encoder_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009ae:	f000 fbd5 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_TIM4_Init+0xa4>)
 80009c0:	f005 fbb6 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009ca:	f000 fbc7 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200004b4 	.word	0x200004b4
 80009dc:	40000800 	.word	0x40000800

080009e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_TIM6_Init+0x64>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_TIM6_Init+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_TIM6_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_TIM6_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_TIM6_Init+0x64>)
 8000a04:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000a08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_TIM6_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_TIM6_Init+0x64>)
 8000a12:	f004 f841 	bl	8004a98 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a1c:	f000 fb9e 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_TIM6_Init+0x64>)
 8000a2e:	f005 fb7f 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fb90 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200005e4 	.word	0x200005e4
 8000a48:	40001000 	.word	0x40001000

08000a4c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2224      	movs	r2, #36	; 0x24
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f009 fece 	bl	800a7fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000a6c:	4a23      	ldr	r2, [pc, #140]	; (8000afc <MX_TIM8_Init+0xb0>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000a72:	2205      	movs	r2, #5
 8000a74:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64000;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000a7e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000a82:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000ac2:	f004 fa03 	bl	8004ecc <HAL_TIM_Encoder_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000acc:	f000 fb46 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM8_Init+0xac>)
 8000ae2:	f005 fb25 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000aec:	f000 fb36 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000468 	.word	0x20000468
 8000afc:	40013400 	.word	0x40013400

08000b00 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09c      	sub	sp, #112	; 0x70
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2234      	movs	r2, #52	; 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f009 fe5e 	bl	800a7fc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b40:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b42:	4a40      	ldr	r2, [pc, #256]	; (8000c44 <MX_TIM15_Init+0x144>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b46:	4b3e      	ldr	r3, [pc, #248]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b52:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b58:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b60:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b6c:	4834      	ldr	r0, [pc, #208]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b6e:	f003 ff93 	bl	8004a98 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 faf0 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b80:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b86:	4619      	mov	r1, r3
 8000b88:	482d      	ldr	r0, [pc, #180]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b8a:	f004 fd67 	bl	800565c <HAL_TIM_ConfigClockSource>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000b94:	f000 fae2 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000b98:	4829      	ldr	r0, [pc, #164]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000b9a:	f004 f83f 	bl	8004c1c <HAL_TIM_PWM_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000ba4:	f000 fada 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000bb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4822      	ldr	r0, [pc, #136]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000bb8:	f005 faba 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000bc2:	f000 facb 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000bec:	f004 fc22 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8000bf6:	f000 fab1 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000c22:	f005 fb07 	bl	8006234 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8000c2c:	f000 fa96 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM15_Init+0x140>)
 8000c32:	f000 fc8d 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8000c36:	bf00      	nop
 8000c38:	3770      	adds	r7, #112	; 0x70
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000500 	.word	0x20000500
 8000c44:	40014000 	.word	0x40014000

08000c48 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2234      	movs	r2, #52	; 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f009 fdc7 	bl	800a7fc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c70:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <MX_TIM16_Init+0xf0>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c82:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000c86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c9c:	f003 fefc 	bl	8004a98 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ca6:	f000 fa59 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000caa:	4822      	ldr	r0, [pc, #136]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000cac:	f003 ffb6 	bl	8004c1c <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000cb6:	f000 fa51 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4815      	ldr	r0, [pc, #84]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000ce0:	f004 fba8 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cea:	f000 fa37 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d16:	f005 fa8d 	bl	8006234 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d20:	f000 fa1c 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d26:	f000 fc13 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200006c8 	.word	0x200006c8
 8000d38:	40014400 	.word	0x40014400

08000d3c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2234      	movs	r2, #52	; 0x34
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f009 fd4d 	bl	800a7fc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d64:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <MX_TIM17_Init+0xf0>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d76:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000d7a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d90:	f003 fe82 	bl	8004a98 <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d9a:	f000 f9df 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000da0:	f003 ff3c 	bl	8004c1c <HAL_TIM_PWM_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000daa:	f000 f9d7 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	; 0x60
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000dd4:	f004 fb2e 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dde:	f000 f9bd 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e0a:	f005 fa13 	bl	8006234 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e14:	f000 f9a2 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e1a:	f000 fb99 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	; 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000054c 	.word	0x2000054c
 8000e2c:	40014800 	.word	0x40014800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <MX_GPIO_Init+0xbc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <MX_GPIO_Init+0xbc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <MX_GPIO_Init+0xbc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <MX_GPIO_Init+0xbc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a22      	ldr	r2, [pc, #136]	; (8000eec <MX_GPIO_Init+0xbc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <MX_GPIO_Init+0xbc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f240 410a 	movw	r1, #1034	; 0x40a
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f000 fff8 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <MX_GPIO_Init+0xc0>)
 8000e8a:	f000 fff3 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8000e8e:	f240 430a 	movw	r3, #1034	; 0x40a
 8000e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 fe49 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8000eae:	2320      	movs	r3, #32
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f000 fe3c 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_GPIO_Init+0xc0>)
 8000ee0:	f000 fe2e 	bl	8001b40 <HAL_GPIO_Init>

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	; 0x50
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	int32_t Cpos_M1 = (int16_t)TIM3->CNT;
 8000efc:	4b83      	ldr	r3, [pc, #524]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c
	return_M1 += Cpos_M1;
 8000f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	4b81      	ldr	r3, [pc, #516]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	4b7e      	ldr	r3, [pc, #504]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000f18:	801a      	strh	r2, [r3, #0]
	int32_t dif_M1 = Cpos_M1 - Lpos_M1;
 8000f1a:	4b7e      	ldr	r3, [pc, #504]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
	Lpos_M1 = Cpos_M1;
 8000f24:	4a7b      	ldr	r2, [pc, #492]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f28:	6013      	str	r3, [r2, #0]

	int32_t Cpos_M2 = (int16_t)TIM4->CNT;
 8000f2a:	4b7b      	ldr	r3, [pc, #492]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	647b      	str	r3, [r7, #68]	; 0x44
	return_M2 += Cpos_M2;
 8000f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b79      	ldr	r3, [pc, #484]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	4b75      	ldr	r3, [pc, #468]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000f46:	801a      	strh	r2, [r3, #0]
	int32_t dif_M2 = Cpos_M2 - Lpos_M2;
 8000f48:	4b75      	ldr	r3, [pc, #468]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	643b      	str	r3, [r7, #64]	; 0x40
	Lpos_M2 = Cpos_M2;
 8000f52:	4a73      	ldr	r2, [pc, #460]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f56:	6013      	str	r3, [r2, #0]

	int32_t Cpos_M3 = (int16_t)TIM8->CNT;
 8000f58:	4b72      	ldr	r3, [pc, #456]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	return_M3 += Cpos_M3;
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b70      	ldr	r3, [pc, #448]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b6d      	ldr	r3, [pc, #436]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000f74:	801a      	strh	r2, [r3, #0]
	int32_t dif_M3 = Cpos_M3 - Lpos_M3;
 8000f76:	4b6d      	ldr	r3, [pc, #436]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
	Lpos_M3 = Cpos_M3;
 8000f80:	4a6a      	ldr	r2, [pc, #424]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f84:	6013      	str	r3, [r2, #0]

	int32_t Err1 = tgt_M1 - dif_M1;
 8000f86:	4b6a      	ldr	r3, [pc, #424]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t Err2 = tgt_M2 - dif_M2;
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t Err3 = tgt_M3 - dif_M3;
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t pk = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t pi = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t pd = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]

	integral_M1 += Err1;
 8000fb0:	4b62      	ldr	r3, [pc, #392]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a60      	ldr	r2, [pc, #384]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000fba:	6013      	str	r3, [r2, #0]
	integral_M2 += Err2;
 8000fbc:	4b60      	ldr	r3, [pc, #384]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a5e      	ldr	r2, [pc, #376]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000fc6:	6013      	str	r3, [r2, #0]
	integral_M3 += Err3;
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a5c      	ldr	r2, [pc, #368]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fd2:	6013      	str	r3, [r2, #0]

	int32_t derivative_M1 = (Err1 - last_err_M1);
 8000fd4:	4b5c      	ldr	r3, [pc, #368]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	61fb      	str	r3, [r7, #28]
	int32_t derivative_M2 = (Err2 - last_err_M2);
 8000fde:	4b5b      	ldr	r3, [pc, #364]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	61bb      	str	r3, [r7, #24]
	int32_t derivative_M3 = (Err3 - last_err_M3);
 8000fe8:	4b59      	ldr	r3, [pc, #356]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]

	last_err_M1 = Err1;
 8000ff2:	4a55      	ldr	r2, [pc, #340]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	6013      	str	r3, [r2, #0]
	last_err_M2 = Err2;
 8000ff8:	4a54      	ldr	r2, [pc, #336]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffc:	6013      	str	r3, [r2, #0]
	last_err_M3 = Err3;
 8000ffe:	4a54      	ldr	r2, [pc, #336]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001002:	6013      	str	r3, [r2, #0]

	int32_t Speed_M1 = (int32_t) Err1 * pk + integral_M1 * pi + derivative_M1 * pd;
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001008:	fb02 f203 	mul.w	r2, r2, r3
 800100c:	4b4b      	ldr	r3, [pc, #300]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	441a      	add	r2, r3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	6a39      	ldr	r1, [r7, #32]
 800101c:	fb01 f303 	mul.w	r3, r1, r3
 8001020:	4413      	add	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
	int32_t Speed_M2 = (int32_t) Err2 * pk + integral_M2 * pi + derivative_M2 * pd;
 8001024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001028:	fb02 f203 	mul.w	r2, r2, r3
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001032:	fb01 f303 	mul.w	r3, r1, r3
 8001036:	441a      	add	r2, r3
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6a39      	ldr	r1, [r7, #32]
 800103c:	fb01 f303 	mul.w	r3, r1, r3
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
	int32_t Speed_M3 = (int32_t) Err3 * pk + integral_M3 * pi + derivative_M3 * pd;
 8001044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001048:	fb02 f203 	mul.w	r2, r2, r3
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001052:	fb01 f303 	mul.w	r3, r1, r3
 8001056:	441a      	add	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	6a39      	ldr	r1, [r7, #32]
 800105c:	fb01 f303 	mul.w	r3, r1, r3
 8001060:	4413      	add	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]

	if (Speed_M1 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db06      	blt.n	8001078 <HAL_TIM_PeriodElapsedCallback+0x184>
 800106a:	2200      	movs	r2, #0
 800106c:	2102      	movs	r1, #2
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f000 feff 	bl	8001e74 <HAL_GPIO_WritePin>
 8001076:	e005      	b.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x190>
	else HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f000 fef8 	bl	8001e74 <HAL_GPIO_WritePin>

	if (Speed_M2 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M2_DIR_Pin, 0);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db07      	blt.n	800109a <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f000 feee 	bl	8001e74 <HAL_GPIO_WritePin>
 8001098:	e006      	b.n	80010a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>
	else HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f000 fee6 	bl	8001e74 <HAL_GPIO_WritePin>

	if (Speed_M3 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db06      	blt.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x1c8>
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f000 fedd 	bl	8001e74 <HAL_GPIO_WritePin>
 80010ba:	e005      	b.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>
	else HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	2108      	movs	r1, #8
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f000 fed6 	bl	8001e74 <HAL_GPIO_WritePin>

	TIM2->CCR1 = abs(Speed_M1);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010ce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR1 = abs(Speed_M2);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR3 = abs(Speed_M3);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010ec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c

	safety_iters++;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001100:	701a      	strb	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	3750      	adds	r7, #80	; 0x50
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40000400 	.word	0x40000400
 8001110:	200001f4 	.word	0x200001f4
 8001114:	200001bc 	.word	0x200001bc
 8001118:	40000800 	.word	0x40000800
 800111c:	200001f6 	.word	0x200001f6
 8001120:	200001c0 	.word	0x200001c0
 8001124:	40013400 	.word	0x40013400
 8001128:	200001f8 	.word	0x200001f8
 800112c:	200001c4 	.word	0x200001c4
 8001130:	200001c8 	.word	0x200001c8
 8001134:	200001cc 	.word	0x200001cc
 8001138:	200001d0 	.word	0x200001d0
 800113c:	200001d4 	.word	0x200001d4
 8001140:	200001d8 	.word	0x200001d8
 8001144:	200001dc 	.word	0x200001dc
 8001148:	200001e0 	.word	0x200001e0
 800114c:	200001e4 	.word	0x200001e4
 8001150:	200001e8 	.word	0x200001e8
 8001154:	40014000 	.word	0x40014000
 8001158:	200001f2 	.word	0x200001f2

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x44>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x44>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6613      	str	r3, [r2, #96]	; 0x60
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x44>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x44>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x44>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6593      	str	r3, [r2, #88]	; 0x58
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x44>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800119e:	f002 fd7f 	bl	8003ca0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09c      	sub	sp, #112	; 0x70
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	2244      	movs	r2, #68	; 0x44
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f009 fb13 	bl	800a7fc <memset>
  if(hi2c->Instance==I2C3)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <HAL_I2C_MspInit+0xe4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d154      	bne.n	800128a <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fa62 	bl	80046b8 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011fa:	f7ff ffaf 	bl	800115c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a25      	ldr	r2, [pc, #148]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001234:	2312      	movs	r3, #18
 8001236:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001240:	2302      	movs	r3, #2
 8001242:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f000 fc77 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001252:	2320      	movs	r3, #32
 8001254:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001256:	2312      	movs	r3, #18
 8001258:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001262:	2308      	movs	r3, #8
 8001264:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <HAL_I2C_MspInit+0xec>)
 800126e:	f000 fc67 	bl	8001b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 8001278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_I2C_MspInit+0xe8>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3770      	adds	r7, #112	; 0x70
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40007800 	.word	0x40007800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400

080012a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_TIM_PWM_MspInit+0x38>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10b      	bne.n	80012ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_TIM_PWM_MspInit+0x3c>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_TIM_PWM_MspInit+0x3c>)
 80012b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012bc:	6613      	str	r3, [r2, #96]	; 0x60
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_TIM_PWM_MspInit+0x3c>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f0:	d10c      	bne.n	800130c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800130a:	e04e      	b.n	80013aa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <HAL_TIM_Base_MspInit+0xd8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2036      	movs	r0, #54	; 0x36
 8001334:	f000 fbcf 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001338:	2036      	movs	r0, #54	; 0x36
 800133a:	f000 fbe6 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 800133e:	e034      	b.n	80013aa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_TIM_Base_MspInit+0xdc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10c      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6613      	str	r3, [r2, #96]	; 0x60
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
}
 8001362:	e022      	b.n	80013aa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_TIM_Base_MspInit+0xe0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10c      	bne.n	8001388 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	6613      	str	r3, [r2, #96]	; 0x60
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
}
 8001386:	e010      	b.n	80013aa <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_TIM_Base_MspInit+0xe4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10b      	bne.n	80013aa <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6613      	str	r3, [r2, #96]	; 0x60
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_TIM_Base_MspInit+0xd4>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40001000 	.word	0x40001000
 80013bc:	40014000 	.word	0x40014000
 80013c0:	40014400 	.word	0x40014400
 80013c4:	40014800 	.word	0x40014800

080013c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a55      	ldr	r2, [pc, #340]	; (800153c <HAL_TIM_Encoder_MspInit+0x174>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d129      	bne.n	800143e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	4a54      	ldr	r2, [pc, #336]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6593      	str	r3, [r2, #88]	; 0x58
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 800141a:	2350      	movs	r3, #80	; 0x50
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142a:	2302      	movs	r3, #2
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f000 fb82 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800143c:	e079      	b.n	8001532 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a40      	ldr	r2, [pc, #256]	; (8001544 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d128      	bne.n	800149a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001448:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	4a3c      	ldr	r2, [pc, #240]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6593      	str	r3, [r2, #88]	; 0x58
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	4a36      	ldr	r2, [pc, #216]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 8001478:	23c0      	movs	r3, #192	; 0xc0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001488:	2302      	movs	r3, #2
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	482d      	ldr	r0, [pc, #180]	; (8001548 <HAL_TIM_Encoder_MspInit+0x180>)
 8001494:	f000 fb54 	bl	8001b40 <HAL_GPIO_Init>
}
 8001498:	e04b      	b.n	8001532 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <HAL_TIM_Encoder_MspInit+0x184>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d146      	bne.n	8001532 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ae:	6613      	str	r3, [r2, #96]	; 0x60
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_TIM_Encoder_MspInit+0x178>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCA_Pin;
 80014ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80014fe:	2302      	movs	r3, #2
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_ENCA_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f000 fb18 	bl	8001b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8_CH2_ENCB_Pin;
 8001510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001522:	230a      	movs	r3, #10
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH2_ENCB_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <HAL_TIM_Encoder_MspInit+0x180>)
 800152e:	f000 fb07 	bl	8001b40 <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3738      	adds	r7, #56	; 0x38
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40000400 	.word	0x40000400
 8001540:	40021000 	.word	0x40021000
 8001544:	40000800 	.word	0x40000800
 8001548:	48000400 	.word	0x48000400
 800154c:	40013400 	.word	0x40013400

08001550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001570:	d14b      	bne.n	800160a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a5a      	ldr	r2, [pc, #360]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b58      	ldr	r3, [pc, #352]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b52      	ldr	r3, [pc, #328]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_VH1_M1_PWM_Pin;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_VH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c0:	f000 fabe 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 80015c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80015d6:	230a      	movs	r3, #10
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f000 faac 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 80015e8:	2308      	movs	r3, #8
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4838      	ldr	r0, [pc, #224]	; (80016e4 <HAL_TIM_MspPostInit+0x194>)
 8001604:	f000 fa9c 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001608:	e066      	b.n	80016d8 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a36      	ldr	r2, [pc, #216]	; (80016e8 <HAL_TIM_MspPostInit+0x198>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d11d      	bne.n	8001650 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 800162c:	2304      	movs	r3, #4
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800163c:	2309      	movs	r3, #9
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f000 fa79 	bl	8001b40 <HAL_GPIO_Init>
}
 800164e:	e043      	b.n	80016d8 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a25      	ldr	r2, [pc, #148]	; (80016ec <HAL_TIM_MspPostInit+0x19c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d11c      	bne.n	8001694 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 8001672:	2310      	movs	r3, #16
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001682:	2301      	movs	r3, #1
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <HAL_TIM_MspPostInit+0x194>)
 800168e:	f000 fa57 	bl	8001b40 <HAL_GPIO_Init>
}
 8001692:	e021      	b.n	80016d8 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_TIM_MspPostInit+0x1a0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d11c      	bne.n	80016d8 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_TIM_MspPostInit+0x190>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80016c6:	2301      	movs	r3, #1
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f000 fa34 	bl	8001b40 <HAL_GPIO_Init>
}
 80016d8:	bf00      	nop
 80016da:	3730      	adds	r7, #48	; 0x30
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	40014000 	.word	0x40014000
 80016ec:	40014400 	.word	0x40014400
 80016f0:	40014800 	.word	0x40014800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 f8ae 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <USB_HP_IRQHandler+0x10>)
 800174e:	f000 fdd6 	bl	80022fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200013b8 	.word	0x200013b8

0800175c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <USB_LP_IRQHandler+0x10>)
 8001762:	f000 fdcc 	bl	80022fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200013b8 	.word	0x200013b8

08001770 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <TIM6_DAC_IRQHandler+0x10>)
 8001776:	f003 fcdd 	bl	8005134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200005e4 	.word	0x200005e4

08001784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopForever+0xe>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopForever+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d2:	f7ff ffd7 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f008 ffdf 	bl	800a798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017da:	f7fe fda3 	bl	8000324 <main>

080017de <LoopForever>:

LoopForever:
    b LoopForever
 80017de:	e7fe      	b.n	80017de <LoopForever>
  ldr   r0, =_estack
 80017e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80017ec:	0800a884 	.word	0x0800a884
  ldr r2, =_sbss
 80017f0:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80017f4:	200016ac 	.word	0x200016ac

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>

080017fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f95b 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	200f      	movs	r0, #15
 800180c:	f000 f80e 	bl	800182c <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	e001      	b.n	8001820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181c:	f7ff fca4 	bl	8001168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001820:	79fb      	ldrb	r3, [r7, #7]

}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_InitTick+0x68>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d022      	beq.n	8001886 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_InitTick+0x6c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_InitTick+0x68>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800184c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f966 	bl	8001b26 <HAL_SYSTICK_Config>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10f      	bne.n	8001880 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	d809      	bhi.n	800187a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001866:	2200      	movs	r2, #0
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800186e:	f000 f932 	bl	8001ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_InitTick+0x70>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e007      	b.n	800188a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e004      	b.n	800188a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e001      	b.n	800188a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000024 	.word	0x20000024
 8001898:	2000001c 	.word	0x2000001c
 800189c:	20000020 	.word	0x20000020

080018a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x1c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_IncTick+0x20>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_IncTick+0x1c>)
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20000714 	.word	0x20000714
 80018c0:	20000024 	.word	0x20000024

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000714 	.word	0x20000714

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018f4:	d004      	beq.n	8001900 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_Delay+0x40>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4413      	add	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001900:	bf00      	nop
 8001902:	f7ff ffdf 	bl	80018c4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	429a      	cmp	r2, r3
 8001910:	d8f7      	bhi.n	8001902 <HAL_Delay+0x26>
  {
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000024 	.word	0x20000024

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff40 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff90 	bl	8001a14 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5f 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff33 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa4 	bl	8001a7c <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b4e:	e15a      	b.n	8001e06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 814c 	beq.w	8001e00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d005      	beq.n	8001b80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d130      	bne.n	8001be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 0201 	and.w	r2, r3, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d017      	beq.n	8001c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d123      	bne.n	8001c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	6939      	ldr	r1, [r7, #16]
 8001c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0203 	and.w	r2, r3, #3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80a6 	beq.w	8001e00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb8:	4a5a      	ldr	r2, [pc, #360]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ccc:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cf6:	d01f      	beq.n	8001d38 <HAL_GPIO_Init+0x1f8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x2ec>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d019      	beq.n	8001d34 <HAL_GPIO_Init+0x1f4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_GPIO_Init+0x1f0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_GPIO_Init+0x2f4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1ec>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <HAL_GPIO_Init+0x2f8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1e8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a48      	ldr	r2, [pc, #288]	; (8001e3c <HAL_GPIO_Init+0x2fc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1e4>
 8001d20:	2305      	movs	r3, #5
 8001d22:	e00a      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d24:	2306      	movs	r3, #6
 8001d26:	e008      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e004      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4a:	4937      	ldr	r1, [pc, #220]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da6:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f ae9d 	bne.w	8001b50 <HAL_GPIO_Init+0x10>
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	48000800 	.word	0x48000800
 8001e34:	48000c00 	.word	0x48000c00
 8001e38:	48001000 	.word	0x48001000
 8001e3c:	48001400 	.word	0x48001400
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e081      	b.n	8001fba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f970 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2224      	movs	r2, #36	; 0x24
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e006      	b.n	8001f2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d104      	bne.n	8001f3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69d9      	ldr	r1, [r3, #28]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d138      	bne.n	800204a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e032      	b.n	800204c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2224      	movs	r2, #36	; 0x24
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002014:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
  }
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	d139      	bne.n	80020e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002078:	2302      	movs	r3, #2
 800207a:	e033      	b.n	80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	b08b      	sub	sp, #44	; 0x2c
 80020f4:	af06      	add	r7, sp, #24
 80020f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0d7      	b.n	80022b2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f008 f830 	bl	800a17c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2203      	movs	r2, #3
 8002120:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f004 f980 	bl	800642e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	e04c      	b.n	80021ce <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3301      	adds	r3, #1
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	b298      	uxth	r0, r3
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3336      	adds	r3, #54	; 0x36
 8002172:	4602      	mov	r2, r0
 8002174:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3303      	adds	r3, #3
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	3338      	adds	r3, #56	; 0x38
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	333c      	adds	r3, #60	; 0x3c
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3340      	adds	r3, #64	; 0x40
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3ad      	bcc.n	8002134 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e044      	b.n	8002268 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	f203 1369 	addw	r3, r3, #361	; 0x169
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	3301      	adds	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d3b5      	bcc.n	80021de <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	687e      	ldr	r6, [r7, #4]
 800227a:	466d      	mov	r5, sp
 800227c:	f106 0410 	add.w	r4, r6, #16
 8002280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	602b      	str	r3, [r5, #0]
 8002288:	1d33      	adds	r3, r6, #4
 800228a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f004 f8e9 	bl	8006464 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f001 fc29 	bl	8003b02 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_PCD_Start+0x16>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e012      	b.n	80022f6 <HAL_PCD_Start+0x3c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 f88f 	bl	8006400 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f006 f844 	bl	8008374 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f006 f849 	bl	80083a2 <USB_ReadInterrupts>
 8002310:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fb26 	bl	800296e <PCD_EP_ISR_Handler>

    return;
 8002322:	e110      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	2b00      	cmp	r3, #0
 800232c:	d013      	beq.n	8002356 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002340:	b292      	uxth	r2, r2
 8002342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f007 ffb1 	bl	800a2ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800234c:	2100      	movs	r1, #0
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8fc 	bl	800254c <HAL_PCD_SetAddress>

    return;
 8002354:	e0f7      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00c      	beq.n	800237a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002372:	b292      	uxth	r2, r2
 8002374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002378:	e0e5      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00c      	beq.n	800239e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	b292      	uxth	r2, r2
 8002398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800239c:	e0d3      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d034      	beq.n	8002412 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0204 	bic.w	r2, r2, #4
 80023ba:	b292      	uxth	r2, r2
 80023bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0208 	bic.w	r2, r2, #8
 80023d2:	b292      	uxth	r2, r2
 80023d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023ea:	2100      	movs	r1, #0
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f008 f953 	bl	800a698 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f007 ff94 	bl	800a320 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800240a:	b292      	uxth	r2, r2
 800240c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002410:	e099      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002418:	2b00      	cmp	r3, #0
 800241a:	d027      	beq.n	800246c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	b292      	uxth	r2, r2
 8002430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002446:	b292      	uxth	r2, r2
 8002448:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0204 	orr.w	r2, r2, #4
 800245e:	b292      	uxth	r2, r2
 8002460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f007 ff41 	bl	800a2ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800246a:	e06c      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	2b00      	cmp	r3, #0
 8002474:	d040      	beq.n	80024f8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002488:	b292      	uxth	r2, r2
 800248a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12b      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0204 	orr.w	r2, r2, #4
 80024aa:	b292      	uxth	r2, r2
 80024ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	b292      	uxth	r2, r2
 80024c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80024d8:	b29b      	uxth	r3, r3
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024e6:	2101      	movs	r1, #1
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f008 f8d5 	bl	800a698 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80024ee:	e02a      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f007 fefb 	bl	800a2ec <HAL_PCD_SuspendCallback>
    return;
 80024f6:	e026      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00f      	beq.n	8002522 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800250a:	b29a      	uxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002514:	b292      	uxth	r2, r2
 8002516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f007 feb9 	bl	800a292 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002520:	e011      	b.n	8002546 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253e:	b292      	uxth	r2, r2
 8002540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002544:	bf00      	nop
  }
}
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_PCD_SetAddress+0x1a>
 8002562:	2302      	movs	r3, #2
 8002564:	e013      	b.n	800258e <HAL_PCD_SetAddress+0x42>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f005 fee4 	bl	800834c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	4608      	mov	r0, r1
 80025a0:	4611      	mov	r1, r2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4603      	mov	r3, r0
 80025a6:	70fb      	strb	r3, [r7, #3]
 80025a8:	460b      	mov	r3, r1
 80025aa:	803b      	strh	r3, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da0e      	bge.n	80025da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	705a      	strb	r2, [r3, #1]
 80025d8:	e00e      	b.n	80025f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0207 	and.w	r2, r3, #7
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002604:	883a      	ldrh	r2, [r7, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	78ba      	ldrb	r2, [r7, #2]
 800260e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002622:	78bb      	ldrb	r3, [r7, #2]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d102      	bne.n	800262e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_PCD_EP_Open+0xa6>
 8002638:	2302      	movs	r3, #2
 800263a:	e00e      	b.n	800265a <HAL_PCD_EP_Open+0xc4>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	4618      	mov	r0, r3
 800264c:	f003 ff2c 	bl	80064a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002658:	7afb      	ldrb	r3, [r7, #11]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800266e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002672:	2b00      	cmp	r3, #0
 8002674:	da0e      	bge.n	8002694 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	705a      	strb	r2, [r3, #1]
 8002692:	e00e      	b.n	80026b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	f003 0207 	and.w	r2, r3, #7
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_PCD_EP_Close+0x6a>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e00e      	b.n	80026ea <HAL_PCD_EP_Close+0x88>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 fa78 	bl	8006bd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	460b      	mov	r3, r1
 8002700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002702:	7afb      	ldrb	r3, [r7, #11]
 8002704:	f003 0207 	and.w	r2, r3, #7
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	b2da      	uxtb	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6979      	ldr	r1, [r7, #20]
 800274e:	4618      	mov	r0, r3
 8002750:	f004 fc2b 	bl	8006faa <USB_EPStartXfer>
 8002754:	e005      	b.n	8002762 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	4618      	mov	r0, r3
 800275e:	f004 fc24 	bl	8006faa <USB_EPStartXfer>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 0207 	and.w	r2, r3, #7
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	460b      	mov	r3, r1
 80027aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2201      	movs	r2, #1
 80027e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027f4:	7afb      	ldrb	r3, [r7, #11]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6979      	ldr	r1, [r7, #20]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 fbd0 	bl	8006faa <USB_EPStartXfer>
 800280a:	e005      	b.n	8002818 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 fbc9 	bl	8006faa <USB_EPStartXfer>
  }

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	f003 0207 	and.w	r2, r3, #7
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d901      	bls.n	8002840 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e03e      	b.n	80028be <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002844:	2b00      	cmp	r3, #0
 8002846:	da0e      	bge.n	8002866 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	705a      	strb	r2, [r3, #1]
 8002864:	e00c      	b.n	8002880 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_PCD_EP_SetStall+0x7e>
 800289c:	2302      	movs	r3, #2
 800289e:	e00e      	b.n	80028be <HAL_PCD_EP_SetStall+0x9c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 fc4d 	bl	800814e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 020f 	and.w	r2, r3, #15
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d901      	bls.n	80028e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e040      	b.n	8002966 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da0e      	bge.n	800290a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	705a      	strb	r2, [r3, #1]
 8002908:	e00e      	b.n	8002928 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 0207 	and.w	r2, r3, #7
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_PCD_EP_ClrStall+0x82>
 8002944:	2302      	movs	r3, #2
 8002946:	e00e      	b.n	8002966 <HAL_PCD_EP_ClrStall+0xa0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68f9      	ldr	r1, [r7, #12]
 8002956:	4618      	mov	r0, r3
 8002958:	f005 fc4a 	bl	80081f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b096      	sub	sp, #88	; 0x58
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002976:	e39c      	b.n	80030b2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002980:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002984:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002992:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 815e 	bne.w	8002c58 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800299c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d150      	bne.n	8002a4a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	81fb      	strh	r3, [r7, #14]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3328      	adds	r3, #40	; 0x28
 80029d0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	441a      	add	r2, r3
 8002a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f007 fc27 	bl	800a25e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 834a 	beq.w	80030b2 <PCD_EP_ISR_Handler+0x744>
 8002a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8345 	bne.w	80030b2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a48:	e333      	b.n	80030b2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a50:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d032      	beq.n	8002ace <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f005 fccf 	bl	8008446 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	823b      	strh	r3, [r7, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	8a3a      	ldrh	r2, [r7, #16]
 8002abe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f007 fb9c 	bl	800a204 <HAL_PCD_SetupStageCallback>
 8002acc:	e2f1      	b.n	80030b2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ace:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f280 82ed 	bge.w	80030b2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	83fb      	strh	r3, [r7, #30]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	8bfa      	ldrh	r2, [r7, #30]
 8002aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002af2:	b292      	uxth	r2, r2
 8002af4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <PCD_EP_ISR_Handler+0x1ec>
 8002b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d015      	beq.n	8002b5a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	6959      	ldr	r1, [r3, #20]
 8002b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b38:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f005 fc81 	bl	8008446 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	441a      	add	r2, r3
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b50:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b52:	2100      	movs	r1, #0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f007 fb67 	bl	800a228 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 82a3 	bne.w	80030b2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b3e      	cmp	r3, #62	; 0x3e
 8002b92:	d918      	bls.n	8002bc6 <PCD_EP_ISR_Handler+0x258>
 8002b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <PCD_EP_ISR_Handler+0x240>
 8002ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002baa:	3b01      	subs	r3, #1
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
 8002bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	801a      	strh	r2, [r3, #0]
 8002bc4:	e029      	b.n	8002c1a <PCD_EP_ISR_Handler+0x2ac>
 8002bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d112      	bne.n	8002bf4 <PCD_EP_ISR_Handler+0x286>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	801a      	strh	r2, [r3, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e012      	b.n	8002c1a <PCD_EP_ISR_Handler+0x2ac>
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <PCD_EP_ISR_Handler+0x2a0>
 8002c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	827b      	strh	r3, [r7, #18]
 8002c2c:	8a7b      	ldrh	r3, [r7, #18]
 8002c2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c32:	827b      	strh	r3, [r7, #18]
 8002c34:	8a7b      	ldrh	r3, [r7, #18]
 8002c36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c3a:	827b      	strh	r3, [r7, #18]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	8a7b      	ldrh	r3, [r7, #18]
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]
 8002c56:	e22c      	b.n	80030b2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c6c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f280 80f6 	bge.w	8002e62 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002ca4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cac:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	7b1b      	ldrb	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d123      	bne.n	8002d12 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002cf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 808e 	beq.w	8002e18 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d02:	6959      	ldr	r1, [r3, #20]
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d06:	88da      	ldrh	r2, [r3, #6]
 8002d08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d0c:	f005 fb9b 	bl	8008446 <USB_ReadPMA>
 8002d10:	e082      	b.n	8002e18 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d14:	78db      	ldrb	r3, [r3, #3]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d10a      	bne.n	8002d30 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d1a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f9d3 	bl	80030ce <HAL_PCD_EP_DB_Receive>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d2e:	e073      	b.n	8002e18 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	441a      	add	r2, r3
 8002d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d022      	beq.n	8002dd4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002db6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02c      	beq.n	8002e18 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc4:	6959      	ldr	r1, [r3, #20]
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	891a      	ldrh	r2, [r3, #8]
 8002dca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dce:	f005 fb3a 	bl	8008446 <USB_ReadPMA>
 8002dd2:	e021      	b.n	8002e18 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002dfc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0a:	6959      	ldr	r1, [r3, #20]
 8002e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0e:	895a      	ldrh	r2, [r3, #10]
 8002e10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e14:	f005 fb17 	bl	8008446 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e20:	441a      	add	r2, r3
 8002e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e2e:	441a      	add	r2, r3
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <PCD_EP_ISR_Handler+0x4da>
 8002e3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d206      	bcs.n	8002e56 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f007 f9ea 	bl	800a228 <HAL_PCD_DataOutStageCallback>
 8002e54:	e005      	b.n	8002e62 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 f8a4 	bl	8006faa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8121 	beq.w	80030b2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e70:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	441a      	add	r2, r3
 8002eb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	f000 80a2 	beq.w	800300e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	7b1b      	ldrb	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8093 	beq.w	8003000 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d046      	beq.n	8002f74 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d126      	bne.n	8002f3c <PCD_EP_ISR_Handler+0x5ce>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	4413      	add	r3, r2
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	00da      	lsls	r2, r3, #3
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	4413      	add	r3, r2
 8002f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	e061      	b.n	8003000 <PCD_EP_ISR_Handler+0x692>
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d15d      	bne.n	8003000 <PCD_EP_ISR_Handler+0x692>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	4413      	add	r3, r2
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	00da      	lsls	r2, r3, #3
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	4413      	add	r3, r2
 8002f66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e045      	b.n	8003000 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d126      	bne.n	8002fd0 <PCD_EP_ISR_Handler+0x662>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	4413      	add	r3, r2
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	00da      	lsls	r2, r3, #3
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	e017      	b.n	8003000 <PCD_EP_ISR_Handler+0x692>
 8002fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d113      	bne.n	8003000 <PCD_EP_ISR_Handler+0x692>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f007 f929 	bl	800a25e <HAL_PCD_DataInStageCallback>
 800300c:	e051      	b.n	80030b2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800300e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d144      	bne.n	80030a4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	4413      	add	r3, r2
 8003034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800304a:	429a      	cmp	r2, r3
 800304c:	d907      	bls.n	800305e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305a:	619a      	str	r2, [r3, #24]
 800305c:	e002      	b.n	8003064 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800306c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f007 f8f3 	bl	800a25e <HAL_PCD_DataInStageCallback>
 8003078:	e01b      	b.n	80030b2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003082:	441a      	add	r2, r3
 8003084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003086:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003090:	441a      	add	r2, r3
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800309c:	4618      	mov	r0, r3
 800309e:	f003 ff84 	bl	8006faa <USB_EPStartXfer>
 80030a2:	e006      	b.n	80030b2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030a8:	461a      	mov	r2, r3
 80030aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f917 	bl	80032e0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	b21b      	sxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f6ff ac5a 	blt.w	8002978 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3758      	adds	r7, #88	; 0x58
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b088      	sub	sp, #32
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d07c      	beq.n	80031e0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800310a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	429a      	cmp	r2, r3
 8003114:	d306      	bcc.n	8003124 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	8b7b      	ldrh	r3, [r7, #26]
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	619a      	str	r2, [r3, #24]
 8003122:	e002      	b.n	800312a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d123      	bne.n	800317a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314c:	833b      	strh	r3, [r7, #24]
 800314e:	8b3b      	ldrh	r3, [r7, #24]
 8003150:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003154:	833b      	strh	r3, [r7, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	8b3b      	ldrh	r3, [r7, #24]
 8003166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800316e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	b29b      	uxth	r3, r3
 8003178:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01f      	beq.n	80031c4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	82fb      	strh	r3, [r7, #22]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	8afb      	ldrh	r3, [r7, #22]
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031c4:	8b7b      	ldrh	r3, [r7, #26]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8085 	beq.w	80032d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6959      	ldr	r1, [r3, #20]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	891a      	ldrh	r2, [r3, #8]
 80031d8:	8b7b      	ldrh	r3, [r7, #26]
 80031da:	f005 f934 	bl	8008446 <USB_ReadPMA>
 80031de:	e07a      	b.n	80032d6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	4413      	add	r3, r2
 80031fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003204:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	8b7b      	ldrh	r3, [r7, #26]
 800320c:	429a      	cmp	r2, r3
 800320e:	d306      	bcc.n	800321e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	619a      	str	r2, [r3, #24]
 800321c:	e002      	b.n	8003224 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d123      	bne.n	8003274 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	83fb      	strh	r3, [r7, #30]
 8003248:	8bfb      	ldrh	r3, [r7, #30]
 800324a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800324e:	83fb      	strh	r3, [r7, #30]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	8bfb      	ldrh	r3, [r7, #30]
 8003260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003270:	b29b      	uxth	r3, r3
 8003272:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11f      	bne.n	80032be <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003298:	83bb      	strh	r3, [r7, #28]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	8bbb      	ldrh	r3, [r7, #28]
 80032aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032be:	8b7b      	ldrh	r3, [r7, #26]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6959      	ldr	r1, [r3, #20]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	895a      	ldrh	r2, [r3, #10]
 80032d0:	8b7b      	ldrh	r3, [r7, #26]
 80032d2:	f005 f8b8 	bl	8008446 <USB_ReadPMA>
    }
  }

  return count;
 80032d6:	8b7b      	ldrh	r3, [r7, #26]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0a2      	sub	sp, #136	; 0x88
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 81c5 	beq.w	8003684 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4413      	add	r3, r2
 8003314:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800332a:	429a      	cmp	r2, r3
 800332c:	d907      	bls.n	800333e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003336:	1ad2      	subs	r2, r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	619a      	str	r2, [r3, #24]
 800333c:	e002      	b.n	8003344 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 80b9 	bne.w	80034c0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d126      	bne.n	80033a4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003364:	b29b      	uxth	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	4413      	add	r3, r2
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	00da      	lsls	r2, r3, #3
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	4413      	add	r3, r2
 8003378:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003388:	b29a      	uxth	r2, r3
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339c:	b29a      	uxth	r2, r3
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	e01a      	b.n	80033da <HAL_PCD_EP_DB_Transmit+0xfa>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d116      	bne.n	80033da <HAL_PCD_EP_DB_Transmit+0xfa>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	4413      	add	r3, r2
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	00da      	lsls	r2, r3, #3
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	4413      	add	r3, r2
 80033ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	2200      	movs	r2, #0
 80033d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d126      	bne.n	8003436 <HAL_PCD_EP_DB_Transmit+0x156>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	00da      	lsls	r2, r3, #3
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800341a:	b29a      	uxth	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800342a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342e:	b29a      	uxth	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	801a      	strh	r2, [r3, #0]
 8003434:	e017      	b.n	8003466 <HAL_PCD_EP_DB_Transmit+0x186>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d113      	bne.n	8003466 <HAL_PCD_EP_DB_Transmit+0x186>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	4413      	add	r3, r2
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	00da      	lsls	r2, r3, #3
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	4413      	add	r3, r2
 800345a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2200      	movs	r2, #0
 8003464:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f006 fef6 	bl	800a25e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 82d2 	beq.w	8003a22 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	827b      	strh	r3, [r7, #18]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	8a7b      	ldrh	r3, [r7, #18]
 80034aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8013      	strh	r3, [r2, #0]
 80034be:	e2b0      	b.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d021      	beq.n	800350e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 8284 	bne.w	8003a22 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003522:	441a      	add	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003530:	441a      	add	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d309      	bcc.n	8003556 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	621a      	str	r2, [r3, #32]
 8003554:	e015      	b.n	8003582 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800355e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003562:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800356c:	e009      	b.n	8003582 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d155      	bne.n	8003636 <HAL_PCD_EP_DB_Transmit+0x356>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003598:	b29b      	uxth	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	4413      	add	r3, r2
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	00da      	lsls	r2, r3, #3
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	4413      	add	r3, r2
 80035ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
 80035b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b4:	2b3e      	cmp	r3, #62	; 0x3e
 80035b6:	d916      	bls.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x306>
 80035b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_PCD_EP_DB_Transmit+0x2ee>
 80035c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ca:	3b01      	subs	r3, #1
 80035cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	029b      	lsls	r3, r3, #10
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035de:	b29a      	uxth	r2, r3
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	e043      	b.n	800366e <HAL_PCD_EP_DB_Transmit+0x38e>
 80035e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d112      	bne.n	8003612 <HAL_PCD_EP_DB_Transmit+0x332>
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360a:	b29a      	uxth	r2, r3
 800360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	e02d      	b.n	800366e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48
 8003618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_PCD_EP_DB_Transmit+0x348>
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003624:	3301      	adds	r3, #1
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
 8003628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362a:	b29b      	uxth	r3, r3
 800362c:	029b      	lsls	r3, r3, #10
 800362e:	b29a      	uxth	r2, r3
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	801a      	strh	r2, [r3, #0]
 8003634:	e01b      	b.n	800366e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d117      	bne.n	800366e <HAL_PCD_EP_DB_Transmit+0x38e>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	643b      	str	r3, [r7, #64]	; 0x40
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800364c:	b29b      	uxth	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	4413      	add	r3, r2
 8003654:	643b      	str	r3, [r7, #64]	; 0x40
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00da      	lsls	r2, r3, #3
 800365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365e:	4413      	add	r3, r2
 8003660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003668:	b29a      	uxth	r2, r3
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6959      	ldr	r1, [r3, #20]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	891a      	ldrh	r2, [r3, #8]
 800367a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367c:	b29b      	uxth	r3, r3
 800367e:	f004 fea0 	bl	80083c2 <USB_WritePMA>
 8003682:	e1ce      	b.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368c:	b29b      	uxth	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	4413      	add	r3, r2
 800369e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d307      	bcc.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036c0:	1ad2      	subs	r2, r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	619a      	str	r2, [r3, #24]
 80036c6:	e002      	b.n	80036ce <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f040 80c4 	bne.w	8003860 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	785b      	ldrb	r3, [r3, #1]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d126      	bne.n	800372e <HAL_PCD_EP_DB_Transmit+0x44e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f4:	4413      	add	r3, r2
 80036f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	00da      	lsls	r2, r3, #3
 80036fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003700:	4413      	add	r3, r2
 8003702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003706:	667b      	str	r3, [r7, #100]	; 0x64
 8003708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003712:	b29a      	uxth	r2, r3
 8003714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003726:	b29a      	uxth	r2, r3
 8003728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800372a:	801a      	strh	r2, [r3, #0]
 800372c:	e01a      	b.n	8003764 <HAL_PCD_EP_DB_Transmit+0x484>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d116      	bne.n	8003764 <HAL_PCD_EP_DB_Transmit+0x484>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	673b      	str	r3, [r7, #112]	; 0x70
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003744:	b29b      	uxth	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800374a:	4413      	add	r3, r2
 800374c:	673b      	str	r3, [r7, #112]	; 0x70
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	00da      	lsls	r2, r3, #3
 8003754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003756:	4413      	add	r3, r2
 8003758:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800375c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800375e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	785b      	ldrb	r3, [r3, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d12f      	bne.n	80037d2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003782:	b29b      	uxth	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378a:	4413      	add	r3, r2
 800378c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	00da      	lsls	r2, r3, #3
 8003796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379a:	4413      	add	r3, r2
 800379c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037ce:	801a      	strh	r2, [r3, #0]
 80037d0:	e017      	b.n	8003802 <HAL_PCD_EP_DB_Transmit+0x522>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	785b      	ldrb	r3, [r3, #1]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d113      	bne.n	8003802 <HAL_PCD_EP_DB_Transmit+0x522>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037e8:	4413      	add	r3, r2
 80037ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00da      	lsls	r2, r3, #3
 80037f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037f4:	4413      	add	r3, r2
 80037f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80037fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037fe:	2200      	movs	r2, #0
 8003800:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f006 fd28 	bl	800a25e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 8104 	bne.w	8003a22 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003834:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	441a      	add	r2, r3
 8003846:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800384a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800384e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385a:	b29b      	uxth	r3, r3
 800385c:	8013      	strh	r3, [r2, #0]
 800385e:	e0e0      	b.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d121      	bne.n	80038ae <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003884:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800389a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 80b4 	bne.w	8003a22 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038c2:	441a      	add	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038d0:	441a      	add	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6a1a      	ldr	r2, [r3, #32]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d309      	bcc.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ee:	1ad2      	subs	r2, r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	621a      	str	r2, [r3, #32]
 80038f4:	e015      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80038fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003902:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800390c:	e009      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	663b      	str	r3, [r7, #96]	; 0x60
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d155      	bne.n	80039dc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	65bb      	str	r3, [r7, #88]	; 0x58
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003944:	4413      	add	r3, r2
 8003946:	65bb      	str	r3, [r7, #88]	; 0x58
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	00da      	lsls	r2, r3, #3
 800394e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003950:	4413      	add	r3, r2
 8003952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003956:	657b      	str	r3, [r7, #84]	; 0x54
 8003958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395a:	2b3e      	cmp	r3, #62	; 0x3e
 800395c:	d916      	bls.n	800398c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800395e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	677b      	str	r3, [r7, #116]	; 0x74
 8003964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <HAL_PCD_EP_DB_Transmit+0x694>
 800396e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003970:	3b01      	subs	r3, #1
 8003972:	677b      	str	r3, [r7, #116]	; 0x74
 8003974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003976:	b29b      	uxth	r3, r3
 8003978:	029b      	lsls	r3, r3, #10
 800397a:	b29b      	uxth	r3, r3
 800397c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003984:	b29a      	uxth	r2, r3
 8003986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e040      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x72e>
 800398c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d112      	bne.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800399c:	b29a      	uxth	r2, r3
 800399e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	e02a      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x72e>
 80039b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	677b      	str	r3, [r7, #116]	; 0x74
 80039be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_PCD_EP_DB_Transmit+0x6ee>
 80039c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ca:	3301      	adds	r3, #1
 80039cc:	677b      	str	r3, [r7, #116]	; 0x74
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	029b      	lsls	r3, r3, #10
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	e018      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x72e>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d114      	bne.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x72e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f2:	4413      	add	r3, r2
 80039f4:	663b      	str	r3, [r7, #96]	; 0x60
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	00da      	lsls	r2, r3, #3
 80039fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fe:	4413      	add	r3, r2
 8003a00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6959      	ldr	r1, [r3, #20]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	895a      	ldrh	r2, [r3, #10]
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f004 fcd0 	bl	80083c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3c:	823b      	strh	r3, [r7, #16]
 8003a3e:	8a3b      	ldrh	r3, [r7, #16]
 8003a40:	f083 0310 	eor.w	r3, r3, #16
 8003a44:	823b      	strh	r3, [r7, #16]
 8003a46:	8a3b      	ldrh	r3, [r7, #16]
 8003a48:	f083 0320 	eor.w	r3, r3, #32
 8003a4c:	823b      	strh	r3, [r7, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	8a3b      	ldrh	r3, [r7, #16]
 8003a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3788      	adds	r7, #136	; 0x88
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	817b      	strh	r3, [r7, #10]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e009      	b.n	8003ac6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ab2:	897a      	ldrh	r2, [r7, #10]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ac6:	893b      	ldrh	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	80da      	strh	r2, [r3, #6]
 8003ada:	e00b      	b.n	8003af4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d141      	bne.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b66:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d131      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b74:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7a:	4a46      	ldr	r2, [pc, #280]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b8c:	4a41      	ldr	r2, [pc, #260]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2232      	movs	r2, #50	; 0x32
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	4a3f      	ldr	r2, [pc, #252]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	0c9b      	lsrs	r3, r3, #18
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003baa:	e002      	b.n	8003bb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d102      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f2      	bne.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc6:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd2:	d158      	bne.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e057      	b.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bde:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003be8:	e04d      	b.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d141      	bne.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfe:	d131      	bne.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c06:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2232      	movs	r2, #50	; 0x32
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	0c9b      	lsrs	r3, r3, #18
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c36:	e002      	b.n	8003c3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d102      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f2      	bne.n	8003c38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5e:	d112      	bne.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e011      	b.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c74:	e007      	b.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40007000 	.word	0x40007000
 8003c98:	2000001c 	.word	0x2000001c
 8003c9c:	431bde83 	.word	0x431bde83

08003ca0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cae:	6093      	str	r3, [r2, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e308      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d075      	beq.n	8003dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cde:	4ba3      	ldr	r3, [pc, #652]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce8:	4ba0      	ldr	r3, [pc, #640]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b0c      	cmp	r3, #12
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_OscConfig+0x3e>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d002      	beq.n	8003d04 <HAL_RCC_OscConfig+0x44>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	4b99      	ldr	r3, [pc, #612]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05b      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d157      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e2e3      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x74>
 8003d26:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a90      	ldr	r2, [pc, #576]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e01d      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a8a      	ldr	r2, [pc, #552]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a87      	ldr	r2, [pc, #540]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d58:	4b84      	ldr	r3, [pc, #528]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a83      	ldr	r2, [pc, #524]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a80      	ldr	r2, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d013      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fd fda4 	bl	80018c4 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fd fda0 	bl	80018c4 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e2a8      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fd90 	bl	80018c4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fd fd8c 	bl	80018c4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e294      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dba:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d075      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de0:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	d102      	bne.n	8003df6 <HAL_RCC_OscConfig+0x136>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d002      	beq.n	8003dfc <HAL_RCC_OscConfig+0x13c>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11f      	bne.n	8003e3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_OscConfig+0x154>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e267      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e14:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	4952      	ldr	r1, [pc, #328]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e28:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <HAL_RCC_OscConfig+0x2b0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fd fcfd 	bl	800182c <HAL_InitTick>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d043      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e253      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d023      	beq.n	8003e8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a48      	ldr	r2, [pc, #288]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fd fd38 	bl	80018c4 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e58:	f7fd fd34 	bl	80018c4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e23c      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e76:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	4939      	ldr	r1, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
 8003e8a:	e01a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8c:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a36      	ldr	r2, [pc, #216]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fd fd14 	bl	80018c4 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea0:	f7fd fd10 	bl	80018c4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e218      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x1e0>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed6:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee6:	f7fd fced 	bl	80018c4 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fd fce9 	bl	80018c4 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1f1      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ef      	beq.n	8003eee <HAL_RCC_OscConfig+0x22e>
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f10:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd fcd0 	bl	80018c4 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fd fccc 	bl	80018c4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1d4      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ef      	bne.n	8003f28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80ab 	beq.w	80040ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x2b4>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e005      	b.n	8003f76 <HAL_RCC_OscConfig+0x2b6>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	20000020 	.word	0x20000020
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	4baf      	ldr	r3, [pc, #700]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	4aae      	ldr	r2, [pc, #696]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6593      	str	r3, [r2, #88]	; 0x58
 8003f86:	4bac      	ldr	r3, [pc, #688]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f96:	4ba9      	ldr	r3, [pc, #676]	; (800423c <HAL_RCC_OscConfig+0x57c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d118      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa2:	4ba6      	ldr	r3, [pc, #664]	; (800423c <HAL_RCC_OscConfig+0x57c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4aa5      	ldr	r2, [pc, #660]	; (800423c <HAL_RCC_OscConfig+0x57c>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fd fc89 	bl	80018c4 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fd fc85 	bl	80018c4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e18d      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc8:	4b9c      	ldr	r3, [pc, #624]	; (800423c <HAL_RCC_OscConfig+0x57c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d108      	bne.n	8003fee <HAL_RCC_OscConfig+0x32e>
 8003fdc:	4b96      	ldr	r3, [pc, #600]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	4a95      	ldr	r2, [pc, #596]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fec:	e024      	b.n	8004038 <HAL_RCC_OscConfig+0x378>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d110      	bne.n	8004018 <HAL_RCC_OscConfig+0x358>
 8003ff6:	4b90      	ldr	r3, [pc, #576]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	4a8e      	ldr	r2, [pc, #568]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8003ffe:	f043 0304 	orr.w	r3, r3, #4
 8004002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004006:	4b8c      	ldr	r3, [pc, #560]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	4a8a      	ldr	r2, [pc, #552]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004016:	e00f      	b.n	8004038 <HAL_RCC_OscConfig+0x378>
 8004018:	4b87      	ldr	r3, [pc, #540]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	4a86      	ldr	r2, [pc, #536]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004028:	4b83      	ldr	r3, [pc, #524]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	4a82      	ldr	r2, [pc, #520]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d016      	beq.n	800406e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fd fc40 	bl	80018c4 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	e00a      	b.n	800405e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fd fc3c 	bl	80018c4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e142      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405e:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ed      	beq.n	8004048 <HAL_RCC_OscConfig+0x388>
 800406c:	e015      	b.n	800409a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fd fc29 	bl	80018c4 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004074:	e00a      	b.n	800408c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fd fc25 	bl	80018c4 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	; 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e12b      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800408c:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ed      	bne.n	8004076 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	4a64      	ldr	r2, [pc, #400]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80040a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03c      	beq.n	8004132 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01c      	beq.n	80040fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040c0:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80040c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040c6:	4a5c      	ldr	r2, [pc, #368]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fd fbf8 	bl	80018c4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d8:	f7fd fbf4 	bl	80018c4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0fc      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ea:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80040ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ef      	beq.n	80040d8 <HAL_RCC_OscConfig+0x418>
 80040f8:	e01b      	b.n	8004132 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040fa:	4b4f      	ldr	r3, [pc, #316]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80040fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004100:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fd fbdb 	bl	80018c4 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004112:	f7fd fbd7 	bl	80018c4 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0df      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004124:	4b44      	ldr	r3, [pc, #272]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ef      	bne.n	8004112 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80d3 	beq.w	80042e2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413c:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b0c      	cmp	r3, #12
 8004146:	f000 808d 	beq.w	8004264 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d15a      	bne.n	8004208 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a38      	ldr	r2, [pc, #224]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fd fbb1 	bl	80018c4 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004166:	f7fd fbad 	bl	80018c4 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0b5      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004178:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f0      	bne.n	8004166 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004184:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <HAL_RCC_OscConfig+0x580>)
 800418a:	4013      	ands	r3, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6a11      	ldr	r1, [r2, #32]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004194:	3a01      	subs	r2, #1
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800419e:	0212      	lsls	r2, r2, #8
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	0552      	lsls	r2, r2, #21
 80041ac:	4311      	orrs	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041b2:	0852      	lsrs	r2, r2, #1
 80041b4:	3a01      	subs	r2, #1
 80041b6:	0652      	lsls	r2, r2, #25
 80041b8:	4311      	orrs	r1, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041be:	06d2      	lsls	r2, r2, #27
 80041c0:	430a      	orrs	r2, r1
 80041c2:	491d      	ldr	r1, [pc, #116]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041d4:	4b18      	ldr	r3, [pc, #96]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a17      	ldr	r2, [pc, #92]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fd fb70 	bl	80018c4 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fd fb6c 	bl	80018c4 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e074      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x528>
 8004206:	e06c      	b.n	80042e2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800420e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004212:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_RCC_OscConfig+0x578>)
 8004226:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd fb48 	bl	80018c4 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004236:	e00e      	b.n	8004256 <HAL_RCC_OscConfig+0x596>
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
 8004240:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fb3e 	bl	80018c4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e046      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_RCC_OscConfig+0x62c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x584>
 8004262:	e03e      	b.n	80042e2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e039      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004270:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <HAL_RCC_OscConfig+0x62c>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0203 	and.w	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	429a      	cmp	r2, r3
 8004282:	d12c      	bne.n	80042de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	3b01      	subs	r3, #1
 8004290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d123      	bne.n	80042de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11b      	bne.n	80042de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d113      	bne.n	80042de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	3b01      	subs	r3, #1
 80042c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d109      	bne.n	80042de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	3b01      	subs	r3, #1
 80042d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e11e      	b.n	8004546 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b91      	ldr	r3, [pc, #580]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b8e      	ldr	r3, [pc, #568]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 020f 	bic.w	r2, r3, #15
 800431e:	498c      	ldr	r1, [pc, #560]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b8a      	ldr	r3, [pc, #552]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e106      	b.n	8004546 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d073      	beq.n	800442c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d129      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434c:	4b81      	ldr	r3, [pc, #516]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0f4      	b.n	8004546 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800435c:	f000 f966 	bl	800462c <RCC_GetSysClockFreqFromPLLSource>
 8004360:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4a7c      	ldr	r2, [pc, #496]	; (8004558 <HAL_RCC_ClockConfig+0x268>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d93f      	bls.n	80043ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800436a:	4b7a      	ldr	r3, [pc, #488]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d033      	beq.n	80043ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004386:	2b00      	cmp	r3, #0
 8004388:	d12f      	bne.n	80043ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800438a:	4b72      	ldr	r3, [pc, #456]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	4a70      	ldr	r2, [pc, #448]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	e024      	b.n	80043ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d107      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a8:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0c6      	b.n	8004546 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b8:	4b66      	ldr	r3, [pc, #408]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0be      	b.n	8004546 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043c8:	f000 f8ce 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4a61      	ldr	r2, [pc, #388]	; (8004558 <HAL_RCC_ClockConfig+0x268>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d909      	bls.n	80043ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043d6:	4b5f      	ldr	r3, [pc, #380]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043de:	4a5d      	ldr	r2, [pc, #372]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ea:	4b5a      	ldr	r3, [pc, #360]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4957      	ldr	r1, [pc, #348]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fc:	f7fd fa62 	bl	80018c4 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fd fa5e 	bl	80018c4 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e095      	b.n	8004546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	4b4e      	ldr	r3, [pc, #312]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 020c 	and.w	r2, r3, #12
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d1eb      	bne.n	8004404 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d023      	beq.n	8004480 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004444:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a42      	ldr	r2, [pc, #264]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800444a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800444e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800445c:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004464:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 8004466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800446a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4936      	ldr	r1, [pc, #216]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
 800447e:	e008      	b.n	8004492 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d105      	bne.n	8004492 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004486:	4b33      	ldr	r3, [pc, #204]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 800448c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004490:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004492:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d21d      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a0:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f023 020f 	bic.w	r2, r3, #15
 80044a8:	4929      	ldr	r1, [pc, #164]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044b0:	f7fd fa08 	bl	80018c4 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b8:	f7fd fa04 	bl	80018c4 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e03b      	b.n	8004546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d1ed      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4917      	ldr	r1, [pc, #92]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	490f      	ldr	r1, [pc, #60]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800451a:	f000 f825 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 800451e:	4602      	mov	r2, r0
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_RCC_ClockConfig+0x264>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	490c      	ldr	r1, [pc, #48]	; (800455c <HAL_RCC_ClockConfig+0x26c>)
 800452c:	5ccb      	ldrb	r3, [r1, r3]
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_RCC_ClockConfig+0x270>)
 8004538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_ClockConfig+0x274>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd f974 	bl	800182c <HAL_InitTick>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40022000 	.word	0x40022000
 8004554:	40021000 	.word	0x40021000
 8004558:	04c4b400 	.word	0x04c4b400
 800455c:	0800a86c 	.word	0x0800a86c
 8004560:	2000001c 	.word	0x2000001c
 8004564:	20000020 	.word	0x20000020

08004568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800456e:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b04      	cmp	r3, #4
 8004578:	d102      	bne.n	8004580 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800457a:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <HAL_RCC_GetSysClockFreq+0xbc>)
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e047      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b08      	cmp	r3, #8
 800458a:	d102      	bne.n	8004592 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800458c:	4b26      	ldr	r3, [pc, #152]	; (8004628 <HAL_RCC_GetSysClockFreq+0xc0>)
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e03e      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d136      	bne.n	800460c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	3301      	adds	r3, #1
 80045b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c6:	68d2      	ldr	r2, [r2, #12]
 80045c8:	0a12      	lsrs	r2, r2, #8
 80045ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	617b      	str	r3, [r7, #20]
      break;
 80045d4:	e00c      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045d6:	4a13      	ldr	r2, [pc, #76]	; (8004624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	4a10      	ldr	r2, [pc, #64]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e0:	68d2      	ldr	r2, [r2, #12]
 80045e2:	0a12      	lsrs	r2, r2, #8
 80045e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045e8:	fb02 f303 	mul.w	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]
      break;
 80045ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	0e5b      	lsrs	r3, r3, #25
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	3301      	adds	r3, #1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	e001      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004610:	693b      	ldr	r3, [r7, #16]
}
 8004612:	4618      	mov	r0, r3
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	00f42400 	.word	0x00f42400
 8004628:	007a1200 	.word	0x007a1200

0800462c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004632:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d10c      	bne.n	800466a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004650:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800465a:	68d2      	ldr	r2, [r2, #12]
 800465c:	0a12      	lsrs	r2, r2, #8
 800465e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	617b      	str	r3, [r7, #20]
    break;
 8004668:	e00c      	b.n	8004684 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800466a:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004674:	68d2      	ldr	r2, [r2, #12]
 8004676:	0a12      	lsrs	r2, r2, #8
 8004678:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]
    break;
 8004682:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004684:	4b09      	ldr	r3, [pc, #36]	; (80046ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	0e5b      	lsrs	r3, r3, #25
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	3301      	adds	r3, #1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800469e:	687b      	ldr	r3, [r7, #4]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40021000 	.word	0x40021000
 80046b0:	007a1200 	.word	0x007a1200
 80046b4:	00f42400 	.word	0x00f42400

080046b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046c0:	2300      	movs	r3, #0
 80046c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046c4:	2300      	movs	r3, #0
 80046c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8098 	beq.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2300      	movs	r3, #0
 80046d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046da:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10d      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	4b40      	ldr	r3, [pc, #256]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	4a3f      	ldr	r2, [pc, #252]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6593      	str	r3, [r2, #88]	; 0x58
 80046f2:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004702:	4b3a      	ldr	r3, [pc, #232]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a39      	ldr	r2, [pc, #228]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800470e:	f7fd f8d9 	bl	80018c4 <HAL_GetTick>
 8004712:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004714:	e009      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004716:	f7fd f8d5 	bl	80018c4 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d902      	bls.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	74fb      	strb	r3, [r7, #19]
        break;
 8004728:	e005      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800472a:	4b30      	ldr	r3, [pc, #192]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0ef      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d159      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01e      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	429a      	cmp	r2, r3
 8004756:	d019      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004774:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800477c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004796:	f7fd f895 	bl	80018c4 <HAL_GetTick>
 800479a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479c:	e00b      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fd f891 	bl	80018c4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d902      	bls.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	74fb      	strb	r3, [r7, #19]
            break;
 80047b4:	e006      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b6:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ec      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047e0:	e008      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047e2:	7cfb      	ldrb	r3, [r7, #19]
 80047e4:	74bb      	strb	r3, [r7, #18]
 80047e6:	e005      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f4:	7c7b      	ldrb	r3, [r7, #17]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fa:	4ba6      	ldr	r3, [pc, #664]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	4aa5      	ldr	r2, [pc, #660]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004812:	4ba0      	ldr	r3, [pc, #640]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f023 0203 	bic.w	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	499c      	ldr	r1, [pc, #624]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004834:	4b97      	ldr	r3, [pc, #604]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f023 020c 	bic.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	4994      	ldr	r1, [pc, #592]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004856:	4b8f      	ldr	r3, [pc, #572]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	498b      	ldr	r1, [pc, #556]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004878:	4b86      	ldr	r3, [pc, #536]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	4983      	ldr	r1, [pc, #524]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800489a:	4b7e      	ldr	r3, [pc, #504]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	497a      	ldr	r1, [pc, #488]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048bc:	4b75      	ldr	r3, [pc, #468]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	4972      	ldr	r1, [pc, #456]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048de:	4b6d      	ldr	r3, [pc, #436]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	4969      	ldr	r1, [pc, #420]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004900:	4b64      	ldr	r3, [pc, #400]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4961      	ldr	r1, [pc, #388]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004922:	4b5c      	ldr	r3, [pc, #368]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	4958      	ldr	r1, [pc, #352]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004944:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	4950      	ldr	r1, [pc, #320]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004962:	d105      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004964:	4b4b      	ldr	r3, [pc, #300]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800497c:	4b45      	ldr	r3, [pc, #276]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4942      	ldr	r1, [pc, #264]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800499a:	d105      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d015      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049b4:	4b37      	ldr	r3, [pc, #220]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4934      	ldr	r1, [pc, #208]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d2:	d105      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d4:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a2e      	ldr	r2, [pc, #184]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049ec:	4b29      	ldr	r3, [pc, #164]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	4926      	ldr	r1, [pc, #152]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0a:	d105      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d015      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	4918      	ldr	r1, [pc, #96]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a44:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d015      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	490a      	ldr	r1, [pc, #40]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e049      	b.n	8004b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc fc0e 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 fee2 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e04a      	b.n	8004bf6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d013      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d115      	bne.n	8004be0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b06      	cmp	r3, #6
 8004bc4:	d015      	beq.n	8004bf2 <HAL_TIM_Base_Start_IT+0xaa>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d011      	beq.n	8004bf2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bde:	e008      	b.n	8004bf2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e000      	b.n	8004bf4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	00010007 	.word	0x00010007

08004c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e049      	b.n	8004cc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc fb2c 	bl	80012a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f000 fe20 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_TIM_PWM_Start+0x24>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e03c      	b.n	8004d6a <HAL_TIM_PWM_Start+0x9e>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d109      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x3e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	e02f      	b.n	8004d6a <HAL_TIM_PWM_Start+0x9e>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x58>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e022      	b.n	8004d6a <HAL_TIM_PWM_Start+0x9e>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d109      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x72>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e015      	b.n	8004d6a <HAL_TIM_PWM_Start+0x9e>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d109      	bne.n	8004d58 <HAL_TIM_PWM_Start+0x8c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_TIM_PWM_Start+0x9e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e097      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0xb6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	e023      	b.n	8004dca <HAL_TIM_PWM_Start+0xfe>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0xc6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	e01b      	b.n	8004dca <HAL_TIM_PWM_Start+0xfe>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xd6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	e013      	b.n	8004dca <HAL_TIM_PWM_Start+0xfe>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0xe6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db0:	e00b      	b.n	8004dca <HAL_TIM_PWM_Start+0xfe>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0xf6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc0:	e003      	b.n	8004dca <HAL_TIM_PWM_Start+0xfe>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 f986 	bl	80060e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a33      	ldr	r2, [pc, #204]	; (8004eac <HAL_TIM_PWM_Start+0x1e0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x13e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a32      	ldr	r2, [pc, #200]	; (8004eb0 <HAL_TIM_PWM_Start+0x1e4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x13e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a30      	ldr	r2, [pc, #192]	; (8004eb4 <HAL_TIM_PWM_Start+0x1e8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x13e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <HAL_TIM_PWM_Start+0x1ec>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x13e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <HAL_TIM_PWM_Start+0x1f0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_PWM_Start+0x142>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_TIM_PWM_Start+0x144>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a20      	ldr	r2, [pc, #128]	; (8004eac <HAL_TIM_PWM_Start+0x1e0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_TIM_PWM_Start+0x194>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d013      	beq.n	8004e60 <HAL_TIM_PWM_Start+0x194>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <HAL_TIM_PWM_Start+0x1f4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_TIM_PWM_Start+0x194>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <HAL_TIM_PWM_Start+0x1f8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIM_PWM_Start+0x194>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_TIM_PWM_Start+0x1e4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIM_PWM_Start+0x194>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <HAL_TIM_PWM_Start+0x1e8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d115      	bne.n	8004e8c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <HAL_TIM_PWM_Start+0x1fc>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d015      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x1d2>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d011      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	e008      	b.n	8004e9e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e000      	b.n	8004ea0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40013400 	.word	0x40013400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	00010007 	.word	0x00010007

08004ecc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e097      	b.n	8005010 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fc fa67 	bl	80013c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004f10:	f023 0307 	bic.w	r3, r3, #7
 8004f14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 fcbd 	bl	80058a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f6c:	f023 030c 	bic.w	r3, r3, #12
 8004f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	011a      	lsls	r2, r3, #4
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	031b      	lsls	r3, r3, #12
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005028:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005030:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005038:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005040:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d102      	bne.n	8005054 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800504e:	7b7b      	ldrb	r3, [r7, #13]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e069      	b.n	800512c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005068:	e031      	b.n	80050ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d110      	bne.n	8005092 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005070:	7bbb      	ldrb	r3, [r7, #14]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d102      	bne.n	800507c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005076:	7b3b      	ldrb	r3, [r7, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e055      	b.n	800512c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005090:	e01d      	b.n	80050ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d108      	bne.n	80050aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005098:	7bbb      	ldrb	r3, [r7, #14]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800509e:	7b7b      	ldrb	r3, [r7, #13]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d102      	bne.n	80050aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a4:	7b3b      	ldrb	r3, [r7, #12]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e03e      	b.n	800512c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_TIM_Encoder_Start+0xc4>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d008      	beq.n	80050ec <HAL_TIM_Encoder_Start+0xd4>
 80050da:	e00f      	b.n	80050fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2201      	movs	r2, #1
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fffd 	bl	80060e4 <TIM_CCxChannelCmd>
      break;
 80050ea:	e016      	b.n	800511a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	2104      	movs	r1, #4
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fff5 	bl	80060e4 <TIM_CCxChannelCmd>
      break;
 80050fa:	e00e      	b.n	800511a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2201      	movs	r2, #1
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f000 ffed 	bl	80060e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2201      	movs	r2, #1
 8005110:	2104      	movs	r1, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f000 ffe6 	bl	80060e4 <TIM_CCxChannelCmd>
      break;
 8005118:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b02      	cmp	r3, #2
 8005148:	d122      	bne.n	8005190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b02      	cmp	r3, #2
 8005156:	d11b      	bne.n	8005190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0202 	mvn.w	r2, #2
 8005160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fb74 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fb66 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fb77 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b04      	cmp	r3, #4
 800519c:	d122      	bne.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d11b      	bne.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0204 	mvn.w	r2, #4
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb4a 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fb3c 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb4d 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0208 	mvn.w	r2, #8
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2204      	movs	r2, #4
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb20 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fb12 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fb23 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b10      	cmp	r3, #16
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b10      	cmp	r3, #16
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0210 	mvn.w	r2, #16
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2208      	movs	r2, #8
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 faf6 	bl	8005864 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fae8 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 faf9 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d10e      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0201 	mvn.w	r2, #1
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb fe1e 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 f852 	bl	8006388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 f845 	bl	800639c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 faa7 	bl	800588c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b20      	cmp	r3, #32
 800534a:	d10e      	bne.n	800536a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d107      	bne.n	800536a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0220 	mvn.w	r2, #32
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 f805 	bl	8006374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005378:	d10f      	bne.n	800539a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005388:	d107      	bne.n	800539a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 f80b 	bl	80063b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053a8:	d10f      	bne.n	80053ca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fffd 	bl	80063c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d8:	d10f      	bne.n	80053fa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e8:	d107      	bne.n	80053fa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80053f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 ffef 	bl	80063d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005408:	d10f      	bne.n	800542a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005414:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 ffe1 	bl	80063ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800544e:	2302      	movs	r3, #2
 8005450:	e0ff      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b14      	cmp	r3, #20
 800545e:	f200 80f0 	bhi.w	8005642 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	080054bd 	.word	0x080054bd
 800546c:	08005643 	.word	0x08005643
 8005470:	08005643 	.word	0x08005643
 8005474:	08005643 	.word	0x08005643
 8005478:	080054fd 	.word	0x080054fd
 800547c:	08005643 	.word	0x08005643
 8005480:	08005643 	.word	0x08005643
 8005484:	08005643 	.word	0x08005643
 8005488:	0800553f 	.word	0x0800553f
 800548c:	08005643 	.word	0x08005643
 8005490:	08005643 	.word	0x08005643
 8005494:	08005643 	.word	0x08005643
 8005498:	0800557f 	.word	0x0800557f
 800549c:	08005643 	.word	0x08005643
 80054a0:	08005643 	.word	0x08005643
 80054a4:	08005643 	.word	0x08005643
 80054a8:	080055c1 	.word	0x080055c1
 80054ac:	08005643 	.word	0x08005643
 80054b0:	08005643 	.word	0x08005643
 80054b4:	08005643 	.word	0x08005643
 80054b8:	08005601 	.word	0x08005601
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fa7c 	bl	80059c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0208 	orr.w	r2, r2, #8
 80054d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0204 	bic.w	r2, r2, #4
 80054e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6999      	ldr	r1, [r3, #24]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	619a      	str	r2, [r3, #24]
      break;
 80054fa:	e0a5      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 faec 	bl	8005ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6999      	ldr	r1, [r3, #24]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	619a      	str	r2, [r3, #24]
      break;
 800553c:	e084      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fb55 	bl	8005bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0208 	orr.w	r2, r2, #8
 8005558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0204 	bic.w	r2, r2, #4
 8005568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	61da      	str	r2, [r3, #28]
      break;
 800557c:	e064      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fbbd 	bl	8005d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69d9      	ldr	r1, [r3, #28]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	021a      	lsls	r2, r3, #8
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	61da      	str	r2, [r3, #28]
      break;
 80055be:	e043      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fc26 	bl	8005e18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0208 	orr.w	r2, r2, #8
 80055da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0204 	bic.w	r2, r2, #4
 80055ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80055fe:	e023      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fc6a 	bl	8005ee0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005640:	e002      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
      break;
 8005646:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop

0800565c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIM_ConfigClockSource+0x1c>
 8005674:	2302      	movs	r3, #2
 8005676:	e0de      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x1da>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800569a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a63      	ldr	r2, [pc, #396]	; (8005840 <HAL_TIM_ConfigClockSource+0x1e4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f000 80a9 	beq.w	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 80056b8:	4a61      	ldr	r2, [pc, #388]	; (8005840 <HAL_TIM_ConfigClockSource+0x1e4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f200 80ae 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 80056c0:	4a60      	ldr	r2, [pc, #384]	; (8005844 <HAL_TIM_ConfigClockSource+0x1e8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f000 80a1 	beq.w	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 80056c8:	4a5e      	ldr	r2, [pc, #376]	; (8005844 <HAL_TIM_ConfigClockSource+0x1e8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	f200 80a6 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 80056d0:	4a5d      	ldr	r2, [pc, #372]	; (8005848 <HAL_TIM_ConfigClockSource+0x1ec>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	f000 8099 	beq.w	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 80056d8:	4a5b      	ldr	r2, [pc, #364]	; (8005848 <HAL_TIM_ConfigClockSource+0x1ec>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	f200 809e 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 80056e0:	4a5a      	ldr	r2, [pc, #360]	; (800584c <HAL_TIM_ConfigClockSource+0x1f0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	f000 8091 	beq.w	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 80056e8:	4a58      	ldr	r2, [pc, #352]	; (800584c <HAL_TIM_ConfigClockSource+0x1f0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	f200 8096 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 80056f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056f4:	f000 8089 	beq.w	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 80056f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056fc:	f200 808e 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d03e      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x128>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	f200 8087 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	f000 8086 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1c6>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d87f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d01a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xfa>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d87b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d050      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x16e>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d877      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d03c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x14e>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d873      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d058      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x18e>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d86f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d064      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d86b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d060      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d867      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 8005750:	2b10      	cmp	r3, #16
 8005752:	d05a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x1ae>
 8005754:	e062      	b.n	800581c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f000 fc9d 	bl	80060a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	609a      	str	r2, [r3, #8]
      break;
 8005782:	e04f      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f000 fc86 	bl	80060a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a6:	609a      	str	r2, [r3, #8]
      break;
 80057a8:	e03c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fbf8 	bl	8005fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2150      	movs	r1, #80	; 0x50
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fc51 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 80057c8:	e02c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 fc17 	bl	800600a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2160      	movs	r1, #96	; 0x60
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fc41 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 80057e8:	e01c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 fbd8 	bl	8005fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fc31 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 8005808:	e00c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fc28 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 800581a:	e003      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e000      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	00100070 	.word	0x00100070
 8005844:	00100040 	.word	0x00100040
 8005848:	00100030 	.word	0x00100030
 800584c:	00100020 	.word	0x00100020

08005850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3c      	ldr	r2, [pc, #240]	; (80059a4 <TIM_Base_SetConfig+0x104>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00f      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d00b      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a39      	ldr	r2, [pc, #228]	; (80059a8 <TIM_Base_SetConfig+0x108>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a38      	ldr	r2, [pc, #224]	; (80059ac <TIM_Base_SetConfig+0x10c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_Base_SetConfig+0x38>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a37      	ldr	r2, [pc, #220]	; (80059b0 <TIM_Base_SetConfig+0x110>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d108      	bne.n	80058ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2d      	ldr	r2, [pc, #180]	; (80059a4 <TIM_Base_SetConfig+0x104>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01b      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d017      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <TIM_Base_SetConfig+0x108>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a29      	ldr	r2, [pc, #164]	; (80059ac <TIM_Base_SetConfig+0x10c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00f      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a28      	ldr	r2, [pc, #160]	; (80059b0 <TIM_Base_SetConfig+0x110>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00b      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a27      	ldr	r2, [pc, #156]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d007      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_Base_SetConfig+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a25      	ldr	r2, [pc, #148]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d108      	bne.n	800593c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a10      	ldr	r2, [pc, #64]	; (80059a4 <TIM_Base_SetConfig+0x104>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00f      	beq.n	8005988 <TIM_Base_SetConfig+0xe8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a11      	ldr	r2, [pc, #68]	; (80059b0 <TIM_Base_SetConfig+0x110>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00b      	beq.n	8005988 <TIM_Base_SetConfig+0xe8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a10      	ldr	r2, [pc, #64]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d007      	beq.n	8005988 <TIM_Base_SetConfig+0xe8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0xe8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a0e      	ldr	r2, [pc, #56]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d103      	bne.n	8005990 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	615a      	str	r2, [r3, #20]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40013400 	.word	0x40013400
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800

080059c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0303 	bic.w	r3, r3, #3
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 0302 	bic.w	r3, r3, #2
 8005a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <TIM_OC1_SetConfig+0x10c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00f      	beq.n	8005a40 <TIM_OC1_SetConfig+0x80>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <TIM_OC1_SetConfig+0x110>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00b      	beq.n	8005a40 <TIM_OC1_SetConfig+0x80>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <TIM_OC1_SetConfig+0x114>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d007      	beq.n	8005a40 <TIM_OC1_SetConfig+0x80>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a29      	ldr	r2, [pc, #164]	; (8005ad8 <TIM_OC1_SetConfig+0x118>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC1_SetConfig+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a28      	ldr	r2, [pc, #160]	; (8005adc <TIM_OC1_SetConfig+0x11c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10c      	bne.n	8005a5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0308 	bic.w	r3, r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <TIM_OC1_SetConfig+0x10c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_OC1_SetConfig+0xc2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <TIM_OC1_SetConfig+0x110>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_OC1_SetConfig+0xc2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a19      	ldr	r2, [pc, #100]	; (8005ad4 <TIM_OC1_SetConfig+0x114>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_OC1_SetConfig+0xc2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <TIM_OC1_SetConfig+0x118>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_OC1_SetConfig+0xc2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a17      	ldr	r2, [pc, #92]	; (8005adc <TIM_OC1_SetConfig+0x11c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d111      	bne.n	8005aa6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40013400 	.word	0x40013400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400
 8005adc:	40014800 	.word	0x40014800

08005ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0210 	bic.w	r2, r3, #16
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <TIM_OC2_SetConfig+0x100>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC2_SetConfig+0x6c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <TIM_OC2_SetConfig+0x104>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d10d      	bne.n	8005b68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <TIM_OC2_SetConfig+0x100>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00f      	beq.n	8005b90 <TIM_OC2_SetConfig+0xb0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <TIM_OC2_SetConfig+0x104>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <TIM_OC2_SetConfig+0xb0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <TIM_OC2_SetConfig+0x108>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <TIM_OC2_SetConfig+0xb0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <TIM_OC2_SetConfig+0x10c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC2_SetConfig+0xb0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <TIM_OC2_SetConfig+0x110>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d113      	bne.n	8005bb8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400
 8005bf0:	40014800 	.word	0x40014800

08005bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <TIM_OC3_SetConfig+0xfc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC3_SetConfig+0x6a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <TIM_OC3_SetConfig+0x100>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10d      	bne.n	8005c7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <TIM_OC3_SetConfig+0xfc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00f      	beq.n	8005ca2 <TIM_OC3_SetConfig+0xae>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <TIM_OC3_SetConfig+0x100>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <TIM_OC3_SetConfig+0xae>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <TIM_OC3_SetConfig+0x104>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_OC3_SetConfig+0xae>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a19      	ldr	r2, [pc, #100]	; (8005cfc <TIM_OC3_SetConfig+0x108>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_OC3_SetConfig+0xae>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <TIM_OC3_SetConfig+0x10c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d113      	bne.n	8005cca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	621a      	str	r2, [r3, #32]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800

08005d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a28      	ldr	r2, [pc, #160]	; (8005e04 <TIM_OC4_SetConfig+0x100>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC4_SetConfig+0x6c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <TIM_OC4_SetConfig+0x104>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10d      	bne.n	8005d8c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <TIM_OC4_SetConfig+0x100>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00f      	beq.n	8005db4 <TIM_OC4_SetConfig+0xb0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <TIM_OC4_SetConfig+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_OC4_SetConfig+0xb0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <TIM_OC4_SetConfig+0x108>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC4_SetConfig+0xb0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <TIM_OC4_SetConfig+0x10c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC4_SetConfig+0xb0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <TIM_OC4_SetConfig+0x110>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d113      	bne.n	8005ddc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	019b      	lsls	r3, r3, #6
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	019b      	lsls	r3, r3, #6
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800

08005e18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <TIM_OC5_SetConfig+0xb4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00f      	beq.n	8005e92 <TIM_OC5_SetConfig+0x7a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <TIM_OC5_SetConfig+0xb8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00b      	beq.n	8005e92 <TIM_OC5_SetConfig+0x7a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <TIM_OC5_SetConfig+0xbc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <TIM_OC5_SetConfig+0x7a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <TIM_OC5_SetConfig+0xc0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_OC5_SetConfig+0x7a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a13      	ldr	r2, [pc, #76]	; (8005edc <TIM_OC5_SetConfig+0xc4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d109      	bne.n	8005ea6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40014400 	.word	0x40014400
 8005edc:	40014800 	.word	0x40014800

08005ee0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <TIM_OC6_SetConfig+0xb8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00f      	beq.n	8005f5c <TIM_OC6_SetConfig+0x7c>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <TIM_OC6_SetConfig+0xbc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00b      	beq.n	8005f5c <TIM_OC6_SetConfig+0x7c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a16      	ldr	r2, [pc, #88]	; (8005fa0 <TIM_OC6_SetConfig+0xc0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <TIM_OC6_SetConfig+0x7c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <TIM_OC6_SetConfig+0xc4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC6_SetConfig+0x7c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a14      	ldr	r2, [pc, #80]	; (8005fa8 <TIM_OC6_SetConfig+0xc8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d109      	bne.n	8005f70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	029b      	lsls	r3, r3, #10
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800

08005fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 030a 	bic.w	r3, r3, #10
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600a:	b480      	push	{r7}
 800600c:	b087      	sub	sp, #28
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0210 	bic.w	r2, r3, #16
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	031b      	lsls	r3, r3, #12
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006046:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	f043 0307 	orr.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	609a      	str	r2, [r3, #8]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2201      	movs	r2, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	43db      	mvns	r3, r3
 8006106:	401a      	ands	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1a      	ldr	r2, [r3, #32]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	fa01 f303 	lsl.w	r3, r1, r3
 800611c:	431a      	orrs	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006144:	2302      	movs	r3, #2
 8006146:	e065      	b.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2c      	ldr	r2, [pc, #176]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2b      	ldr	r2, [pc, #172]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1b      	ldr	r2, [pc, #108]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d018      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d013      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a12      	ldr	r2, [pc, #72]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d10c      	bne.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40014000 	.word	0x40014000

08006234 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800624c:	2302      	movs	r3, #2
 800624e:	e087      	b.n	8006360 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	041b      	lsls	r3, r3, #16
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a27      	ldr	r2, [pc, #156]	; (800636c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d106      	bne.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1e      	ldr	r2, [pc, #120]	; (800636c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d126      	bne.n	800634e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	051b      	lsls	r3, r3, #20
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0e      	ldr	r2, [pc, #56]	; (800636c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a0d      	ldr	r2, [pc, #52]	; (8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d106      	bne.n	800634e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40012c00 	.word	0x40012c00
 8006370:	40013400 	.word	0x40013400

08006374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006410:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006414:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006436:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800643a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	b29b      	uxth	r3, r3
 8006448:	43db      	mvns	r3, r3
 800644a:	b29b      	uxth	r3, r3
 800644c:	4013      	ands	r3, r2
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006464:	b084      	sub	sp, #16
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	f107 0014 	add.w	r0, r7, #20
 8006472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	b004      	add	sp, #16
 80064a4:	4770      	bx	lr
	...

080064a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b09d      	sub	sp, #116	; 0x74
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	78db      	ldrb	r3, [r3, #3]
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d81f      	bhi.n	800651a <USB_ActivateEndpoint+0x72>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <USB_ActivateEndpoint+0x38>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	080064f1 	.word	0x080064f1
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006523 	.word	0x08006523
 80064ec:	080064ff 	.word	0x080064ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064fc:	e012      	b.n	8006524 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006502:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006506:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800650a:	e00b      	b.n	8006524 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800650c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006514:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006518:	e004      	b.n	8006524 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006520:	e000      	b.n	8006524 <USB_ActivateEndpoint+0x7c>
      break;
 8006522:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006542:	b29b      	uxth	r3, r3
 8006544:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	b21b      	sxth	r3, r3
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655e:	b21a      	sxth	r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	b21b      	sxth	r3, r3
 8006566:	4313      	orrs	r3, r2
 8006568:	b21b      	sxth	r3, r3
 800656a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	441a      	add	r2, r3
 8006578:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	7b1b      	ldrb	r3, [r3, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f040 8149 	bne.w	800682c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8084 	beq.w	80066ac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	4413      	add	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	00da      	lsls	r2, r3, #3
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	88db      	ldrh	r3, [r3, #6]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	827b      	strh	r3, [r7, #18]
 80065e6:	8a7b      	ldrh	r3, [r7, #18]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01b      	beq.n	8006628 <USB_ActivateEndpoint+0x180>
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	823b      	strh	r3, [r7, #16]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	441a      	add	r2, r3
 8006612:	8a3b      	ldrh	r3, [r7, #16]
 8006614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006624:	b29b      	uxth	r3, r3
 8006626:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d020      	beq.n	8006672 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006646:	81bb      	strh	r3, [r7, #12]
 8006648:	89bb      	ldrh	r3, [r7, #12]
 800664a:	f083 0320 	eor.w	r3, r3, #32
 800664e:	81bb      	strh	r3, [r7, #12]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	441a      	add	r2, r3
 800665a:	89bb      	ldrh	r3, [r7, #12]
 800665c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800666c:	b29b      	uxth	r3, r3
 800666e:	8013      	strh	r3, [r2, #0]
 8006670:	e2a6      	b.n	8006bc0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006688:	81fb      	strh	r3, [r7, #14]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	89fb      	ldrh	r3, [r7, #14]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
 80066aa:	e289      	b.n	8006bc0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	4413      	add	r3, r2
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00da      	lsls	r2, r3, #3
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	88db      	ldrh	r3, [r3, #6]
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	4413      	add	r3, r2
 80066f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	00da      	lsls	r2, r3, #3
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b3e      	cmp	r3, #62	; 0x3e
 800670a:	d918      	bls.n	800673e <USB_ActivateEndpoint+0x296>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	66bb      	str	r3, [r7, #104]	; 0x68
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 031f 	and.w	r3, r3, #31
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <USB_ActivateEndpoint+0x27e>
 8006720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006722:	3b01      	subs	r3, #1
 8006724:	66bb      	str	r3, [r7, #104]	; 0x68
 8006726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006728:	b29b      	uxth	r3, r3
 800672a:	029b      	lsls	r3, r3, #10
 800672c:	b29b      	uxth	r3, r3
 800672e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006736:	b29a      	uxth	r2, r3
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e029      	b.n	8006792 <USB_ActivateEndpoint+0x2ea>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d112      	bne.n	800676c <USB_ActivateEndpoint+0x2c4>
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006750:	b29a      	uxth	r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e012      	b.n	8006792 <USB_ActivateEndpoint+0x2ea>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	66bb      	str	r3, [r7, #104]	; 0x68
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <USB_ActivateEndpoint+0x2de>
 8006780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006782:	3301      	adds	r3, #1
 8006784:	66bb      	str	r3, [r7, #104]	; 0x68
 8006786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006788:	b29b      	uxth	r3, r3
 800678a:	029b      	lsls	r3, r3, #10
 800678c:	b29a      	uxth	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	847b      	strh	r3, [r7, #34]	; 0x22
 80067a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01b      	beq.n	80067e2 <USB_ActivateEndpoint+0x33a>
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c0:	843b      	strh	r3, [r7, #32]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	8c3b      	ldrh	r3, [r7, #32]
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f8:	83fb      	strh	r3, [r7, #30]
 80067fa:	8bfb      	ldrh	r3, [r7, #30]
 80067fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006800:	83fb      	strh	r3, [r7, #30]
 8006802:	8bfb      	ldrh	r3, [r7, #30]
 8006804:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006808:	83fb      	strh	r3, [r7, #30]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	8bfb      	ldrh	r3, [r7, #30]
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
 800682a:	e1c9      	b.n	8006bc0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	78db      	ldrb	r3, [r3, #3]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d11e      	bne.n	8006872 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800685c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006864:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686c:	b29b      	uxth	r3, r3
 800686e:	8013      	strh	r3, [r2, #0]
 8006870:	e01d      	b.n	80068ae <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006888:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800689a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068be:	4413      	add	r3, r2
 80068c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	00da      	lsls	r2, r3, #3
 80068c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	891b      	ldrh	r3, [r3, #8]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	b29b      	uxth	r3, r3
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	657b      	str	r3, [r7, #84]	; 0x54
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f2:	4413      	add	r3, r2
 80068f4:	657b      	str	r3, [r7, #84]	; 0x54
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	00da      	lsls	r2, r3, #3
 80068fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068fe:	4413      	add	r3, r2
 8006900:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006904:	653b      	str	r3, [r7, #80]	; 0x50
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	895b      	ldrh	r3, [r3, #10]
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	b29b      	uxth	r3, r3
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006914:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 8093 	bne.w	8006a46 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006930:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01b      	beq.n	8006974 <USB_ActivateEndpoint+0x4cc>
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006982:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <USB_ActivateEndpoint+0x51c>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	873b      	strh	r3, [r7, #56]	; 0x38
 80069dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80069e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a22:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]
 8006a44:	e0bc      	b.n	8006bc0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006a56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01d      	beq.n	8006a9e <USB_ActivateEndpoint+0x5f6>
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006aae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01d      	beq.n	8006af6 <USB_ActivateEndpoint+0x64e>
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	78db      	ldrb	r3, [r3, #3]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d024      	beq.n	8006b48 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b1c:	f083 0320 	eor.w	r3, r3, #32
 8006b20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	8013      	strh	r3, [r2, #0]
 8006b46:	e01d      	b.n	8006b84 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006bc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3774      	adds	r7, #116	; 0x74
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b08d      	sub	sp, #52	; 0x34
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	7b1b      	ldrb	r3, [r3, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f040 808e 	bne.w	8006d00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d044      	beq.n	8006c76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	81bb      	strh	r3, [r7, #12]
 8006bfa:	89bb      	ldrh	r3, [r7, #12]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01b      	beq.n	8006c3c <USB_DeactivateEndpoint+0x6c>
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1a:	817b      	strh	r3, [r7, #10]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	897b      	ldrh	r3, [r7, #10]
 8006c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c52:	813b      	strh	r3, [r7, #8]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	893b      	ldrh	r3, [r7, #8]
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
 8006c74:	e192      	b.n	8006f9c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	827b      	strh	r3, [r7, #18]
 8006c84:	8a7b      	ldrh	r3, [r7, #18]
 8006c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01b      	beq.n	8006cc6 <USB_DeactivateEndpoint+0xf6>
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	823b      	strh	r3, [r7, #16]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	441a      	add	r2, r3
 8006cb0:	8a3b      	ldrh	r3, [r7, #16]
 8006cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cdc:	81fb      	strh	r3, [r7, #14]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]
 8006cfe:	e14d      	b.n	8006f9c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 80a5 	bne.w	8006e54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	843b      	strh	r3, [r7, #32]
 8006d18:	8c3b      	ldrh	r3, [r7, #32]
 8006d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01b      	beq.n	8006d5a <USB_DeactivateEndpoint+0x18a>
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d38:	83fb      	strh	r3, [r7, #30]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	441a      	add	r2, r3
 8006d44:	8bfb      	ldrh	r3, [r7, #30]
 8006d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	83bb      	strh	r3, [r7, #28]
 8006d68:	8bbb      	ldrh	r3, [r7, #28]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01b      	beq.n	8006daa <USB_DeactivateEndpoint+0x1da>
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	837b      	strh	r3, [r7, #26]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	8b7b      	ldrh	r3, [r7, #26]
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc0:	833b      	strh	r3, [r7, #24]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8b3b      	ldrh	r3, [r7, #24]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	82fb      	strh	r3, [r7, #22]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	8afb      	ldrh	r3, [r7, #22]
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	82bb      	strh	r3, [r7, #20]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	8abb      	ldrh	r3, [r7, #20]
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]
 8006e52:	e0a3      	b.n	8006f9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01b      	beq.n	8006ea4 <USB_DeactivateEndpoint+0x2d4>
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	441a      	add	r2, r3
 8006e8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006eb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01b      	beq.n	8006ef4 <USB_DeactivateEndpoint+0x324>
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	441a      	add	r2, r3
 8006f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3734      	adds	r7, #52	; 0x34
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b0c2      	sub	sp, #264	; 0x108
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	1d3b      	adds	r3, r7, #4
 8006fb2:	6018      	str	r0, [r3, #0]
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	f040 8509 	bne.w	80079d6 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	463b      	mov	r3, r7
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d905      	bls.n	8006fe0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fde:	e004      	b.n	8006fea <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fea:	463b      	mov	r3, r7
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	7b1b      	ldrb	r3, [r3, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d128      	bne.n	8007046 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6959      	ldr	r1, [r3, #20]
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	88da      	ldrh	r2, [r3, #6]
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007004:	b29b      	uxth	r3, r3
 8007006:	1d38      	adds	r0, r7, #4
 8007008:	6800      	ldr	r0, [r0, #0]
 800700a:	f001 f9da 	bl	80083c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800700e:	1d3b      	adds	r3, r7, #4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4413      	add	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	463b      	mov	r3, r7
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	00da      	lsls	r2, r3, #3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4413      	add	r3, r2
 8007032:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	801a      	strh	r2, [r3, #0]
 8007042:	f000 bc9f 	b.w	8007984 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007046:	463b      	mov	r3, r7
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	78db      	ldrb	r3, [r3, #3]
 800704c:	2b02      	cmp	r3, #2
 800704e:	f040 8347 	bne.w	80076e0 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007052:	463b      	mov	r3, r7
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6a1a      	ldr	r2, [r3, #32]
 8007058:	463b      	mov	r3, r7
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	f240 82eb 	bls.w	800763a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007064:	1d3b      	adds	r3, r7, #4
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	463b      	mov	r3, r7
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	441a      	add	r2, r3
 8007090:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070a8:	463b      	mov	r3, r7
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a1a      	ldr	r2, [r3, #32]
 80070ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	463b      	mov	r3, r7
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	463b      	mov	r3, r7
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8159 	beq.w	8007388 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	633b      	str	r3, [r7, #48]	; 0x30
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d164      	bne.n	80071b0 <USB_EPStartXfer+0x206>
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ec:	1d3b      	adds	r3, r7, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	4413      	add	r3, r2
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070fe:	463b      	mov	r3, r7
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	00da      	lsls	r2, r3, #3
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	4413      	add	r3, r2
 800710a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	2b3e      	cmp	r3, #62	; 0x3e
 8007116:	d91c      	bls.n	8007152 <USB_EPStartXfer+0x1a8>
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	2b00      	cmp	r3, #0
 800712c:	d104      	bne.n	8007138 <USB_EPStartXfer+0x18e>
 800712e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007132:	3b01      	subs	r3, #1
 8007134:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007138:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800713c:	b29b      	uxth	r3, r3
 800713e:	029b      	lsls	r3, r3, #10
 8007140:	b29b      	uxth	r3, r3
 8007142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714a:	b29a      	uxth	r2, r3
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	801a      	strh	r2, [r3, #0]
 8007150:	e04a      	b.n	80071e8 <USB_EPStartXfer+0x23e>
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	2b00      	cmp	r3, #0
 8007158:	d112      	bne.n	8007180 <USB_EPStartXfer+0x1d6>
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007164:	b29a      	uxth	r2, r3
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007178:	b29a      	uxth	r2, r3
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e033      	b.n	80071e8 <USB_EPStartXfer+0x23e>
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <USB_EPStartXfer+0x1f6>
 8007196:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800719a:	3301      	adds	r3, #1
 800719c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	029b      	lsls	r3, r3, #10
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	e01b      	b.n	80071e8 <USB_EPStartXfer+0x23e>
 80071b0:	463b      	mov	r3, r7
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d116      	bne.n	80071e8 <USB_EPStartXfer+0x23e>
 80071ba:	1d3b      	adds	r3, r7, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	4413      	add	r3, r2
 80071ca:	633b      	str	r3, [r7, #48]	; 0x30
 80071cc:	463b      	mov	r3, r7
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071e8:	463b      	mov	r3, r7
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	895b      	ldrh	r3, [r3, #10]
 80071ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071f2:	463b      	mov	r3, r7
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6959      	ldr	r1, [r3, #20]
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007202:	1d38      	adds	r0, r7, #4
 8007204:	6800      	ldr	r0, [r0, #0]
 8007206:	f001 f8dc 	bl	80083c2 <USB_WritePMA>
            ep->xfer_buff += len;
 800720a:	463b      	mov	r3, r7
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695a      	ldr	r2, [r3, #20]
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	441a      	add	r2, r3
 8007216:	463b      	mov	r3, r7
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800721c:	463b      	mov	r3, r7
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	463b      	mov	r3, r7
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	429a      	cmp	r2, r3
 800722a:	d909      	bls.n	8007240 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800722c:	463b      	mov	r3, r7
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007236:	1ad2      	subs	r2, r2, r3
 8007238:	463b      	mov	r3, r7
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	621a      	str	r2, [r3, #32]
 800723e:	e008      	b.n	8007252 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007240:	463b      	mov	r3, r7
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800724a:	463b      	mov	r3, r7
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2200      	movs	r2, #0
 8007250:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007252:	463b      	mov	r3, r7
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d164      	bne.n	8007326 <USB_EPStartXfer+0x37c>
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	4413      	add	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	463b      	mov	r3, r7
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	00da      	lsls	r2, r3, #3
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	4413      	add	r3, r2
 8007280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728a:	2b3e      	cmp	r3, #62	; 0x3e
 800728c:	d91c      	bls.n	80072c8 <USB_EPStartXfer+0x31e>
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <USB_EPStartXfer+0x304>
 80072a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a8:	3b01      	subs	r3, #1
 80072aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	029b      	lsls	r3, r3, #10
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e04d      	b.n	8007364 <USB_EPStartXfer+0x3ba>
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d112      	bne.n	80072f6 <USB_EPStartXfer+0x34c>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072da:	b29a      	uxth	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e036      	b.n	8007364 <USB_EPStartXfer+0x3ba>
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <USB_EPStartXfer+0x36c>
 800730c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007310:	3301      	adds	r3, #1
 8007312:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800731a:	b29b      	uxth	r3, r3
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	b29a      	uxth	r2, r3
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e01e      	b.n	8007364 <USB_EPStartXfer+0x3ba>
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d119      	bne.n	8007364 <USB_EPStartXfer+0x3ba>
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	4413      	add	r3, r2
 8007346:	623b      	str	r3, [r7, #32]
 8007348:	463b      	mov	r3, r7
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	00da      	lsls	r2, r3, #3
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	4413      	add	r3, r2
 8007354:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735e:	b29a      	uxth	r2, r3
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	891b      	ldrh	r3, [r3, #8]
 800736a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800736e:	463b      	mov	r3, r7
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6959      	ldr	r1, [r3, #20]
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007378:	b29b      	uxth	r3, r3
 800737a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800737e:	1d38      	adds	r0, r7, #4
 8007380:	6800      	ldr	r0, [r0, #0]
 8007382:	f001 f81e 	bl	80083c2 <USB_WritePMA>
 8007386:	e2fd      	b.n	8007984 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d164      	bne.n	800745c <USB_EPStartXfer+0x4b2>
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	64bb      	str	r3, [r7, #72]	; 0x48
 8007398:	1d3b      	adds	r3, r7, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a6:	4413      	add	r3, r2
 80073a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073aa:	463b      	mov	r3, r7
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	00da      	lsls	r2, r3, #3
 80073b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b4:	4413      	add	r3, r2
 80073b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073ba:	647b      	str	r3, [r7, #68]	; 0x44
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c0:	2b3e      	cmp	r3, #62	; 0x3e
 80073c2:	d91c      	bls.n	80073fe <USB_EPStartXfer+0x454>
 80073c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <USB_EPStartXfer+0x43a>
 80073da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073de:	3b01      	subs	r3, #1
 80073e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	029b      	lsls	r3, r3, #10
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	e04d      	b.n	800749a <USB_EPStartXfer+0x4f0>
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007402:	2b00      	cmp	r3, #0
 8007404:	d112      	bne.n	800742c <USB_EPStartXfer+0x482>
 8007406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007410:	b29a      	uxth	r2, r3
 8007412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007424:	b29a      	uxth	r2, r3
 8007426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e036      	b.n	800749a <USB_EPStartXfer+0x4f0>
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <USB_EPStartXfer+0x4a2>
 8007442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007446:	3301      	adds	r3, #1
 8007448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800744c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007450:	b29b      	uxth	r3, r3
 8007452:	029b      	lsls	r3, r3, #10
 8007454:	b29a      	uxth	r2, r3
 8007456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007458:	801a      	strh	r2, [r3, #0]
 800745a:	e01e      	b.n	800749a <USB_EPStartXfer+0x4f0>
 800745c:	463b      	mov	r3, r7
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d119      	bne.n	800749a <USB_EPStartXfer+0x4f0>
 8007466:	1d3b      	adds	r3, r7, #4
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	653b      	str	r3, [r7, #80]	; 0x50
 800746c:	1d3b      	adds	r3, r7, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007474:	b29b      	uxth	r3, r3
 8007476:	461a      	mov	r2, r3
 8007478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747a:	4413      	add	r3, r2
 800747c:	653b      	str	r3, [r7, #80]	; 0x50
 800747e:	463b      	mov	r3, r7
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	00da      	lsls	r2, r3, #3
 8007486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007488:	4413      	add	r3, r2
 800748a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800748e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007494:	b29a      	uxth	r2, r3
 8007496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007498:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800749a:	463b      	mov	r3, r7
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	891b      	ldrh	r3, [r3, #8]
 80074a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a4:	463b      	mov	r3, r7
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6959      	ldr	r1, [r3, #20]
 80074aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074b4:	1d38      	adds	r0, r7, #4
 80074b6:	6800      	ldr	r0, [r0, #0]
 80074b8:	f000 ff83 	bl	80083c2 <USB_WritePMA>
            ep->xfer_buff += len;
 80074bc:	463b      	mov	r3, r7
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c6:	441a      	add	r2, r3
 80074c8:	463b      	mov	r3, r7
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074ce:	463b      	mov	r3, r7
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6a1a      	ldr	r2, [r3, #32]
 80074d4:	463b      	mov	r3, r7
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d909      	bls.n	80074f2 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80074de:	463b      	mov	r3, r7
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e8:	1ad2      	subs	r2, r2, r3
 80074ea:	463b      	mov	r3, r7
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	621a      	str	r2, [r3, #32]
 80074f0:	e008      	b.n	8007504 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 80074f2:	463b      	mov	r3, r7
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80074fc:	463b      	mov	r3, r7
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2200      	movs	r2, #0
 8007502:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007504:	1d3b      	adds	r3, r7, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	643b      	str	r3, [r7, #64]	; 0x40
 800750a:	463b      	mov	r3, r7
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d164      	bne.n	80075de <USB_EPStartXfer+0x634>
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	63bb      	str	r3, [r7, #56]	; 0x38
 800751a:	1d3b      	adds	r3, r7, #4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007522:	b29b      	uxth	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	4413      	add	r3, r2
 800752a:	63bb      	str	r3, [r7, #56]	; 0x38
 800752c:	463b      	mov	r3, r7
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	00da      	lsls	r2, r3, #3
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	4413      	add	r3, r2
 8007538:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007542:	2b3e      	cmp	r3, #62	; 0x3e
 8007544:	d91c      	bls.n	8007580 <USB_EPStartXfer+0x5d6>
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <USB_EPStartXfer+0x5bc>
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	3b01      	subs	r3, #1
 8007562:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29b      	uxth	r3, r3
 8007570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007578:	b29a      	uxth	r2, r3
 800757a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e04a      	b.n	8007616 <USB_EPStartXfer+0x66c>
 8007580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007584:	2b00      	cmp	r3, #0
 8007586:	d112      	bne.n	80075ae <USB_EPStartXfer+0x604>
 8007588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007592:	b29a      	uxth	r2, r3
 8007594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e033      	b.n	8007616 <USB_EPStartXfer+0x66c>
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <USB_EPStartXfer+0x624>
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	3301      	adds	r3, #1
 80075ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	029b      	lsls	r3, r3, #10
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e01b      	b.n	8007616 <USB_EPStartXfer+0x66c>
 80075de:	463b      	mov	r3, r7
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d116      	bne.n	8007616 <USB_EPStartXfer+0x66c>
 80075e8:	1d3b      	adds	r3, r7, #4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f6:	4413      	add	r3, r2
 80075f8:	643b      	str	r3, [r7, #64]	; 0x40
 80075fa:	463b      	mov	r3, r7
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	00da      	lsls	r2, r3, #3
 8007602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007604:	4413      	add	r3, r2
 8007606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007610:	b29a      	uxth	r2, r3
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007616:	463b      	mov	r3, r7
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	895b      	ldrh	r3, [r3, #10]
 800761c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007620:	463b      	mov	r3, r7
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6959      	ldr	r1, [r3, #20]
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762a:	b29b      	uxth	r3, r3
 800762c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007630:	1d38      	adds	r0, r7, #4
 8007632:	6800      	ldr	r0, [r0, #0]
 8007634:	f000 fec5 	bl	80083c2 <USB_WritePMA>
 8007638:	e1a4      	b.n	8007984 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800763a:	463b      	mov	r3, r7
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	463b      	mov	r3, r7
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007662:	1d3b      	adds	r3, r7, #4
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	463b      	mov	r3, r7
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	441a      	add	r2, r3
 8007670:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800767c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007684:	b29b      	uxth	r3, r3
 8007686:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007688:	1d3b      	adds	r3, r7, #4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800768e:	1d3b      	adds	r3, r7, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007696:	b29b      	uxth	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800769c:	4413      	add	r3, r2
 800769e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a0:	463b      	mov	r3, r7
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	00da      	lsls	r2, r3, #3
 80076a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076aa:	4413      	add	r3, r2
 80076ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076bc:	463b      	mov	r3, r7
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	891b      	ldrh	r3, [r3, #8]
 80076c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076c6:	463b      	mov	r3, r7
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6959      	ldr	r1, [r3, #20]
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076d6:	1d38      	adds	r0, r7, #4
 80076d8:	6800      	ldr	r0, [r0, #0]
 80076da:	f000 fe72 	bl	80083c2 <USB_WritePMA>
 80076de:	e151      	b.n	8007984 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076e0:	463b      	mov	r3, r7
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6a1a      	ldr	r2, [r3, #32]
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	463b      	mov	r3, r7
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076f2:	1d3b      	adds	r3, r7, #4
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	463b      	mov	r3, r7
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 809b 	beq.w	8007844 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800770e:	1d3b      	adds	r3, r7, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	673b      	str	r3, [r7, #112]	; 0x70
 8007714:	463b      	mov	r3, r7
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d164      	bne.n	80077e8 <USB_EPStartXfer+0x83e>
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	66bb      	str	r3, [r7, #104]	; 0x68
 8007724:	1d3b      	adds	r3, r7, #4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007732:	4413      	add	r3, r2
 8007734:	66bb      	str	r3, [r7, #104]	; 0x68
 8007736:	463b      	mov	r3, r7
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	00da      	lsls	r2, r3, #3
 800773e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007740:	4413      	add	r3, r2
 8007742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007746:	667b      	str	r3, [r7, #100]	; 0x64
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774c:	2b3e      	cmp	r3, #62	; 0x3e
 800774e:	d91c      	bls.n	800778a <USB_EPStartXfer+0x7e0>
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775e:	f003 031f 	and.w	r3, r3, #31
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <USB_EPStartXfer+0x7c6>
 8007766:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800776a:	3b01      	subs	r3, #1
 800776c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007770:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007774:	b29b      	uxth	r3, r3
 8007776:	029b      	lsls	r3, r3, #10
 8007778:	b29b      	uxth	r3, r3
 800777a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800777e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007782:	b29a      	uxth	r2, r3
 8007784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	e04a      	b.n	8007820 <USB_EPStartXfer+0x876>
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778e:	2b00      	cmp	r3, #0
 8007790:	d112      	bne.n	80077b8 <USB_EPStartXfer+0x80e>
 8007792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800779c:	b29a      	uxth	r2, r3
 800779e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	e033      	b.n	8007820 <USB_EPStartXfer+0x876>
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <USB_EPStartXfer+0x82e>
 80077ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077d2:	3301      	adds	r3, #1
 80077d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077dc:	b29b      	uxth	r3, r3
 80077de:	029b      	lsls	r3, r3, #10
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	e01b      	b.n	8007820 <USB_EPStartXfer+0x876>
 80077e8:	463b      	mov	r3, r7
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d116      	bne.n	8007820 <USB_EPStartXfer+0x876>
 80077f2:	1d3b      	adds	r3, r7, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007800:	4413      	add	r3, r2
 8007802:	673b      	str	r3, [r7, #112]	; 0x70
 8007804:	463b      	mov	r3, r7
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	00da      	lsls	r2, r3, #3
 800780c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800780e:	4413      	add	r3, r2
 8007810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007814:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781a:	b29a      	uxth	r2, r3
 800781c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	895b      	ldrh	r3, [r3, #10]
 8007826:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782a:	463b      	mov	r3, r7
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6959      	ldr	r1, [r3, #20]
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007834:	b29b      	uxth	r3, r3
 8007836:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800783a:	1d38      	adds	r0, r7, #4
 800783c:	6800      	ldr	r0, [r0, #0]
 800783e:	f000 fdc0 	bl	80083c2 <USB_WritePMA>
 8007842:	e09f      	b.n	8007984 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007844:	463b      	mov	r3, r7
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d164      	bne.n	8007918 <USB_EPStartXfer+0x96e>
 800784e:	1d3b      	adds	r3, r7, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785c:	b29b      	uxth	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007862:	4413      	add	r3, r2
 8007864:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007866:	463b      	mov	r3, r7
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	00da      	lsls	r2, r3, #3
 800786e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007870:	4413      	add	r3, r2
 8007872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007876:	67bb      	str	r3, [r7, #120]	; 0x78
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787c:	2b3e      	cmp	r3, #62	; 0x3e
 800787e:	d91c      	bls.n	80078ba <USB_EPStartXfer+0x910>
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788e:	f003 031f 	and.w	r3, r3, #31
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <USB_EPStartXfer+0x8f6>
 8007896:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800789a:	3b01      	subs	r3, #1
 800789c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	029b      	lsls	r3, r3, #10
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e053      	b.n	8007962 <USB_EPStartXfer+0x9b8>
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d112      	bne.n	80078e8 <USB_EPStartXfer+0x93e>
 80078c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e03c      	b.n	8007962 <USB_EPStartXfer+0x9b8>
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <USB_EPStartXfer+0x95e>
 80078fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007902:	3301      	adds	r3, #1
 8007904:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007908:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800790c:	b29b      	uxth	r3, r3
 800790e:	029b      	lsls	r3, r3, #10
 8007910:	b29a      	uxth	r2, r3
 8007912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	e024      	b.n	8007962 <USB_EPStartXfer+0x9b8>
 8007918:	463b      	mov	r3, r7
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d11f      	bne.n	8007962 <USB_EPStartXfer+0x9b8>
 8007922:	1d3b      	adds	r3, r7, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800792a:	1d3b      	adds	r3, r7, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800793a:	4413      	add	r3, r2
 800793c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	00da      	lsls	r2, r3, #3
 8007948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800794c:	4413      	add	r3, r2
 800794e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795a:	b29a      	uxth	r2, r3
 800795c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007960:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007962:	463b      	mov	r3, r7
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	891b      	ldrh	r3, [r3, #8]
 8007968:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800796c:	463b      	mov	r3, r7
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6959      	ldr	r1, [r3, #20]
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	b29b      	uxth	r3, r3
 8007978:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800797c:	1d38      	adds	r0, r7, #4
 800797e:	6800      	ldr	r0, [r0, #0]
 8007980:	f000 fd1f 	bl	80083c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	463b      	mov	r3, r7
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799e:	817b      	strh	r3, [r7, #10]
 80079a0:	897b      	ldrh	r3, [r7, #10]
 80079a2:	f083 0310 	eor.w	r3, r3, #16
 80079a6:	817b      	strh	r3, [r7, #10]
 80079a8:	897b      	ldrh	r3, [r7, #10]
 80079aa:	f083 0320 	eor.w	r3, r3, #32
 80079ae:	817b      	strh	r3, [r7, #10]
 80079b0:	1d3b      	adds	r3, r7, #4
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	463b      	mov	r3, r7
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	897b      	ldrh	r3, [r7, #10]
 80079c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	8013      	strh	r3, [r2, #0]
 80079d4:	e3b5      	b.n	8008142 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079d6:	463b      	mov	r3, r7
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	7b1b      	ldrb	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 8090 	bne.w	8007b02 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079e2:	463b      	mov	r3, r7
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699a      	ldr	r2, [r3, #24]
 80079e8:	463b      	mov	r3, r7
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d90e      	bls.n	8007a10 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80079f2:	463b      	mov	r3, r7
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	619a      	str	r2, [r3, #24]
 8007a0e:	e008      	b.n	8007a22 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8007a10:	463b      	mov	r3, r7
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a2a:	1d3b      	adds	r3, r7, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a40:	463b      	mov	r3, r7
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	00da      	lsls	r2, r3, #3
 8007a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a5c:	d91d      	bls.n	8007a9a <USB_EPStartXfer+0xaf0>
 8007a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d104      	bne.n	8007a7e <USB_EPStartXfer+0xad4>
 8007a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	029b      	lsls	r3, r3, #10
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a96:	801a      	strh	r2, [r3, #0]
 8007a98:	e325      	b.n	80080e6 <USB_EPStartXfer+0x113c>
 8007a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d116      	bne.n	8007ad0 <USB_EPStartXfer+0xb26>
 8007aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	e30a      	b.n	80080e6 <USB_EPStartXfer+0x113c>
 8007ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad4:	085b      	lsrs	r3, r3, #1
 8007ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <USB_EPStartXfer+0xb46>
 8007ae6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aea:	3301      	adds	r3, #1
 8007aec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	029b      	lsls	r3, r3, #10
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	e2f1      	b.n	80080e6 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b02:	463b      	mov	r3, r7
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	78db      	ldrb	r3, [r3, #3]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	f040 818f 	bne.w	8007e2c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b0e:	463b      	mov	r3, r7
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d175      	bne.n	8007c04 <USB_EPStartXfer+0xc5a>
 8007b18:	1d3b      	adds	r3, r7, #4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b20:	1d3b      	adds	r3, r7, #4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b30:	4413      	add	r3, r2
 8007b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b36:	463b      	mov	r3, r7
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	00da      	lsls	r2, r3, #3
 8007b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b42:	4413      	add	r3, r2
 8007b44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b3e      	cmp	r3, #62	; 0x3e
 8007b54:	d91f      	bls.n	8007b96 <USB_EPStartXfer+0xbec>
 8007b56:	463b      	mov	r3, r7
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b62:	463b      	mov	r3, r7
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <USB_EPStartXfer+0xbd0>
 8007b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b74:	3b01      	subs	r3, #1
 8007b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	029b      	lsls	r3, r3, #10
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b92:	801a      	strh	r2, [r3, #0]
 8007b94:	e05c      	b.n	8007c50 <USB_EPStartXfer+0xca6>
 8007b96:	463b      	mov	r3, r7
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <USB_EPStartXfer+0xc24>
 8007ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	e040      	b.n	8007c50 <USB_EPStartXfer+0xca6>
 8007bce:	463b      	mov	r3, r7
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bda:	463b      	mov	r3, r7
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <USB_EPStartXfer+0xc48>
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bec:	3301      	adds	r3, #1
 8007bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	029b      	lsls	r3, r3, #10
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e025      	b.n	8007c50 <USB_EPStartXfer+0xca6>
 8007c04:	463b      	mov	r3, r7
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d120      	bne.n	8007c50 <USB_EPStartXfer+0xca6>
 8007c0e:	1d3b      	adds	r3, r7, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c26:	4413      	add	r3, r2
 8007c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	00da      	lsls	r2, r3, #3
 8007c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c38:	4413      	add	r3, r2
 8007c3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c42:	463b      	mov	r3, r7
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	1d3b      	adds	r3, r7, #4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c58:	463b      	mov	r3, r7
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d175      	bne.n	8007d4e <USB_EPStartXfer+0xda4>
 8007c62:	1d3b      	adds	r3, r7, #4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c6a:	1d3b      	adds	r3, r7, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	461a      	mov	r2, r3
 8007c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	00da      	lsls	r2, r3, #3
 8007c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c96:	463b      	mov	r3, r7
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007c9e:	d91f      	bls.n	8007ce0 <USB_EPStartXfer+0xd36>
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cac:	463b      	mov	r3, r7
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <USB_EPStartXfer+0xd1a>
 8007cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	029b      	lsls	r3, r3, #10
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	e058      	b.n	8007d92 <USB_EPStartXfer+0xde8>
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d116      	bne.n	8007d18 <USB_EPStartXfer+0xd6e>
 8007cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e03c      	b.n	8007d92 <USB_EPStartXfer+0xde8>
 8007d18:	463b      	mov	r3, r7
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d24:	463b      	mov	r3, r7
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <USB_EPStartXfer+0xd92>
 8007d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d36:	3301      	adds	r3, #1
 8007d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	029b      	lsls	r3, r3, #10
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	e021      	b.n	8007d92 <USB_EPStartXfer+0xde8>
 8007d4e:	463b      	mov	r3, r7
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d11c      	bne.n	8007d92 <USB_EPStartXfer+0xde8>
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d68:	4413      	add	r3, r2
 8007d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d6e:	463b      	mov	r3, r7
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	00da      	lsls	r2, r3, #3
 8007d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d84:	463b      	mov	r3, r7
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d90:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d92:	463b      	mov	r3, r7
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 81a4 	beq.w	80080e6 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d9e:	1d3b      	adds	r3, r7, #4
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	463b      	mov	r3, r7
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007db2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <USB_EPStartXfer+0xe20>
 8007dbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10d      	bne.n	8007de6 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007dca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f040 8187 	bne.w	80080e6 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007dd8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 8180 	bne.w	80080e6 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007de6:	1d3b      	adds	r3, r7, #4
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	463b      	mov	r3, r7
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e00:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007e04:	1d3b      	adds	r3, r7, #4
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	463b      	mov	r3, r7
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	441a      	add	r2, r3
 8007e12:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	8013      	strh	r3, [r2, #0]
 8007e2a:	e15c      	b.n	80080e6 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	78db      	ldrb	r3, [r3, #3]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	f040 8155 	bne.w	80080e2 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e38:	463b      	mov	r3, r7
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	463b      	mov	r3, r7
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d90e      	bls.n	8007e66 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007e48:	463b      	mov	r3, r7
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5c:	1ad2      	subs	r2, r2, r3
 8007e5e:	463b      	mov	r3, r7
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	619a      	str	r2, [r3, #24]
 8007e64:	e008      	b.n	8007e78 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007e66:	463b      	mov	r3, r7
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007e70:	463b      	mov	r3, r7
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2200      	movs	r2, #0
 8007e76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e78:	463b      	mov	r3, r7
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d16f      	bne.n	8007f62 <USB_EPStartXfer+0xfb8>
 8007e82:	1d3b      	adds	r3, r7, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e8a:	1d3b      	adds	r3, r7, #4
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	00da      	lsls	r2, r3, #3
 8007ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eac:	4413      	add	r3, r2
 8007eae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eba:	2b3e      	cmp	r3, #62	; 0x3e
 8007ebc:	d91d      	bls.n	8007efa <USB_EPStartXfer+0xf50>
 8007ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <USB_EPStartXfer+0xf34>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	029b      	lsls	r3, r3, #10
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	e058      	b.n	8007fac <USB_EPStartXfer+0x1002>
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d116      	bne.n	8007f30 <USB_EPStartXfer+0xf86>
 8007f02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f14:	801a      	strh	r2, [r3, #0]
 8007f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	e03d      	b.n	8007fac <USB_EPStartXfer+0x1002>
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <USB_EPStartXfer+0xfa6>
 8007f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	029b      	lsls	r3, r3, #10
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	e024      	b.n	8007fac <USB_EPStartXfer+0x1002>
 8007f62:	463b      	mov	r3, r7
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d11f      	bne.n	8007fac <USB_EPStartXfer+0x1002>
 8007f6c:	1d3b      	adds	r3, r7, #4
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f74:	1d3b      	adds	r3, r7, #4
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f84:	4413      	add	r3, r2
 8007f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	00da      	lsls	r2, r3, #3
 8007f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f96:	4413      	add	r3, r2
 8007f98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	1d3b      	adds	r3, r7, #4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d16f      	bne.n	800809e <USB_EPStartXfer+0x10f4>
 8007fbe:	1d3b      	adds	r3, r7, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fc6:	1d3b      	adds	r3, r7, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fdc:	463b      	mov	r3, r7
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	00da      	lsls	r2, r3, #3
 8007fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fe8:	4413      	add	r3, r2
 8007fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff8:	d91d      	bls.n	8008036 <USB_EPStartXfer+0x108c>
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <USB_EPStartXfer+0x1070>
 8008010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008014:	3b01      	subs	r3, #1
 8008016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800801a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800801e:	b29b      	uxth	r3, r3
 8008020:	029b      	lsls	r3, r3, #10
 8008022:	b29b      	uxth	r3, r3
 8008024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802c:	b29a      	uxth	r2, r3
 800802e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	e057      	b.n	80080e6 <USB_EPStartXfer+0x113c>
 8008036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803a:	2b00      	cmp	r3, #0
 800803c:	d116      	bne.n	800806c <USB_EPStartXfer+0x10c2>
 800803e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800804a:	b29a      	uxth	r2, r3
 800804c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008062:	b29a      	uxth	r2, r3
 8008064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	e03c      	b.n	80080e6 <USB_EPStartXfer+0x113c>
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <USB_EPStartXfer+0x10e2>
 8008082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008086:	3301      	adds	r3, #1
 8008088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800808c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008090:	b29b      	uxth	r3, r3
 8008092:	029b      	lsls	r3, r3, #10
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	e023      	b.n	80080e6 <USB_EPStartXfer+0x113c>
 800809e:	463b      	mov	r3, r7
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	785b      	ldrb	r3, [r3, #1]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d11e      	bne.n	80080e6 <USB_EPStartXfer+0x113c>
 80080a8:	1d3b      	adds	r3, r7, #4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080b8:	4413      	add	r3, r2
 80080ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080be:	463b      	mov	r3, r7
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	00da      	lsls	r2, r3, #3
 80080c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080ca:	4413      	add	r3, r2
 80080cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d8:	b29a      	uxth	r2, r3
 80080da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080de:	801a      	strh	r2, [r3, #0]
 80080e0:	e001      	b.n	80080e6 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e02e      	b.n	8008144 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080e6:	1d3b      	adds	r3, r7, #4
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	463b      	mov	r3, r7
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008100:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008104:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008108:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800810c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008110:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008114:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008118:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	463b      	mov	r3, r7
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800812e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800814e:	b480      	push	{r7}
 8008150:	b085      	sub	sp, #20
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008176:	81bb      	strh	r3, [r7, #12]
 8008178:	89bb      	ldrh	r3, [r7, #12]
 800817a:	f083 0310 	eor.w	r3, r3, #16
 800817e:	81bb      	strh	r3, [r7, #12]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	441a      	add	r2, r3
 800818a:	89bb      	ldrh	r3, [r7, #12]
 800818c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819c:	b29b      	uxth	r3, r3
 800819e:	8013      	strh	r3, [r2, #0]
 80081a0:	e01f      	b.n	80081e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b8:	81fb      	strh	r3, [r7, #14]
 80081ba:	89fb      	ldrh	r3, [r7, #14]
 80081bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081c0:	81fb      	strh	r3, [r7, #14]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	441a      	add	r2, r3
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081de:	b29b      	uxth	r3, r3
 80081e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	7b1b      	ldrb	r3, [r3, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 809d 	bne.w	800833e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d04c      	beq.n	80082a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	823b      	strh	r3, [r7, #16]
 800821a:	8a3b      	ldrh	r3, [r7, #16]
 800821c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <USB_EPClearStall+0x6c>
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	81fb      	strh	r3, [r7, #14]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	89fb      	ldrh	r3, [r7, #14]
 8008248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	78db      	ldrb	r3, [r3, #3]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d06c      	beq.n	800833e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800827a:	81bb      	strh	r3, [r7, #12]
 800827c:	89bb      	ldrh	r3, [r7, #12]
 800827e:	f083 0320 	eor.w	r3, r3, #32
 8008282:	81bb      	strh	r3, [r7, #12]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	441a      	add	r2, r3
 800828e:	89bb      	ldrh	r3, [r7, #12]
 8008290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	8013      	strh	r3, [r2, #0]
 80082a4:	e04b      	b.n	800833e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	82fb      	strh	r3, [r7, #22]
 80082b4:	8afb      	ldrh	r3, [r7, #22]
 80082b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01b      	beq.n	80082f6 <USB_EPClearStall+0x106>
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d4:	82bb      	strh	r3, [r7, #20]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	8abb      	ldrh	r3, [r7, #20]
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830c:	827b      	strh	r3, [r7, #18]
 800830e:	8a7b      	ldrh	r3, [r7, #18]
 8008310:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008314:	827b      	strh	r3, [r7, #18]
 8008316:	8a7b      	ldrh	r3, [r7, #18]
 8008318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800831c:	827b      	strh	r3, [r7, #18]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	441a      	add	r2, r3
 8008328:	8a7b      	ldrh	r3, [r7, #18]
 800832a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833a:	b29b      	uxth	r3, r3
 800833c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008358:	78fb      	ldrb	r3, [r7, #3]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2280      	movs	r2, #128	; 0x80
 8008362:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008382:	b29b      	uxth	r3, r3
 8008384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80083b4:	68fb      	ldr	r3, [r7, #12]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b08d      	sub	sp, #52	; 0x34
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	4611      	mov	r1, r2
 80083ce:	461a      	mov	r2, r3
 80083d0:	460b      	mov	r3, r1
 80083d2:	80fb      	strh	r3, [r7, #6]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80083d8:	88bb      	ldrh	r3, [r7, #4]
 80083da:	3301      	adds	r3, #1
 80083dc:	085b      	lsrs	r3, r3, #1
 80083de:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083e8:	88fa      	ldrh	r2, [r7, #6]
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083f8:	e01b      	b.n	8008432 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	3301      	adds	r3, #1
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	b29b      	uxth	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	b29a      	uxth	r2, r3
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	3302      	adds	r3, #2
 8008424:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	3301      	adds	r3, #1
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	3b01      	subs	r3, #1
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e0      	bne.n	80083fa <USB_WritePMA+0x38>
  }
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3734      	adds	r7, #52	; 0x34
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008446:	b480      	push	{r7}
 8008448:	b08b      	sub	sp, #44	; 0x2c
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	4611      	mov	r1, r2
 8008452:	461a      	mov	r2, r3
 8008454:	460b      	mov	r3, r1
 8008456:	80fb      	strh	r3, [r7, #6]
 8008458:	4613      	mov	r3, r2
 800845a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800845c:	88bb      	ldrh	r3, [r7, #4]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	b29b      	uxth	r3, r3
 8008462:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800846c:	88fa      	ldrh	r2, [r7, #6]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008476:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
 800847c:	e018      	b.n	80084b0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	3302      	adds	r3, #2
 800848a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	b2da      	uxtb	r2, r3
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	3301      	adds	r3, #1
 8008498:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	0a1b      	lsrs	r3, r3, #8
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	3301      	adds	r3, #1
 80084a8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	3b01      	subs	r3, #1
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e3      	bne.n	800847e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80084b6:	88bb      	ldrh	r3, [r7, #4]
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d007      	beq.n	80084d2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	701a      	strb	r2, [r3, #0]
  }
}
 80084d2:	bf00      	nop
 80084d4:	372c      	adds	r7, #44	; 0x2c
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084ea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084ee:	f002 f909 	bl	800a704 <USBD_static_malloc>
 80084f2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008502:	2302      	movs	r3, #2
 8008504:	e066      	b.n	80085d4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7c1b      	ldrb	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d119      	bne.n	800854a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851a:	2202      	movs	r2, #2
 800851c:	2181      	movs	r1, #129	; 0x81
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 ff95 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800852a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800852e:	2202      	movs	r2, #2
 8008530:	2101      	movs	r1, #1
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 ff8b 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2210      	movs	r2, #16
 8008544:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008548:	e016      	b.n	8008578 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800854a:	2340      	movs	r3, #64	; 0x40
 800854c:	2202      	movs	r2, #2
 800854e:	2181      	movs	r1, #129	; 0x81
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 ff7c 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800855c:	2340      	movs	r3, #64	; 0x40
 800855e:	2202      	movs	r2, #2
 8008560:	2101      	movs	r1, #1
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 ff73 	bl	800a44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2210      	movs	r2, #16
 8008574:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008578:	2308      	movs	r3, #8
 800857a:	2203      	movs	r2, #3
 800857c:	2182      	movs	r1, #130	; 0x82
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 ff65 	bl	800a44e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	7c1b      	ldrb	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085b8:	2101      	movs	r1, #1
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f002 f837 	bl	800a62e <USBD_LL_PrepareReceive>
 80085c0:	e007      	b.n	80085d2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085c8:	2340      	movs	r3, #64	; 0x40
 80085ca:	2101      	movs	r1, #1
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f002 f82e 	bl	800a62e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085e8:	2181      	movs	r1, #129	; 0x81
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 ff55 	bl	800a49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085f6:	2101      	movs	r1, #1
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 ff4e 	bl	800a49a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008606:	2182      	movs	r1, #130	; 0x82
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 ff46 	bl	800a49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00e      	beq.n	8008646 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008638:	4618      	mov	r0, r3
 800863a:	f002 f871 	bl	800a720 <USBD_static_free>
    pdev->pClassData = NULL;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008660:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008674:	2303      	movs	r3, #3
 8008676:	e0af      	b.n	80087d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008680:	2b00      	cmp	r3, #0
 8008682:	d03f      	beq.n	8008704 <USBD_CDC_Setup+0xb4>
 8008684:	2b20      	cmp	r3, #32
 8008686:	f040 809f 	bne.w	80087c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	88db      	ldrh	r3, [r3, #6]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d02e      	beq.n	80086f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	b25b      	sxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	da16      	bge.n	80086ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80086a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	88d2      	ldrh	r2, [r2, #6]
 80086ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	88db      	ldrh	r3, [r3, #6]
 80086b4:	2b07      	cmp	r3, #7
 80086b6:	bf28      	it	cs
 80086b8:	2307      	movcs	r3, #7
 80086ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	89fa      	ldrh	r2, [r7, #14]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 facf 	bl	8009c66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80086c8:	e085      	b.n	80087d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	785a      	ldrb	r2, [r3, #1]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	88db      	ldrh	r3, [r3, #6]
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086e0:	6939      	ldr	r1, [r7, #16]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 fae8 	bl	8009cbe <USBD_CtlPrepareRx>
      break;
 80086ee:	e072      	b.n	80087d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	7850      	ldrb	r0, [r2, #1]
 80086fc:	2200      	movs	r2, #0
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	4798      	blx	r3
      break;
 8008702:	e068      	b.n	80087d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	2b0b      	cmp	r3, #11
 800870a:	d852      	bhi.n	80087b2 <USBD_CDC_Setup+0x162>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <USBD_CDC_Setup+0xc4>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008745 	.word	0x08008745
 8008718:	080087c1 	.word	0x080087c1
 800871c:	080087b3 	.word	0x080087b3
 8008720:	080087b3 	.word	0x080087b3
 8008724:	080087b3 	.word	0x080087b3
 8008728:	080087b3 	.word	0x080087b3
 800872c:	080087b3 	.word	0x080087b3
 8008730:	080087b3 	.word	0x080087b3
 8008734:	080087b3 	.word	0x080087b3
 8008738:	080087b3 	.word	0x080087b3
 800873c:	0800876f 	.word	0x0800876f
 8008740:	08008799 	.word	0x08008799
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b03      	cmp	r3, #3
 800874e:	d107      	bne.n	8008760 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008750:	f107 030a 	add.w	r3, r7, #10
 8008754:	2202      	movs	r2, #2
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 fa84 	bl	8009c66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800875e:	e032      	b.n	80087c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fa0e 	bl	8009b84 <USBD_CtlError>
            ret = USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	75fb      	strb	r3, [r7, #23]
          break;
 800876c:	e02b      	b.n	80087c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b03      	cmp	r3, #3
 8008778:	d107      	bne.n	800878a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800877a:	f107 030d 	add.w	r3, r7, #13
 800877e:	2201      	movs	r2, #1
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fa6f 	bl	8009c66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008788:	e01d      	b.n	80087c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 f9f9 	bl	8009b84 <USBD_CtlError>
            ret = USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	75fb      	strb	r3, [r7, #23]
          break;
 8008796:	e016      	b.n	80087c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d00f      	beq.n	80087c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 f9ec 	bl	8009b84 <USBD_CtlError>
            ret = USBD_FAIL;
 80087ac:	2303      	movs	r3, #3
 80087ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087b0:	e008      	b.n	80087c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 f9e5 	bl	8009b84 <USBD_CtlError>
          ret = USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	75fb      	strb	r3, [r7, #23]
          break;
 80087be:	e002      	b.n	80087c6 <USBD_CDC_Setup+0x176>
          break;
 80087c0:	bf00      	nop
 80087c2:	e008      	b.n	80087d6 <USBD_CDC_Setup+0x186>
          break;
 80087c4:	bf00      	nop
      }
      break;
 80087c6:	e006      	b.n	80087d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 f9da 	bl	8009b84 <USBD_CtlError>
      ret = USBD_FAIL;
 80087d0:	2303      	movs	r3, #3
 80087d2:	75fb      	strb	r3, [r7, #23]
      break;
 80087d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087fe:	2303      	movs	r3, #3
 8008800:	e04f      	b.n	80088a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	3318      	adds	r3, #24
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d029      	beq.n	8008874 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	3318      	adds	r3, #24
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	78f9      	ldrb	r1, [r7, #3]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	460b      	mov	r3, r1
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4403      	add	r3, r0
 8008840:	3338      	adds	r3, #56	; 0x38
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	fbb2 f1f3 	udiv	r1, r2, r3
 8008848:	fb03 f301 	mul.w	r3, r3, r1
 800884c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800884e:	2b00      	cmp	r3, #0
 8008850:	d110      	bne.n	8008874 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	3318      	adds	r3, #24
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008866:	78f9      	ldrb	r1, [r7, #3]
 8008868:	2300      	movs	r3, #0
 800886a:	2200      	movs	r2, #0
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 febd 	bl	800a5ec <USBD_LL_Transmit>
 8008872:	e015      	b.n	80088a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e015      	b.n	80088f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fecd 	bl	800a670 <USBD_LL_GetRxDataSize>
 80088d6:	4602      	mov	r2, r0
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088f2:	4611      	mov	r1, r2
 80088f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800890e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	e01b      	b.n	8008952 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d015      	beq.n	8008950 <USBD_CDC_EP0_RxReady+0x50>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800892a:	2bff      	cmp	r3, #255	; 0xff
 800892c:	d010      	beq.n	8008950 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800893c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008944:	b292      	uxth	r2, r2
 8008946:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	22ff      	movs	r2, #255	; 0xff
 800894c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2243      	movs	r2, #67	; 0x43
 8008968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800896a:	4b03      	ldr	r3, [pc, #12]	; (8008978 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	200000b0 	.word	0x200000b0

0800897c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2243      	movs	r2, #67	; 0x43
 8008988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800898a:	4b03      	ldr	r3, [pc, #12]	; (8008998 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	2000006c 	.word	0x2000006c

0800899c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2243      	movs	r2, #67	; 0x43
 80089a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80089aa:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	200000f4 	.word	0x200000f4

080089bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	220a      	movs	r2, #10
 80089c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089ca:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	20000028 	.word	0x20000028

080089dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e004      	b.n	80089fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b087      	sub	sp, #28
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a18:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e008      	b.n	8008a36 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e004      	b.n	8008a68 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e01a      	b.n	8008acc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d114      	bne.n	8008aca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008abe:	2181      	movs	r1, #129	; 0x81
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 fd93 	bl	800a5ec <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e016      	b.n	8008b20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7c1b      	ldrb	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b04:	2101      	movs	r1, #1
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fd91 	bl	800a62e <USBD_LL_PrepareReceive>
 8008b0c:	e007      	b.n	8008b1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b14:	2340      	movs	r3, #64	; 0x40
 8008b16:	2101      	movs	r1, #1
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 fd88 	bl	800a62e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e01f      	b.n	8008b80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	79fa      	ldrb	r2, [r7, #7]
 8008b72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f001 fbef 	bl	800a358 <USBD_LL_Init>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e016      	b.n	8008bce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	f107 020e 	add.w	r2, r7, #14
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fc1a 	bl	800a418 <USBD_LL_Start>
 8008be4:	4603      	mov	r3, r0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
  }

  return USBD_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 ff46 	bl	8009b10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ca0:	f003 031f 	and.w	r3, r3, #31
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d01a      	beq.n	8008cde <USBD_LL_SetupStage+0x72>
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d822      	bhi.n	8008cf2 <USBD_LL_SetupStage+0x86>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <USBD_LL_SetupStage+0x4a>
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d00a      	beq.n	8008cca <USBD_LL_SetupStage+0x5e>
 8008cb4:	e01d      	b.n	8008cf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f9ee 	bl	80090a0 <USBD_StdDevReq>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc8:	e020      	b.n	8008d0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa52 	bl	800917c <USBD_StdItfReq>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]
      break;
 8008cdc:	e016      	b.n	8008d0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa91 	bl	800920e <USBD_StdEPReq>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf0:	e00c      	b.n	8008d0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fbe9 	bl	800a4d8 <USBD_LL_StallEP>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0a:	bf00      	nop
  }

  return ret;
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d24:	7afb      	ldrb	r3, [r7, #11]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d138      	bne.n	8008d9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d14a      	bne.n	8008dd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d913      	bls.n	8008d70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	1ad2      	subs	r2, r2, r3
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	bf28      	it	cs
 8008d62:	4613      	movcs	r3, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 ffc5 	bl	8009cf8 <USBD_CtlContinueRx>
 8008d6e:	e030      	b.n	8008dd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d10b      	bne.n	8008d94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 ffc0 	bl	8009d1a <USBD_CtlSendStatus>
 8008d9a:	e01a      	b.n	8008dd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d114      	bne.n	8008dd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00e      	beq.n	8008dd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	7afa      	ldrb	r2, [r7, #11]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	4798      	blx	r3
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	e000      	b.n	8008dd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	460b      	mov	r3, r1
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d16b      	bne.n	8008ec8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3314      	adds	r3, #20
 8008df4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d156      	bne.n	8008eae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d914      	bls.n	8008e36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	1ad2      	subs	r2, r2, r3
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 ff3a 	bl	8009c9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e28:	2300      	movs	r3, #0
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f001 fbfd 	bl	800a62e <USBD_LL_PrepareReceive>
 8008e34:	e03b      	b.n	8008eae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d11c      	bne.n	8008e7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d316      	bcc.n	8008e7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d20f      	bcs.n	8008e7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 ff1b 	bl	8009c9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2200      	movs	r2, #0
 8008e72:	2100      	movs	r1, #0
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f001 fbda 	bl	800a62e <USBD_LL_PrepareReceive>
 8008e7a:	e018      	b.n	8008eae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d10b      	bne.n	8008ea0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f001 fb18 	bl	800a4d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 ff49 	bl	8009d40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d122      	bne.n	8008efe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fe98 	bl	8008bee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ec6:	e01a      	b.n	8008efe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d114      	bne.n	8008efe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00e      	beq.n	8008efe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	7afa      	ldrb	r2, [r7, #11]
 8008eea:	4611      	mov	r1, r2
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	4798      	blx	r3
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	e000      	b.n	8008f00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e02f      	b.n	8008f9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00f      	beq.n	8008f66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6852      	ldr	r2, [r2, #4]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	4611      	mov	r1, r2
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f66:	2340      	movs	r3, #64	; 0x40
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fa6e 	bl	800a44e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2240      	movs	r2, #64	; 0x40
 8008f7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2200      	movs	r2, #0
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 fa60 	bl	800a44e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2240      	movs	r2, #64	; 0x40
 8008f98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2204      	movs	r2, #4
 8008fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b04      	cmp	r3, #4
 8009002:	d106      	bne.n	8009012 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800900a:	b2da      	uxtb	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009032:	2303      	movs	r3, #3
 8009034:	e012      	b.n	800905c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b03      	cmp	r3, #3
 8009040:	d10b      	bne.n	800905a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d005      	beq.n	800905a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009064:	b480      	push	{r7}
 8009066:	b087      	sub	sp, #28
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	3301      	adds	r3, #1
 800907a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009082:	8a3b      	ldrh	r3, [r7, #16]
 8009084:	021b      	lsls	r3, r3, #8
 8009086:	b21a      	sxth	r2, r3
 8009088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800908c:	4313      	orrs	r3, r2
 800908e:	b21b      	sxth	r3, r3
 8009090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009092:	89fb      	ldrh	r3, [r7, #14]
}
 8009094:	4618      	mov	r0, r3
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d005      	beq.n	80090c6 <USBD_StdDevReq+0x26>
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d853      	bhi.n	8009166 <USBD_StdDevReq+0xc6>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <USBD_StdDevReq+0x3a>
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d14f      	bne.n	8009166 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
      break;
 80090d8:	e04a      	b.n	8009170 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b09      	cmp	r3, #9
 80090e0:	d83b      	bhi.n	800915a <USBD_StdDevReq+0xba>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <USBD_StdDevReq+0x48>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	0800913d 	.word	0x0800913d
 80090ec:	08009151 	.word	0x08009151
 80090f0:	0800915b 	.word	0x0800915b
 80090f4:	08009147 	.word	0x08009147
 80090f8:	0800915b 	.word	0x0800915b
 80090fc:	0800911b 	.word	0x0800911b
 8009100:	08009111 	.word	0x08009111
 8009104:	0800915b 	.word	0x0800915b
 8009108:	08009133 	.word	0x08009133
 800910c:	08009125 	.word	0x08009125
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9de 	bl	80094d4 <USBD_GetDescriptor>
          break;
 8009118:	e024      	b.n	8009164 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fb6d 	bl	80097fc <USBD_SetAddress>
          break;
 8009122:	e01f      	b.n	8009164 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fbac 	bl	8009884 <USBD_SetConfig>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
          break;
 8009130:	e018      	b.n	8009164 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc4b 	bl	80099d0 <USBD_GetConfig>
          break;
 800913a:	e013      	b.n	8009164 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fc7c 	bl	8009a3c <USBD_GetStatus>
          break;
 8009144:	e00e      	b.n	8009164 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fcab 	bl	8009aa4 <USBD_SetFeature>
          break;
 800914e:	e009      	b.n	8009164 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fcba 	bl	8009acc <USBD_ClrFeature>
          break;
 8009158:	e004      	b.n	8009164 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fd11 	bl	8009b84 <USBD_CtlError>
          break;
 8009162:	bf00      	nop
      }
      break;
 8009164:	e004      	b.n	8009170 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fd0b 	bl	8009b84 <USBD_CtlError>
      break;
 800916e:	bf00      	nop
  }

  return ret;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop

0800917c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d005      	beq.n	80091a2 <USBD_StdItfReq+0x26>
 8009196:	2b40      	cmp	r3, #64	; 0x40
 8009198:	d82f      	bhi.n	80091fa <USBD_StdItfReq+0x7e>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <USBD_StdItfReq+0x26>
 800919e:	2b20      	cmp	r3, #32
 80091a0:	d12b      	bne.n	80091fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d81d      	bhi.n	80091ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	889b      	ldrh	r3, [r3, #4]
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d813      	bhi.n	80091e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	88db      	ldrh	r3, [r3, #6]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d110      	bne.n	80091f6 <USBD_StdItfReq+0x7a>
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10d      	bne.n	80091f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fd9d 	bl	8009d1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091e0:	e009      	b.n	80091f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fccd 	bl	8009b84 <USBD_CtlError>
          break;
 80091ea:	e004      	b.n	80091f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fcc8 	bl	8009b84 <USBD_CtlError>
          break;
 80091f4:	e000      	b.n	80091f8 <USBD_StdItfReq+0x7c>
          break;
 80091f6:	bf00      	nop
      }
      break;
 80091f8:	e004      	b.n	8009204 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fcc1 	bl	8009b84 <USBD_CtlError>
      break;
 8009202:	bf00      	nop
  }

  return ret;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	889b      	ldrh	r3, [r3, #4]
 8009220:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800922a:	2b40      	cmp	r3, #64	; 0x40
 800922c:	d007      	beq.n	800923e <USBD_StdEPReq+0x30>
 800922e:	2b40      	cmp	r3, #64	; 0x40
 8009230:	f200 8145 	bhi.w	80094be <USBD_StdEPReq+0x2b0>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00c      	beq.n	8009252 <USBD_StdEPReq+0x44>
 8009238:	2b20      	cmp	r3, #32
 800923a:	f040 8140 	bne.w	80094be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
      break;
 8009250:	e13a      	b.n	80094c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b03      	cmp	r3, #3
 8009258:	d007      	beq.n	800926a <USBD_StdEPReq+0x5c>
 800925a:	2b03      	cmp	r3, #3
 800925c:	f300 8129 	bgt.w	80094b2 <USBD_StdEPReq+0x2a4>
 8009260:	2b00      	cmp	r3, #0
 8009262:	d07f      	beq.n	8009364 <USBD_StdEPReq+0x156>
 8009264:	2b01      	cmp	r3, #1
 8009266:	d03c      	beq.n	80092e2 <USBD_StdEPReq+0xd4>
 8009268:	e123      	b.n	80094b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d002      	beq.n	800927c <USBD_StdEPReq+0x6e>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d016      	beq.n	80092a8 <USBD_StdEPReq+0x9a>
 800927a:	e02c      	b.n	80092d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00d      	beq.n	800929e <USBD_StdEPReq+0x90>
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b80      	cmp	r3, #128	; 0x80
 8009286:	d00a      	beq.n	800929e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f001 f923 	bl	800a4d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009292:	2180      	movs	r1, #128	; 0x80
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 f91f 	bl	800a4d8 <USBD_LL_StallEP>
 800929a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800929c:	e020      	b.n	80092e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fc6f 	bl	8009b84 <USBD_CtlError>
              break;
 80092a6:	e01b      	b.n	80092e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	885b      	ldrh	r3, [r3, #2]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10e      	bne.n	80092ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00b      	beq.n	80092ce <USBD_StdEPReq+0xc0>
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b80      	cmp	r3, #128	; 0x80
 80092ba:	d008      	beq.n	80092ce <USBD_StdEPReq+0xc0>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	88db      	ldrh	r3, [r3, #6]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f905 	bl	800a4d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fd23 	bl	8009d1a <USBD_CtlSendStatus>

              break;
 80092d4:	e004      	b.n	80092e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fc53 	bl	8009b84 <USBD_CtlError>
              break;
 80092de:	bf00      	nop
          }
          break;
 80092e0:	e0ec      	b.n	80094bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d002      	beq.n	80092f4 <USBD_StdEPReq+0xe6>
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d016      	beq.n	8009320 <USBD_StdEPReq+0x112>
 80092f2:	e030      	b.n	8009356 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00d      	beq.n	8009316 <USBD_StdEPReq+0x108>
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	2b80      	cmp	r3, #128	; 0x80
 80092fe:	d00a      	beq.n	8009316 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 f8e7 	bl	800a4d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800930a:	2180      	movs	r1, #128	; 0x80
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 f8e3 	bl	800a4d8 <USBD_LL_StallEP>
 8009312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009314:	e025      	b.n	8009362 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fc33 	bl	8009b84 <USBD_CtlError>
              break;
 800931e:	e020      	b.n	8009362 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	885b      	ldrh	r3, [r3, #2]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d11b      	bne.n	8009360 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009328:	7bbb      	ldrb	r3, [r7, #14]
 800932a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800932e:	2b00      	cmp	r3, #0
 8009330:	d004      	beq.n	800933c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f001 f8ed 	bl	800a516 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fcec 	bl	8009d1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	4798      	blx	r3
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009354:	e004      	b.n	8009360 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc13 	bl	8009b84 <USBD_CtlError>
              break;
 800935e:	e000      	b.n	8009362 <USBD_StdEPReq+0x154>
              break;
 8009360:	bf00      	nop
          }
          break;
 8009362:	e0ab      	b.n	80094bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d002      	beq.n	8009376 <USBD_StdEPReq+0x168>
 8009370:	2b03      	cmp	r3, #3
 8009372:	d032      	beq.n	80093da <USBD_StdEPReq+0x1cc>
 8009374:	e097      	b.n	80094a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d007      	beq.n	800938c <USBD_StdEPReq+0x17e>
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	2b80      	cmp	r3, #128	; 0x80
 8009380:	d004      	beq.n	800938c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fbfd 	bl	8009b84 <USBD_CtlError>
                break;
 800938a:	e091      	b.n	80094b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800938c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	da0b      	bge.n	80093ac <USBD_StdEPReq+0x19e>
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	3310      	adds	r3, #16
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	4413      	add	r3, r2
 80093a8:	3304      	adds	r3, #4
 80093aa:	e00b      	b.n	80093c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	4413      	add	r3, r2
 80093c2:	3304      	adds	r3, #4
 80093c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2202      	movs	r2, #2
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fc47 	bl	8009c66 <USBD_CtlSendData>
              break;
 80093d8:	e06a      	b.n	80094b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da11      	bge.n	8009406 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	f003 020f 	and.w	r2, r3, #15
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	3324      	adds	r3, #36	; 0x24
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d117      	bne.n	800942c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fbc0 	bl	8009b84 <USBD_CtlError>
                  break;
 8009404:	e054      	b.n	80094b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009406:	7bbb      	ldrb	r3, [r7, #14]
 8009408:	f003 020f 	and.w	r2, r3, #15
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fbad 	bl	8009b84 <USBD_CtlError>
                  break;
 800942a:	e041      	b.n	80094b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800942c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009430:	2b00      	cmp	r3, #0
 8009432:	da0b      	bge.n	800944c <USBD_StdEPReq+0x23e>
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	3310      	adds	r3, #16
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	3304      	adds	r3, #4
 800944a:	e00b      	b.n	8009464 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	4413      	add	r3, r2
 8009462:	3304      	adds	r3, #4
 8009464:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d002      	beq.n	8009472 <USBD_StdEPReq+0x264>
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b80      	cmp	r3, #128	; 0x80
 8009470:	d103      	bne.n	800947a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2200      	movs	r2, #0
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	e00e      	b.n	8009498 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 f868 	bl	800a554 <USBD_LL_IsStallEP>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2201      	movs	r2, #1
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	e002      	b.n	8009498 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2202      	movs	r2, #2
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fbe1 	bl	8009c66 <USBD_CtlSendData>
              break;
 80094a4:	e004      	b.n	80094b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fb6b 	bl	8009b84 <USBD_CtlError>
              break;
 80094ae:	bf00      	nop
          }
          break;
 80094b0:	e004      	b.n	80094bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fb65 	bl	8009b84 <USBD_CtlError>
          break;
 80094ba:	bf00      	nop
      }
      break;
 80094bc:	e004      	b.n	80094c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fb5f 	bl	8009b84 <USBD_CtlError>
      break;
 80094c6:	bf00      	nop
  }

  return ret;
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2b0e      	cmp	r3, #14
 80094f6:	f200 8152 	bhi.w	800979e <USBD_GetDescriptor+0x2ca>
 80094fa:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <USBD_GetDescriptor+0x2c>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	08009571 	.word	0x08009571
 8009504:	08009589 	.word	0x08009589
 8009508:	080095c9 	.word	0x080095c9
 800950c:	0800979f 	.word	0x0800979f
 8009510:	0800979f 	.word	0x0800979f
 8009514:	0800973f 	.word	0x0800973f
 8009518:	0800976b 	.word	0x0800976b
 800951c:	0800979f 	.word	0x0800979f
 8009520:	0800979f 	.word	0x0800979f
 8009524:	0800979f 	.word	0x0800979f
 8009528:	0800979f 	.word	0x0800979f
 800952c:	0800979f 	.word	0x0800979f
 8009530:	0800979f 	.word	0x0800979f
 8009534:	0800979f 	.word	0x0800979f
 8009538:	0800953d 	.word	0x0800953d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	7c12      	ldrb	r2, [r2, #16]
 8009554:	f107 0108 	add.w	r1, r7, #8
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
 800955c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800955e:	e126      	b.n	80097ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fb0e 	bl	8009b84 <USBD_CtlError>
        err++;
 8009568:	7afb      	ldrb	r3, [r7, #11]
 800956a:	3301      	adds	r3, #1
 800956c:	72fb      	strb	r3, [r7, #11]
      break;
 800956e:	e11e      	b.n	80097ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	f107 0108 	add.w	r1, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
      break;
 8009586:	e112      	b.n	80097ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7c1b      	ldrb	r3, [r3, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10d      	bne.n	80095ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009598:	f107 0208 	add.w	r2, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	2202      	movs	r2, #2
 80095a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095aa:	e100      	b.n	80097ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	f107 0208 	add.w	r2, r7, #8
 80095b8:	4610      	mov	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	2202      	movs	r2, #2
 80095c4:	701a      	strb	r2, [r3, #0]
      break;
 80095c6:	e0f2      	b.n	80097ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	885b      	ldrh	r3, [r3, #2]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b05      	cmp	r3, #5
 80095d0:	f200 80ac 	bhi.w	800972c <USBD_GetDescriptor+0x258>
 80095d4:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <USBD_GetDescriptor+0x108>)
 80095d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095da:	bf00      	nop
 80095dc:	080095f5 	.word	0x080095f5
 80095e0:	08009629 	.word	0x08009629
 80095e4:	0800965d 	.word	0x0800965d
 80095e8:	08009691 	.word	0x08009691
 80095ec:	080096c5 	.word	0x080096c5
 80095f0:	080096f9 	.word	0x080096f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	7c12      	ldrb	r2, [r2, #16]
 800960c:	f107 0108 	add.w	r1, r7, #8
 8009610:	4610      	mov	r0, r2
 8009612:	4798      	blx	r3
 8009614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009616:	e091      	b.n	800973c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fab2 	bl	8009b84 <USBD_CtlError>
            err++;
 8009620:	7afb      	ldrb	r3, [r7, #11]
 8009622:	3301      	adds	r3, #1
 8009624:	72fb      	strb	r3, [r7, #11]
          break;
 8009626:	e089      	b.n	800973c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00b      	beq.n	800964c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	7c12      	ldrb	r2, [r2, #16]
 8009640:	f107 0108 	add.w	r1, r7, #8
 8009644:	4610      	mov	r0, r2
 8009646:	4798      	blx	r3
 8009648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800964a:	e077      	b.n	800973c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fa98 	bl	8009b84 <USBD_CtlError>
            err++;
 8009654:	7afb      	ldrb	r3, [r7, #11]
 8009656:	3301      	adds	r3, #1
 8009658:	72fb      	strb	r3, [r7, #11]
          break;
 800965a:	e06f      	b.n	800973c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7c12      	ldrb	r2, [r2, #16]
 8009674:	f107 0108 	add.w	r1, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967e:	e05d      	b.n	800973c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fa7e 	bl	8009b84 <USBD_CtlError>
            err++;
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	3301      	adds	r3, #1
 800968c:	72fb      	strb	r3, [r7, #11]
          break;
 800968e:	e055      	b.n	800973c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	7c12      	ldrb	r2, [r2, #16]
 80096a8:	f107 0108 	add.w	r1, r7, #8
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
 80096b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096b2:	e043      	b.n	800973c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa64 	bl	8009b84 <USBD_CtlError>
            err++;
 80096bc:	7afb      	ldrb	r3, [r7, #11]
 80096be:	3301      	adds	r3, #1
 80096c0:	72fb      	strb	r3, [r7, #11]
          break;
 80096c2:	e03b      	b.n	800973c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	7c12      	ldrb	r2, [r2, #16]
 80096dc:	f107 0108 	add.w	r1, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e6:	e029      	b.n	800973c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fa4a 	bl	8009b84 <USBD_CtlError>
            err++;
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	3301      	adds	r3, #1
 80096f4:	72fb      	strb	r3, [r7, #11]
          break;
 80096f6:	e021      	b.n	800973c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	7c12      	ldrb	r2, [r2, #16]
 8009710:	f107 0108 	add.w	r1, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800971a:	e00f      	b.n	800973c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa30 	bl	8009b84 <USBD_CtlError>
            err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
          break;
 800972a:	e007      	b.n	800973c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fa28 	bl	8009b84 <USBD_CtlError>
          err++;
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	3301      	adds	r3, #1
 8009738:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800973a:	bf00      	nop
      }
      break;
 800973c:	e037      	b.n	80097ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7c1b      	ldrb	r3, [r3, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d109      	bne.n	800975a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	f107 0208 	add.w	r2, r7, #8
 8009752:	4610      	mov	r0, r2
 8009754:	4798      	blx	r3
 8009756:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009758:	e029      	b.n	80097ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fa11 	bl	8009b84 <USBD_CtlError>
        err++;
 8009762:	7afb      	ldrb	r3, [r7, #11]
 8009764:	3301      	adds	r3, #1
 8009766:	72fb      	strb	r3, [r7, #11]
      break;
 8009768:	e021      	b.n	80097ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	7c1b      	ldrb	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10d      	bne.n	800978e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	f107 0208 	add.w	r2, r7, #8
 800977e:	4610      	mov	r0, r2
 8009780:	4798      	blx	r3
 8009782:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3301      	adds	r3, #1
 8009788:	2207      	movs	r2, #7
 800978a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800978c:	e00f      	b.n	80097ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9f7 	bl	8009b84 <USBD_CtlError>
        err++;
 8009796:	7afb      	ldrb	r3, [r7, #11]
 8009798:	3301      	adds	r3, #1
 800979a:	72fb      	strb	r3, [r7, #11]
      break;
 800979c:	e007      	b.n	80097ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f9ef 	bl	8009b84 <USBD_CtlError>
      err++;
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	3301      	adds	r3, #1
 80097aa:	72fb      	strb	r3, [r7, #11]
      break;
 80097ac:	bf00      	nop
  }

  if (err != 0U)
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11e      	bne.n	80097f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	88db      	ldrh	r3, [r3, #6]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d016      	beq.n	80097ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80097bc:	893b      	ldrh	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00e      	beq.n	80097e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	88da      	ldrh	r2, [r3, #6]
 80097c6:	893b      	ldrh	r3, [r7, #8]
 80097c8:	4293      	cmp	r3, r2
 80097ca:	bf28      	it	cs
 80097cc:	4613      	movcs	r3, r2
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097d2:	893b      	ldrh	r3, [r7, #8]
 80097d4:	461a      	mov	r2, r3
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fa44 	bl	8009c66 <USBD_CtlSendData>
 80097de:	e009      	b.n	80097f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f9ce 	bl	8009b84 <USBD_CtlError>
 80097e8:	e004      	b.n	80097f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa95 	bl	8009d1a <USBD_CtlSendStatus>
 80097f0:	e000      	b.n	80097f4 <USBD_GetDescriptor+0x320>
    return;
 80097f2:	bf00      	nop
  }
}
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop

080097fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	889b      	ldrh	r3, [r3, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d131      	bne.n	8009872 <USBD_SetAddress+0x76>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	88db      	ldrh	r3, [r3, #6]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d12d      	bne.n	8009872 <USBD_SetAddress+0x76>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	885b      	ldrh	r3, [r3, #2]
 800981a:	2b7f      	cmp	r3, #127	; 0x7f
 800981c:	d829      	bhi.n	8009872 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009828:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b03      	cmp	r3, #3
 8009834:	d104      	bne.n	8009840 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f9a3 	bl	8009b84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983e:	e01d      	b.n	800987c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7bfa      	ldrb	r2, [r7, #15]
 8009844:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 feae 	bl	800a5ae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa61 	bl	8009d1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d004      	beq.n	8009868 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009866:	e009      	b.n	800987c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009870:	e004      	b.n	800987c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f985 	bl	8009b84 <USBD_CtlError>
  }
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	b2da      	uxtb	r2, r3
 8009898:	4b4c      	ldr	r3, [pc, #304]	; (80099cc <USBD_SetConfig+0x148>)
 800989a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800989c:	4b4b      	ldr	r3, [pc, #300]	; (80099cc <USBD_SetConfig+0x148>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d905      	bls.n	80098b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f96c 	bl	8009b84 <USBD_CtlError>
    return USBD_FAIL;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e088      	b.n	80099c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d002      	beq.n	80098c2 <USBD_SetConfig+0x3e>
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d025      	beq.n	800990c <USBD_SetConfig+0x88>
 80098c0:	e071      	b.n	80099a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098c2:	4b42      	ldr	r3, [pc, #264]	; (80099cc <USBD_SetConfig+0x148>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d01c      	beq.n	8009904 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80098ca:	4b40      	ldr	r3, [pc, #256]	; (80099cc <USBD_SetConfig+0x148>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098d4:	4b3d      	ldr	r3, [pc, #244]	; (80099cc <USBD_SetConfig+0x148>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff f992 	bl	8008c04 <USBD_SetClassConfig>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d004      	beq.n	80098f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f949 	bl	8009b84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098f2:	e065      	b.n	80099c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fa10 	bl	8009d1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2203      	movs	r2, #3
 80098fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009902:	e05d      	b.n	80099c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fa08 	bl	8009d1a <USBD_CtlSendStatus>
      break;
 800990a:	e059      	b.n	80099c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800990c:	4b2f      	ldr	r3, [pc, #188]	; (80099cc <USBD_SetConfig+0x148>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d112      	bne.n	800993a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800991c:	4b2b      	ldr	r3, [pc, #172]	; (80099cc <USBD_SetConfig+0x148>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009926:	4b29      	ldr	r3, [pc, #164]	; (80099cc <USBD_SetConfig+0x148>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff f985 	bl	8008c3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f9f1 	bl	8009d1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009938:	e042      	b.n	80099c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800993a:	4b24      	ldr	r3, [pc, #144]	; (80099cc <USBD_SetConfig+0x148>)
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d02a      	beq.n	800999e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff f973 	bl	8008c3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009956:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <USBD_SetConfig+0x148>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009960:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <USBD_SetConfig+0x148>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff f94c 	bl	8008c04 <USBD_SetClassConfig>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00f      	beq.n	8009996 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f903 	bl	8009b84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff f958 	bl	8008c3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009994:	e014      	b.n	80099c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f9bf 	bl	8009d1a <USBD_CtlSendStatus>
      break;
 800999c:	e010      	b.n	80099c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f9bb 	bl	8009d1a <USBD_CtlSendStatus>
      break;
 80099a4:	e00c      	b.n	80099c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f8eb 	bl	8009b84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099ae:	4b07      	ldr	r3, [pc, #28]	; (80099cc <USBD_SetConfig+0x148>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff f941 	bl	8008c3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	73fb      	strb	r3, [r7, #15]
      break;
 80099be:	bf00      	nop
  }

  return ret;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	200001fb 	.word	0x200001fb

080099d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	88db      	ldrh	r3, [r3, #6]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d004      	beq.n	80099ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f8cd 	bl	8009b84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099ea:	e023      	b.n	8009a34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	dc02      	bgt.n	80099fe <USBD_GetConfig+0x2e>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dc03      	bgt.n	8009a04 <USBD_GetConfig+0x34>
 80099fc:	e015      	b.n	8009a2a <USBD_GetConfig+0x5a>
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d00b      	beq.n	8009a1a <USBD_GetConfig+0x4a>
 8009a02:	e012      	b.n	8009a2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f927 	bl	8009c66 <USBD_CtlSendData>
        break;
 8009a18:	e00c      	b.n	8009a34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f91f 	bl	8009c66 <USBD_CtlSendData>
        break;
 8009a28:	e004      	b.n	8009a34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f8a9 	bl	8009b84 <USBD_CtlError>
        break;
 8009a32:	bf00      	nop
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d81e      	bhi.n	8009a92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	88db      	ldrh	r3, [r3, #6]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d004      	beq.n	8009a66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f890 	bl	8009b84 <USBD_CtlError>
        break;
 8009a64:	e01a      	b.n	8009a9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f043 0202 	orr.w	r2, r3, #2
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	330c      	adds	r3, #12
 8009a86:	2202      	movs	r2, #2
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f8eb 	bl	8009c66 <USBD_CtlSendData>
      break;
 8009a90:	e004      	b.n	8009a9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f875 	bl	8009b84 <USBD_CtlError>
      break;
 8009a9a:	bf00      	nop
  }
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	885b      	ldrh	r3, [r3, #2]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d106      	bne.n	8009ac4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f92b 	bl	8009d1a <USBD_CtlSendStatus>
  }
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d80b      	bhi.n	8009afc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	885b      	ldrh	r3, [r3, #2]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d10c      	bne.n	8009b06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f910 	bl	8009d1a <USBD_CtlSendStatus>
      }
      break;
 8009afa:	e004      	b.n	8009b06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f840 	bl	8009b84 <USBD_CtlError>
      break;
 8009b04:	e000      	b.n	8009b08 <USBD_ClrFeature+0x3c>
      break;
 8009b06:	bf00      	nop
  }
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	781a      	ldrb	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7ff fa92 	bl	8009064 <SWAPBYTE>
 8009b40:	4603      	mov	r3, r0
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3301      	adds	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff fa85 	bl	8009064 <SWAPBYTE>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3301      	adds	r3, #1
 8009b66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff fa78 	bl	8009064 <SWAPBYTE>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	80da      	strh	r2, [r3, #6]
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b8e:	2180      	movs	r1, #128	; 0x80
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fca1 	bl	800a4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b96:	2100      	movs	r1, #0
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc9d 	bl	800a4d8 <USBD_LL_StallEP>
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d036      	beq.n	8009c2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009bc0:	6938      	ldr	r0, [r7, #16]
 8009bc2:	f000 f836 	bl	8009c32 <USBD_GetLen>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	3301      	adds	r3, #1
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	4413      	add	r3, r2
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	7812      	ldrb	r2, [r2, #0]
 8009bde:	701a      	strb	r2, [r3, #0]
  idx++;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	3301      	adds	r3, #1
 8009be4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	4413      	add	r3, r2
 8009bec:	2203      	movs	r2, #3
 8009bee:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bf6:	e013      	b.n	8009c20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	7812      	ldrb	r2, [r2, #0]
 8009c02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	3301      	adds	r3, #1
 8009c08:	613b      	str	r3, [r7, #16]
    idx++;
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	4413      	add	r3, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e7      	bne.n	8009bf8 <USBD_GetString+0x52>
 8009c28:	e000      	b.n	8009c2c <USBD_GetString+0x86>
    return;
 8009c2a:	bf00      	nop
  }
}
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c42:	e005      	b.n	8009c50 <USBD_GetLen+0x1e>
  {
    len++;
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	3301      	adds	r3, #1
 8009c48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1f5      	bne.n	8009c44 <USBD_GetLen+0x12>
  }

  return len;
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	60f8      	str	r0, [r7, #12]
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2202      	movs	r2, #2
 8009c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 fcad 	bl	800a5ec <USBD_LL_Transmit>

  return USBD_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	2100      	movs	r1, #0
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 fc9c 	bl	800a5ec <USBD_LL_Transmit>

  return USBD_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2203      	movs	r2, #3
 8009cce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fca0 	bl	800a62e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	2100      	movs	r1, #0
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 fc8f 	bl	800a62e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2204      	movs	r2, #4
 8009d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2100      	movs	r1, #0
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fc5b 	bl	800a5ec <USBD_LL_Transmit>

  return USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2205      	movs	r2, #5
 8009d4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d50:	2300      	movs	r3, #0
 8009d52:	2200      	movs	r2, #0
 8009d54:	2100      	movs	r1, #0
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fc69 	bl	800a62e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4912      	ldr	r1, [pc, #72]	; (8009db8 <MX_USB_Device_Init+0x50>)
 8009d70:	4812      	ldr	r0, [pc, #72]	; (8009dbc <MX_USB_Device_Init+0x54>)
 8009d72:	f7fe fed9 	bl	8008b28 <USBD_Init>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009d7c:	f7f7 f9ee 	bl	800115c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009d80:	490f      	ldr	r1, [pc, #60]	; (8009dc0 <MX_USB_Device_Init+0x58>)
 8009d82:	480e      	ldr	r0, [pc, #56]	; (8009dbc <MX_USB_Device_Init+0x54>)
 8009d84:	f7fe ff00 	bl	8008b88 <USBD_RegisterClass>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009d8e:	f7f7 f9e5 	bl	800115c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009d92:	490c      	ldr	r1, [pc, #48]	; (8009dc4 <MX_USB_Device_Init+0x5c>)
 8009d94:	4809      	ldr	r0, [pc, #36]	; (8009dbc <MX_USB_Device_Init+0x54>)
 8009d96:	f7fe fe21 	bl	80089dc <USBD_CDC_RegisterInterface>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009da0:	f7f7 f9dc 	bl	800115c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009da4:	4805      	ldr	r0, [pc, #20]	; (8009dbc <MX_USB_Device_Init+0x54>)
 8009da6:	f7fe ff16 	bl	8008bd6 <USBD_Start>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009db0:	f7f7 f9d4 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009db4:	bf00      	nop
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	2000014c 	.word	0x2000014c
 8009dbc:	20000718 	.word	0x20000718
 8009dc0:	20000034 	.word	0x20000034
 8009dc4:	20000138 	.word	0x20000138

08009dc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4905      	ldr	r1, [pc, #20]	; (8009de4 <CDC_Init_FS+0x1c>)
 8009dd0:	4805      	ldr	r0, [pc, #20]	; (8009de8 <CDC_Init_FS+0x20>)
 8009dd2:	f7fe fe18 	bl	8008a06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009dd6:	4905      	ldr	r1, [pc, #20]	; (8009dec <CDC_Init_FS+0x24>)
 8009dd8:	4803      	ldr	r0, [pc, #12]	; (8009de8 <CDC_Init_FS+0x20>)
 8009dda:	f7fe fe32 	bl	8008a42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009dde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20000dd0 	.word	0x20000dd0
 8009de8:	20000718 	.word	0x20000718
 8009dec:	200009e8 	.word	0x200009e8

08009df0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009df0:	b480      	push	{r7}
 8009df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009df4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	6039      	str	r1, [r7, #0]
 8009e0a:	71fb      	strb	r3, [r7, #7]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	2b23      	cmp	r3, #35	; 0x23
 8009e14:	d84a      	bhi.n	8009eac <CDC_Control_FS+0xac>
 8009e16:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <CDC_Control_FS+0x1c>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009ead 	.word	0x08009ead
 8009e20:	08009ead 	.word	0x08009ead
 8009e24:	08009ead 	.word	0x08009ead
 8009e28:	08009ead 	.word	0x08009ead
 8009e2c:	08009ead 	.word	0x08009ead
 8009e30:	08009ead 	.word	0x08009ead
 8009e34:	08009ead 	.word	0x08009ead
 8009e38:	08009ead 	.word	0x08009ead
 8009e3c:	08009ead 	.word	0x08009ead
 8009e40:	08009ead 	.word	0x08009ead
 8009e44:	08009ead 	.word	0x08009ead
 8009e48:	08009ead 	.word	0x08009ead
 8009e4c:	08009ead 	.word	0x08009ead
 8009e50:	08009ead 	.word	0x08009ead
 8009e54:	08009ead 	.word	0x08009ead
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	08009ead 	.word	0x08009ead
 8009e60:	08009ead 	.word	0x08009ead
 8009e64:	08009ead 	.word	0x08009ead
 8009e68:	08009ead 	.word	0x08009ead
 8009e6c:	08009ead 	.word	0x08009ead
 8009e70:	08009ead 	.word	0x08009ead
 8009e74:	08009ead 	.word	0x08009ead
 8009e78:	08009ead 	.word	0x08009ead
 8009e7c:	08009ead 	.word	0x08009ead
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	08009ead 	.word	0x08009ead
 8009e88:	08009ead 	.word	0x08009ead
 8009e8c:	08009ead 	.word	0x08009ead
 8009e90:	08009ead 	.word	0x08009ead
 8009e94:	08009ead 	.word	0x08009ead
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009ead 	.word	0x08009ead
 8009ea0:	08009ead 	.word	0x08009ead
 8009ea4:	08009ead 	.word	0x08009ead
 8009ea8:	08009ead 	.word	0x08009ead
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009eac:	bf00      	nop
  }

  return (USBD_OK);
 8009eae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7f6 f9a5 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4805      	ldr	r0, [pc, #20]	; (8009ee8 <CDC_Receive_FS+0x2c>)
 8009ed2:	f7fe fdb6 	bl	8008a42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ed6:	4804      	ldr	r0, [pc, #16]	; (8009ee8 <CDC_Receive_FS+0x2c>)
 8009ed8:	f7fe fdfc 	bl	8008ad4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009edc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000718 	.word	0x20000718

08009eec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009efc:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <CDC_Transmit_FS+0x48>)
 8009efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e00b      	b.n	8009f2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f12:	887b      	ldrh	r3, [r7, #2]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	4806      	ldr	r0, [pc, #24]	; (8009f34 <CDC_Transmit_FS+0x48>)
 8009f1a:	f7fe fd74 	bl	8008a06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f1e:	4805      	ldr	r0, [pc, #20]	; (8009f34 <CDC_Transmit_FS+0x48>)
 8009f20:	f7fe fda8 	bl	8008a74 <USBD_CDC_TransmitPacket>
 8009f24:	4603      	mov	r3, r0
 8009f26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20000718 	.word	0x20000718

08009f38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
	...

08009f5c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	4603      	mov	r3, r0
 8009f64:	6039      	str	r1, [r7, #0]
 8009f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2212      	movs	r2, #18
 8009f6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009f6e:	4b03      	ldr	r3, [pc, #12]	; (8009f7c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	2000016c 	.word	0x2000016c

08009f80 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2204      	movs	r2, #4
 8009f90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f92:	4b03      	ldr	r3, [pc, #12]	; (8009fa0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	20000180 	.word	0x20000180

08009fa4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	6039      	str	r1, [r7, #0]
 8009fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fb0:	79fb      	ldrb	r3, [r7, #7]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d105      	bne.n	8009fc2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	4907      	ldr	r1, [pc, #28]	; (8009fd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009fba:	4808      	ldr	r0, [pc, #32]	; (8009fdc <USBD_CDC_ProductStrDescriptor+0x38>)
 8009fbc:	f7ff fdf3 	bl	8009ba6 <USBD_GetString>
 8009fc0:	e004      	b.n	8009fcc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	4904      	ldr	r1, [pc, #16]	; (8009fd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009fc6:	4805      	ldr	r0, [pc, #20]	; (8009fdc <USBD_CDC_ProductStrDescriptor+0x38>)
 8009fc8:	f7ff fded 	bl	8009ba6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fcc:	4b02      	ldr	r3, [pc, #8]	; (8009fd8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	200011b8 	.word	0x200011b8
 8009fdc:	0800a824 	.word	0x0800a824

08009fe0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	4904      	ldr	r1, [pc, #16]	; (800a000 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009ff0:	4804      	ldr	r0, [pc, #16]	; (800a004 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009ff2:	f7ff fdd8 	bl	8009ba6 <USBD_GetString>
  return USBD_StrDesc;
 8009ff6:	4b02      	ldr	r3, [pc, #8]	; (800a000 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	200011b8 	.word	0x200011b8
 800a004:	0800a83c 	.word	0x0800a83c

0800a008 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	221a      	movs	r2, #26
 800a018:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a01a:	f000 f843 	bl	800a0a4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a01e:	4b02      	ldr	r3, [pc, #8]	; (800a028 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000184 	.word	0x20000184

0800a02c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	6039      	str	r1, [r7, #0]
 800a036:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4907      	ldr	r1, [pc, #28]	; (800a060 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a042:	4808      	ldr	r0, [pc, #32]	; (800a064 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a044:	f7ff fdaf 	bl	8009ba6 <USBD_GetString>
 800a048:	e004      	b.n	800a054 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	4904      	ldr	r1, [pc, #16]	; (800a060 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a04e:	4805      	ldr	r0, [pc, #20]	; (800a064 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a050:	f7ff fda9 	bl	8009ba6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200011b8 	.word	0x200011b8
 800a064:	0800a850 	.word	0x0800a850

0800a068 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	6039      	str	r1, [r7, #0]
 800a072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d105      	bne.n	800a086 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	4907      	ldr	r1, [pc, #28]	; (800a09c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a07e:	4808      	ldr	r0, [pc, #32]	; (800a0a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a080:	f7ff fd91 	bl	8009ba6 <USBD_GetString>
 800a084:	e004      	b.n	800a090 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	4904      	ldr	r1, [pc, #16]	; (800a09c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a08a:	4805      	ldr	r0, [pc, #20]	; (800a0a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a08c:	f7ff fd8b 	bl	8009ba6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a090:	4b02      	ldr	r3, [pc, #8]	; (800a09c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	200011b8 	.word	0x200011b8
 800a0a0:	0800a85c 	.word	0x0800a85c

0800a0a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0aa:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <Get_SerialNum+0x44>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0b0:	4b0e      	ldr	r3, [pc, #56]	; (800a0ec <Get_SerialNum+0x48>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0b6:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <Get_SerialNum+0x4c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d009      	beq.n	800a0de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0ca:	2208      	movs	r2, #8
 800a0cc:	4909      	ldr	r1, [pc, #36]	; (800a0f4 <Get_SerialNum+0x50>)
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f814 	bl	800a0fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	4908      	ldr	r1, [pc, #32]	; (800a0f8 <Get_SerialNum+0x54>)
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	f000 f80f 	bl	800a0fc <IntToUnicode>
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	1fff7590 	.word	0x1fff7590
 800a0ec:	1fff7594 	.word	0x1fff7594
 800a0f0:	1fff7598 	.word	0x1fff7598
 800a0f4:	20000186 	.word	0x20000186
 800a0f8:	20000196 	.word	0x20000196

0800a0fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	4613      	mov	r3, r2
 800a108:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a10e:	2300      	movs	r3, #0
 800a110:	75fb      	strb	r3, [r7, #23]
 800a112:	e027      	b.n	800a164 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	0f1b      	lsrs	r3, r3, #28
 800a118:	2b09      	cmp	r3, #9
 800a11a:	d80b      	bhi.n	800a134 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	0f1b      	lsrs	r3, r3, #28
 800a120:	b2da      	uxtb	r2, r3
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	4619      	mov	r1, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	440b      	add	r3, r1
 800a12c:	3230      	adds	r2, #48	; 0x30
 800a12e:	b2d2      	uxtb	r2, r2
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	e00a      	b.n	800a14a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	0f1b      	lsrs	r3, r3, #28
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4619      	mov	r1, r3
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	440b      	add	r3, r1
 800a144:	3237      	adds	r2, #55	; 0x37
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a150:	7dfb      	ldrb	r3, [r7, #23]
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	3301      	adds	r3, #1
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	4413      	add	r3, r2
 800a15a:	2200      	movs	r2, #0
 800a15c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
 800a160:	3301      	adds	r3, #1
 800a162:	75fb      	strb	r3, [r7, #23]
 800a164:	7dfa      	ldrb	r2, [r7, #23]
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d3d3      	bcc.n	800a114 <IntToUnicode+0x18>
  }
}
 800a16c:	bf00      	nop
 800a16e:	bf00      	nop
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
	...

0800a17c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b094      	sub	sp, #80	; 0x50
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a184:	f107 030c 	add.w	r3, r7, #12
 800a188:	2244      	movs	r2, #68	; 0x44
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fb35 	bl	800a7fc <memset>
  if(pcdHandle->Instance==USB)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a19      	ldr	r2, [pc, #100]	; (800a1fc <HAL_PCD_MspInit+0x80>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d12b      	bne.n	800a1f4 <HAL_PCD_MspInit+0x78>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a19c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800a1a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1a6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1a8:	f107 030c 	add.w	r3, r7, #12
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fa fa83 	bl	80046b8 <HAL_RCCEx_PeriphCLKConfig>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a1b8:	f7f6 ffd0 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a1bc:	4b10      	ldr	r3, [pc, #64]	; (800a200 <HAL_PCD_MspInit+0x84>)
 800a1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c0:	4a0f      	ldr	r2, [pc, #60]	; (800a200 <HAL_PCD_MspInit+0x84>)
 800a1c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a1c8:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <HAL_PCD_MspInit+0x84>)
 800a1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1d0:	60bb      	str	r3, [r7, #8]
 800a1d2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	2013      	movs	r0, #19
 800a1da:	f7f7 fc7c 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800a1de:	2013      	movs	r0, #19
 800a1e0:	f7f7 fc93 	bl	8001b0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	2014      	movs	r0, #20
 800a1ea:	f7f7 fc74 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a1ee:	2014      	movs	r0, #20
 800a1f0:	f7f7 fc8b 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1f4:	bf00      	nop
 800a1f6:	3750      	adds	r7, #80	; 0x50
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40005c00 	.word	0x40005c00
 800a200:	40021000 	.word	0x40021000

0800a204 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a218:	4619      	mov	r1, r3
 800a21a:	4610      	mov	r0, r2
 800a21c:	f7fe fd26 	bl	8008c6c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a23a:	78fa      	ldrb	r2, [r7, #3]
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	4613      	mov	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	440b      	add	r3, r1
 800a248:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	4619      	mov	r1, r3
 800a252:	f7fe fd60 	bl	8008d16 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a256:	bf00      	nop
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	460b      	mov	r3, r1
 800a268:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a270:	78fa      	ldrb	r2, [r7, #3]
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	4613      	mov	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	440b      	add	r3, r1
 800a27e:	333c      	adds	r3, #60	; 0x3c
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	78fb      	ldrb	r3, [r7, #3]
 800a284:	4619      	mov	r1, r3
 800a286:	f7fe fda9 	bl	8008ddc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a28a:	bf00      	nop
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe febd 	bl	8009020 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b084      	sub	sp, #16
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d001      	beq.n	800a2c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a2c2:	f7f6 ff4b 	bl	800115c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a2cc:	7bfa      	ldrb	r2, [r7, #15]
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe fe67 	bl	8008fa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe fe13 	bl	8008f08 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a2e2:	bf00      	nop
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fe62 	bl	8008fc4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d005      	beq.n	800a314 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a308:	4b04      	ldr	r3, [pc, #16]	; (800a31c <HAL_PCD_SuspendCallback+0x30>)
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	4a03      	ldr	r2, [pc, #12]	; (800a31c <HAL_PCD_SuspendCallback+0x30>)
 800a30e:	f043 0306 	orr.w	r3, r3, #6
 800a312:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	e000ed00 	.word	0xe000ed00

0800a320 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d007      	beq.n	800a340 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <HAL_PCD_ResumeCallback+0x34>)
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	4a07      	ldr	r2, [pc, #28]	; (800a354 <HAL_PCD_ResumeCallback+0x34>)
 800a336:	f023 0306 	bic.w	r3, r3, #6
 800a33a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a33c:	f000 f9fa 	bl	800a734 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fe52 	bl	8008ff0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	e000ed00 	.word	0xe000ed00

0800a358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a360:	4a2b      	ldr	r2, [pc, #172]	; (800a410 <USBD_LL_Init+0xb8>)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a29      	ldr	r2, [pc, #164]	; (800a410 <USBD_LL_Init+0xb8>)
 800a36c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <USBD_LL_Init+0xb8>)
 800a372:	4a28      	ldr	r2, [pc, #160]	; (800a414 <USBD_LL_Init+0xbc>)
 800a374:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a376:	4b26      	ldr	r3, [pc, #152]	; (800a410 <USBD_LL_Init+0xb8>)
 800a378:	2208      	movs	r2, #8
 800a37a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a37c:	4b24      	ldr	r3, [pc, #144]	; (800a410 <USBD_LL_Init+0xb8>)
 800a37e:	2202      	movs	r2, #2
 800a380:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a382:	4b23      	ldr	r3, [pc, #140]	; (800a410 <USBD_LL_Init+0xb8>)
 800a384:	2202      	movs	r2, #2
 800a386:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a388:	4b21      	ldr	r3, [pc, #132]	; (800a410 <USBD_LL_Init+0xb8>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a38e:	4b20      	ldr	r3, [pc, #128]	; (800a410 <USBD_LL_Init+0xb8>)
 800a390:	2200      	movs	r2, #0
 800a392:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a394:	4b1e      	ldr	r3, [pc, #120]	; (800a410 <USBD_LL_Init+0xb8>)
 800a396:	2200      	movs	r2, #0
 800a398:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a39a:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <USBD_LL_Init+0xb8>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a3a0:	481b      	ldr	r0, [pc, #108]	; (800a410 <USBD_LL_Init+0xb8>)
 800a3a2:	f7f7 fea5 	bl	80020f0 <HAL_PCD_Init>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a3ac:	f7f6 fed6 	bl	800115c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3b6:	2318      	movs	r3, #24
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	f7f9 fb5e 	bl	8003a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3c6:	2358      	movs	r3, #88	; 0x58
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	2180      	movs	r1, #128	; 0x80
 800a3cc:	f7f9 fb56 	bl	8003a7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3d6:	23c0      	movs	r3, #192	; 0xc0
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2181      	movs	r1, #129	; 0x81
 800a3dc:	f7f9 fb4e 	bl	8003a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	f7f9 fb45 	bl	8003a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2182      	movs	r1, #130	; 0x82
 800a400:	f7f9 fb3c 	bl	8003a7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	200013b8 	.word	0x200013b8
 800a414:	40005c00 	.word	0x40005c00

0800a418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a42e:	4618      	mov	r0, r3
 800a430:	f7f7 ff43 	bl	80022ba <HAL_PCD_Start>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f980 	bl	800a740 <USBD_Get_USB_Status>
 800a440:	4603      	mov	r3, r0
 800a442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a444:	7bbb      	ldrb	r3, [r7, #14]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	4608      	mov	r0, r1
 800a458:	4611      	mov	r1, r2
 800a45a:	461a      	mov	r2, r3
 800a45c:	4603      	mov	r3, r0
 800a45e:	70fb      	strb	r3, [r7, #3]
 800a460:	460b      	mov	r3, r1
 800a462:	70bb      	strb	r3, [r7, #2]
 800a464:	4613      	mov	r3, r2
 800a466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a476:	78bb      	ldrb	r3, [r7, #2]
 800a478:	883a      	ldrh	r2, [r7, #0]
 800a47a:	78f9      	ldrb	r1, [r7, #3]
 800a47c:	f7f8 f88b 	bl	8002596 <HAL_PCD_EP_Open>
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f95a 	bl	800a740 <USBD_Get_USB_Status>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a490:	7bbb      	ldrb	r3, [r7, #14]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4b4:	78fa      	ldrb	r2, [r7, #3]
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7f8 f8d2 	bl	8002662 <HAL_PCD_EP_Close>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 f93b 	bl	800a740 <USBD_Get_USB_Status>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4f2:	78fa      	ldrb	r2, [r7, #3]
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f8 f993 	bl	8002822 <HAL_PCD_EP_SetStall>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f91c 	bl	800a740 <USBD_Get_USB_Status>
 800a508:	4603      	mov	r3, r0
 800a50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a530:	78fa      	ldrb	r2, [r7, #3]
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f7f8 f9c6 	bl	80028c6 <HAL_PCD_EP_ClrStall>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f8fd 	bl	800a740 <USBD_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	da0c      	bge.n	800a58a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a576:	68f9      	ldr	r1, [r7, #12]
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	440b      	add	r3, r1
 800a584:	3302      	adds	r3, #2
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	e00b      	b.n	800a5a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a590:	68f9      	ldr	r1, [r7, #12]
 800a592:	4613      	mov	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	00db      	lsls	r3, r3, #3
 800a59a:	440b      	add	r3, r1
 800a59c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a5a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5c8:	78fa      	ldrb	r2, [r7, #3]
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7f7 ffbd 	bl	800254c <HAL_PCD_SetAddress>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 f8b1 	bl	800a740 <USBD_Get_USB_Status>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	607a      	str	r2, [r7, #4]
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a60a:	7af9      	ldrb	r1, [r7, #11]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	f7f8 f8c4 	bl	800279c <HAL_PCD_EP_Transmit>
 800a614:	4603      	mov	r3, r0
 800a616:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f890 	bl	800a740 <USBD_Get_USB_Status>
 800a620:	4603      	mov	r3, r0
 800a622:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a624:	7dbb      	ldrb	r3, [r7, #22]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b086      	sub	sp, #24
 800a632:	af00      	add	r7, sp, #0
 800a634:	60f8      	str	r0, [r7, #12]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
 800a63a:	460b      	mov	r3, r1
 800a63c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a64c:	7af9      	ldrb	r1, [r7, #11]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	f7f8 f84e 	bl	80026f2 <HAL_PCD_EP_Receive>
 800a656:	4603      	mov	r3, r0
 800a658:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 f86f 	bl	800a740 <USBD_Get_USB_Status>
 800a662:	4603      	mov	r3, r0
 800a664:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a666:	7dbb      	ldrb	r3, [r7, #22]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a682:	78fa      	ldrb	r2, [r7, #3]
 800a684:	4611      	mov	r1, r2
 800a686:	4618      	mov	r0, r3
 800a688:	f7f8 f870 	bl	800276c <HAL_PCD_EP_GetRxCount>
 800a68c:	4603      	mov	r3, r0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a6a4:	78fb      	ldrb	r3, [r7, #3]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <HAL_PCDEx_LPM_Callback+0x18>
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d013      	beq.n	800a6d6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a6ae:	e023      	b.n	800a6f8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d007      	beq.n	800a6c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a6b8:	f000 f83c 	bl	800a734 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6bc:	4b10      	ldr	r3, [pc, #64]	; (800a700 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	4a0f      	ldr	r2, [pc, #60]	; (800a700 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6c2:	f023 0306 	bic.w	r3, r3, #6
 800a6c6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fc8e 	bl	8008ff0 <USBD_LL_Resume>
    break;
 800a6d4:	e010      	b.n	800a6f8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe fc71 	bl	8008fc4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6ea:	4b05      	ldr	r3, [pc, #20]	; (800a700 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	4a04      	ldr	r2, [pc, #16]	; (800a700 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6f0:	f043 0306 	orr.w	r3, r3, #6
 800a6f4:	6113      	str	r3, [r2, #16]
    break;
 800a6f6:	bf00      	nop
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	e000ed00 	.word	0xe000ed00

0800a704 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a70c:	4b03      	ldr	r3, [pc, #12]	; (800a71c <USBD_static_malloc+0x18>)
}
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	200001fc 	.word	0x200001fc

0800a720 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a738:	f7f5 ff02 	bl	8000540 <SystemClock_Config>
}
 800a73c:	bf00      	nop
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	2b03      	cmp	r3, #3
 800a752:	d817      	bhi.n	800a784 <USBD_Get_USB_Status+0x44>
 800a754:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <USBD_Get_USB_Status+0x1c>)
 800a756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75a:	bf00      	nop
 800a75c:	0800a76d 	.word	0x0800a76d
 800a760:	0800a773 	.word	0x0800a773
 800a764:	0800a779 	.word	0x0800a779
 800a768:	0800a77f 	.word	0x0800a77f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]
    break;
 800a770:	e00b      	b.n	800a78a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a772:	2303      	movs	r3, #3
 800a774:	73fb      	strb	r3, [r7, #15]
    break;
 800a776:	e008      	b.n	800a78a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a778:	2301      	movs	r3, #1
 800a77a:	73fb      	strb	r3, [r7, #15]
    break;
 800a77c:	e005      	b.n	800a78a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a77e:	2303      	movs	r3, #3
 800a780:	73fb      	strb	r3, [r7, #15]
    break;
 800a782:	e002      	b.n	800a78a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a784:	2303      	movs	r3, #3
 800a786:	73fb      	strb	r3, [r7, #15]
    break;
 800a788:	bf00      	nop
  }
  return usb_status;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <__libc_init_array>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	4d0d      	ldr	r5, [pc, #52]	; (800a7d0 <__libc_init_array+0x38>)
 800a79c:	4c0d      	ldr	r4, [pc, #52]	; (800a7d4 <__libc_init_array+0x3c>)
 800a79e:	1b64      	subs	r4, r4, r5
 800a7a0:	10a4      	asrs	r4, r4, #2
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	d109      	bne.n	800a7bc <__libc_init_array+0x24>
 800a7a8:	4d0b      	ldr	r5, [pc, #44]	; (800a7d8 <__libc_init_array+0x40>)
 800a7aa:	4c0c      	ldr	r4, [pc, #48]	; (800a7dc <__libc_init_array+0x44>)
 800a7ac:	f000 f82e 	bl	800a80c <_init>
 800a7b0:	1b64      	subs	r4, r4, r5
 800a7b2:	10a4      	asrs	r4, r4, #2
 800a7b4:	2600      	movs	r6, #0
 800a7b6:	42a6      	cmp	r6, r4
 800a7b8:	d105      	bne.n	800a7c6 <__libc_init_array+0x2e>
 800a7ba:	bd70      	pop	{r4, r5, r6, pc}
 800a7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c0:	4798      	blx	r3
 800a7c2:	3601      	adds	r6, #1
 800a7c4:	e7ee      	b.n	800a7a4 <__libc_init_array+0xc>
 800a7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ca:	4798      	blx	r3
 800a7cc:	3601      	adds	r6, #1
 800a7ce:	e7f2      	b.n	800a7b6 <__libc_init_array+0x1e>
 800a7d0:	0800a87c 	.word	0x0800a87c
 800a7d4:	0800a87c 	.word	0x0800a87c
 800a7d8:	0800a87c 	.word	0x0800a87c
 800a7dc:	0800a880 	.word	0x0800a880

0800a7e0 <memcpy>:
 800a7e0:	440a      	add	r2, r1
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a7e8:	d100      	bne.n	800a7ec <memcpy+0xc>
 800a7ea:	4770      	bx	lr
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7f6:	4291      	cmp	r1, r2
 800a7f8:	d1f9      	bne.n	800a7ee <memcpy+0xe>
 800a7fa:	bd10      	pop	{r4, pc}

0800a7fc <memset>:
 800a7fc:	4402      	add	r2, r0
 800a7fe:	4603      	mov	r3, r0
 800a800:	4293      	cmp	r3, r2
 800a802:	d100      	bne.n	800a806 <memset+0xa>
 800a804:	4770      	bx	lr
 800a806:	f803 1b01 	strb.w	r1, [r3], #1
 800a80a:	e7f9      	b.n	800a800 <memset+0x4>

0800a80c <_init>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr

0800a818 <_fini>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr
