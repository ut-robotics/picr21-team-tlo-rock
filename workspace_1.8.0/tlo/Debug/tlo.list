
tlo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b254  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b42c  0800b42c  0001b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b484  0800b484  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b484  0800b484  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b484  0800b484  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b484  0800b484  0001b484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b488  0800b488  0001b488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  200001a0  0800b62c  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016dc  0800b62c  000216dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205e5  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  000407b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021731  00000000  00000000  00047048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a600  00000000  00000000  00068779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a2a  00000000  00000000  00082d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c7a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f20  00000000  00000000  0014c7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b414 	.word	0x0800b414

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0800b414 	.word	0x0800b414

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <CDC_On_Receive>:
Feedback feedback = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .bools = 0, .deliminer = 0xAAAA};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) //uint8_t* Buf, uint32_t* Len
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)){
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	d104      	bne.n	8000b30 <CDC_On_Receive+0x1c>
		memcpy(&command, buffer, sizeof(Command));
 8000b26:	2210      	movs	r2, #16
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b2c:	f00a fc5c 	bl	800b3e8 <memcpy>
	}
	if (command.delimiter == 0xAAAA){
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <CDC_On_Receive+0x38>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <CDC_On_Receive+0x2e>
		isCommandReceived = 1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <CDC_On_Receive+0x3c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
	}
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000227 	.word	0x20000227

08000b54 <throw>:

void throw(uint32_t speed)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (speed > 7500) speed = 7500;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d902      	bls.n	8000b6c <throw+0x18>
 8000b66:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000b6a:	607b      	str	r3, [r7, #4]
	if (speed < 2500) speed = 2500;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d802      	bhi.n	8000b7c <throw+0x28>
 8000b76:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b7a:	607b      	str	r3, [r7, #4]
	TIM16->CCR1 = speed;
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <throw+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(400);
 8000b82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b86:	f001 fcad 	bl	80024e4 <HAL_Delay>
	TIM17->CCR1 = 1000;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <throw+0x78>)
 8000b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
	int n = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
	while (n)
 8000b96:	e009      	b.n	8000bac <throw+0x58>
	{
		n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 8000b98:	2120      	movs	r1, #32
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 ff55 	bl	8002a4c <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(200);
 8000ba6:	20c8      	movs	r0, #200	; 0xc8
 8000ba8:	f001 fc9c 	bl	80024e4 <HAL_Delay>
	while (n)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f2      	bne.n	8000b98 <throw+0x44>
	}
	TIM17->CCR1 = 0;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <throw+0x78>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = 2500;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <throw+0x74>)
 8000bba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40014400 	.word	0x40014400
 8000bcc:	40014800 	.word	0x40014800

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b0a4      	sub	sp, #144	; 0x90
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if(tgt_M2 != 0){
 8000bd8:	4bab      	ldr	r3, [pc, #684]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	f7ff ff3b 	bl	8000a60 <__aeabi_dcmpeq>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d105      	bne.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x2c>
		tgt_M2 = tgt_M2;
 8000bf0:	4ba5      	ldr	r3, [pc, #660]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	49a4      	ldr	r1, [pc, #656]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bf8:	e9c1 2300 	strd	r2, r3, [r1]
	}
	int16_t Cpos_M1 = (int16_t)TIM3->CNT;
 8000bfc:	4ba3      	ldr	r3, [pc, #652]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c00:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	feedback.speed1  = Cpos_M1;
 8000c04:	4aa2      	ldr	r2, [pc, #648]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8000c0a:	8013      	strh	r3, [r2, #0]
	double dif_M1 = Cpos_M1 - Lpos_M1;
 8000c0c:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fc53 	bl	80004bc <__aeabi_i2d>
 8000c16:	4b9f      	ldr	r3, [pc, #636]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fb00 	bl	8000220 <__aeabi_dsub>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	Lpos_M1 = Cpos_M1;
 8000c28:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fc45 	bl	80004bc <__aeabi_i2d>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4997      	ldr	r1, [pc, #604]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c38:	e9c1 2300 	strd	r2, r3, [r1]

	int16_t Cpos_M2 = (int16_t)TIM4->CNT;
 8000c3c:	4b96      	ldr	r3, [pc, #600]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	feedback.speed2  = Cpos_M2;
 8000c44:	4a92      	ldr	r2, [pc, #584]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000c4a:	8053      	strh	r3, [r2, #2]
	double dif_M2 = Cpos_M2 - Lpos_M2;
 8000c4c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fc33 	bl	80004bc <__aeabi_i2d>
 8000c56:	4b91      	ldr	r3, [pc, #580]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5c:	f7ff fae0 	bl	8000220 <__aeabi_dsub>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	Lpos_M2 = Cpos_M2;
 8000c68:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc25 	bl	80004bc <__aeabi_i2d>
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	4989      	ldr	r1, [pc, #548]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c78:	e9c1 2300 	strd	r2, r3, [r1]

	int16_t Cpos_M3 = (int16_t)TIM8->CNT;
 8000c7c:	4b88      	ldr	r3, [pc, #544]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	feedback.speed3  = Cpos_M3;
 8000c84:	4a82      	ldr	r2, [pc, #520]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000c8a:	8093      	strh	r3, [r2, #4]
	double dif_M3 = Cpos_M3 - Lpos_M3;
 8000c8c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc13 	bl	80004bc <__aeabi_i2d>
 8000c96:	4b83      	ldr	r3, [pc, #524]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9c:	f7ff fac0 	bl	8000220 <__aeabi_dsub>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60


	double Err1 = tgt_M1/5 - dif_M1;
 8000ca8:	4b7f      	ldr	r3, [pc, #508]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cae:	f04f 0200 	mov.w	r2, #0
 8000cb2:	4b7e      	ldr	r3, [pc, #504]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cb4:	f7ff fd96 	bl	80007e4 <__aeabi_ddiv>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000cc4:	f7ff faac 	bl	8000220 <__aeabi_dsub>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double Err2 = tgt_M2/5 - dif_M2;
 8000cd0:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	4b74      	ldr	r3, [pc, #464]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cdc:	f7ff fd82 	bl	80007e4 <__aeabi_ddiv>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000cec:	f7ff fa98 	bl	8000220 <__aeabi_dsub>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double Err3 = tgt_M3/5 - dif_M3;
 8000cf8:	4b6d      	ldr	r3, [pc, #436]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d04:	f7ff fd6e 	bl	80007e4 <__aeabi_ddiv>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000d14:	f7ff fa84 	bl	8000220 <__aeabi_dsub>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	double kp = 4000;
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d26:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double ki = 700;
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double kd = 300;
 8000d34:	a352      	add	r3, pc, #328	; (adr r3, 8000e80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	integral_M1 += Err1;
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000d48:	f7ff fa6c 	bl	8000224 <__adddf3>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	495a      	ldr	r1, [pc, #360]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d52:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M2 += Err2;
 8000d56:	4b5a      	ldr	r3, [pc, #360]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000d60:	f7ff fa60 	bl	8000224 <__adddf3>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4955      	ldr	r1, [pc, #340]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d6a:	e9c1 2300 	strd	r2, r3, [r1]
	integral_M3 += Err3;
 8000d6e:	4b55      	ldr	r3, [pc, #340]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d78:	f7ff fa54 	bl	8000224 <__adddf3>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4950      	ldr	r1, [pc, #320]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d82:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M1 > 40) integral_M1 = 40;
 8000d86:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000d92:	f7ff fe8d 	bl	8000ab0 <__aeabi_dcmpgt>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8000d9c:	4947      	ldr	r1, [pc, #284]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000da4:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M1 < -40) integral_M1 = -40;
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000db4:	f7ff fe5e 	bl	8000a74 <__aeabi_dcmplt>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x1fa>
 8000dbe:	493f      	ldr	r1, [pc, #252]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000dc6:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M2 > 40) integral_M2 = 40;
 8000dca:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000dd6:	f7ff fe6b 	bl	8000ab0 <__aeabi_dcmpgt>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x21c>
 8000de0:	4937      	ldr	r1, [pc, #220]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000de8:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M2 < -40) integral_M2 = -40;
 8000dec:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000df8:	f7ff fe3c 	bl	8000a74 <__aeabi_dcmplt>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x23e>
 8000e02:	492f      	ldr	r1, [pc, #188]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e0a:	e9c1 2300 	strd	r2, r3, [r1]

	if (integral_M3 > 40) integral_M3 = 40;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e1a:	f7ff fe49 	bl	8000ab0 <__aeabi_dcmpgt>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x260>
 8000e24:	4927      	ldr	r1, [pc, #156]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000e2c:	e9c1 2300 	strd	r2, r3, [r1]
	if (integral_M3 < -40) integral_M3 = -40;
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e3c:	f7ff fe1a 	bl	8000a74 <__aeabi_dcmplt>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x282>
 8000e46:	491f      	ldr	r1, [pc, #124]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e4e:	e9c1 2300 	strd	r2, r3, [r1]

	double derivative_M1 = (Err1 - last_err_M1);
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000e5c:	f7ff f9e0 	bl	8000220 <__aeabi_dsub>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double derivative_M2 = (Err2 - last_err_M2);
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e72:	f7ff f9d5 	bl	8000220 <__aeabi_dsub>
 8000e76:	4602      	mov	r2, r0
 8000e78:	e02e      	b.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8000e7a:	bf00      	nop
 8000e7c:	f3af 8000 	nop.w
 8000e80:	00000000 	.word	0x00000000
 8000e84:	4072c000 	.word	0x4072c000
 8000e88:	200001e0 	.word	0x200001e0
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	20000010 	.word	0x20000010
 8000e94:	200001c0 	.word	0x200001c0
 8000e98:	40000800 	.word	0x40000800
 8000e9c:	200001c8 	.word	0x200001c8
 8000ea0:	40013400 	.word	0x40013400
 8000ea4:	200001d0 	.word	0x200001d0
 8000ea8:	200001d8 	.word	0x200001d8
 8000eac:	40140000 	.word	0x40140000
 8000eb0:	200001e8 	.word	0x200001e8
 8000eb4:	40af4000 	.word	0x40af4000
 8000eb8:	4085e000 	.word	0x4085e000
 8000ebc:	200001f0 	.word	0x200001f0
 8000ec0:	200001f8 	.word	0x200001f8
 8000ec4:	20000200 	.word	0x20000200
 8000ec8:	40440000 	.word	0x40440000
 8000ecc:	c0440000 	.word	0xc0440000
 8000ed0:	20000208 	.word	0x20000208
 8000ed4:	20000210 	.word	0x20000210
 8000ed8:	460b      	mov	r3, r1
 8000eda:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double derivative_M3 = (Err3 - last_err_M3);
 8000ede:	4b86      	ldr	r3, [pc, #536]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000ee8:	f7ff f99a 	bl	8000220 <__aeabi_dsub>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	e9c7 2306 	strd	r2, r3, [r7, #24]

	last_err_M1 = Err1;
 8000ef4:	4981      	ldr	r1, [pc, #516]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000efa:	e9c1 2300 	strd	r2, r3, [r1]
	last_err_M2 = Err2;
 8000efe:	4980      	ldr	r1, [pc, #512]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f04:	e9c1 2300 	strd	r2, r3, [r1]
	last_err_M3 = Err3;
 8000f08:	497b      	ldr	r1, [pc, #492]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000f0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000f0e:	e9c1 2300 	strd	r2, r3, [r1]

	int32_t Speed_M1 = (int32_t) Err1 * kp + integral_M1 * ki + derivative_M1 * kd;
 8000f12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000f16:	f7ff fdd5 	bl	8000ac4 <__aeabi_d2iz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff facd 	bl	80004bc <__aeabi_i2d>
 8000f22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000f26:	f7ff fb33 	bl	8000590 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4614      	mov	r4, r2
 8000f30:	461d      	mov	r5, r3
 8000f32:	4b74      	ldr	r3, [pc, #464]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f3c:	f7ff fb28 	bl	8000590 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4620      	mov	r0, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	f7ff f96c 	bl	8000224 <__adddf3>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4614      	mov	r4, r2
 8000f52:	461d      	mov	r5, r3
 8000f54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f5c:	f7ff fb18 	bl	8000590 <__aeabi_dmul>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4620      	mov	r0, r4
 8000f66:	4629      	mov	r1, r5
 8000f68:	f7ff f95c 	bl	8000224 <__adddf3>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fda6 	bl	8000ac4 <__aeabi_d2iz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	617b      	str	r3, [r7, #20]
	int32_t Speed_M2 = (int32_t) Err2 * kp + integral_M2 * ki + derivative_M2 * kd;
 8000f7c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f80:	f7ff fda0 	bl	8000ac4 <__aeabi_d2iz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa98 	bl	80004bc <__aeabi_i2d>
 8000f8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000f90:	f7ff fafe 	bl	8000590 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4614      	mov	r4, r2
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fa2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000fa6:	f7ff faf3 	bl	8000590 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4620      	mov	r0, r4
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	f7ff f937 	bl	8000224 <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4614      	mov	r4, r2
 8000fbc:	461d      	mov	r5, r3
 8000fbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fc6:	f7ff fae3 	bl	8000590 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4620      	mov	r0, r4
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	f7ff f927 	bl	8000224 <__adddf3>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fd71 	bl	8000ac4 <__aeabi_d2iz>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]
	int32_t Speed_M3 = (int32_t) Err3 * kp + integral_M3 * ki + derivative_M3 * kd;
 8000fe6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000fea:	f7ff fd6b 	bl	8000ac4 <__aeabi_d2iz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa63 	bl	80004bc <__aeabi_i2d>
 8000ff6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ffa:	f7ff fac9 	bl	8000590 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4614      	mov	r4, r2
 8001004:	461d      	mov	r5, r3
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001010:	f7ff fabe 	bl	8000590 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4620      	mov	r0, r4
 800101a:	4629      	mov	r1, r5
 800101c:	f7ff f902 	bl	8000224 <__adddf3>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4614      	mov	r4, r2
 8001026:	461d      	mov	r5, r3
 8001028:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800102c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001030:	f7ff faae 	bl	8000590 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4620      	mov	r0, r4
 800103a:	4629      	mov	r1, r5
 800103c:	f7ff f8f2 	bl	8000224 <__adddf3>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fd3c 	bl	8000ac4 <__aeabi_d2iz>
 800104c:	4603      	mov	r3, r0
 800104e:	60fb      	str	r3, [r7, #12]

	if (Speed_M1 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db06      	blt.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x494>
 8001056:	2200      	movs	r2, #0
 8001058:	2102      	movs	r1, #2
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f001 fd0d 	bl	8002a7c <HAL_GPIO_WritePin>
 8001062:	e005      	b.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x4a0>
	else HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	2102      	movs	r1, #2
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 fd06 	bl	8002a7c <HAL_GPIO_WritePin>

	if (Speed_M2 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M2_DIR_Pin, 0);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db07      	blt.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x4b6>
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f001 fcfc 	bl	8002a7c <HAL_GPIO_WritePin>
 8001084:	e006      	b.n	8001094 <HAL_TIM_PeriodElapsedCallback+0x4c4>
	else HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f001 fcf4 	bl	8002a7c <HAL_GPIO_WritePin>

	if (Speed_M3 >= 0) HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M3_DIR_Pin, 0);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db06      	blt.n	80010a8 <HAL_TIM_PeriodElapsedCallback+0x4d8>
 800109a:	2200      	movs	r2, #0
 800109c:	2108      	movs	r1, #8
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f001 fceb 	bl	8002a7c <HAL_GPIO_WritePin>
 80010a6:	e005      	b.n	80010b4 <HAL_TIM_PeriodElapsedCallback+0x4e4>
	else HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2108      	movs	r1, #8
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f001 fce4 	bl	8002a7c <HAL_GPIO_WritePin>

	TIM2->CCR1 = abs(Speed_M1);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR3 = abs(Speed_M2);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010ca:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM15->CCR1 = abs(Speed_M3);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010da:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34

	safety_iters++;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80010ec:	701a      	strb	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	3790      	adds	r7, #144	; 0x90
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000218 	.word	0x20000218
 80010fc:	20000208 	.word	0x20000208
 8001100:	20000210 	.word	0x20000210
 8001104:	200001f0 	.word	0x200001f0
 8001108:	200001f8 	.word	0x200001f8
 800110c:	20000200 	.word	0x20000200
 8001110:	40014000 	.word	0x40014000
 8001114:	20000226 	.word	0x20000226

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f001 f970 	bl	8002402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f945 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 fdbb 	bl	8001ca0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800112a:	f000 fae5 	bl	80016f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800112e:	f000 fb39 	bl	80017a4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001132:	f000 fb8d 	bl	8001850 <MX_TIM6_Init>
  MX_TIM8_Init();
 8001136:	f000 fbc1 	bl	80018bc <MX_TIM8_Init>
  MX_TIM2_Init();
 800113a:	f000 fa51 	bl	80015e0 <MX_TIM2_Init>
  MX_TIM16_Init();
 800113e:	f000 fcbb 	bl	8001ab8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001142:	f000 fd33 	bl	8001bac <MX_TIM17_Init>
  MX_TIM15_Init();
 8001146:	f000 fc13 	bl	8001970 <MX_TIM15_Init>
  MX_I2C3_Init();
 800114a:	f000 f97d 	bl	8001448 <MX_I2C3_Init>
  MX_TIM1_Init();
 800114e:	f000 f9bb 	bl	80014c8 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001152:	f009 fc0d 	bl	800a970 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  // set motors off
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 8001156:	2201      	movs	r2, #1
 8001158:	2101      	movs	r1, #1
 800115a:	487f      	ldr	r0, [pc, #508]	; (8001358 <main+0x240>)
 800115c:	f001 fc8e 	bl	8002a7c <HAL_GPIO_WritePin>

  // toggle nsleep for aprox 27us
  TIM2->CCR2 = 65100;
 8001160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001164:	f64f 624c 	movw	r2, #65100	; 0xfe4c
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800116a:	2104      	movs	r1, #4
 800116c:	487b      	ldr	r0, [pc, #492]	; (800135c <main+0x244>)
 800116e:	f004 fbb1 	bl	80058d4 <HAL_TIM_PWM_Start>
  // set nsleep to high
  HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f001 f9b6 	bl	80024e4 <HAL_Delay>
  TIM2->CCR2 = 65536;
 8001178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001180:	639a      	str	r2, [r3, #56]	; 0x38

  //motor speeds to zero
  TIM2->CCR1 = 0;
 8001182:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001186:	2200      	movs	r2, #0
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR1 = 0;
 800118a:	4b75      	ldr	r3, [pc, #468]	; (8001360 <main+0x248>)
 800118c:	2200      	movs	r2, #0
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR3 = 0;
 8001190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c

  //begin motor pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4870      	ldr	r0, [pc, #448]	; (800135c <main+0x244>)
 800119c:	f004 fb9a 	bl	80058d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011a0:	2108      	movs	r1, #8
 80011a2:	486e      	ldr	r0, [pc, #440]	; (800135c <main+0x244>)
 80011a4:	f004 fb96 	bl	80058d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	486e      	ldr	r0, [pc, #440]	; (8001364 <main+0x24c>)
 80011ac:	f004 fb92 	bl	80058d4 <HAL_TIM_PWM_Start>

  //enable thrower and arm it while setting its speed to 0
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80011b0:	2100      	movs	r1, #0
 80011b2:	486d      	ldr	r0, [pc, #436]	; (8001368 <main+0x250>)
 80011b4:	f004 fb8e 	bl	80058d4 <HAL_TIM_PWM_Start>
  TIM16->CCR1 = 2500;
 80011b8:	4b6c      	ldr	r3, [pc, #432]	; (800136c <main+0x254>)
 80011ba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(4000);
 80011c0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80011c4:	f001 f98e 	bl	80024e4 <HAL_Delay>

  //enable grabber and set its speed to zero
  TIM17->CCR1 = 0;
 80011c8:	4b69      	ldr	r3, [pc, #420]	; (8001370 <main+0x258>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80011ce:	2100      	movs	r1, #0
 80011d0:	4868      	ldr	r0, [pc, #416]	; (8001374 <main+0x25c>)
 80011d2:	f004 fb7f 	bl	80058d4 <HAL_TIM_PWM_Start>

  //start encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011d6:	2104      	movs	r1, #4
 80011d8:	4867      	ldr	r0, [pc, #412]	; (8001378 <main+0x260>)
 80011da:	f004 fd21 	bl	8005c20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011de:	2104      	movs	r1, #4
 80011e0:	4866      	ldr	r0, [pc, #408]	; (800137c <main+0x264>)
 80011e2:	f004 fd1d 	bl	8005c20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011e6:	2104      	movs	r1, #4
 80011e8:	4865      	ldr	r0, [pc, #404]	; (8001380 <main+0x268>)
 80011ea:	f004 fd19 	bl	8005c20 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim6);
 80011ee:	4865      	ldr	r0, [pc, #404]	; (8001384 <main+0x26c>)
 80011f0:	f004 faae 	bl	8005750 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  uint8_t n = HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 80011f4:	2120      	movs	r1, #32
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f001 fc27 	bl	8002a4c <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	71bb      	strb	r3, [r7, #6]

	  if (isCommandReceived){
 8001202:	4b61      	ldr	r3, [pc, #388]	; (8001388 <main+0x270>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d059      	beq.n	80012c0 <main+0x1a8>
		  isCommandReceived = 0;
 800120c:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <main+0x270>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
		  tgt_M1 = command.speed1;
 8001212:	4b5e      	ldr	r3, [pc, #376]	; (800138c <main+0x274>)
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f94f 	bl	80004bc <__aeabi_i2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	495b      	ldr	r1, [pc, #364]	; (8001390 <main+0x278>)
 8001224:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = command.speed2;
 8001228:	4b58      	ldr	r3, [pc, #352]	; (800138c <main+0x274>)
 800122a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f944 	bl	80004bc <__aeabi_i2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4956      	ldr	r1, [pc, #344]	; (8001394 <main+0x27c>)
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = command.speed3;
 800123e:	4b53      	ldr	r3, [pc, #332]	; (800138c <main+0x274>)
 8001240:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f939 	bl	80004bc <__aeabi_i2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4952      	ldr	r1, [pc, #328]	; (8001398 <main+0x280>)
 8001250:	e9c1 2300 	strd	r2, r3, [r1]
		  thrower_speed = command.thrower_speed;
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <main+0x274>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <main+0x284>)
 800125a:	6013      	str	r3, [r2, #0]
		  uint8_t bools = command.bools;
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <main+0x274>)
 800125e:	88db      	ldrh	r3, [r3, #6]
 8001260:	71fb      	strb	r3, [r7, #7]

		  if (bools >= 2)
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d906      	bls.n	8001276 <main+0x15e>
		  {
		  	  bools -= 2;
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	3b02      	subs	r3, #2
 800126c:	71fb      	strb	r3, [r7, #7]
		  	  grabber_on = 1;
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <main+0x288>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e002      	b.n	800127c <main+0x164>
		  }

		  else
		  {
			  grabber_on = 0;
 8001276:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <main+0x288>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
		  }

		  if (bools >= 1)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <main+0x176>
		  {
			  bools -= 1;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3b01      	subs	r3, #1
 8001286:	71fb      	strb	r3, [r7, #7]
			  thrower = 1;
 8001288:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <main+0x28c>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	4831      	ldr	r0, [pc, #196]	; (8001358 <main+0x240>)
 8001294:	f001 fbf2 	bl	8002a7c <HAL_GPIO_WritePin>

		  safety_iters = 0;
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <main+0x290>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]

		  feedback.bools = (uint8_t)HAL_GPIO_ReadPin(BALL_SENSOR_GPIO_Port, BALL_SENSOR_Pin);
 800129e:	2120      	movs	r1, #32
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f001 fbd2 	bl	8002a4c <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <main+0x294>)
 80012ae:	80da      	strh	r2, [r3, #6]
		  feedback.deliminer = 0xAAAA;
 80012b0:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <main+0x294>)
 80012b2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80012b6:	609a      	str	r2, [r3, #8]
		  CDC_Transmit_FS(&feedback, sizeof(feedback));
 80012b8:	210c      	movs	r1, #12
 80012ba:	483c      	ldr	r0, [pc, #240]	; (80013ac <main+0x294>)
 80012bc:	f009 fc1a 	bl	800aaf4 <CDC_Transmit_FS>

	  }



	  if (grabber_on){
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <main+0x288>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00e      	beq.n	80012e6 <main+0x1ce>

		  if (n)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <main+0x1c4>
		  {
			  TIM17->CCR1 = 0;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <main+0x258>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34
			  grabber_on = 0;
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <main+0x288>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <main+0x1d4>

		  }
		  else TIM17->CCR1 = 1000;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <main+0x258>)
 80012de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
 80012e4:	e002      	b.n	80012ec <main+0x1d4>

	  }

	  else TIM17->CCR1 = 0;
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <main+0x258>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34
	  if (n) grabber_on = 0;
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <main+0x1e0>
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <main+0x288>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]

	  if(thrower && n){
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <main+0x28c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <main+0x1fa>
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <main+0x1fa>
		  throw(thrower_speed);
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <main+0x284>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fc22 	bl	8000b54 <throw>
 8001310:	e002      	b.n	8001318 <main+0x200>
	  }
	  else thrower = 0;
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <main+0x28c>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]

	  if (safety_iters > 100){
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <main+0x290>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	f67f af69 	bls.w	80011f4 <main+0xdc>
		  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, 1);
 8001322:	2201      	movs	r2, #1
 8001324:	2101      	movs	r1, #1
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <main+0x240>)
 8001328:	f001 fba8 	bl	8002a7c <HAL_GPIO_WritePin>
		  tgt_M1 = 0;
 800132c:	4918      	ldr	r1, [pc, #96]	; (8001390 <main+0x278>)
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M2 = 0;
 800133a:	4916      	ldr	r1, [pc, #88]	; (8001394 <main+0x27c>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
		  tgt_M3 = 0;
 8001348:	4913      	ldr	r1, [pc, #76]	; (8001398 <main+0x280>)
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9c1 2300 	strd	r2, r3, [r1]
  {
 8001356:	e74d      	b.n	80011f4 <main+0xdc>
 8001358:	48000400 	.word	0x48000400
 800135c:	200006ac 	.word	0x200006ac
 8001360:	40014000 	.word	0x40014000
 8001364:	20000530 	.word	0x20000530
 8001368:	200006f8 	.word	0x200006f8
 800136c:	40014400 	.word	0x40014400
 8001370:	40014800 	.word	0x40014800
 8001374:	2000057c 	.word	0x2000057c
 8001378:	200005c8 	.word	0x200005c8
 800137c:	200004e4 	.word	0x200004e4
 8001380:	20000498 	.word	0x20000498
 8001384:	20000614 	.word	0x20000614
 8001388:	20000227 	.word	0x20000227
 800138c:	20000000 	.word	0x20000000
 8001390:	200001d8 	.word	0x200001d8
 8001394:	200001e0 	.word	0x200001e0
 8001398:	200001e8 	.word	0x200001e8
 800139c:	20000220 	.word	0x20000220
 80013a0:	20000224 	.word	0x20000224
 80013a4:	20000225 	.word	0x20000225
 80013a8:	20000226 	.word	0x20000226
 80013ac:	20000010 	.word	0x20000010

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	; 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	2238      	movs	r2, #56	; 0x38
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00a f820 	bl	800b404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013d6:	f003 f9c3 	bl	8004760 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e4:	2340      	movs	r3, #64	; 0x40
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80013f4:	230c      	movs	r3, #12
 80013f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80013fc:	2304      	movs	r3, #4
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fa5d 	bl	80048c8 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001414:	f000 fca6 	bl	8001d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800141c:	2301      	movs	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fd61 	bl	8004ef8 <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800143c:	f000 fc92 	bl	8001d64 <Error_Handler>
  }
}
 8001440:	bf00      	nop
 8001442:	3750      	adds	r7, #80	; 0x50
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_I2C3_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <MX_I2C3_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_I2C3_Init+0x74>)
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <MX_I2C3_Init+0x7c>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_I2C3_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_I2C3_Init+0x74>)
 8001460:	2201      	movs	r2, #1
 8001462:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_I2C3_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_I2C3_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_I2C3_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_I2C3_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_I2C3_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <MX_I2C3_Init+0x74>)
 8001484:	f001 fb12 	bl	8002aac <HAL_I2C_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800148e:	f000 fc69 	bl	8001d64 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <MX_I2C3_Init+0x74>)
 8001496:	f001 fb98 	bl	8002bca <HAL_I2CEx_ConfigAnalogFilter>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014a0:	f000 fc60 	bl	8001d64 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_I2C3_Init+0x74>)
 80014a8:	f001 fbda 	bl	8002c60 <HAL_I2CEx_ConfigDigitalFilter>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 fc57 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000044c 	.word	0x2000044c
 80014c0:	40007800 	.word	0x40007800
 80014c4:	00303d5b 	.word	0x00303d5b

080014c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b098      	sub	sp, #96	; 0x60
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2234      	movs	r2, #52	; 0x34
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f009 ff85 	bl	800b404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <MX_TIM1_Init+0x110>)
 80014fc:	4a37      	ldr	r2, [pc, #220]	; (80015dc <MX_TIM1_Init+0x114>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <MX_TIM1_Init+0x110>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <MX_TIM1_Init+0x110>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_TIM1_Init+0x110>)
 800150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <MX_TIM1_Init+0x110>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <MX_TIM1_Init+0x110>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_TIM1_Init+0x110>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001526:	482c      	ldr	r0, [pc, #176]	; (80015d8 <MX_TIM1_Init+0x110>)
 8001528:	f004 f97c 	bl	8005824 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001532:	f000 fc17 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001542:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001546:	4619      	mov	r1, r3
 8001548:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_TIM1_Init+0x110>)
 800154a:	f005 fbf5 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001554:	f000 fc06 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 800156c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001570:	2210      	movs	r2, #16
 8001572:	4619      	mov	r1, r3
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM1_Init+0x110>)
 8001576:	f004 fd61 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001580:	f000 fbf0 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_TIM1_Init+0x110>)
 80015c2:	f005 fc3b 	bl	8006e3c <HAL_TIMEx_ConfigBreakDeadTime>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80015cc:	f000 fbca 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3760      	adds	r7, #96	; 0x60
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000660 	.word	0x20000660
 80015dc:	40012c00 	.word	0x40012c00

080015e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001618:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <MX_TIM2_Init+0x114>)
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800163a:	482e      	ldr	r0, [pc, #184]	; (80016f4 <MX_TIM2_Init+0x114>)
 800163c:	f004 f830 	bl	80056a0 <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001646:	f000 fb8d 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001654:	4619      	mov	r1, r3
 8001656:	4827      	ldr	r0, [pc, #156]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001658:	f004 fe04 	bl	8006264 <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001662:	f000 fb7f 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001666:	4823      	ldr	r0, [pc, #140]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001668:	f004 f8dc 	bl	8005824 <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001672:	f000 fb77 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	481b      	ldr	r0, [pc, #108]	; (80016f4 <MX_TIM2_Init+0x114>)
 8001686:	f005 fb57 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001690:	f000 fb68 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001694:	2360      	movs	r3, #96	; 0x60
 8001696:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	4812      	ldr	r0, [pc, #72]	; (80016f4 <MX_TIM2_Init+0x114>)
 80016ac:	f004 fcc6 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016b6:	f000 fb55 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	2204      	movs	r2, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_TIM2_Init+0x114>)
 80016c2:	f004 fcbb 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80016cc:	f000 fb4a 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	2208      	movs	r2, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM2_Init+0x114>)
 80016d8:	f004 fcb0 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80016e2:	f000 fb3f 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM2_Init+0x114>)
 80016e8:	f000 fd36 	bl	8002158 <HAL_TIM_MspPostInit>

}
 80016ec:	bf00      	nop
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200006ac 	.word	0x200006ac

080016f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f009 fe7c 	bl	800b404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <MX_TIM3_Init+0xa4>)
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <MX_TIM3_Init+0xa8>)
 800171a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_TIM3_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <MX_TIM3_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_TIM3_Init+0xa4>)
 800172a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_TIM3_Init+0xa4>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_TIM3_Init+0xa4>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800173c:	2301      	movs	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001754:	2301      	movs	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_TIM3_Init+0xa4>)
 8001768:	f004 f9b4 	bl	8005ad4 <HAL_TIM_Encoder_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001772:	f000 faf7 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <MX_TIM3_Init+0xa4>)
 8001784:	f005 fad8 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800178e:	f000 fae9 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200005c8 	.word	0x200005c8
 80017a0:	40000400 	.word	0x40000400

080017a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f009 fe26 	bl	800b404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	463b      	mov	r3, r7
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_TIM4_Init+0xa4>)
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <MX_TIM4_Init+0xa8>)
 80017c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_TIM4_Init+0xa4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <MX_TIM4_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_TIM4_Init+0xa4>)
 80017d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_TIM4_Init+0xa4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MX_TIM4_Init+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017f0:	2301      	movs	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001800:	2301      	movs	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_TIM4_Init+0xa4>)
 8001814:	f004 f95e 	bl	8005ad4 <HAL_TIM_Encoder_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800181e:	f000 faa1 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800182a:	463b      	mov	r3, r7
 800182c:	4619      	mov	r1, r3
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_TIM4_Init+0xa4>)
 8001830:	f005 fa82 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800183a:	f000 fa93 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	; 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200004e4 	.word	0x200004e4
 800184c:	40000800 	.word	0x40000800

08001850 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001862:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <MX_TIM6_Init+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_TIM6_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001874:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001878:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_TIM6_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001882:	f003 ff0d 	bl	80056a0 <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800188c:	f000 fa6a 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_TIM6_Init+0x64>)
 800189e:	f005 fa4b 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018a8:	f000 fa5c 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000614 	.word	0x20000614
 80018b8:	40001000 	.word	0x40001000

080018bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f009 fd9a 	bl	800b404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <MX_TIM8_Init+0xac>)
 80018dc:	4a23      	ldr	r2, [pc, #140]	; (800196c <MX_TIM8_Init+0xb0>)
 80018de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_TIM8_Init+0xac>)
 80018e2:	2205      	movs	r2, #5
 80018e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <MX_TIM8_Init+0xac>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 64000;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MX_TIM8_Init+0xac>)
 80018ee:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80018f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM8_Init+0xac>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_TIM8_Init+0xac>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM8_Init+0xac>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800191e:	2301      	movs	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4619      	mov	r1, r3
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM8_Init+0xac>)
 8001932:	f004 f8cf 	bl	8005ad4 <HAL_TIM_Encoder_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800193c:	f000 fa12 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800194c:	463b      	mov	r3, r7
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_TIM8_Init+0xac>)
 8001952:	f005 f9f1 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800195c:	f000 fa02 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	3730      	adds	r7, #48	; 0x30
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000498 	.word	0x20000498
 800196c:	40013400 	.word	0x40013400

08001970 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b09c      	sub	sp, #112	; 0x70
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001990:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2234      	movs	r2, #52	; 0x34
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f009 fd2a 	bl	800b404 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019b0:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019b2:	4a40      	ldr	r2, [pc, #256]	; (8001ab4 <MX_TIM15_Init+0x144>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80019b6:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019dc:	4834      	ldr	r0, [pc, #208]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019de:	f003 fe5f 	bl	80056a0 <HAL_TIM_Base_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80019e8:	f000 f9bc 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019f6:	4619      	mov	r1, r3
 80019f8:	482d      	ldr	r0, [pc, #180]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019fa:	f004 fc33 	bl	8006264 <HAL_TIM_ConfigClockSource>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a04:	f000 f9ae 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a08:	4829      	ldr	r0, [pc, #164]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a0a:	f003 ff0b 	bl	8005824 <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a14:	f000 f9a6 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a24:	4619      	mov	r1, r3
 8001a26:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a28:	f005 f986 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a32:	f000 f997 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	; 0x60
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a42:	2300      	movs	r3, #0
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a5c:	f004 faee 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001a66:	f000 f97d 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a92:	f005 f9d3 	bl	8006e3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001a9c:	f000 f962 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001aa2:	f000 fb59 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001aa6:	bf00      	nop
 8001aa8:	3770      	adds	r7, #112	; 0x70
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000530 	.word	0x20000530
 8001ab4:	40014000 	.word	0x40014000

08001ab8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b094      	sub	sp, #80	; 0x50
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	2234      	movs	r2, #52	; 0x34
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f009 fc93 	bl	800b404 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001ae0:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <MX_TIM16_Init+0xf0>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001af2:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001af6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b0a:	4826      	ldr	r0, [pc, #152]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001b0c:	f003 fdc8 	bl	80056a0 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b16:	f000 f925 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b1a:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001b1c:	f003 fe82 	bl	8005824 <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b26:	f000 f91d 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	; 0x60
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b36:	2300      	movs	r3, #0
 8001b38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001b50:	f004 fa74 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001b5a:	f000 f903 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001b86:	f005 f959 	bl	8006e3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001b90:	f000 f8e8 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <MX_TIM16_Init+0xec>)
 8001b96:	f000 fadf 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001b9a:	bf00      	nop
 8001b9c:	3750      	adds	r7, #80	; 0x50
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200006f8 	.word	0x200006f8
 8001ba8:	40014400 	.word	0x40014400

08001bac <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b094      	sub	sp, #80	; 0x50
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2234      	movs	r2, #52	; 0x34
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f009 fc19 	bl	800b404 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001bd4:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <MX_TIM17_Init+0xf0>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001bda:	2204      	movs	r2, #4
 8001bdc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64000;
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001be6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001bea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bfe:	4826      	ldr	r0, [pc, #152]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001c00:	f003 fd4e 	bl	80056a0 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001c0a:	f000 f8ab 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001c0e:	4822      	ldr	r0, [pc, #136]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001c10:	f003 fe08 	bl	8005824 <HAL_TIM_PWM_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001c1a:	f000 f8a3 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1e:	2360      	movs	r3, #96	; 0x60
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	4815      	ldr	r0, [pc, #84]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001c44:	f004 f9fa 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001c4e:	f000 f889 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001c74:	463b      	mov	r3, r7
 8001c76:	4619      	mov	r1, r3
 8001c78:	4807      	ldr	r0, [pc, #28]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001c7a:	f005 f8df 	bl	8006e3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001c84:	f000 f86e 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <MX_TIM17_Init+0xec>)
 8001c8a:	f000 fa65 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001c8e:	bf00      	nop
 8001c90:	3750      	adds	r7, #80	; 0x50
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000057c 	.word	0x2000057c
 8001c9c:	40014800 	.word	0x40014800

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <MX_GPIO_Init+0xbc>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <MX_GPIO_Init+0xbc>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <MX_GPIO_Init+0xbc>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <MX_GPIO_Init+0xbc>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <MX_GPIO_Init+0xbc>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <MX_GPIO_Init+0xbc>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f240 410a 	movw	r1, #1034	; 0x40a
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf0:	f000 fec4 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_OFF_GPIO_Port, DRV_OFF_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <MX_GPIO_Init+0xc0>)
 8001cfa:	f000 febf 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M3_DIR_Pin|M2_DIR_Pin;
 8001cfe:	f240 430a 	movw	r3, #1034	; 0x40a
 8001d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f000 fd15 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f000 fd08 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_OFF_Pin */
  GPIO_InitStruct.Pin = DRV_OFF_Pin;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_OFF_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_GPIO_Init+0xc0>)
 8001d50:	f000 fcfa 	bl	8002748 <HAL_GPIO_Init>

}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000400 	.word	0x48000400

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_MspInit+0x44>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_MspInit+0x44>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6613      	str	r3, [r2, #96]	; 0x60
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_MspInit+0x44>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_MspInit+0x44>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x44>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x44>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001da6:	f002 fd7f 	bl	80048a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09c      	sub	sp, #112	; 0x70
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	2244      	movs	r2, #68	; 0x44
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f009 fb13 	bl	800b404 <memset>
  if(hi2c->Instance==I2C3)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2e      	ldr	r2, [pc, #184]	; (8001e9c <HAL_I2C_MspInit+0xe4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d154      	bne.n	8001e92 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df2:	f107 0318 	add.w	r3, r7, #24
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fa62 	bl	80052c0 <HAL_RCCEx_PeriphCLKConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e02:	f7ff ffaf 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3c:	2312      	movs	r3, #18
 8001e3e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e56:	f000 fc77 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e72:	4619      	mov	r1, r3
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <HAL_I2C_MspInit+0xec>)
 8001e76:	f000 fc67 	bl	8002748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_I2C_MspInit+0xe8>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3770      	adds	r7, #112	; 0x70
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40007800 	.word	0x40007800
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f12:	e04e      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_TIM_Base_MspInit+0xd8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d114      	bne.n	8001f48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2036      	movs	r0, #54	; 0x36
 8001f3c:	f000 fbcf 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f40:	2036      	movs	r0, #54	; 0x36
 8001f42:	f000 fbe6 	bl	8002712 <HAL_NVIC_EnableIRQ>
}
 8001f46:	e034      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_TIM_Base_MspInit+0xdc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10c      	bne.n	8001f6c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
}
 8001f6a:	e022      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10c      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	6613      	str	r3, [r2, #96]	; 0x60
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
}
 8001f8e:	e010      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <HAL_TIM_Base_MspInit+0xe4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10b      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_TIM_Base_MspInit+0xd4>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
}
 8001fb2:	bf00      	nop
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40001000 	.word	0x40001000
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40014400 	.word	0x40014400
 8001fcc:	40014800 	.word	0x40014800

08001fd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a55      	ldr	r2, [pc, #340]	; (8002144 <HAL_TIM_Encoder_MspInit+0x174>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d129      	bne.n	8002046 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff2:	4b55      	ldr	r3, [pc, #340]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH2_ENCB_Pin|TIM3_CH1_ENCA_Pin;
 8002022:	2350      	movs	r3, #80	; 0x50
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002032:	2302      	movs	r3, #2
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002040:	f000 fb82 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002044:	e079      	b.n	800213a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a40      	ldr	r2, [pc, #256]	; (800214c <HAL_TIM_Encoder_MspInit+0x17c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d128      	bne.n	80020a2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a3c      	ldr	r2, [pc, #240]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	4a36      	ldr	r2, [pc, #216]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCA_Pin|TIM4_CH2_ENCB_Pin;
 8002080:	23c0      	movs	r3, #192	; 0xc0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002090:	2302      	movs	r3, #2
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	482d      	ldr	r0, [pc, #180]	; (8002150 <HAL_TIM_Encoder_MspInit+0x180>)
 800209c:	f000 fb54 	bl	8002748 <HAL_GPIO_Init>
}
 80020a0:	e04b      	b.n	800213a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <HAL_TIM_Encoder_MspInit+0x184>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d146      	bne.n	800213a <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b0:	4a25      	ldr	r2, [pc, #148]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020b6:	6613      	str	r3, [r2, #96]	; 0x60
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_TIM_Encoder_MspInit+0x178>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCA_Pin;
 80020f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002106:	2302      	movs	r3, #2
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_ENCA_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f000 fb18 	bl	8002748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8_CH2_ENCB_Pin;
 8002118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800212a:	230a      	movs	r3, #10
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH2_ENCB_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002132:	4619      	mov	r1, r3
 8002134:	4806      	ldr	r0, [pc, #24]	; (8002150 <HAL_TIM_Encoder_MspInit+0x180>)
 8002136:	f000 fb07 	bl	8002748 <HAL_GPIO_Init>
}
 800213a:	bf00      	nop
 800213c:	3738      	adds	r7, #56	; 0x38
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40000400 	.word	0x40000400
 8002148:	40021000 	.word	0x40021000
 800214c:	40000800 	.word	0x40000800
 8002150:	48000400 	.word	0x48000400
 8002154:	40013400 	.word	0x40013400

08002158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d14b      	bne.n	8002212 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a5a      	ldr	r2, [pc, #360]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_VH1_M1_PWM_Pin;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_VH1_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c8:	f000 fabe 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_M2_PWM_Pin;
 80021cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80021de:	230a      	movs	r3, #10
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4619      	mov	r1, r3
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ec:	f000 faac 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSLEEP_PWM_Pin;
 80021f0:	2308      	movs	r3, #8
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(NSLEEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	4619      	mov	r1, r3
 800220a:	4838      	ldr	r0, [pc, #224]	; (80022ec <HAL_TIM_MspPostInit+0x194>)
 800220c:	f000 fa9c 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002210:	e066      	b.n	80022e0 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM15)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a36      	ldr	r2, [pc, #216]	; (80022f0 <HAL_TIM_MspPostInit+0x198>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d11d      	bne.n	8002258 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM_15_CH1_M3_PWM_Pin;
 8002234:	2304      	movs	r3, #4
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002244:	2309      	movs	r3, #9
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_15_CH1_M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f000 fa79 	bl	8002748 <HAL_GPIO_Init>
}
 8002256:	e043      	b.n	80022e0 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM16)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_TIM_MspPostInit+0x19c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d11c      	bne.n	800229c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_THW_MOTOR_Pin;
 800227a:	2310      	movs	r3, #16
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800228a:	2301      	movs	r3, #1
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM16_CH1_THW_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	4815      	ldr	r0, [pc, #84]	; (80022ec <HAL_TIM_MspPostInit+0x194>)
 8002296:	f000 fa57 	bl	8002748 <HAL_GPIO_Init>
}
 800229a:	e021      	b.n	80022e0 <HAL_TIM_MspPostInit+0x188>
  else if(htim->Instance==TIM17)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_TIM_MspPostInit+0x1a0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d11c      	bne.n	80022e0 <HAL_TIM_MspPostInit+0x188>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_TIM_MspPostInit+0x190>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_THW_SERVO_Pin;
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80022ce:	2301      	movs	r3, #1
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM17_CH1_THW_SERVO_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022dc:	f000 fa34 	bl	8002748 <HAL_GPIO_Init>
}
 80022e0:	bf00      	nop
 80022e2:	3730      	adds	r7, #48	; 0x30
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	48000400 	.word	0x48000400
 80022f0:	40014000 	.word	0x40014000
 80022f4:	40014400 	.word	0x40014400
 80022f8:	40014800 	.word	0x40014800

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <NMI_Handler+0x4>

08002302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <MemManage_Handler+0x4>

0800230e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <BusFault_Handler+0x4>

08002314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <UsageFault_Handler+0x4>

0800231a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002348:	f000 f8ae 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <USB_HP_IRQHandler+0x10>)
 8002356:	f000 fdd6 	bl	8002f06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200013e8 	.word	0x200013e8

08002364 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <USB_LP_IRQHandler+0x10>)
 800236a:	f000 fdcc 	bl	8002f06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200013e8 	.word	0x200013e8

08002378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM6_DAC_IRQHandler+0x10>)
 800237e:	f003 fcdd 	bl	8005d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000614 	.word	0x20000614

0800238c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopForever+0x6>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopForever+0xe>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopForever+0x16>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023da:	f7ff ffd7 	bl	800238c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f008 ffdf 	bl	800b3a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023e2:	f7fe fe99 	bl	8001118 <main>

080023e6 <LoopForever>:

LoopForever:
    b LoopForever
 80023e6:	e7fe      	b.n	80023e6 <LoopForever>
  ldr   r0, =_estack
 80023e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80023f4:	0800b48c 	.word	0x0800b48c
  ldr r2, =_sbss
 80023f8:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80023fc:	200016dc 	.word	0x200016dc

08002400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC1_2_IRQHandler>

08002402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f000 f95b 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002412:	200f      	movs	r0, #15
 8002414:	f000 f80e 	bl	8002434 <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	e001      	b.n	8002428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002424:	f7ff fca4 	bl	8001d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002428:	79fb      	ldrb	r3, [r7, #7]

}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_InitTick+0x68>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d022      	beq.n	800248e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_InitTick+0x6c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_InitTick+0x68>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f966 	bl	800272e <HAL_SYSTICK_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10f      	bne.n	8002488 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d809      	bhi.n	8002482 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246e:	2200      	movs	r2, #0
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002476:	f000 f932 	bl	80026de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <HAL_InitTick+0x70>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e007      	b.n	8002492 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e004      	b.n	8002492 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e001      	b.n	8002492 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000024 	.word	0x20000024
 80024a0:	2000001c 	.word	0x2000001c
 80024a4:	20000020 	.word	0x20000020

080024a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_IncTick+0x1c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x20>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <HAL_IncTick+0x1c>)
 80024b8:	6013      	str	r3, [r2, #0]
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	20000744 	.word	0x20000744
 80024c8:	20000024 	.word	0x20000024

080024cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_GetTick+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000744 	.word	0x20000744

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff ffee 	bl	80024cc <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fc:	d004      	beq.n	8002508 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_Delay+0x40>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002508:	bf00      	nop
 800250a:	f7ff ffdf 	bl	80024cc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	429a      	cmp	r2, r3
 8002518:	d8f7      	bhi.n	800250a <HAL_Delay+0x26>
  {
  }
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000024 	.word	0x20000024

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff40 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff90 	bl	800261c <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5f 	bl	80025c8 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff33 	bl	800258c <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa4 	bl	8002684 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002756:	e15a      	b.n	8002a0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 814c 	beq.w	8002a08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d005      	beq.n	8002788 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002784:	2b02      	cmp	r3, #2
 8002786:	d130      	bne.n	80027ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027be:	2201      	movs	r2, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 0201 	and.w	r2, r3, #1
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d017      	beq.n	8002826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d123      	bne.n	800287a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	6939      	ldr	r1, [r7, #16]
 8002876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0203 	and.w	r2, r3, #3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80a6 	beq.w	8002a08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028bc:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	4a5a      	ldr	r2, [pc, #360]	; (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6613      	str	r3, [r2, #96]	; 0x60
 80028c8:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d4:	4a56      	ldr	r2, [pc, #344]	; (8002a30 <HAL_GPIO_Init+0x2e8>)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028fe:	d01f      	beq.n	8002940 <HAL_GPIO_Init+0x1f8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <HAL_GPIO_Init+0x2ec>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d019      	beq.n	800293c <HAL_GPIO_Init+0x1f4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <HAL_GPIO_Init+0x2f0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_GPIO_Init+0x1f0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a4a      	ldr	r2, [pc, #296]	; (8002a3c <HAL_GPIO_Init+0x2f4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_Init+0x1ec>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a49      	ldr	r2, [pc, #292]	; (8002a40 <HAL_GPIO_Init+0x2f8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x1e8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a48      	ldr	r2, [pc, #288]	; (8002a44 <HAL_GPIO_Init+0x2fc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_Init+0x1e4>
 8002928:	2305      	movs	r3, #5
 800292a:	e00a      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 800292c:	2306      	movs	r3, #6
 800292e:	e008      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002930:	2304      	movs	r3, #4
 8002932:	e006      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002934:	2303      	movs	r3, #3
 8002936:	e004      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002940:	2300      	movs	r3, #0
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002952:	4937      	ldr	r1, [pc, #220]	; (8002a30 <HAL_GPIO_Init+0x2e8>)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_GPIO_Init+0x300>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002984:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <HAL_GPIO_Init+0x300>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_GPIO_Init+0x300>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ae:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029d8:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a02:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_GPIO_Init+0x300>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f ae9d 	bne.w	8002758 <HAL_GPIO_Init+0x10>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010000 	.word	0x40010000
 8002a34:	48000400 	.word	0x48000400
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	48000c00 	.word	0x48000c00
 8002a40:	48001000 	.word	0x48001000
 8002a44:	48001400 	.word	0x48001400
 8002a48:	40010400 	.word	0x40010400

08002a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e001      	b.n	8002a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e081      	b.n	8002bc2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff f970 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002afc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	e006      	b.n	8002b34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d104      	bne.n	8002b46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69d9      	ldr	r1, [r3, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d138      	bne.n	8002c52 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e032      	b.n	8002c54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d139      	bne.n	8002cea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e033      	b.n	8002cec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cb2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	b08b      	sub	sp, #44	; 0x2c
 8002cfc:	af06      	add	r7, sp, #24
 8002cfe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0d7      	b.n	8002eba <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f008 f830 	bl	800ad84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2203      	movs	r2, #3
 8002d28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 f980 	bl	8007036 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e04c      	b.n	8002dd6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	b298      	uxth	r0, r3
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	3336      	adds	r3, #54	; 0x36
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3303      	adds	r3, #3
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3338      	adds	r3, #56	; 0x38
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	333c      	adds	r3, #60	; 0x3c
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	3340      	adds	r3, #64	; 0x40
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3ad      	bcc.n	8002d3c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e044      	b.n	8002e70 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3b5      	bcc.n	8002de6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	687e      	ldr	r6, [r7, #4]
 8002e82:	466d      	mov	r5, sp
 8002e84:	f106 0410 	add.w	r4, r6, #16
 8002e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	602b      	str	r3, [r5, #0]
 8002e90:	1d33      	adds	r3, r6, #4
 8002e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f004 f8e9 	bl	800706c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f001 fc29 	bl	800470a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_PCD_Start+0x16>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e012      	b.n	8002efe <HAL_PCD_Start+0x3c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 f88f 	bl	8007008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f006 f844 	bl	8008f7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f006 f849 	bl	8008faa <USB_ReadInterrupts>
 8002f18:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fb26 	bl	8003576 <PCD_EP_ISR_Handler>

    return;
 8002f2a:	e110      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d013      	beq.n	8002f5e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f007 ffb1 	bl	800aeb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f54:	2100      	movs	r1, #0
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8fc 	bl	8003154 <HAL_PCD_SetAddress>

    return;
 8002f5c:	e0f7      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00c      	beq.n	8002f82 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f80:	e0e5      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9e:	b292      	uxth	r2, r2
 8002fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fa4:	e0d3      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d034      	beq.n	800301a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0208 	bic.w	r2, r2, #8
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f008 f953 	bl	800b2a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f007 ff94 	bl	800af28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003012:	b292      	uxth	r2, r2
 8003014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003018:	e099      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003020:	2b00      	cmp	r3, #0
 8003022:	d027      	beq.n	8003074 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800302c:	b29a      	uxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	b292      	uxth	r2, r2
 8003038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003044:	b29a      	uxth	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304e:	b292      	uxth	r2, r2
 8003050:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0204 	orr.w	r2, r2, #4
 8003066:	b292      	uxth	r2, r2
 8003068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f007 ff41 	bl	800aef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003072:	e06c      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d040      	beq.n	8003100 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003090:	b292      	uxth	r2, r2
 8003092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d12b      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0204 	orr.w	r2, r2, #4
 80030b2:	b292      	uxth	r2, r2
 80030b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0208 	orr.w	r2, r2, #8
 80030ca:	b292      	uxth	r2, r2
 80030cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80030ee:	2101      	movs	r1, #1
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f008 f8d5 	bl	800b2a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80030f6:	e02a      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f007 fefb 	bl	800aef4 <HAL_PCD_SuspendCallback>
    return;
 80030fe:	e026      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00f      	beq.n	800312a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800311c:	b292      	uxth	r2, r2
 800311e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f007 feb9 	bl	800ae9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003128:	e011      	b.n	800314e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003146:	b292      	uxth	r2, r2
 8003148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800314c:	bf00      	nop
  }
}
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_PCD_SetAddress+0x1a>
 800316a:	2302      	movs	r3, #2
 800316c:	e013      	b.n	8003196 <HAL_PCD_SetAddress+0x42>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f005 fee4 	bl	8008f54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	4608      	mov	r0, r1
 80031a8:	4611      	mov	r1, r2
 80031aa:	461a      	mov	r2, r3
 80031ac:	4603      	mov	r3, r0
 80031ae:	70fb      	strb	r3, [r7, #3]
 80031b0:	460b      	mov	r3, r1
 80031b2:	803b      	strh	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da0e      	bge.n	80031e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	705a      	strb	r2, [r3, #1]
 80031e0:	e00e      	b.n	8003200 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 0207 	and.w	r2, r3, #7
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800320c:	883a      	ldrh	r2, [r7, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	78ba      	ldrb	r2, [r7, #2]
 8003216:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	785b      	ldrb	r3, [r3, #1]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800322a:	78bb      	ldrb	r3, [r7, #2]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d102      	bne.n	8003236 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_PCD_EP_Open+0xa6>
 8003240:	2302      	movs	r3, #2
 8003242:	e00e      	b.n	8003262 <HAL_PCD_EP_Open+0xc4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68f9      	ldr	r1, [r7, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	f003 ff2c 	bl	80070b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003260:	7afb      	ldrb	r3, [r7, #11]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327a:	2b00      	cmp	r3, #0
 800327c:	da0e      	bge.n	800329c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	705a      	strb	r2, [r3, #1]
 800329a:	e00e      	b.n	80032ba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 0207 	and.w	r2, r3, #7
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_EP_Close+0x6a>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e00e      	b.n	80032f2 <HAL_PCD_EP_Close+0x88>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fa78 	bl	80077d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	460b      	mov	r3, r1
 8003308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800330a:	7afb      	ldrb	r3, [r7, #11]
 800330c:	f003 0207 	and.w	r2, r3, #7
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2200      	movs	r2, #0
 8003332:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2200      	movs	r2, #0
 8003338:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	b2da      	uxtb	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6979      	ldr	r1, [r7, #20]
 8003356:	4618      	mov	r0, r3
 8003358:	f004 fc2b 	bl	8007bb2 <USB_EPStartXfer>
 800335c:	e005      	b.n	800336a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6979      	ldr	r1, [r7, #20]
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fc24 	bl	8007bb2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 0207 	and.w	r2, r3, #7
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	460b      	mov	r3, r1
 80033b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b4:	7afb      	ldrb	r3, [r7, #11]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2201      	movs	r2, #1
 80033ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f0:	7afb      	ldrb	r3, [r7, #11]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6979      	ldr	r1, [r7, #20]
 800340c:	4618      	mov	r0, r3
 800340e:	f004 fbd0 	bl	8007bb2 <USB_EPStartXfer>
 8003412:	e005      	b.n	8003420 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	4618      	mov	r0, r3
 800341c:	f004 fbc9 	bl	8007bb2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 0207 	and.w	r2, r3, #7
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d901      	bls.n	8003448 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e03e      	b.n	80034c6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800344c:	2b00      	cmp	r3, #0
 800344e:	da0e      	bge.n	800346e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	705a      	strb	r2, [r3, #1]
 800346c:	e00c      	b.n	8003488 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_PCD_EP_SetStall+0x7e>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e00e      	b.n	80034c6 <HAL_PCD_EP_SetStall+0x9c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f005 fc4d 	bl	8008d56 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d901      	bls.n	80034ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e040      	b.n	800356e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da0e      	bge.n	8003512 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	705a      	strb	r2, [r3, #1]
 8003510:	e00e      	b.n	8003530 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 0207 	and.w	r2, r3, #7
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_PCD_EP_ClrStall+0x82>
 800354c:	2302      	movs	r3, #2
 800354e:	e00e      	b.n	800356e <HAL_PCD_EP_ClrStall+0xa0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	4618      	mov	r0, r3
 8003560:	f005 fc4a 	bl	8008df8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b096      	sub	sp, #88	; 0x58
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800357e:	e39c      	b.n	8003cba <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003588:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800358c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800359a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 815e 	bne.w	8003860 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d150      	bne.n	8003652 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c0:	81fb      	strh	r3, [r7, #14]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	89fb      	ldrh	r3, [r7, #14]
 80035c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3328      	adds	r3, #40	; 0x28
 80035d8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003600:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	441a      	add	r2, r3
 800360c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003610:	2100      	movs	r1, #0
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f007 fc27 	bl	800ae66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 834a 	beq.w	8003cba <PCD_EP_ISR_Handler+0x744>
 8003626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 8345 	bne.w	8003cba <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800363c:	b2da      	uxtb	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b292      	uxth	r2, r2
 8003644:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003650:	e333      	b.n	8003cba <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003658:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003664:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366c:	2b00      	cmp	r3, #0
 800366e:	d032      	beq.n	80036d6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003678:	b29b      	uxth	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	4413      	add	r3, r2
 800368a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003696:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f005 fccf 	bl	800904e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036bc:	4013      	ands	r3, r2
 80036be:	823b      	strh	r3, [r7, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	8a3a      	ldrh	r2, [r7, #16]
 80036c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ca:	b292      	uxth	r2, r2
 80036cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f007 fb9c 	bl	800ae0c <HAL_PCD_SetupStageCallback>
 80036d4:	e2f1      	b.n	8003cba <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036d6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f280 82ed 	bge.w	8003cba <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036ec:	4013      	ands	r3, r2
 80036ee:	83fb      	strh	r3, [r7, #30]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	8bfa      	ldrh	r2, [r7, #30]
 80036f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036fa:	b292      	uxth	r2, r2
 80036fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	4413      	add	r3, r2
 8003718:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003724:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d019      	beq.n	8003762 <PCD_EP_ISR_Handler+0x1ec>
 800372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d015      	beq.n	8003762 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	6959      	ldr	r1, [r3, #20]
 800373e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003740:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003744:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003746:	b29b      	uxth	r3, r3
 8003748:	f005 fc81 	bl	800904e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	441a      	add	r2, r3
 8003756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003758:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800375a:	2100      	movs	r1, #0
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f007 fb67 	bl	800ae30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 82a3 	bne.w	8003cba <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003782:	b29b      	uxth	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	4413      	add	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b3e      	cmp	r3, #62	; 0x3e
 800379a:	d918      	bls.n	80037ce <PCD_EP_ISR_Handler+0x258>
 800379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <PCD_EP_ISR_Handler+0x240>
 80037b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b2:	3b01      	subs	r3, #1
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	029b      	lsls	r3, r3, #10
 80037bc:	b29b      	uxth	r3, r3
 80037be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	801a      	strh	r2, [r3, #0]
 80037cc:	e029      	b.n	8003822 <PCD_EP_ISR_Handler+0x2ac>
 80037ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d112      	bne.n	80037fc <PCD_EP_ISR_Handler+0x286>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	801a      	strh	r2, [r3, #0]
 80037fa:	e012      	b.n	8003822 <PCD_EP_ISR_Handler+0x2ac>
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	647b      	str	r3, [r7, #68]	; 0x44
 8003804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <PCD_EP_ISR_Handler+0x2a0>
 8003810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003812:	3301      	adds	r3, #1
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
 8003816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003818:	b29b      	uxth	r3, r3
 800381a:	029b      	lsls	r3, r3, #10
 800381c:	b29a      	uxth	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	827b      	strh	r3, [r7, #18]
 8003834:	8a7b      	ldrh	r3, [r7, #18]
 8003836:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800383a:	827b      	strh	r3, [r7, #18]
 800383c:	8a7b      	ldrh	r3, [r7, #18]
 800383e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003842:	827b      	strh	r3, [r7, #18]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	8a7b      	ldrh	r3, [r7, #18]
 800384a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800384e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385a:	b29b      	uxth	r3, r3
 800385c:	8013      	strh	r3, [r2, #0]
 800385e:	e22c      	b.n	8003cba <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003874:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003878:	2b00      	cmp	r3, #0
 800387a:	f280 80f6 	bge.w	8003a6a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29a      	uxth	r2, r3
 8003890:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003894:	4013      	ands	r3, r2
 8003896:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80038ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038b0:	b292      	uxth	r2, r2
 80038b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038b4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038cc:	7b1b      	ldrb	r3, [r3, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d123      	bne.n	800391a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80038fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 808e 	beq.w	8003a20 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	6959      	ldr	r1, [r3, #20]
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390e:	88da      	ldrh	r2, [r3, #6]
 8003910:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003914:	f005 fb9b 	bl	800904e <USB_ReadPMA>
 8003918:	e082      	b.n	8003a20 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800391a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391c:	78db      	ldrb	r3, [r3, #3]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d10a      	bne.n	8003938 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003922:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003926:	461a      	mov	r2, r3
 8003928:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9d3 	bl	8003cd6 <HAL_PCD_EP_DB_Receive>
 8003930:	4603      	mov	r3, r0
 8003932:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003936:	e073      	b.n	8003a20 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	441a      	add	r2, r3
 8003964:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800396c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003978:	b29b      	uxth	r3, r3
 800397a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d022      	beq.n	80039dc <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399e:	b29b      	uxth	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80039be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02c      	beq.n	8003a20 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	6959      	ldr	r1, [r3, #20]
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	891a      	ldrh	r2, [r3, #8]
 80039d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039d6:	f005 fb3a 	bl	800904e <USB_ReadPMA>
 80039da:	e021      	b.n	8003a20 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	4413      	add	r3, r2
 80039f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a00:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003a04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a12:	6959      	ldr	r1, [r3, #20]
 8003a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a16:	895a      	ldrh	r2, [r3, #10]
 8003a18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a1c:	f005 fb17 	bl	800904e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a28:	441a      	add	r2, r3
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a36:	441a      	add	r2, r3
 8003a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <PCD_EP_ISR_Handler+0x4da>
 8003a44:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d206      	bcs.n	8003a5e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f007 f9ea 	bl	800ae30 <HAL_PCD_DataOutStageCallback>
 8003a5c:	e005      	b.n	8003a6a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a64:	4618      	mov	r0, r3
 8003a66:	f004 f8a4 	bl	8007bb2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a6a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8121 	beq.w	8003cba <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a78:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aca:	78db      	ldrb	r3, [r3, #3]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	f000 80a2 	beq.w	8003c16 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ada:	7b1b      	ldrb	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8093 	beq.w	8003c08 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ae2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d046      	beq.n	8003b7c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d126      	bne.n	8003b44 <PCD_EP_ISR_Handler+0x5ce>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	4413      	add	r3, r2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	00da      	lsls	r2, r3, #3
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	4413      	add	r3, r2
 8003b18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	e061      	b.n	8003c08 <PCD_EP_ISR_Handler+0x692>
 8003b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d15d      	bne.n	8003c08 <PCD_EP_ISR_Handler+0x692>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	4413      	add	r3, r2
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	00da      	lsls	r2, r3, #3
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	2200      	movs	r2, #0
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e045      	b.n	8003c08 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d126      	bne.n	8003bd8 <PCD_EP_ISR_Handler+0x662>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	4413      	add	r3, r2
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	00da      	lsls	r2, r3, #3
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003baa:	4413      	add	r3, r2
 8003bac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	e017      	b.n	8003c08 <PCD_EP_ISR_Handler+0x692>
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d113      	bne.n	8003c08 <PCD_EP_ISR_Handler+0x692>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	4413      	add	r3, r2
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	00da      	lsls	r2, r3, #3
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2200      	movs	r2, #0
 8003c06:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f007 f929 	bl	800ae66 <HAL_PCD_DataInStageCallback>
 8003c14:	e051      	b.n	8003cba <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c16:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d144      	bne.n	8003cac <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d907      	bls.n	8003c66 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c62:	619a      	str	r2, [r3, #24]
 8003c64:	e002      	b.n	8003c6c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f007 f8f3 	bl	800ae66 <HAL_PCD_DataInStageCallback>
 8003c80:	e01b      	b.n	8003cba <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c8a:	441a      	add	r2, r3
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c98:	441a      	add	r2, r3
 8003c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 ff84 	bl	8007bb2 <USB_EPStartXfer>
 8003caa:	e006      	b.n	8003cba <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003cac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f917 	bl	8003ee8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f6ff ac5a 	blt.w	8003580 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3758      	adds	r7, #88	; 0x58
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b088      	sub	sp, #32
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d07c      	beq.n	8003de8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	8b7b      	ldrh	r3, [r7, #26]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d306      	bcc.n	8003d2c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	8b7b      	ldrh	r3, [r7, #26]
 8003d24:	1ad2      	subs	r2, r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	619a      	str	r2, [r3, #24]
 8003d2a:	e002      	b.n	8003d32 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d123      	bne.n	8003d82 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	833b      	strh	r3, [r7, #24]
 8003d56:	8b3b      	ldrh	r3, [r7, #24]
 8003d58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d5c:	833b      	strh	r3, [r7, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	441a      	add	r2, r3
 8003d6c:	8b3b      	ldrh	r3, [r7, #24]
 8003d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01f      	beq.n	8003dcc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	82fb      	strh	r3, [r7, #22]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	8afb      	ldrh	r3, [r7, #22]
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003dcc:	8b7b      	ldrh	r3, [r7, #26]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8085 	beq.w	8003ede <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6959      	ldr	r1, [r3, #20]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	891a      	ldrh	r2, [r3, #8]
 8003de0:	8b7b      	ldrh	r3, [r7, #26]
 8003de2:	f005 f934 	bl	800904e <USB_ReadPMA>
 8003de6:	e07a      	b.n	8003ede <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	4413      	add	r3, r2
 8003e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	8b7b      	ldrh	r3, [r7, #26]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d306      	bcc.n	8003e26 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	8b7b      	ldrh	r3, [r7, #26]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	619a      	str	r2, [r3, #24]
 8003e24:	e002      	b.n	8003e2c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d123      	bne.n	8003e7c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	83fb      	strh	r3, [r7, #30]
 8003e50:	8bfb      	ldrh	r3, [r7, #30]
 8003e52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e56:	83fb      	strh	r3, [r7, #30]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	8bfb      	ldrh	r3, [r7, #30]
 8003e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11f      	bne.n	8003ec6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	83bb      	strh	r3, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	441a      	add	r2, r3
 8003eb0:	8bbb      	ldrh	r3, [r7, #28]
 8003eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ec6:	8b7b      	ldrh	r3, [r7, #26]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6959      	ldr	r1, [r3, #20]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	895a      	ldrh	r2, [r3, #10]
 8003ed8:	8b7b      	ldrh	r3, [r7, #26]
 8003eda:	f005 f8b8 	bl	800904e <USB_ReadPMA>
    }
  }

  return count;
 8003ede:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0a2      	sub	sp, #136	; 0x88
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 81c5 	beq.w	800428c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d907      	bls.n	8003f46 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	619a      	str	r2, [r3, #24]
 8003f44:	e002      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 80b9 	bne.w	80040c8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d126      	bne.n	8003fac <HAL_PCD_EP_DB_Transmit+0xc4>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	4413      	add	r3, r2
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	00da      	lsls	r2, r3, #3
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	4413      	add	r3, r2
 8003f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	e01a      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d116      	bne.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	4413      	add	r3, r2
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	00da      	lsls	r2, r3, #3
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2200      	movs	r2, #0
 8003fe0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d126      	bne.n	800403e <HAL_PCD_EP_DB_Transmit+0x156>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4413      	add	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	00da      	lsls	r2, r3, #3
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4413      	add	r3, r2
 8004012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004022:	b29a      	uxth	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	801a      	strh	r2, [r3, #0]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004036:	b29a      	uxth	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	e017      	b.n	800406e <HAL_PCD_EP_DB_Transmit+0x186>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d113      	bne.n	800406e <HAL_PCD_EP_DB_Transmit+0x186>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	4413      	add	r3, r2
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	00da      	lsls	r2, r3, #3
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	4413      	add	r3, r2
 8004062:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2200      	movs	r2, #0
 800406c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f006 fef6 	bl	800ae66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 82d2 	beq.w	800462a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	827b      	strh	r3, [r7, #18]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	8a7b      	ldrh	r3, [r7, #18]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
 80040c6:	e2b0      	b.n	800462a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d021      	beq.n	8004116 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800410e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004112:	b29b      	uxth	r3, r3
 8004114:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800411c:	2b01      	cmp	r3, #1
 800411e:	f040 8284 	bne.w	800462a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800412a:	441a      	add	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004138:	441a      	add	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d309      	bcc.n	800415e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	6a1a      	ldr	r2, [r3, #32]
 8004154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004156:	1ad2      	subs	r2, r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	621a      	str	r2, [r3, #32]
 800415c:	e015      	b.n	800418a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004166:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004174:	e009      	b.n	800418a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d155      	bne.n	800423e <HAL_PCD_EP_DB_Transmit+0x356>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	63bb      	str	r3, [r7, #56]	; 0x38
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	4413      	add	r3, r2
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	00da      	lsls	r2, r3, #3
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	4413      	add	r3, r2
 80041b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041bc:	2b3e      	cmp	r3, #62	; 0x3e
 80041be:	d916      	bls.n	80041ee <HAL_PCD_EP_DB_Transmit+0x306>
 80041c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	3b01      	subs	r3, #1
 80041d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d8:	b29b      	uxth	r3, r3
 80041da:	029b      	lsls	r3, r3, #10
 80041dc:	b29b      	uxth	r3, r3
 80041de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	e043      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0x38e>
 80041ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d112      	bne.n	800421a <HAL_PCD_EP_DB_Transmit+0x332>
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041fe:	b29a      	uxth	r2, r3
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004212:	b29a      	uxth	r2, r3
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	e02d      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0x38e>
 800421a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_PCD_EP_DB_Transmit+0x348>
 800422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422c:	3301      	adds	r3, #1
 800422e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004232:	b29b      	uxth	r3, r3
 8004234:	029b      	lsls	r3, r3, #10
 8004236:	b29a      	uxth	r2, r3
 8004238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	e01b      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0x38e>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d117      	bne.n	8004276 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	643b      	str	r3, [r7, #64]	; 0x40
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004254:	b29b      	uxth	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425a:	4413      	add	r3, r2
 800425c:	643b      	str	r3, [r7, #64]	; 0x40
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	00da      	lsls	r2, r3, #3
 8004264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004266:	4413      	add	r3, r2
 8004268:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800426c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004270:	b29a      	uxth	r2, r3
 8004272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004274:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6959      	ldr	r1, [r3, #20]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	891a      	ldrh	r2, [r3, #8]
 8004282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	f004 fea0 	bl	8008fca <USB_WritePMA>
 800428a:	e1ce      	b.n	800462a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042bc:	429a      	cmp	r2, r3
 80042be:	d307      	bcc.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042c8:	1ad2      	subs	r2, r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	619a      	str	r2, [r3, #24]
 80042ce:	e002      	b.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f040 80c4 	bne.w	8004468 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d126      	bne.n	8004336 <HAL_PCD_EP_DB_Transmit+0x44e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042fc:	4413      	add	r3, r2
 80042fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	00da      	lsls	r2, r3, #3
 8004306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004308:	4413      	add	r3, r2
 800430a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800430e:	667b      	str	r3, [r7, #100]	; 0x64
 8004310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800431a:	b29a      	uxth	r2, r3
 800431c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432e:	b29a      	uxth	r2, r3
 8004330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	e01a      	b.n	800436c <HAL_PCD_EP_DB_Transmit+0x484>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d116      	bne.n	800436c <HAL_PCD_EP_DB_Transmit+0x484>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	673b      	str	r3, [r7, #112]	; 0x70
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004352:	4413      	add	r3, r2
 8004354:	673b      	str	r3, [r7, #112]	; 0x70
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800435e:	4413      	add	r3, r2
 8004360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004364:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004368:	2200      	movs	r2, #0
 800436a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d12f      	bne.n	80043da <HAL_PCD_EP_DB_Transmit+0x4f2>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438a:	b29b      	uxth	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004392:	4413      	add	r3, r2
 8004394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	00da      	lsls	r2, r3, #3
 800439e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043a2:	4413      	add	r3, r2
 80043a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043be:	801a      	strh	r2, [r3, #0]
 80043c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	e017      	b.n	800440a <HAL_PCD_EP_DB_Transmit+0x522>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d113      	bne.n	800440a <HAL_PCD_EP_DB_Transmit+0x522>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043f0:	4413      	add	r3, r2
 80043f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	00da      	lsls	r2, r3, #3
 80043fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004402:	67bb      	str	r3, [r7, #120]	; 0x78
 8004404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004406:	2200      	movs	r2, #0
 8004408:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f006 fd28 	bl	800ae66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 8104 	bne.w	800462a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]
 8004466:	e0e0      	b.n	800462a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d121      	bne.n	80044b6 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 80b4 	bne.w	800462a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044ca:	441a      	add	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044d8:	441a      	add	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d309      	bcc.n	80044fe <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	621a      	str	r2, [r3, #32]
 80044fc:	e015      	b.n	800452a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800450a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004514:	e009      	b.n	800452a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2200      	movs	r2, #0
 8004520:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	663b      	str	r3, [r7, #96]	; 0x60
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d155      	bne.n	80045e4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	65bb      	str	r3, [r7, #88]	; 0x58
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800454c:	4413      	add	r3, r2
 800454e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	00da      	lsls	r2, r3, #3
 8004556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004558:	4413      	add	r3, r2
 800455a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800455e:	657b      	str	r3, [r7, #84]	; 0x54
 8004560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004562:	2b3e      	cmp	r3, #62	; 0x3e
 8004564:	d916      	bls.n	8004594 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	677b      	str	r3, [r7, #116]	; 0x74
 800456c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <HAL_PCD_EP_DB_Transmit+0x694>
 8004576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004578:	3b01      	subs	r3, #1
 800457a:	677b      	str	r3, [r7, #116]	; 0x74
 800457c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457e:	b29b      	uxth	r3, r3
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	b29b      	uxth	r3, r3
 8004584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458c:	b29a      	uxth	r2, r3
 800458e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	e040      	b.n	8004616 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004596:	2b00      	cmp	r3, #0
 8004598:	d112      	bne.n	80045c0 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800459a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	e02a      	b.n	8004616 <HAL_PCD_EP_DB_Transmit+0x72e>
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	677b      	str	r3, [r7, #116]	; 0x74
 80045c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80045d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d2:	3301      	adds	r3, #1
 80045d4:	677b      	str	r3, [r7, #116]	; 0x74
 80045d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d8:	b29b      	uxth	r3, r3
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	b29a      	uxth	r2, r3
 80045de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	e018      	b.n	8004616 <HAL_PCD_EP_DB_Transmit+0x72e>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d114      	bne.n	8004616 <HAL_PCD_EP_DB_Transmit+0x72e>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045fa:	4413      	add	r3, r2
 80045fc:	663b      	str	r3, [r7, #96]	; 0x60
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	00da      	lsls	r2, r3, #3
 8004604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004606:	4413      	add	r3, r2
 8004608:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800460c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004610:	b29a      	uxth	r2, r3
 8004612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004614:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6959      	ldr	r1, [r3, #20]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	895a      	ldrh	r2, [r3, #10]
 8004622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	f004 fcd0 	bl	8008fca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004644:	823b      	strh	r3, [r7, #16]
 8004646:	8a3b      	ldrh	r3, [r7, #16]
 8004648:	f083 0310 	eor.w	r3, r3, #16
 800464c:	823b      	strh	r3, [r7, #16]
 800464e:	8a3b      	ldrh	r3, [r7, #16]
 8004650:	f083 0320 	eor.w	r3, r3, #32
 8004654:	823b      	strh	r3, [r7, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	441a      	add	r2, r3
 8004664:	8a3b      	ldrh	r3, [r7, #16]
 8004666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3788      	adds	r7, #136	; 0x88
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	4613      	mov	r3, r2
 8004694:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e009      	b.n	80046ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046ba:	897a      	ldrh	r2, [r7, #10]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80046ce:	893b      	ldrh	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2200      	movs	r2, #0
 80046d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	b29a      	uxth	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	80da      	strh	r2, [r3, #6]
 80046e2:	e00b      	b.n	80046fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2201      	movs	r2, #1
 80046e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800472e:	b29b      	uxth	r3, r3
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004742:	b29b      	uxth	r3, r3
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d141      	bne.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800476e:	4b4b      	ldr	r3, [pc, #300]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	d131      	bne.n	80047e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800477c:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004782:	4a46      	ldr	r2, [pc, #280]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800478c:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004794:	4a41      	ldr	r2, [pc, #260]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800479a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800479c:	4b40      	ldr	r3, [pc, #256]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2232      	movs	r2, #50	; 0x32
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	4a3f      	ldr	r2, [pc, #252]	; (80048a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	0c9b      	lsrs	r3, r3, #18
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047b2:	e002      	b.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ba:	4b38      	ldr	r3, [pc, #224]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c6:	d102      	bne.n	80047ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f2      	bne.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ce:	4b33      	ldr	r3, [pc, #204]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047da:	d158      	bne.n	800488e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e057      	b.n	8004890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e0:	4b2e      	ldr	r3, [pc, #184]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	4a2d      	ldr	r2, [pc, #180]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047f0:	e04d      	b.n	800488e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d141      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047fa:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d131      	bne.n	800486c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004808:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480e:	4a23      	ldr	r2, [pc, #140]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004818:	4b20      	ldr	r3, [pc, #128]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2232      	movs	r2, #50	; 0x32
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	4a1c      	ldr	r2, [pc, #112]	; (80048a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	0c9b      	lsrs	r3, r3, #18
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800483e:	e002      	b.n	8004846 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3b01      	subs	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d102      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f2      	bne.n	8004840 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004866:	d112      	bne.n	800488e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e011      	b.n	8004890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800487c:	e007      	b.n	800488e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004886:	4a05      	ldr	r2, [pc, #20]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800488c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40007000 	.word	0x40007000
 80048a0:	2000001c 	.word	0x2000001c
 80048a4:	431bde83 	.word	0x431bde83

080048a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b6:	6093      	str	r3, [r2, #8]
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40007000 	.word	0x40007000

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e308      	b.n	8004eec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d075      	beq.n	80049d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e6:	4ba3      	ldr	r3, [pc, #652]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f0:	4ba0      	ldr	r3, [pc, #640]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d102      	bne.n	8004906 <HAL_RCC_OscConfig+0x3e>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d002      	beq.n	800490c <HAL_RCC_OscConfig+0x44>
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d10b      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	4b99      	ldr	r3, [pc, #612]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d05b      	beq.n	80049d0 <HAL_RCC_OscConfig+0x108>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d157      	bne.n	80049d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e2e3      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x74>
 800492e:	4b91      	ldr	r3, [pc, #580]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a90      	ldr	r2, [pc, #576]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x98>
 8004946:	4b8b      	ldr	r3, [pc, #556]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a8a      	ldr	r2, [pc, #552]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a87      	ldr	r2, [pc, #540]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 8004960:	4b84      	ldr	r3, [pc, #528]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a83      	ldr	r2, [pc, #524]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b81      	ldr	r3, [pc, #516]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a80      	ldr	r2, [pc, #512]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd fda4 	bl	80024cc <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004988:	f7fd fda0 	bl	80024cc <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e2a8      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800499a:	4b76      	ldr	r3, [pc, #472]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xc0>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fd fd90 	bl	80024cc <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fd fd8c 	bl	80024cc <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e294      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049c2:	4b6c      	ldr	r3, [pc, #432]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0xe8>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d075      	beq.n	8004aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049de:	4b65      	ldr	r3, [pc, #404]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e8:	4b62      	ldr	r3, [pc, #392]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	d102      	bne.n	80049fe <HAL_RCC_OscConfig+0x136>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_OscConfig+0x13c>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d11f      	bne.n	8004a44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a04:	4b5b      	ldr	r3, [pc, #364]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_OscConfig+0x154>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e267      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b55      	ldr	r3, [pc, #340]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	4952      	ldr	r1, [pc, #328]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a30:	4b51      	ldr	r3, [pc, #324]	; (8004b78 <HAL_RCC_OscConfig+0x2b0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd fcfd 	bl	8002434 <HAL_InitTick>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d043      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e253      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d023      	beq.n	8004a94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a4c:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a48      	ldr	r2, [pc, #288]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd fd38 	bl	80024cc <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a60:	f7fd fd34 	bl	80024cc <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e23c      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a72:	4b40      	ldr	r3, [pc, #256]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	061b      	lsls	r3, r3, #24
 8004a8c:	4939      	ldr	r1, [pc, #228]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	604b      	str	r3, [r1, #4]
 8004a92:	e01a      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a94:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a36      	ldr	r2, [pc, #216]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fd fd14 	bl	80024cc <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa8:	f7fd fd10 	bl	80024cc <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e218      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x1e0>
 8004ac6:	e000      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ac8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ade:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ae4:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fd fced 	bl	80024cc <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af6:	f7fd fce9 	bl	80024cc <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e1f1      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0ef      	beq.n	8004af6 <HAL_RCC_OscConfig+0x22e>
 8004b16:	e01b      	b.n	8004b50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b18:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b1e:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd fcd0 	bl	80024cc <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b30:	f7fd fccc 	bl	80024cc <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e1d4      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ef      	bne.n	8004b30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80ab 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2b4>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e005      	b.n	8004b7e <HAL_RCC_OscConfig+0x2b6>
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
 8004b78:	20000020 	.word	0x20000020
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	4baf      	ldr	r3, [pc, #700]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b86:	4aae      	ldr	r2, [pc, #696]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b8e:	4bac      	ldr	r3, [pc, #688]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9e:	4ba9      	ldr	r3, [pc, #676]	; (8004e44 <HAL_RCC_OscConfig+0x57c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d118      	bne.n	8004bdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004baa:	4ba6      	ldr	r3, [pc, #664]	; (8004e44 <HAL_RCC_OscConfig+0x57c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4aa5      	ldr	r2, [pc, #660]	; (8004e44 <HAL_RCC_OscConfig+0x57c>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb6:	f7fd fc89 	bl	80024cc <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fd fc85 	bl	80024cc <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e18d      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd0:	4b9c      	ldr	r3, [pc, #624]	; (8004e44 <HAL_RCC_OscConfig+0x57c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d108      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x32e>
 8004be4:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a95      	ldr	r2, [pc, #596]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf4:	e024      	b.n	8004c40 <HAL_RCC_OscConfig+0x378>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d110      	bne.n	8004c20 <HAL_RCC_OscConfig+0x358>
 8004bfe:	4b90      	ldr	r3, [pc, #576]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	4a8e      	ldr	r2, [pc, #568]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c06:	f043 0304 	orr.w	r3, r3, #4
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c0e:	4b8c      	ldr	r3, [pc, #560]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	4a8a      	ldr	r2, [pc, #552]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c1e:	e00f      	b.n	8004c40 <HAL_RCC_OscConfig+0x378>
 8004c20:	4b87      	ldr	r3, [pc, #540]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	4a86      	ldr	r2, [pc, #536]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c30:	4b83      	ldr	r3, [pc, #524]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	4a82      	ldr	r2, [pc, #520]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d016      	beq.n	8004c76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fd fc40 	bl	80024cc <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c50:	f7fd fc3c 	bl	80024cc <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e142      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c66:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ed      	beq.n	8004c50 <HAL_RCC_OscConfig+0x388>
 8004c74:	e015      	b.n	8004ca2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fd fc29 	bl	80024cc <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7e:	f7fd fc25 	bl	80024cc <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e12b      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c94:	4b6a      	ldr	r3, [pc, #424]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1ed      	bne.n	8004c7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ca2:	7ffb      	ldrb	r3, [r7, #31]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	4a64      	ldr	r2, [pc, #400]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d03c      	beq.n	8004d3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cc8:	4b5d      	ldr	r3, [pc, #372]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cce:	4a5c      	ldr	r2, [pc, #368]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fbf8 	bl	80024cc <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ce0:	f7fd fbf4 	bl	80024cc <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e0fc      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cf2:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ef      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x418>
 8004d00:	e01b      	b.n	8004d3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d02:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d08:	4a4d      	ldr	r2, [pc, #308]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fd fbdb 	bl	80024cc <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d1a:	f7fd fbd7 	bl	80024cc <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e0df      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d2c:	4b44      	ldr	r3, [pc, #272]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ef      	bne.n	8004d1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80d3 	beq.w	8004eea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d44:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	f000 808d 	beq.w	8004e6c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d15a      	bne.n	8004e10 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a38      	ldr	r2, [pc, #224]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fd fbb1 	bl	80024cc <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fd fbad 	bl	80024cc <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e0b5      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d80:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d8c:	4b2c      	ldr	r3, [pc, #176]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <HAL_RCC_OscConfig+0x580>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6a11      	ldr	r1, [r2, #32]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9c:	3a01      	subs	r2, #1
 8004d9e:	0112      	lsls	r2, r2, #4
 8004da0:	4311      	orrs	r1, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004da6:	0212      	lsls	r2, r2, #8
 8004da8:	4311      	orrs	r1, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dae:	0852      	lsrs	r2, r2, #1
 8004db0:	3a01      	subs	r2, #1
 8004db2:	0552      	lsls	r2, r2, #21
 8004db4:	4311      	orrs	r1, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dba:	0852      	lsrs	r2, r2, #1
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	0652      	lsls	r2, r2, #25
 8004dc0:	4311      	orrs	r1, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dc6:	06d2      	lsls	r2, r2, #27
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	491d      	ldr	r1, [pc, #116]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fd fb70 	bl	80024cc <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df0:	f7fd fb6c 	bl	80024cc <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e074      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x528>
 8004e0e:	e06c      	b.n	8004eea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e1a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <HAL_RCC_OscConfig+0x578>)
 8004e2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fd fb48 	bl	80024cc <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e3e:	e00e      	b.n	8004e5e <HAL_RCC_OscConfig+0x596>
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40007000 	.word	0x40007000
 8004e48:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4c:	f7fd fb3e 	bl	80024cc <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e046      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e5e:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <HAL_RCC_OscConfig+0x62c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x584>
 8004e6a:	e03e      	b.n	8004eea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e039      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_RCC_OscConfig+0x62c>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d12c      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	3b01      	subs	r3, #1
 8004e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d123      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d11b      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d113      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000

08004ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e11e      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b91      	ldr	r3, [pc, #580]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d910      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b8e      	ldr	r3, [pc, #568]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 020f 	bic.w	r2, r3, #15
 8004f26:	498c      	ldr	r1, [pc, #560]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b8a      	ldr	r3, [pc, #552]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e106      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d073      	beq.n	8005034 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d129      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f54:	4b81      	ldr	r3, [pc, #516]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0f4      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f64:	f000 f966 	bl	8005234 <RCC_GetSysClockFreqFromPLLSource>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4a7c      	ldr	r2, [pc, #496]	; (8005160 <HAL_RCC_ClockConfig+0x268>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d93f      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f72:	4b7a      	ldr	r3, [pc, #488]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d033      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d12f      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f92:	4b72      	ldr	r3, [pc, #456]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9a:	4a70      	ldr	r2, [pc, #448]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e024      	b.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0c6      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc0:	4b66      	ldr	r3, [pc, #408]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0be      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004fd0:	f000 f8ce 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4a61      	ldr	r2, [pc, #388]	; (8005160 <HAL_RCC_ClockConfig+0x268>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d909      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fde:	4b5f      	ldr	r3, [pc, #380]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe6:	4a5d      	ldr	r2, [pc, #372]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff2:	4b5a      	ldr	r3, [pc, #360]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 0203 	bic.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4957      	ldr	r1, [pc, #348]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005004:	f7fd fa62 	bl	80024cc <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	e00a      	b.n	8005022 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500c:	f7fd fa5e 	bl	80024cc <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	; 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e095      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005022:	4b4e      	ldr	r3, [pc, #312]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 020c 	and.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	429a      	cmp	r2, r3
 8005032:	d1eb      	bne.n	800500c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d023      	beq.n	8005088 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800504c:	4b43      	ldr	r3, [pc, #268]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a42      	ldr	r2, [pc, #264]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005052:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005056:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005064:	4b3d      	ldr	r3, [pc, #244]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800506c:	4a3b      	ldr	r2, [pc, #236]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 800506e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005072:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b39      	ldr	r3, [pc, #228]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4936      	ldr	r1, [pc, #216]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
 8005086:	e008      	b.n	800509a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d105      	bne.n	800509a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800508e:	4b33      	ldr	r3, [pc, #204]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4a32      	ldr	r2, [pc, #200]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005094:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005098:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d21d      	bcs.n	80050e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a8:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 020f 	bic.w	r2, r3, #15
 80050b0:	4929      	ldr	r1, [pc, #164]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050b8:	f7fd fa08 	bl	80024cc <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c0:	f7fd fa04 	bl	80024cc <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e03b      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1ed      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f0:	4b1a      	ldr	r3, [pc, #104]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4917      	ldr	r1, [pc, #92]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	490f      	ldr	r1, [pc, #60]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005122:	f000 f825 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8005126:	4602      	mov	r2, r0
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	490c      	ldr	r1, [pc, #48]	; (8005164 <HAL_RCC_ClockConfig+0x26c>)
 8005134:	5ccb      	ldrb	r3, [r1, r3]
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <HAL_RCC_ClockConfig+0x274>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd f974 	bl	8002434 <HAL_InitTick>
 800514c:	4603      	mov	r3, r0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40022000 	.word	0x40022000
 800515c:	40021000 	.word	0x40021000
 8005160:	04c4b400 	.word	0x04c4b400
 8005164:	0800b474 	.word	0x0800b474
 8005168:	2000001c 	.word	0x2000001c
 800516c:	20000020 	.word	0x20000020

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b04      	cmp	r3, #4
 8005180:	d102      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	e047      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005188:	4b27      	ldr	r3, [pc, #156]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d102      	bne.n	800519a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005194:	4b26      	ldr	r3, [pc, #152]	; (8005230 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	e03e      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800519a:	4b23      	ldr	r3, [pc, #140]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d136      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051a6:	4b20      	ldr	r3, [pc, #128]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	3301      	adds	r3, #1
 80051bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d10c      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c4:	4a1a      	ldr	r2, [pc, #104]	; (8005230 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	4a16      	ldr	r2, [pc, #88]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ce:	68d2      	ldr	r2, [r2, #12]
 80051d0:	0a12      	lsrs	r2, r2, #8
 80051d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	617b      	str	r3, [r7, #20]
      break;
 80051dc:	e00c      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051de:	4a13      	ldr	r2, [pc, #76]	; (800522c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e6:	4a10      	ldr	r2, [pc, #64]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e8:	68d2      	ldr	r2, [r2, #12]
 80051ea:	0a12      	lsrs	r2, r2, #8
 80051ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]
      break;
 80051f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0e5b      	lsrs	r3, r3, #25
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	3301      	adds	r3, #1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	e001      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005218:	693b      	ldr	r3, [r7, #16]
}
 800521a:	4618      	mov	r0, r3
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
 800522c:	00f42400 	.word	0x00f42400
 8005230:	007a1200 	.word	0x007a1200

08005234 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800523a:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005244:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d10c      	bne.n	8005272 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005258:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005262:	68d2      	ldr	r2, [r2, #12]
 8005264:	0a12      	lsrs	r2, r2, #8
 8005266:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	617b      	str	r3, [r7, #20]
    break;
 8005270:	e00c      	b.n	800528c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005272:	4a12      	ldr	r2, [pc, #72]	; (80052bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800527c:	68d2      	ldr	r2, [r2, #12]
 800527e:	0a12      	lsrs	r2, r2, #8
 8005280:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
    break;
 800528a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	0e5b      	lsrs	r3, r3, #25
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	3301      	adds	r3, #1
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052a6:	687b      	ldr	r3, [r7, #4]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40021000 	.word	0x40021000
 80052b8:	007a1200 	.word	0x007a1200
 80052bc:	00f42400 	.word	0x00f42400

080052c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052c8:	2300      	movs	r3, #0
 80052ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052cc:	2300      	movs	r3, #0
 80052ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8098 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e2:	4b43      	ldr	r3, [pc, #268]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10d      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	4b40      	ldr	r3, [pc, #256]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	4a3f      	ldr	r2, [pc, #252]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f8:	6593      	str	r3, [r2, #88]	; 0x58
 80052fa:	4b3d      	ldr	r3, [pc, #244]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005306:	2301      	movs	r3, #1
 8005308:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800530a:	4b3a      	ldr	r3, [pc, #232]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a39      	ldr	r2, [pc, #228]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005316:	f7fd f8d9 	bl	80024cc <HAL_GetTick>
 800531a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800531c:	e009      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531e:	f7fd f8d5 	bl	80024cc <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d902      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	74fb      	strb	r3, [r7, #19]
        break;
 8005330:	e005      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005332:	4b30      	ldr	r3, [pc, #192]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0ef      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d159      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005344:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01e      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	429a      	cmp	r2, r3
 800535e:	d019      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005360:	4b23      	ldr	r3, [pc, #140]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800536c:	4b20      	ldr	r3, [pc, #128]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800538c:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fd f895 	bl	80024cc <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a4:	e00b      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fd f891 	bl	80024cc <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d902      	bls.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	74fb      	strb	r3, [r7, #19]
            break;
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ec      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	4903      	ldr	r1, [pc, #12]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053e8:	e008      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	74bb      	strb	r3, [r7, #18]
 80053ee:	e005      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053fc:	7c7b      	ldrb	r3, [r7, #17]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4ba6      	ldr	r3, [pc, #664]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4aa5      	ldr	r2, [pc, #660]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541a:	4ba0      	ldr	r3, [pc, #640]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f023 0203 	bic.w	r2, r3, #3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	499c      	ldr	r1, [pc, #624]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543c:	4b97      	ldr	r3, [pc, #604]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	f023 020c 	bic.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4994      	ldr	r1, [pc, #592]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800545e:	4b8f      	ldr	r3, [pc, #572]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	498b      	ldr	r1, [pc, #556]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005480:	4b86      	ldr	r3, [pc, #536]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	4983      	ldr	r1, [pc, #524]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054a2:	4b7e      	ldr	r3, [pc, #504]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	497a      	ldr	r1, [pc, #488]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054c4:	4b75      	ldr	r3, [pc, #468]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	4972      	ldr	r1, [pc, #456]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054e6:	4b6d      	ldr	r3, [pc, #436]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	4969      	ldr	r1, [pc, #420]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005508:	4b64      	ldr	r3, [pc, #400]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	4961      	ldr	r1, [pc, #388]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800552a:	4b5c      	ldr	r3, [pc, #368]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	4958      	ldr	r1, [pc, #352]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d015      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800554c:	4b53      	ldr	r3, [pc, #332]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	4950      	ldr	r1, [pc, #320]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556a:	d105      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800556c:	4b4b      	ldr	r3, [pc, #300]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4a4a      	ldr	r2, [pc, #296]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005576:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005580:	2b00      	cmp	r3, #0
 8005582:	d015      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005584:	4b45      	ldr	r3, [pc, #276]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4942      	ldr	r1, [pc, #264]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a2:	d105      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a4:	4b3d      	ldr	r3, [pc, #244]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a3c      	ldr	r2, [pc, #240]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d015      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055bc:	4b37      	ldr	r3, [pc, #220]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	4934      	ldr	r1, [pc, #208]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055da:	d105      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055dc:	4b2f      	ldr	r3, [pc, #188]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d015      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	4926      	ldr	r1, [pc, #152]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005612:	d105      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005614:	4b21      	ldr	r3, [pc, #132]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800561e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d015      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	4918      	ldr	r1, [pc, #96]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564a:	d105      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	4b13      	ldr	r3, [pc, #76]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a12      	ldr	r2, [pc, #72]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005656:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	490a      	ldr	r1, [pc, #40]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005690:	7cbb      	ldrb	r3, [r7, #18]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e049      	b.n	8005746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc fc0e 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f000 fee2 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04a      	b.n	80057fe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a21      	ldr	r2, [pc, #132]	; (800580c <HAL_TIM_Base_Start_IT+0xbc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d018      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d013      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_TIM_Base_Start_IT+0xc0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00e      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <HAL_TIM_Base_Start_IT+0xc4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_TIM_Base_Start_IT+0xc8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a19      	ldr	r2, [pc, #100]	; (800581c <HAL_TIM_Base_Start_IT+0xcc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d115      	bne.n	80057e8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	4b17      	ldr	r3, [pc, #92]	; (8005820 <HAL_TIM_Base_Start_IT+0xd0>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d015      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0xaa>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d4:	d011      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	e008      	b.n	80057fa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e000      	b.n	80057fc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	00010007 	.word	0x00010007

08005824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e049      	b.n	80058ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fc fb2c 	bl	8001ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fe20 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <HAL_TIM_PWM_Start+0x24>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	e03c      	b.n	8005972 <HAL_TIM_PWM_Start+0x9e>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d109      	bne.n	8005912 <HAL_TIM_PWM_Start+0x3e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	bf14      	ite	ne
 800590a:	2301      	movne	r3, #1
 800590c:	2300      	moveq	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	e02f      	b.n	8005972 <HAL_TIM_PWM_Start+0x9e>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d109      	bne.n	800592c <HAL_TIM_PWM_Start+0x58>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e022      	b.n	8005972 <HAL_TIM_PWM_Start+0x9e>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b0c      	cmp	r3, #12
 8005930:	d109      	bne.n	8005946 <HAL_TIM_PWM_Start+0x72>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e015      	b.n	8005972 <HAL_TIM_PWM_Start+0x9e>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b10      	cmp	r3, #16
 800594a:	d109      	bne.n	8005960 <HAL_TIM_PWM_Start+0x8c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e008      	b.n	8005972 <HAL_TIM_PWM_Start+0x9e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e097      	b.n	8005aaa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Start+0xb6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005988:	e023      	b.n	80059d2 <HAL_TIM_PWM_Start+0xfe>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Start+0xc6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005998:	e01b      	b.n	80059d2 <HAL_TIM_PWM_Start+0xfe>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Start+0xd6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a8:	e013      	b.n	80059d2 <HAL_TIM_PWM_Start+0xfe>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0xe6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059b8:	e00b      	b.n	80059d2 <HAL_TIM_PWM_Start+0xfe>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0xf6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c8:	e003      	b.n	80059d2 <HAL_TIM_PWM_Start+0xfe>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f986 	bl	8006cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a33      	ldr	r2, [pc, #204]	; (8005ab4 <HAL_TIM_PWM_Start+0x1e0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x13e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a32      	ldr	r2, [pc, #200]	; (8005ab8 <HAL_TIM_PWM_Start+0x1e4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x13e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a30      	ldr	r2, [pc, #192]	; (8005abc <HAL_TIM_PWM_Start+0x1e8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x13e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <HAL_TIM_PWM_Start+0x1ec>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_TIM_PWM_Start+0x13e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <HAL_TIM_PWM_Start+0x1f0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_PWM_Start+0x142>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_TIM_PWM_Start+0x144>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a20      	ldr	r2, [pc, #128]	; (8005ab4 <HAL_TIM_PWM_Start+0x1e0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d018      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x194>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3e:	d013      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x194>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a20      	ldr	r2, [pc, #128]	; (8005ac8 <HAL_TIM_PWM_Start+0x1f4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00e      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x194>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <HAL_TIM_PWM_Start+0x1f8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x194>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <HAL_TIM_PWM_Start+0x1e4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x194>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <HAL_TIM_PWM_Start+0x1e8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d115      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <HAL_TIM_PWM_Start+0x1fc>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d015      	beq.n	8005aa6 <HAL_TIM_PWM_Start+0x1d2>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a80:	d011      	beq.n	8005aa6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0201 	orr.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a92:	e008      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e000      	b.n	8005aa8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	00010007 	.word	0x00010007

08005ad4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e097      	b.n	8005c18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7fc fa67 	bl	8001fd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005b18:	f023 0307 	bic.w	r3, r3, #7
 8005b1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f000 fcbd 	bl	80064a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	4313      	orrs	r3, r2
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b74:	f023 030c 	bic.w	r3, r3, #12
 8005b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	4313      	orrs	r3, r2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	011a      	lsls	r2, r3, #4
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	031b      	lsls	r3, r3, #12
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d110      	bne.n	8005c72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d102      	bne.n	8005c5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c56:	7b7b      	ldrb	r3, [r7, #13]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e069      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c70:	e031      	b.n	8005cd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d110      	bne.n	8005c9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7e:	7b3b      	ldrb	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e055      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c98:	e01d      	b.n	8005cd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d108      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d105      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca6:	7b7b      	ldrb	r3, [r7, #13]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d102      	bne.n	8005cb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cac:	7b3b      	ldrb	r3, [r7, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e03e      	b.n	8005d34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_TIM_Encoder_Start+0xc4>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d008      	beq.n	8005cf4 <HAL_TIM_Encoder_Start+0xd4>
 8005ce2:	e00f      	b.n	8005d04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fffd 	bl	8006cec <TIM_CCxChannelCmd>
      break;
 8005cf2:	e016      	b.n	8005d22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fff5 	bl	8006cec <TIM_CCxChannelCmd>
      break;
 8005d02:	e00e      	b.n	8005d22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 ffed 	bl	8006cec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	2104      	movs	r1, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 ffe6 	bl	8006cec <TIM_CCxChannelCmd>
      break;
 8005d20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0202 	mvn.w	r2, #2
 8005d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fb74 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fb66 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fb77 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0204 	mvn.w	r2, #4
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb4a 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fb3c 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb4d 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d122      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d11b      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0208 	mvn.w	r2, #8
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2204      	movs	r2, #4
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fb20 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fb12 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fb23 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d122      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d11b      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0210 	mvn.w	r2, #16
 8005e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2208      	movs	r2, #8
 8005e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 faf6 	bl	800646c <HAL_TIM_IC_CaptureCallback>
 8005e80:	e005      	b.n	8005e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fae8 	bl	8006458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 faf9 	bl	8006480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d107      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0201 	mvn.w	r2, #1
 8005eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fa fe88 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b80      	cmp	r3, #128	; 0x80
 8005ecc:	d10e      	bne.n	8005eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed8:	2b80      	cmp	r3, #128	; 0x80
 8005eda:	d107      	bne.n	8005eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 f852 	bl	8006f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efa:	d10e      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b80      	cmp	r3, #128	; 0x80
 8005f08:	d107      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 f845 	bl	8006fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d10e      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	d107      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 faa7 	bl	8006494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d10e      	bne.n	8005f72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d107      	bne.n	8005f72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f06f 0220 	mvn.w	r2, #32
 8005f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f805 	bl	8006f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f80:	d10f      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 f80b 	bl	8006fb8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fc0:	d107      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fffd 	bl	8006fcc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe0:	d10f      	bne.n	8006002 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ff0:	d107      	bne.n	8006002 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 ffef 	bl	8006fe0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800600c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006010:	d10f      	bne.n	8006032 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800601c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006020:	d107      	bne.n	8006032 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800602a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 ffe1 	bl	8006ff4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006056:	2302      	movs	r3, #2
 8006058:	e0ff      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b14      	cmp	r3, #20
 8006066:	f200 80f0 	bhi.w	800624a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	080060c5 	.word	0x080060c5
 8006074:	0800624b 	.word	0x0800624b
 8006078:	0800624b 	.word	0x0800624b
 800607c:	0800624b 	.word	0x0800624b
 8006080:	08006105 	.word	0x08006105
 8006084:	0800624b 	.word	0x0800624b
 8006088:	0800624b 	.word	0x0800624b
 800608c:	0800624b 	.word	0x0800624b
 8006090:	08006147 	.word	0x08006147
 8006094:	0800624b 	.word	0x0800624b
 8006098:	0800624b 	.word	0x0800624b
 800609c:	0800624b 	.word	0x0800624b
 80060a0:	08006187 	.word	0x08006187
 80060a4:	0800624b 	.word	0x0800624b
 80060a8:	0800624b 	.word	0x0800624b
 80060ac:	0800624b 	.word	0x0800624b
 80060b0:	080061c9 	.word	0x080061c9
 80060b4:	0800624b 	.word	0x0800624b
 80060b8:	0800624b 	.word	0x0800624b
 80060bc:	0800624b 	.word	0x0800624b
 80060c0:	08006209 	.word	0x08006209
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fa7c 	bl	80065c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0208 	orr.w	r2, r2, #8
 80060de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0204 	bic.w	r2, r2, #4
 80060ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	619a      	str	r2, [r3, #24]
      break;
 8006102:	e0a5      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 faec 	bl	80066e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6999      	ldr	r1, [r3, #24]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	021a      	lsls	r2, r3, #8
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	619a      	str	r2, [r3, #24]
      break;
 8006144:	e084      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fb55 	bl	80067fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0208 	orr.w	r2, r2, #8
 8006160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0204 	bic.w	r2, r2, #4
 8006170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	61da      	str	r2, [r3, #28]
      break;
 8006184:	e064      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fbbd 	bl	800690c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69d9      	ldr	r1, [r3, #28]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	021a      	lsls	r2, r3, #8
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	61da      	str	r2, [r3, #28]
      break;
 80061c6:	e043      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fc26 	bl	8006a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0208 	orr.w	r2, r2, #8
 80061e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0204 	bic.w	r2, r2, #4
 80061f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006206:	e023      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fc6a 	bl	8006ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006222:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006232:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006248:	e002      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
      break;
 800624e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIM_ConfigClockSource+0x1c>
 800627c:	2302      	movs	r3, #2
 800627e:	e0de      	b.n	800643e <HAL_TIM_ConfigClockSource+0x1da>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800629e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a63      	ldr	r2, [pc, #396]	; (8006448 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	f000 80a9 	beq.w	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 80062c0:	4a61      	ldr	r2, [pc, #388]	; (8006448 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	f200 80ae 	bhi.w	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 80062c8:	4a60      	ldr	r2, [pc, #384]	; (800644c <HAL_TIM_ConfigClockSource+0x1e8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	f000 80a1 	beq.w	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 80062d0:	4a5e      	ldr	r2, [pc, #376]	; (800644c <HAL_TIM_ConfigClockSource+0x1e8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	f200 80a6 	bhi.w	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 80062d8:	4a5d      	ldr	r2, [pc, #372]	; (8006450 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	f000 8099 	beq.w	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 80062e0:	4a5b      	ldr	r2, [pc, #364]	; (8006450 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	f200 809e 	bhi.w	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 80062e8:	4a5a      	ldr	r2, [pc, #360]	; (8006454 <HAL_TIM_ConfigClockSource+0x1f0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f000 8091 	beq.w	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 80062f0:	4a58      	ldr	r2, [pc, #352]	; (8006454 <HAL_TIM_ConfigClockSource+0x1f0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f200 8096 	bhi.w	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 80062f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062fc:	f000 8089 	beq.w	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 8006300:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006304:	f200 808e 	bhi.w	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 8006308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630c:	d03e      	beq.n	800638c <HAL_TIM_ConfigClockSource+0x128>
 800630e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006312:	f200 8087 	bhi.w	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 8006316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631a:	f000 8086 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1c6>
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d87f      	bhi.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 8006324:	2b70      	cmp	r3, #112	; 0x70
 8006326:	d01a      	beq.n	800635e <HAL_TIM_ConfigClockSource+0xfa>
 8006328:	2b70      	cmp	r3, #112	; 0x70
 800632a:	d87b      	bhi.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 800632c:	2b60      	cmp	r3, #96	; 0x60
 800632e:	d050      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x16e>
 8006330:	2b60      	cmp	r3, #96	; 0x60
 8006332:	d877      	bhi.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 8006334:	2b50      	cmp	r3, #80	; 0x50
 8006336:	d03c      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x14e>
 8006338:	2b50      	cmp	r3, #80	; 0x50
 800633a:	d873      	bhi.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d058      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x18e>
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d86f      	bhi.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 8006344:	2b30      	cmp	r3, #48	; 0x30
 8006346:	d064      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 8006348:	2b30      	cmp	r3, #48	; 0x30
 800634a:	d86b      	bhi.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 800634c:	2b20      	cmp	r3, #32
 800634e:	d060      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 8006350:	2b20      	cmp	r3, #32
 8006352:	d867      	bhi.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d05c      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 8006358:	2b10      	cmp	r3, #16
 800635a:	d05a      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x1ae>
 800635c:	e062      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6899      	ldr	r1, [r3, #8]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f000 fc9d 	bl	8006cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	609a      	str	r2, [r3, #8]
      break;
 800638a:	e04f      	b.n	800642c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	6899      	ldr	r1, [r3, #8]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f000 fc86 	bl	8006cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ae:	609a      	str	r2, [r3, #8]
      break;
 80063b0:	e03c      	b.n	800642c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6859      	ldr	r1, [r3, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	461a      	mov	r2, r3
 80063c0:	f000 fbf8 	bl	8006bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2150      	movs	r1, #80	; 0x50
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fc51 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 80063d0:	e02c      	b.n	800642c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6859      	ldr	r1, [r3, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	461a      	mov	r2, r3
 80063e0:	f000 fc17 	bl	8006c12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2160      	movs	r1, #96	; 0x60
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fc41 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 80063f0:	e01c      	b.n	800642c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	461a      	mov	r2, r3
 8006400:	f000 fbd8 	bl	8006bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2140      	movs	r1, #64	; 0x40
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fc31 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 8006410:	e00c      	b.n	800642c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f000 fc28 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 8006422:	e003      	b.n	800642c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
      break;
 8006428:	e000      	b.n	800642c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800642a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	00100070 	.word	0x00100070
 800644c:	00100040 	.word	0x00100040
 8006450:	00100030 	.word	0x00100030
 8006454:	00100020 	.word	0x00100020

08006458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a3c      	ldr	r2, [pc, #240]	; (80065ac <TIM_Base_SetConfig+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c6:	d00b      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a39      	ldr	r2, [pc, #228]	; (80065b0 <TIM_Base_SetConfig+0x108>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a38      	ldr	r2, [pc, #224]	; (80065b4 <TIM_Base_SetConfig+0x10c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <TIM_Base_SetConfig+0x104>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d017      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <TIM_Base_SetConfig+0x108>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <TIM_Base_SetConfig+0x10c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a27      	ldr	r2, [pc, #156]	; (80065bc <TIM_Base_SetConfig+0x114>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d108      	bne.n	8006544 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a10      	ldr	r2, [pc, #64]	; (80065ac <TIM_Base_SetConfig+0x104>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a10      	ldr	r2, [pc, #64]	; (80065bc <TIM_Base_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <TIM_Base_SetConfig+0x118>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <TIM_Base_SetConfig+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d103      	bne.n	8006598 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	615a      	str	r2, [r3, #20]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40013400 	.word	0x40013400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10c      	bne.n	8006662 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0308 	bic.w	r3, r3, #8
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40013400 	.word	0x40013400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f023 0210 	bic.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0320 	bic.w	r3, r3, #32
 8006736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a28      	ldr	r2, [pc, #160]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC2_SetConfig+0x6c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10d      	bne.n	8006770 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00f      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00b      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <TIM_OC2_SetConfig+0x108>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <TIM_OC2_SetConfig+0x10c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <TIM_OC2_SetConfig+0x110>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d113      	bne.n	80067c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800679e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x6a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a26      	ldr	r2, [pc, #152]	; (80068fc <TIM_OC3_SetConfig+0x100>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d10d      	bne.n	8006882 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00f      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <TIM_OC3_SetConfig+0x100>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00b      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <TIM_OC3_SetConfig+0x104>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <TIM_OC3_SetConfig+0x108>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a18      	ldr	r2, [pc, #96]	; (8006908 <TIM_OC3_SetConfig+0x10c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d113      	bne.n	80068d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40013400 	.word	0x40013400
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800695a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <TIM_OC4_SetConfig+0x100>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC4_SetConfig+0x6c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <TIM_OC4_SetConfig+0x104>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d10d      	bne.n	8006994 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800697e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_OC4_SetConfig+0x100>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <TIM_OC4_SetConfig+0x104>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <TIM_OC4_SetConfig+0x108>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <TIM_OC4_SetConfig+0x10c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <TIM_OC4_SetConfig+0x110>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d113      	bne.n	80069e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40013400 	.word	0x40013400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800

08006a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <TIM_OC5_SetConfig+0xb4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00f      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a16      	ldr	r2, [pc, #88]	; (8006ad8 <TIM_OC5_SetConfig+0xb8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a15      	ldr	r2, [pc, #84]	; (8006adc <TIM_OC5_SetConfig+0xbc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d007      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <TIM_OC5_SetConfig+0xc0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <TIM_OC5_SetConfig+0xc4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d109      	bne.n	8006aae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40013400 	.word	0x40013400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800

08006ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <TIM_OC6_SetConfig+0xb8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <TIM_OC6_SetConfig+0xbc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <TIM_OC6_SetConfig+0xc0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a15      	ldr	r2, [pc, #84]	; (8006bac <TIM_OC6_SetConfig+0xc4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a14      	ldr	r2, [pc, #80]	; (8006bb0 <TIM_OC6_SetConfig+0xc8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d109      	bne.n	8006b78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800

08006bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 030a 	bic.w	r3, r3, #10
 8006bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b087      	sub	sp, #28
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f023 0210 	bic.w	r2, r3, #16
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	031b      	lsls	r3, r3, #12
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f043 0307 	orr.w	r3, r3, #7
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	609a      	str	r2, [r3, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2201      	movs	r2, #1
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	401a      	ands	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	fa01 f303 	lsl.w	r3, r1, r3
 8006d24:	431a      	orrs	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e065      	b.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a2c      	ldr	r2, [pc, #176]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a2b      	ldr	r2, [pc, #172]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d108      	bne.n	8006d96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d018      	beq.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d013      	beq.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00e      	beq.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d009      	beq.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a12      	ldr	r2, [pc, #72]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a13      	ldr	r2, [pc, #76]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10c      	bne.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40014000 	.word	0x40014000

08006e3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e087      	b.n	8006f68 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a27      	ldr	r2, [pc, #156]	; (8006f74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d106      	bne.n	8006ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d126      	bne.n	8006f56 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	051b      	lsls	r3, r3, #20
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a0e      	ldr	r2, [pc, #56]	; (8006f74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a0d      	ldr	r2, [pc, #52]	; (8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d106      	bne.n	8006f56 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	40013400 	.word	0x40013400

08006f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007018:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800701c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800703e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007042:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	b29b      	uxth	r3, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	b29b      	uxth	r3, r3
 8007054:	4013      	ands	r3, r2
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800706c:	b084      	sub	sp, #16
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	f107 0014 	add.w	r0, r7, #20
 800707a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	b004      	add	sp, #16
 80070ac:	4770      	bx	lr
	...

080070b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b09d      	sub	sp, #116	; 0x74
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	78db      	ldrb	r3, [r3, #3]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d81f      	bhi.n	8007122 <USB_ActivateEndpoint+0x72>
 80070e2:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <USB_ActivateEndpoint+0x38>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	080070f9 	.word	0x080070f9
 80070ec:	08007115 	.word	0x08007115
 80070f0:	0800712b 	.word	0x0800712b
 80070f4:	08007107 	.word	0x08007107
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80070f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80070fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007100:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007104:	e012      	b.n	800712c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007106:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800710a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800710e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007112:	e00b      	b.n	800712c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007114:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800711c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007120:	e004      	b.n	800712c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007128:	e000      	b.n	800712c <USB_ActivateEndpoint+0x7c>
      break;
 800712a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	441a      	add	r2, r3
 8007136:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800713a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714a:	b29b      	uxth	r3, r3
 800714c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	b21b      	sxth	r3, r3
 800715e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	b21a      	sxth	r2, r3
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	b21b      	sxth	r3, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	b21b      	sxth	r3, r3
 8007172:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	441a      	add	r2, r3
 8007180:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	7b1b      	ldrb	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8149 	bne.w	8007434 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 8084 	beq.w	80072b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	61bb      	str	r3, [r7, #24]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	4413      	add	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	00da      	lsls	r2, r3, #3
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	88db      	ldrh	r3, [r3, #6]
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	827b      	strh	r3, [r7, #18]
 80071ee:	8a7b      	ldrh	r3, [r7, #18]
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01b      	beq.n	8007230 <USB_ActivateEndpoint+0x180>
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	823b      	strh	r3, [r7, #16]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	8a3b      	ldrh	r3, [r7, #16]
 800721c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800722c:	b29b      	uxth	r3, r3
 800722e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	78db      	ldrb	r3, [r3, #3]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d020      	beq.n	800727a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724e:	81bb      	strh	r3, [r7, #12]
 8007250:	89bb      	ldrh	r3, [r7, #12]
 8007252:	f083 0320 	eor.w	r3, r3, #32
 8007256:	81bb      	strh	r3, [r7, #12]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	89bb      	ldrh	r3, [r7, #12]
 8007264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007274:	b29b      	uxth	r3, r3
 8007276:	8013      	strh	r3, [r2, #0]
 8007278:	e2a6      	b.n	80077c8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007290:	81fb      	strh	r3, [r7, #14]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	441a      	add	r2, r3
 800729c:	89fb      	ldrh	r3, [r7, #14]
 800729e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	8013      	strh	r3, [r2, #0]
 80072b2:	e289      	b.n	80077c8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	633b      	str	r3, [r7, #48]	; 0x30
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072be:	b29b      	uxth	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	4413      	add	r3, r2
 80072c6:	633b      	str	r3, [r7, #48]	; 0x30
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	00da      	lsls	r2, r3, #3
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	4413      	add	r3, r2
 80072d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	88db      	ldrh	r3, [r3, #6]
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	b29b      	uxth	r3, r3
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	4413      	add	r3, r2
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	00da      	lsls	r2, r3, #3
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	4413      	add	r3, r2
 8007306:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b3e      	cmp	r3, #62	; 0x3e
 8007312:	d918      	bls.n	8007346 <USB_ActivateEndpoint+0x296>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	66bb      	str	r3, [r7, #104]	; 0x68
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <USB_ActivateEndpoint+0x27e>
 8007328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800732a:	3b01      	subs	r3, #1
 800732c:	66bb      	str	r3, [r7, #104]	; 0x68
 800732e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007330:	b29b      	uxth	r3, r3
 8007332:	029b      	lsls	r3, r3, #10
 8007334:	b29b      	uxth	r3, r3
 8007336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733e:	b29a      	uxth	r2, r3
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	e029      	b.n	800739a <USB_ActivateEndpoint+0x2ea>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d112      	bne.n	8007374 <USB_ActivateEndpoint+0x2c4>
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007358:	b29a      	uxth	r2, r3
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736c:	b29a      	uxth	r2, r3
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	e012      	b.n	800739a <USB_ActivateEndpoint+0x2ea>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	66bb      	str	r3, [r7, #104]	; 0x68
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <USB_ActivateEndpoint+0x2de>
 8007388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800738a:	3301      	adds	r3, #1
 800738c:	66bb      	str	r3, [r7, #104]	; 0x68
 800738e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007390:	b29b      	uxth	r3, r3
 8007392:	029b      	lsls	r3, r3, #10
 8007394:	b29a      	uxth	r2, r3
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80073a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01b      	beq.n	80073ea <USB_ActivateEndpoint+0x33a>
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c8:	843b      	strh	r3, [r7, #32]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	441a      	add	r2, r3
 80073d4:	8c3b      	ldrh	r3, [r7, #32]
 80073d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007400:	83fb      	strh	r3, [r7, #30]
 8007402:	8bfb      	ldrh	r3, [r7, #30]
 8007404:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007408:	83fb      	strh	r3, [r7, #30]
 800740a:	8bfb      	ldrh	r3, [r7, #30]
 800740c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007410:	83fb      	strh	r3, [r7, #30]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	441a      	add	r2, r3
 800741c:	8bfb      	ldrh	r3, [r7, #30]
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800742a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
 8007432:	e1c9      	b.n	80077c8 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d11e      	bne.n	800747a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007452:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	441a      	add	r2, r3
 8007460:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800746c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007474:	b29b      	uxth	r3, r3
 8007476:	8013      	strh	r3, [r2, #0]
 8007478:	e01d      	b.n	80074b6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	441a      	add	r2, r3
 800749e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80074a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074c6:	4413      	add	r3, r2
 80074c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	00da      	lsls	r2, r3, #3
 80074d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	891b      	ldrh	r3, [r3, #8]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	657b      	str	r3, [r7, #84]	; 0x54
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	461a      	mov	r2, r3
 80074f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fa:	4413      	add	r3, r2
 80074fc:	657b      	str	r3, [r7, #84]	; 0x54
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	00da      	lsls	r2, r3, #3
 8007504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007506:	4413      	add	r3, r2
 8007508:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800750c:	653b      	str	r3, [r7, #80]	; 0x50
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	895b      	ldrh	r3, [r3, #10]
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	b29b      	uxth	r3, r3
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800751c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 8093 	bne.w	800764e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800753c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01b      	beq.n	800757c <USB_ActivateEndpoint+0x4cc>
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	b29b      	uxth	r3, r3
 800757a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800758a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <USB_ActivateEndpoint+0x51c>
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075aa:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	441a      	add	r2, r3
 80075b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80075b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80075e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80075ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007610:	b29b      	uxth	r3, r3
 8007612:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007648:	b29b      	uxth	r3, r3
 800764a:	8013      	strh	r3, [r2, #0]
 800764c:	e0bc      	b.n	80077c8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800765e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d01d      	beq.n	80076a6 <USB_ActivateEndpoint+0x5f6>
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007680:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	441a      	add	r2, r3
 800768e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800769e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01d      	beq.n	80076fe <USB_ActivateEndpoint+0x64e>
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	441a      	add	r2, r3
 80076e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80076ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	78db      	ldrb	r3, [r3, #3]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d024      	beq.n	8007750 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007720:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007724:	f083 0320 	eor.w	r3, r3, #32
 8007728:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	441a      	add	r2, r3
 8007736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800773a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	b29b      	uxth	r3, r3
 800774c:	8013      	strh	r3, [r2, #0]
 800774e:	e01d      	b.n	800778c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007766:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800777c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	b29b      	uxth	r3, r3
 800778a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800779e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	441a      	add	r2, r3
 80077b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80077b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80077c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3774      	adds	r7, #116	; 0x74
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077d8:	b480      	push	{r7}
 80077da:	b08d      	sub	sp, #52	; 0x34
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	7b1b      	ldrb	r3, [r3, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f040 808e 	bne.w	8007908 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d044      	beq.n	800787e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	81bb      	strh	r3, [r7, #12]
 8007802:	89bb      	ldrh	r3, [r7, #12]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01b      	beq.n	8007844 <USB_DeactivateEndpoint+0x6c>
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007822:	817b      	strh	r3, [r7, #10]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	441a      	add	r2, r3
 800782e:	897b      	ldrh	r3, [r7, #10]
 8007830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785a:	813b      	strh	r3, [r7, #8]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	441a      	add	r2, r3
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007878:	b29b      	uxth	r3, r3
 800787a:	8013      	strh	r3, [r2, #0]
 800787c:	e192      	b.n	8007ba4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	827b      	strh	r3, [r7, #18]
 800788c:	8a7b      	ldrh	r3, [r7, #18]
 800788e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01b      	beq.n	80078ce <USB_DeactivateEndpoint+0xf6>
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ac:	823b      	strh	r3, [r7, #16]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	441a      	add	r2, r3
 80078b8:	8a3b      	ldrh	r3, [r7, #16]
 80078ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e4:	81fb      	strh	r3, [r7, #14]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	441a      	add	r2, r3
 80078f0:	89fb      	ldrh	r3, [r7, #14]
 80078f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007902:	b29b      	uxth	r3, r3
 8007904:	8013      	strh	r3, [r2, #0]
 8007906:	e14d      	b.n	8007ba4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f040 80a5 	bne.w	8007a5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	843b      	strh	r3, [r7, #32]
 8007920:	8c3b      	ldrh	r3, [r7, #32]
 8007922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01b      	beq.n	8007962 <USB_DeactivateEndpoint+0x18a>
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007940:	83fb      	strh	r3, [r7, #30]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	441a      	add	r2, r3
 800794c:	8bfb      	ldrh	r3, [r7, #30]
 800794e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800795a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795e:	b29b      	uxth	r3, r3
 8007960:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	83bb      	strh	r3, [r7, #28]
 8007970:	8bbb      	ldrh	r3, [r7, #28]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01b      	beq.n	80079b2 <USB_DeactivateEndpoint+0x1da>
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007990:	837b      	strh	r3, [r7, #26]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	441a      	add	r2, r3
 800799c:	8b7b      	ldrh	r3, [r7, #26]
 800799e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c8:	833b      	strh	r3, [r7, #24]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	441a      	add	r2, r3
 80079d4:	8b3b      	ldrh	r3, [r7, #24]
 80079d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a00:	82fb      	strh	r3, [r7, #22]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	8afb      	ldrh	r3, [r7, #22]
 8007a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a38:	82bb      	strh	r3, [r7, #20]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	441a      	add	r2, r3
 8007a44:	8abb      	ldrh	r3, [r7, #20]
 8007a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	8013      	strh	r3, [r2, #0]
 8007a5a:	e0a3      	b.n	8007ba4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d01b      	beq.n	8007aac <USB_DeactivateEndpoint+0x2d4>
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	441a      	add	r2, r3
 8007a96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007aba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01b      	beq.n	8007afc <USB_DeactivateEndpoint+0x324>
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	853b      	strh	r3, [r7, #40]	; 0x28
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	441a      	add	r2, r3
 8007ae6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	441a      	add	r2, r3
 8007b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	847b      	strh	r3, [r7, #34]	; 0x22
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3734      	adds	r7, #52	; 0x34
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b0c2      	sub	sp, #264	; 0x108
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	1d3b      	adds	r3, r7, #4
 8007bba:	6018      	str	r0, [r3, #0]
 8007bbc:	463b      	mov	r3, r7
 8007bbe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	f040 8509 	bne.w	80085de <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007bcc:	463b      	mov	r3, r7
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d905      	bls.n	8007be8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007bdc:	463b      	mov	r3, r7
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007be6:	e004      	b.n	8007bf2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007be8:	463b      	mov	r3, r7
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	7b1b      	ldrb	r3, [r3, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d128      	bne.n	8007c4e <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6959      	ldr	r1, [r3, #20]
 8007c02:	463b      	mov	r3, r7
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	88da      	ldrh	r2, [r3, #6]
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	1d38      	adds	r0, r7, #4
 8007c10:	6800      	ldr	r0, [r0, #0]
 8007c12:	f001 f9da 	bl	8008fca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	463b      	mov	r3, r7
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	00da      	lsls	r2, r3, #3
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	f000 bc9f 	b.w	800858c <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007c4e:	463b      	mov	r3, r7
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	78db      	ldrb	r3, [r3, #3]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	f040 8347 	bne.w	80082e8 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6a1a      	ldr	r2, [r3, #32]
 8007c60:	463b      	mov	r3, r7
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	f240 82eb 	bls.w	8008242 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c6c:	1d3b      	adds	r3, r7, #4
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	463b      	mov	r3, r7
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	463b      	mov	r3, r7
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	441a      	add	r2, r3
 8007c98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6a1a      	ldr	r2, [r3, #32]
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cba:	1ad2      	subs	r2, r2, r3
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007cc2:	1d3b      	adds	r3, r7, #4
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8159 	beq.w	8007f90 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cde:	1d3b      	adds	r3, r7, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	785b      	ldrb	r3, [r3, #1]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d164      	bne.n	8007db8 <USB_EPStartXfer+0x206>
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf4:	1d3b      	adds	r3, r7, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	4413      	add	r3, r2
 8007d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d06:	463b      	mov	r3, r7
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	00da      	lsls	r2, r3, #3
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	4413      	add	r3, r2
 8007d12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d1e:	d91c      	bls.n	8007d5a <USB_EPStartXfer+0x1a8>
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d104      	bne.n	8007d40 <USB_EPStartXfer+0x18e>
 8007d36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	029b      	lsls	r3, r3, #10
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e04a      	b.n	8007df0 <USB_EPStartXfer+0x23e>
 8007d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d112      	bne.n	8007d88 <USB_EPStartXfer+0x1d6>
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	801a      	strh	r2, [r3, #0]
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	e033      	b.n	8007df0 <USB_EPStartXfer+0x23e>
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <USB_EPStartXfer+0x1f6>
 8007d9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007da2:	3301      	adds	r3, #1
 8007da4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007da8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	029b      	lsls	r3, r3, #10
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	e01b      	b.n	8007df0 <USB_EPStartXfer+0x23e>
 8007db8:	463b      	mov	r3, r7
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d116      	bne.n	8007df0 <USB_EPStartXfer+0x23e>
 8007dc2:	1d3b      	adds	r3, r7, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	4413      	add	r3, r2
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	00da      	lsls	r2, r3, #3
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	4413      	add	r3, r2
 8007de0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007df0:	463b      	mov	r3, r7
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	895b      	ldrh	r3, [r3, #10]
 8007df6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6959      	ldr	r1, [r3, #20]
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e0a:	1d38      	adds	r0, r7, #4
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f001 f8dc 	bl	8008fca <USB_WritePMA>
            ep->xfer_buff += len;
 8007e12:	463b      	mov	r3, r7
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695a      	ldr	r2, [r3, #20]
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1c:	441a      	add	r2, r3
 8007e1e:	463b      	mov	r3, r7
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e24:	463b      	mov	r3, r7
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6a1a      	ldr	r2, [r3, #32]
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d909      	bls.n	8007e48 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007e34:	463b      	mov	r3, r7
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a1a      	ldr	r2, [r3, #32]
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	463b      	mov	r3, r7
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	621a      	str	r2, [r3, #32]
 8007e46:	e008      	b.n	8007e5a <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e48:	463b      	mov	r3, r7
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d164      	bne.n	8007f2e <USB_EPStartXfer+0x37c>
 8007e64:	1d3b      	adds	r3, r7, #4
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	1d3b      	adds	r3, r7, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	4413      	add	r3, r2
 8007e7a:	61bb      	str	r3, [r7, #24]
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	00da      	lsls	r2, r3, #3
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	4413      	add	r3, r2
 8007e88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e92:	2b3e      	cmp	r3, #62	; 0x3e
 8007e94:	d91c      	bls.n	8007ed0 <USB_EPStartXfer+0x31e>
 8007e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d104      	bne.n	8007eb6 <USB_EPStartXfer+0x304>
 8007eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	029b      	lsls	r3, r3, #10
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	e04d      	b.n	8007f6c <USB_EPStartXfer+0x3ba>
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d112      	bne.n	8007efe <USB_EPStartXfer+0x34c>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	801a      	strh	r2, [r3, #0]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	801a      	strh	r2, [r3, #0]
 8007efc:	e036      	b.n	8007f6c <USB_EPStartXfer+0x3ba>
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <USB_EPStartXfer+0x36c>
 8007f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f18:	3301      	adds	r3, #1
 8007f1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	029b      	lsls	r3, r3, #10
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	e01e      	b.n	8007f6c <USB_EPStartXfer+0x3ba>
 8007f2e:	463b      	mov	r3, r7
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d119      	bne.n	8007f6c <USB_EPStartXfer+0x3ba>
 8007f38:	1d3b      	adds	r3, r7, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	623b      	str	r3, [r7, #32]
 8007f3e:	1d3b      	adds	r3, r7, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	623b      	str	r3, [r7, #32]
 8007f50:	463b      	mov	r3, r7
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	00da      	lsls	r2, r3, #3
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	891b      	ldrh	r3, [r3, #8]
 8007f72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f76:	463b      	mov	r3, r7
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6959      	ldr	r1, [r3, #20]
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f86:	1d38      	adds	r0, r7, #4
 8007f88:	6800      	ldr	r0, [r0, #0]
 8007f8a:	f001 f81e 	bl	8008fca <USB_WritePMA>
 8007f8e:	e2fd      	b.n	800858c <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d164      	bne.n	8008064 <USB_EPStartXfer+0x4b2>
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fa0:	1d3b      	adds	r3, r7, #4
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fae:	4413      	add	r3, r2
 8007fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	00da      	lsls	r2, r3, #3
 8007fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc8:	2b3e      	cmp	r3, #62	; 0x3e
 8007fca:	d91c      	bls.n	8008006 <USB_EPStartXfer+0x454>
 8007fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <USB_EPStartXfer+0x43a>
 8007fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008002:	801a      	strh	r2, [r3, #0]
 8008004:	e04d      	b.n	80080a2 <USB_EPStartXfer+0x4f0>
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800a:	2b00      	cmp	r3, #0
 800800c:	d112      	bne.n	8008034 <USB_EPStartXfer+0x482>
 800800e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008018:	b29a      	uxth	r2, r3
 800801a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802c:	b29a      	uxth	r2, r3
 800802e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e036      	b.n	80080a2 <USB_EPStartXfer+0x4f0>
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <USB_EPStartXfer+0x4a2>
 800804a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800804e:	3301      	adds	r3, #1
 8008050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008058:	b29b      	uxth	r3, r3
 800805a:	029b      	lsls	r3, r3, #10
 800805c:	b29a      	uxth	r2, r3
 800805e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	e01e      	b.n	80080a2 <USB_EPStartXfer+0x4f0>
 8008064:	463b      	mov	r3, r7
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	785b      	ldrb	r3, [r3, #1]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d119      	bne.n	80080a2 <USB_EPStartXfer+0x4f0>
 800806e:	1d3b      	adds	r3, r7, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	653b      	str	r3, [r7, #80]	; 0x50
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807c:	b29b      	uxth	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008082:	4413      	add	r3, r2
 8008084:	653b      	str	r3, [r7, #80]	; 0x50
 8008086:	463b      	mov	r3, r7
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	00da      	lsls	r2, r3, #3
 800808e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008090:	4413      	add	r3, r2
 8008092:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809c:	b29a      	uxth	r2, r3
 800809e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	891b      	ldrh	r3, [r3, #8]
 80080a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080ac:	463b      	mov	r3, r7
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6959      	ldr	r1, [r3, #20]
 80080b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080bc:	1d38      	adds	r0, r7, #4
 80080be:	6800      	ldr	r0, [r0, #0]
 80080c0:	f000 ff83 	bl	8008fca <USB_WritePMA>
            ep->xfer_buff += len;
 80080c4:	463b      	mov	r3, r7
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	695a      	ldr	r2, [r3, #20]
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ce:	441a      	add	r2, r3
 80080d0:	463b      	mov	r3, r7
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80080d6:	463b      	mov	r3, r7
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6a1a      	ldr	r2, [r3, #32]
 80080dc:	463b      	mov	r3, r7
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d909      	bls.n	80080fa <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80080e6:	463b      	mov	r3, r7
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6a1a      	ldr	r2, [r3, #32]
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080f0:	1ad2      	subs	r2, r2, r3
 80080f2:	463b      	mov	r3, r7
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	621a      	str	r2, [r3, #32]
 80080f8:	e008      	b.n	800810c <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 80080fa:	463b      	mov	r3, r7
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008104:	463b      	mov	r3, r7
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2200      	movs	r2, #0
 800810a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800810c:	1d3b      	adds	r3, r7, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	643b      	str	r3, [r7, #64]	; 0x40
 8008112:	463b      	mov	r3, r7
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d164      	bne.n	80081e6 <USB_EPStartXfer+0x634>
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	63bb      	str	r3, [r7, #56]	; 0x38
 8008122:	1d3b      	adds	r3, r7, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812a:	b29b      	uxth	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	4413      	add	r3, r2
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	00da      	lsls	r2, r3, #3
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	4413      	add	r3, r2
 8008140:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814a:	2b3e      	cmp	r3, #62	; 0x3e
 800814c:	d91c      	bls.n	8008188 <USB_EPStartXfer+0x5d6>
 800814e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008152:	095b      	lsrs	r3, r3, #5
 8008154:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815c:	f003 031f 	and.w	r3, r3, #31
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <USB_EPStartXfer+0x5bc>
 8008164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008168:	3b01      	subs	r3, #1
 800816a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008172:	b29b      	uxth	r3, r3
 8008174:	029b      	lsls	r3, r3, #10
 8008176:	b29b      	uxth	r3, r3
 8008178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008180:	b29a      	uxth	r2, r3
 8008182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	e04a      	b.n	800821e <USB_EPStartXfer+0x66c>
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818c:	2b00      	cmp	r3, #0
 800818e:	d112      	bne.n	80081b6 <USB_EPStartXfer+0x604>
 8008190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	b29b      	uxth	r3, r3
 8008196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800819a:	b29a      	uxth	r2, r3
 800819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819e:	801a      	strh	r2, [r3, #0]
 80081a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	e033      	b.n	800821e <USB_EPStartXfer+0x66c>
 80081b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <USB_EPStartXfer+0x624>
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	3301      	adds	r3, #1
 80081d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081da:	b29b      	uxth	r3, r3
 80081dc:	029b      	lsls	r3, r3, #10
 80081de:	b29a      	uxth	r2, r3
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	801a      	strh	r2, [r3, #0]
 80081e4:	e01b      	b.n	800821e <USB_EPStartXfer+0x66c>
 80081e6:	463b      	mov	r3, r7
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d116      	bne.n	800821e <USB_EPStartXfer+0x66c>
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fe:	4413      	add	r3, r2
 8008200:	643b      	str	r3, [r7, #64]	; 0x40
 8008202:	463b      	mov	r3, r7
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	00da      	lsls	r2, r3, #3
 800820a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820c:	4413      	add	r3, r2
 800820e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	b29a      	uxth	r2, r3
 800821a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800821e:	463b      	mov	r3, r7
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	895b      	ldrh	r3, [r3, #10]
 8008224:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008228:	463b      	mov	r3, r7
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6959      	ldr	r1, [r3, #20]
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008232:	b29b      	uxth	r3, r3
 8008234:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008238:	1d38      	adds	r0, r7, #4
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	f000 fec5 	bl	8008fca <USB_WritePMA>
 8008240:	e1a4      	b.n	800858c <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008242:	463b      	mov	r3, r7
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800824c:	1d3b      	adds	r3, r7, #4
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	463b      	mov	r3, r7
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008266:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800826a:	1d3b      	adds	r3, r7, #4
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	463b      	mov	r3, r7
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	441a      	add	r2, r3
 8008278:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800827c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	b29b      	uxth	r3, r3
 800828e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008290:	1d3b      	adds	r3, r7, #4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800829e:	b29b      	uxth	r3, r3
 80082a0:	461a      	mov	r2, r3
 80082a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a4:	4413      	add	r3, r2
 80082a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082a8:	463b      	mov	r3, r7
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	00da      	lsls	r2, r3, #3
 80082b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082b2:	4413      	add	r3, r2
 80082b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80082ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082be:	b29a      	uxth	r2, r3
 80082c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082c4:	463b      	mov	r3, r7
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	891b      	ldrh	r3, [r3, #8]
 80082ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082ce:	463b      	mov	r3, r7
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6959      	ldr	r1, [r3, #20]
 80082d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082de:	1d38      	adds	r0, r7, #4
 80082e0:	6800      	ldr	r0, [r0, #0]
 80082e2:	f000 fe72 	bl	8008fca <USB_WritePMA>
 80082e6:	e151      	b.n	800858c <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80082e8:	463b      	mov	r3, r7
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6a1a      	ldr	r2, [r3, #32]
 80082ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	463b      	mov	r3, r7
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	463b      	mov	r3, r7
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 809b 	beq.w	800844c <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008316:	1d3b      	adds	r3, r7, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	673b      	str	r3, [r7, #112]	; 0x70
 800831c:	463b      	mov	r3, r7
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d164      	bne.n	80083f0 <USB_EPStartXfer+0x83e>
 8008326:	1d3b      	adds	r3, r7, #4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	66bb      	str	r3, [r7, #104]	; 0x68
 800832c:	1d3b      	adds	r3, r7, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008334:	b29b      	uxth	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800833a:	4413      	add	r3, r2
 800833c:	66bb      	str	r3, [r7, #104]	; 0x68
 800833e:	463b      	mov	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	00da      	lsls	r2, r3, #3
 8008346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008348:	4413      	add	r3, r2
 800834a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800834e:	667b      	str	r3, [r7, #100]	; 0x64
 8008350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008354:	2b3e      	cmp	r3, #62	; 0x3e
 8008356:	d91c      	bls.n	8008392 <USB_EPStartXfer+0x7e0>
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	095b      	lsrs	r3, r3, #5
 800835e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008366:	f003 031f 	and.w	r3, r3, #31
 800836a:	2b00      	cmp	r3, #0
 800836c:	d104      	bne.n	8008378 <USB_EPStartXfer+0x7c6>
 800836e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008372:	3b01      	subs	r3, #1
 8008374:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008378:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800837c:	b29b      	uxth	r3, r3
 800837e:	029b      	lsls	r3, r3, #10
 8008380:	b29b      	uxth	r3, r3
 8008382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838a:	b29a      	uxth	r2, r3
 800838c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800838e:	801a      	strh	r2, [r3, #0]
 8008390:	e04a      	b.n	8008428 <USB_EPStartXfer+0x876>
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008396:	2b00      	cmp	r3, #0
 8008398:	d112      	bne.n	80083c0 <USB_EPStartXfer+0x80e>
 800839a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083bc:	801a      	strh	r2, [r3, #0]
 80083be:	e033      	b.n	8008428 <USB_EPStartXfer+0x876>
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c4:	085b      	lsrs	r3, r3, #1
 80083c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d004      	beq.n	80083e0 <USB_EPStartXfer+0x82e>
 80083d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083da:	3301      	adds	r3, #1
 80083dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	029b      	lsls	r3, r3, #10
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	e01b      	b.n	8008428 <USB_EPStartXfer+0x876>
 80083f0:	463b      	mov	r3, r7
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d116      	bne.n	8008428 <USB_EPStartXfer+0x876>
 80083fa:	1d3b      	adds	r3, r7, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008402:	b29b      	uxth	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008408:	4413      	add	r3, r2
 800840a:	673b      	str	r3, [r7, #112]	; 0x70
 800840c:	463b      	mov	r3, r7
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	00da      	lsls	r2, r3, #3
 8008414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008416:	4413      	add	r3, r2
 8008418:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800841c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800841e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008422:	b29a      	uxth	r2, r3
 8008424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008426:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008428:	463b      	mov	r3, r7
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	895b      	ldrh	r3, [r3, #10]
 800842e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008432:	463b      	mov	r3, r7
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6959      	ldr	r1, [r3, #20]
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843c:	b29b      	uxth	r3, r3
 800843e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008442:	1d38      	adds	r0, r7, #4
 8008444:	6800      	ldr	r0, [r0, #0]
 8008446:	f000 fdc0 	bl	8008fca <USB_WritePMA>
 800844a:	e09f      	b.n	800858c <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800844c:	463b      	mov	r3, r7
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d164      	bne.n	8008520 <USB_EPStartXfer+0x96e>
 8008456:	1d3b      	adds	r3, r7, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800845c:	1d3b      	adds	r3, r7, #4
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008464:	b29b      	uxth	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800846a:	4413      	add	r3, r2
 800846c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800846e:	463b      	mov	r3, r7
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	00da      	lsls	r2, r3, #3
 8008476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008478:	4413      	add	r3, r2
 800847a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800847e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008484:	2b3e      	cmp	r3, #62	; 0x3e
 8008486:	d91c      	bls.n	80084c2 <USB_EPStartXfer+0x910>
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008496:	f003 031f 	and.w	r3, r3, #31
 800849a:	2b00      	cmp	r3, #0
 800849c:	d104      	bne.n	80084a8 <USB_EPStartXfer+0x8f6>
 800849e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084a2:	3b01      	subs	r3, #1
 80084a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	029b      	lsls	r3, r3, #10
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	e053      	b.n	800856a <USB_EPStartXfer+0x9b8>
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d112      	bne.n	80084f0 <USB_EPStartXfer+0x93e>
 80084ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ec:	801a      	strh	r2, [r3, #0]
 80084ee:	e03c      	b.n	800856a <USB_EPStartXfer+0x9b8>
 80084f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f4:	085b      	lsrs	r3, r3, #1
 80084f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <USB_EPStartXfer+0x95e>
 8008506:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800850a:	3301      	adds	r3, #1
 800850c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008510:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008514:	b29b      	uxth	r3, r3
 8008516:	029b      	lsls	r3, r3, #10
 8008518:	b29a      	uxth	r2, r3
 800851a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	e024      	b.n	800856a <USB_EPStartXfer+0x9b8>
 8008520:	463b      	mov	r3, r7
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d11f      	bne.n	800856a <USB_EPStartXfer+0x9b8>
 800852a:	1d3b      	adds	r3, r7, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008532:	1d3b      	adds	r3, r7, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853a:	b29b      	uxth	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008542:	4413      	add	r3, r2
 8008544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008548:	463b      	mov	r3, r7
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	00da      	lsls	r2, r3, #3
 8008550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008554:	4413      	add	r3, r2
 8008556:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800855a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	b29a      	uxth	r2, r3
 8008564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008568:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800856a:	463b      	mov	r3, r7
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	891b      	ldrh	r3, [r3, #8]
 8008570:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008574:	463b      	mov	r3, r7
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6959      	ldr	r1, [r3, #20]
 800857a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857e:	b29b      	uxth	r3, r3
 8008580:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008584:	1d38      	adds	r0, r7, #4
 8008586:	6800      	ldr	r0, [r0, #0]
 8008588:	f000 fd1f 	bl	8008fca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	463b      	mov	r3, r7
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a6:	817b      	strh	r3, [r7, #10]
 80085a8:	897b      	ldrh	r3, [r7, #10]
 80085aa:	f083 0310 	eor.w	r3, r3, #16
 80085ae:	817b      	strh	r3, [r7, #10]
 80085b0:	897b      	ldrh	r3, [r7, #10]
 80085b2:	f083 0320 	eor.w	r3, r3, #32
 80085b6:	817b      	strh	r3, [r7, #10]
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	463b      	mov	r3, r7
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	897b      	ldrh	r3, [r7, #10]
 80085c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8013      	strh	r3, [r2, #0]
 80085dc:	e3b5      	b.n	8008d4a <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80085de:	463b      	mov	r3, r7
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	7b1b      	ldrb	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 8090 	bne.w	800870a <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80085ea:	463b      	mov	r3, r7
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	463b      	mov	r3, r7
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d90e      	bls.n	8008618 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80085fa:	463b      	mov	r3, r7
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008604:	463b      	mov	r3, r7
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	463b      	mov	r3, r7
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	619a      	str	r2, [r3, #24]
 8008616:	e008      	b.n	800862a <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8008618:	463b      	mov	r3, r7
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008622:	463b      	mov	r3, r7
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2200      	movs	r2, #0
 8008628:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800862a:	1d3b      	adds	r3, r7, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008632:	1d3b      	adds	r3, r7, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863a:	b29b      	uxth	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008642:	4413      	add	r3, r2
 8008644:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	00da      	lsls	r2, r3, #3
 8008650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008654:	4413      	add	r3, r2
 8008656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800865a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800865e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008662:	2b3e      	cmp	r3, #62	; 0x3e
 8008664:	d91d      	bls.n	80086a2 <USB_EPStartXfer+0xaf0>
 8008666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <USB_EPStartXfer+0xad4>
 800867c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008680:	3b01      	subs	r3, #1
 8008682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008686:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800868a:	b29b      	uxth	r3, r3
 800868c:	029b      	lsls	r3, r3, #10
 800868e:	b29b      	uxth	r3, r3
 8008690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008698:	b29a      	uxth	r2, r3
 800869a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	e325      	b.n	8008cee <USB_EPStartXfer+0x113c>
 80086a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d116      	bne.n	80086d8 <USB_EPStartXfer+0xb26>
 80086aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e30a      	b.n	8008cee <USB_EPStartXfer+0x113c>
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <USB_EPStartXfer+0xb46>
 80086ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	029b      	lsls	r3, r3, #10
 8008700:	b29a      	uxth	r2, r3
 8008702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	e2f1      	b.n	8008cee <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800870a:	463b      	mov	r3, r7
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	78db      	ldrb	r3, [r3, #3]
 8008710:	2b02      	cmp	r3, #2
 8008712:	f040 818f 	bne.w	8008a34 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008716:	463b      	mov	r3, r7
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d175      	bne.n	800880c <USB_EPStartXfer+0xc5a>
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008728:	1d3b      	adds	r3, r7, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008730:	b29b      	uxth	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008738:	4413      	add	r3, r2
 800873a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800873e:	463b      	mov	r3, r7
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	00da      	lsls	r2, r3, #3
 8008746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800874a:	4413      	add	r3, r2
 800874c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008754:	463b      	mov	r3, r7
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	2b3e      	cmp	r3, #62	; 0x3e
 800875c:	d91f      	bls.n	800879e <USB_EPStartXfer+0xbec>
 800875e:	463b      	mov	r3, r7
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	095b      	lsrs	r3, r3, #5
 8008766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <USB_EPStartXfer+0xbd0>
 8008778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800877c:	3b01      	subs	r3, #1
 800877e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008786:	b29b      	uxth	r3, r3
 8008788:	029b      	lsls	r3, r3, #10
 800878a:	b29b      	uxth	r3, r3
 800878c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008794:	b29a      	uxth	r2, r3
 8008796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	e05c      	b.n	8008858 <USB_EPStartXfer+0xca6>
 800879e:	463b      	mov	r3, r7
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d116      	bne.n	80087d6 <USB_EPStartXfer+0xc24>
 80087a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087d2:	801a      	strh	r2, [r3, #0]
 80087d4:	e040      	b.n	8008858 <USB_EPStartXfer+0xca6>
 80087d6:	463b      	mov	r3, r7
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087e2:	463b      	mov	r3, r7
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d004      	beq.n	80087fa <USB_EPStartXfer+0xc48>
 80087f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f4:	3301      	adds	r3, #1
 80087f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fe:	b29b      	uxth	r3, r3
 8008800:	029b      	lsls	r3, r3, #10
 8008802:	b29a      	uxth	r2, r3
 8008804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008808:	801a      	strh	r2, [r3, #0]
 800880a:	e025      	b.n	8008858 <USB_EPStartXfer+0xca6>
 800880c:	463b      	mov	r3, r7
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d120      	bne.n	8008858 <USB_EPStartXfer+0xca6>
 8008816:	1d3b      	adds	r3, r7, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800881e:	1d3b      	adds	r3, r7, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008826:	b29b      	uxth	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800882e:	4413      	add	r3, r2
 8008830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008834:	463b      	mov	r3, r7
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	00da      	lsls	r2, r3, #3
 800883c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008840:	4413      	add	r3, r2
 8008842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800884a:	463b      	mov	r3, r7
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	b29a      	uxth	r2, r3
 8008852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	1d3b      	adds	r3, r7, #4
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008860:	463b      	mov	r3, r7
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d175      	bne.n	8008956 <USB_EPStartXfer+0xda4>
 800886a:	1d3b      	adds	r3, r7, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008882:	4413      	add	r3, r2
 8008884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008888:	463b      	mov	r3, r7
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	00da      	lsls	r2, r3, #3
 8008890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008894:	4413      	add	r3, r2
 8008896:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800889a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800889e:	463b      	mov	r3, r7
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b3e      	cmp	r3, #62	; 0x3e
 80088a6:	d91f      	bls.n	80088e8 <USB_EPStartXfer+0xd36>
 80088a8:	463b      	mov	r3, r7
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088b4:	463b      	mov	r3, r7
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <USB_EPStartXfer+0xd1a>
 80088c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c6:	3b01      	subs	r3, #1
 80088c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	029b      	lsls	r3, r3, #10
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e058      	b.n	800899a <USB_EPStartXfer+0xde8>
 80088e8:	463b      	mov	r3, r7
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d116      	bne.n	8008920 <USB_EPStartXfer+0xd6e>
 80088f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088fe:	b29a      	uxth	r2, r3
 8008900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008904:	801a      	strh	r2, [r3, #0]
 8008906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008916:	b29a      	uxth	r2, r3
 8008918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	e03c      	b.n	800899a <USB_EPStartXfer+0xde8>
 8008920:	463b      	mov	r3, r7
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	085b      	lsrs	r3, r3, #1
 8008928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800892c:	463b      	mov	r3, r7
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <USB_EPStartXfer+0xd92>
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893e:	3301      	adds	r3, #1
 8008940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008948:	b29b      	uxth	r3, r3
 800894a:	029b      	lsls	r3, r3, #10
 800894c:	b29a      	uxth	r2, r3
 800894e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008952:	801a      	strh	r2, [r3, #0]
 8008954:	e021      	b.n	800899a <USB_EPStartXfer+0xde8>
 8008956:	463b      	mov	r3, r7
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	785b      	ldrb	r3, [r3, #1]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d11c      	bne.n	800899a <USB_EPStartXfer+0xde8>
 8008960:	1d3b      	adds	r3, r7, #4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008968:	b29b      	uxth	r3, r3
 800896a:	461a      	mov	r2, r3
 800896c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008970:	4413      	add	r3, r2
 8008972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008976:	463b      	mov	r3, r7
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	00da      	lsls	r2, r3, #3
 800897e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008982:	4413      	add	r3, r2
 8008984:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008988:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800898c:	463b      	mov	r3, r7
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	b29a      	uxth	r2, r3
 8008994:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008998:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800899a:	463b      	mov	r3, r7
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 81a4 	beq.w	8008cee <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	463b      	mov	r3, r7
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <USB_EPStartXfer+0xe20>
 80089c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f040 8187 	bne.w	8008cee <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f040 8180 	bne.w	8008cee <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	463b      	mov	r3, r7
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a08:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a0c:	1d3b      	adds	r3, r7, #4
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	463b      	mov	r3, r7
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	441a      	add	r2, r3
 8008a1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]
 8008a32:	e15c      	b.n	8008cee <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a34:	463b      	mov	r3, r7
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	78db      	ldrb	r3, [r3, #3]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	f040 8155 	bne.w	8008cea <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	463b      	mov	r3, r7
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d90e      	bls.n	8008a6e <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008a50:	463b      	mov	r3, r7
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008a5a:	463b      	mov	r3, r7
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	699a      	ldr	r2, [r3, #24]
 8008a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	463b      	mov	r3, r7
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	619a      	str	r2, [r3, #24]
 8008a6c:	e008      	b.n	8008a80 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8008a6e:	463b      	mov	r3, r7
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008a78:	463b      	mov	r3, r7
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a80:	463b      	mov	r3, r7
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d16f      	bne.n	8008b6a <USB_EPStartXfer+0xfb8>
 8008a8a:	1d3b      	adds	r3, r7, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a92:	1d3b      	adds	r3, r7, #4
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	00da      	lsls	r2, r3, #3
 8008ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ac4:	d91d      	bls.n	8008b02 <USB_EPStartXfer+0xf50>
 8008ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad4:	f003 031f 	and.w	r3, r3, #31
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <USB_EPStartXfer+0xf34>
 8008adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	029b      	lsls	r3, r3, #10
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008afe:	801a      	strh	r2, [r3, #0]
 8008b00:	e058      	b.n	8008bb4 <USB_EPStartXfer+0x1002>
 8008b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d116      	bne.n	8008b38 <USB_EPStartXfer+0xf86>
 8008b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b1c:	801a      	strh	r2, [r3, #0]
 8008b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b34:	801a      	strh	r2, [r3, #0]
 8008b36:	e03d      	b.n	8008bb4 <USB_EPStartXfer+0x1002>
 8008b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b3c:	085b      	lsrs	r3, r3, #1
 8008b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d004      	beq.n	8008b58 <USB_EPStartXfer+0xfa6>
 8008b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b52:	3301      	adds	r3, #1
 8008b54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	029b      	lsls	r3, r3, #10
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b66:	801a      	strh	r2, [r3, #0]
 8008b68:	e024      	b.n	8008bb4 <USB_EPStartXfer+0x1002>
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11f      	bne.n	8008bb4 <USB_EPStartXfer+0x1002>
 8008b74:	1d3b      	adds	r3, r7, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008b7c:	1d3b      	adds	r3, r7, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008b92:	463b      	mov	r3, r7
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	00da      	lsls	r2, r3, #3
 8008b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008bb2:	801a      	strh	r2, [r3, #0]
 8008bb4:	1d3b      	adds	r3, r7, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bbc:	463b      	mov	r3, r7
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d16f      	bne.n	8008ca6 <USB_EPStartXfer+0x10f4>
 8008bc6:	1d3b      	adds	r3, r7, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008bce:	1d3b      	adds	r3, r7, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bde:	4413      	add	r3, r2
 8008be0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008be4:	463b      	mov	r3, r7
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	00da      	lsls	r2, r3, #3
 8008bec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8008c00:	d91d      	bls.n	8008c3e <USB_EPStartXfer+0x108c>
 8008c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c06:	095b      	lsrs	r3, r3, #5
 8008c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	f003 031f 	and.w	r3, r3, #31
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <USB_EPStartXfer+0x1070>
 8008c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	029b      	lsls	r3, r3, #10
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	e057      	b.n	8008cee <USB_EPStartXfer+0x113c>
 8008c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d116      	bne.n	8008c74 <USB_EPStartXfer+0x10c2>
 8008c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c58:	801a      	strh	r2, [r3, #0]
 8008c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c70:	801a      	strh	r2, [r3, #0]
 8008c72:	e03c      	b.n	8008cee <USB_EPStartXfer+0x113c>
 8008c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c78:	085b      	lsrs	r3, r3, #1
 8008c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <USB_EPStartXfer+0x10e2>
 8008c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c8e:	3301      	adds	r3, #1
 8008c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	029b      	lsls	r3, r3, #10
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ca2:	801a      	strh	r2, [r3, #0]
 8008ca4:	e023      	b.n	8008cee <USB_EPStartXfer+0x113c>
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d11e      	bne.n	8008cee <USB_EPStartXfer+0x113c>
 8008cb0:	1d3b      	adds	r3, r7, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	00da      	lsls	r2, r3, #3
 8008cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	e001      	b.n	8008cee <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e02e      	b.n	8008d4c <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cee:	1d3b      	adds	r3, r7, #4
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	463b      	mov	r3, r7
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d020      	beq.n	8008daa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7e:	81bb      	strh	r3, [r7, #12]
 8008d80:	89bb      	ldrh	r3, [r7, #12]
 8008d82:	f083 0310 	eor.w	r3, r3, #16
 8008d86:	81bb      	strh	r3, [r7, #12]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	441a      	add	r2, r3
 8008d92:	89bb      	ldrh	r3, [r7, #12]
 8008d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	8013      	strh	r3, [r2, #0]
 8008da8:	e01f      	b.n	8008dea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	81fb      	strh	r3, [r7, #14]
 8008dc2:	89fb      	ldrh	r3, [r7, #14]
 8008dc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008dc8:	81fb      	strh	r3, [r7, #14]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	441a      	add	r2, r3
 8008dd4:	89fb      	ldrh	r3, [r7, #14]
 8008dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	7b1b      	ldrb	r3, [r3, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f040 809d 	bne.w	8008f46 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d04c      	beq.n	8008eae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	823b      	strh	r3, [r7, #16]
 8008e22:	8a3b      	ldrh	r3, [r7, #16]
 8008e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <USB_EPClearStall+0x6c>
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e42:	81fb      	strh	r3, [r7, #14]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	441a      	add	r2, r3
 8008e4e:	89fb      	ldrh	r3, [r7, #14]
 8008e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	78db      	ldrb	r3, [r3, #3]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d06c      	beq.n	8008f46 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e82:	81bb      	strh	r3, [r7, #12]
 8008e84:	89bb      	ldrh	r3, [r7, #12]
 8008e86:	f083 0320 	eor.w	r3, r3, #32
 8008e8a:	81bb      	strh	r3, [r7, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	89bb      	ldrh	r3, [r7, #12]
 8008e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]
 8008eac:	e04b      	b.n	8008f46 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	82fb      	strh	r3, [r7, #22]
 8008ebc:	8afb      	ldrh	r3, [r7, #22]
 8008ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01b      	beq.n	8008efe <USB_EPClearStall+0x106>
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008edc:	82bb      	strh	r3, [r7, #20]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	441a      	add	r2, r3
 8008ee8:	8abb      	ldrh	r3, [r7, #20]
 8008eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f14:	827b      	strh	r3, [r7, #18]
 8008f16:	8a7b      	ldrh	r3, [r7, #18]
 8008f18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f1c:	827b      	strh	r3, [r7, #18]
 8008f1e:	8a7b      	ldrh	r3, [r7, #18]
 8008f20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f24:	827b      	strh	r3, [r7, #18]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	8a7b      	ldrh	r3, [r7, #18]
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d103      	bne.n	8008f6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2280      	movs	r2, #128	; 0x80
 8008f6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b08d      	sub	sp, #52	; 0x34
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	460b      	mov	r3, r1
 8008fda:	80fb      	strh	r3, [r7, #6]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008fe0:	88bb      	ldrh	r3, [r7, #4]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ff0:	88fa      	ldrh	r2, [r7, #6]
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ffa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009000:	e01b      	b.n	800903a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	3301      	adds	r3, #1
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	b29b      	uxth	r3, r3
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	b29b      	uxth	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	b29a      	uxth	r2, r3
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	3302      	adds	r3, #2
 800902c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	3301      	adds	r3, #1
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	3b01      	subs	r3, #1
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e0      	bne.n	8009002 <USB_WritePMA+0x38>
  }
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	3734      	adds	r7, #52	; 0x34
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800904e:	b480      	push	{r7}
 8009050:	b08b      	sub	sp, #44	; 0x2c
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	4611      	mov	r1, r2
 800905a:	461a      	mov	r2, r3
 800905c:	460b      	mov	r3, r1
 800905e:	80fb      	strh	r3, [r7, #6]
 8009060:	4613      	mov	r3, r2
 8009062:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009064:	88bb      	ldrh	r3, [r7, #4]
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	b29b      	uxth	r3, r3
 800906a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009074:	88fa      	ldrh	r2, [r7, #6]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800907e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
 8009084:	e018      	b.n	80090b8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	3302      	adds	r3, #2
 8009092:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	3301      	adds	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	0a1b      	lsrs	r3, r3, #8
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	3301      	adds	r3, #1
 80090b0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	3b01      	subs	r3, #1
 80090b6:	627b      	str	r3, [r7, #36]	; 0x24
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e3      	bne.n	8009086 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090be:	88bb      	ldrh	r3, [r7, #4]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	701a      	strb	r2, [r3, #0]
  }
}
 80090da:	bf00      	nop
 80090dc:	372c      	adds	r7, #44	; 0x2c
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090f2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80090f6:	f002 f909 	bl	800b30c <USBD_static_malloc>
 80090fa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d105      	bne.n	800910e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800910a:	2302      	movs	r3, #2
 800910c:	e066      	b.n	80091dc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	7c1b      	ldrb	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d119      	bne.n	8009152 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800911e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009122:	2202      	movs	r2, #2
 8009124:	2181      	movs	r1, #129	; 0x81
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 ff95 	bl	800b056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009136:	2202      	movs	r2, #2
 8009138:	2101      	movs	r1, #1
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 ff8b 	bl	800b056 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2210      	movs	r2, #16
 800914c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009150:	e016      	b.n	8009180 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	2202      	movs	r2, #2
 8009156:	2181      	movs	r1, #129	; 0x81
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 ff7c 	bl	800b056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009164:	2340      	movs	r3, #64	; 0x40
 8009166:	2202      	movs	r2, #2
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 ff73 	bl	800b056 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2210      	movs	r2, #16
 800917c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009180:	2308      	movs	r3, #8
 8009182:	2203      	movs	r2, #3
 8009184:	2182      	movs	r1, #130	; 0x82
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 ff65 	bl	800b056 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	7c1b      	ldrb	r3, [r3, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d109      	bne.n	80091ca <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091c0:	2101      	movs	r1, #1
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f002 f837 	bl	800b236 <USBD_LL_PrepareReceive>
 80091c8:	e007      	b.n	80091da <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091d0:	2340      	movs	r3, #64	; 0x40
 80091d2:	2101      	movs	r1, #1
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f002 f82e 	bl	800b236 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091f0:	2181      	movs	r1, #129	; 0x81
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 ff55 	bl	800b0a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091fe:	2101      	movs	r1, #1
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f001 ff4e 	bl	800b0a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800920e:	2182      	movs	r1, #130	; 0x82
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 ff46 	bl	800b0a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00e      	beq.n	800924e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009240:	4618      	mov	r0, r3
 8009242:	f002 f871 	bl	800b328 <USBD_static_free>
    pdev->pClassData = NULL;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009268:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	e0af      	b.n	80093e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009288:	2b00      	cmp	r3, #0
 800928a:	d03f      	beq.n	800930c <USBD_CDC_Setup+0xb4>
 800928c:	2b20      	cmp	r3, #32
 800928e:	f040 809f 	bne.w	80093d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	88db      	ldrh	r3, [r3, #6]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d02e      	beq.n	80092f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	b25b      	sxtb	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	da16      	bge.n	80092d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	88d2      	ldrh	r2, [r2, #6]
 80092b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	88db      	ldrh	r3, [r3, #6]
 80092bc:	2b07      	cmp	r3, #7
 80092be:	bf28      	it	cs
 80092c0:	2307      	movcs	r3, #7
 80092c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	89fa      	ldrh	r2, [r7, #14]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 facf 	bl	800a86e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80092d0:	e085      	b.n	80093de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	785a      	ldrb	r2, [r3, #1]
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	88db      	ldrh	r3, [r3, #6]
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80092e8:	6939      	ldr	r1, [r7, #16]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	88db      	ldrh	r3, [r3, #6]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 fae8 	bl	800a8c6 <USBD_CtlPrepareRx>
      break;
 80092f6:	e072      	b.n	80093de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	7850      	ldrb	r0, [r2, #1]
 8009304:	2200      	movs	r2, #0
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	4798      	blx	r3
      break;
 800930a:	e068      	b.n	80093de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	2b0b      	cmp	r3, #11
 8009312:	d852      	bhi.n	80093ba <USBD_CDC_Setup+0x162>
 8009314:	a201      	add	r2, pc, #4	; (adr r2, 800931c <USBD_CDC_Setup+0xc4>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	0800934d 	.word	0x0800934d
 8009320:	080093c9 	.word	0x080093c9
 8009324:	080093bb 	.word	0x080093bb
 8009328:	080093bb 	.word	0x080093bb
 800932c:	080093bb 	.word	0x080093bb
 8009330:	080093bb 	.word	0x080093bb
 8009334:	080093bb 	.word	0x080093bb
 8009338:	080093bb 	.word	0x080093bb
 800933c:	080093bb 	.word	0x080093bb
 8009340:	080093bb 	.word	0x080093bb
 8009344:	08009377 	.word	0x08009377
 8009348:	080093a1 	.word	0x080093a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b03      	cmp	r3, #3
 8009356:	d107      	bne.n	8009368 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009358:	f107 030a 	add.w	r3, r7, #10
 800935c:	2202      	movs	r2, #2
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 fa84 	bl	800a86e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009366:	e032      	b.n	80093ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fa0e 	bl	800a78c <USBD_CtlError>
            ret = USBD_FAIL;
 8009370:	2303      	movs	r3, #3
 8009372:	75fb      	strb	r3, [r7, #23]
          break;
 8009374:	e02b      	b.n	80093ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b03      	cmp	r3, #3
 8009380:	d107      	bne.n	8009392 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009382:	f107 030d 	add.w	r3, r7, #13
 8009386:	2201      	movs	r2, #1
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 fa6f 	bl	800a86e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009390:	e01d      	b.n	80093ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 f9f9 	bl	800a78c <USBD_CtlError>
            ret = USBD_FAIL;
 800939a:	2303      	movs	r3, #3
 800939c:	75fb      	strb	r3, [r7, #23]
          break;
 800939e:	e016      	b.n	80093ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d00f      	beq.n	80093cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 f9ec 	bl	800a78c <USBD_CtlError>
            ret = USBD_FAIL;
 80093b4:	2303      	movs	r3, #3
 80093b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093b8:	e008      	b.n	80093cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 f9e5 	bl	800a78c <USBD_CtlError>
          ret = USBD_FAIL;
 80093c2:	2303      	movs	r3, #3
 80093c4:	75fb      	strb	r3, [r7, #23]
          break;
 80093c6:	e002      	b.n	80093ce <USBD_CDC_Setup+0x176>
          break;
 80093c8:	bf00      	nop
 80093ca:	e008      	b.n	80093de <USBD_CDC_Setup+0x186>
          break;
 80093cc:	bf00      	nop
      }
      break;
 80093ce:	e006      	b.n	80093de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 f9da 	bl	800a78c <USBD_CtlError>
      ret = USBD_FAIL;
 80093d8:	2303      	movs	r3, #3
 80093da:	75fb      	strb	r3, [r7, #23]
      break;
 80093dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80093de:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009406:	2303      	movs	r3, #3
 8009408:	e04f      	b.n	80094aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009410:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009412:	78fa      	ldrb	r2, [r7, #3]
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	440b      	add	r3, r1
 8009420:	3318      	adds	r3, #24
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d029      	beq.n	800947c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009428:	78fa      	ldrb	r2, [r7, #3]
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	3318      	adds	r3, #24
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	78f9      	ldrb	r1, [r7, #3]
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	460b      	mov	r3, r1
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	4403      	add	r3, r0
 8009448:	3338      	adds	r3, #56	; 0x38
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009450:	fb03 f301 	mul.w	r3, r3, r1
 8009454:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009456:	2b00      	cmp	r3, #0
 8009458:	d110      	bne.n	800947c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	3318      	adds	r3, #24
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800946e:	78f9      	ldrb	r1, [r7, #3]
 8009470:	2300      	movs	r3, #0
 8009472:	2200      	movs	r2, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 febd 	bl	800b1f4 <USBD_LL_Transmit>
 800947a:	e015      	b.n	80094a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2200      	movs	r2, #0
 8009480:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094a4:	78fa      	ldrb	r2, [r7, #3]
 80094a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e015      	b.n	8009500 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 fecd 	bl	800b278 <USBD_LL_GetRxDataSize>
 80094de:	4602      	mov	r2, r0
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094fa:	4611      	mov	r1, r2
 80094fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009516:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800951e:	2303      	movs	r3, #3
 8009520:	e01b      	b.n	800955a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d015      	beq.n	8009558 <USBD_CDC_EP0_RxReady+0x50>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009532:	2bff      	cmp	r3, #255	; 0xff
 8009534:	d010      	beq.n	8009558 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009544:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800954c:	b292      	uxth	r2, r2
 800954e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	22ff      	movs	r2, #255	; 0xff
 8009554:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2243      	movs	r2, #67	; 0x43
 8009570:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009572:	4b03      	ldr	r3, [pc, #12]	; (8009580 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009574:	4618      	mov	r0, r3
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	200000b0 	.word	0x200000b0

08009584 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2243      	movs	r2, #67	; 0x43
 8009590:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009592:	4b03      	ldr	r3, [pc, #12]	; (80095a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	2000006c 	.word	0x2000006c

080095a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2243      	movs	r2, #67	; 0x43
 80095b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095b2:	4b03      	ldr	r3, [pc, #12]	; (80095c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	200000f4 	.word	0x200000f4

080095c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	220a      	movs	r2, #10
 80095d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095d2:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20000028 	.word	0x20000028

080095e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e004      	b.n	8009602 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800960e:	b480      	push	{r7}
 8009610:	b087      	sub	sp, #28
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009620:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009628:	2303      	movs	r3, #3
 800962a:	e008      	b.n	800963e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800964a:	b480      	push	{r7}
 800964c:	b085      	sub	sp, #20
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800965a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009662:	2303      	movs	r3, #3
 8009664:	e004      	b.n	8009670 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800968a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800968c:	2301      	movs	r3, #1
 800968e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800969a:	2303      	movs	r3, #3
 800969c:	e01a      	b.n	80096d4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d114      	bne.n	80096d2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80096c6:	2181      	movs	r1, #129	; 0x81
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 fd93 	bl	800b1f4 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e016      	b.n	8009728 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7c1b      	ldrb	r3, [r3, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800970c:	2101      	movs	r1, #1
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fd91 	bl	800b236 <USBD_LL_PrepareReceive>
 8009714:	e007      	b.n	8009726 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800971c:	2340      	movs	r3, #64	; 0x40
 800971e:	2101      	movs	r1, #1
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 fd88 	bl	800b236 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009744:	2303      	movs	r3, #3
 8009746:	e01f      	b.n	8009788 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	79fa      	ldrb	r2, [r7, #7]
 800977a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f001 fbef 	bl	800af60 <USBD_LL_Init>
 8009782:	4603      	mov	r3, r0
 8009784:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e016      	b.n	80097d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	f107 020e 	add.w	r2, r7, #14
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
 80097cc:	4602      	mov	r2, r0
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fc1a 	bl	800b020 <USBD_LL_Start>
 80097ec:	4603      	mov	r3, r0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009818:	2303      	movs	r3, #3
 800981a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	78fa      	ldrb	r2, [r7, #3]
 8009830:	4611      	mov	r1, r2
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d007      	beq.n	800986a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	4798      	blx	r3
  }

  return USBD_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 ff46 	bl	800a718 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800989a:	461a      	mov	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098a8:	f003 031f 	and.w	r3, r3, #31
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d01a      	beq.n	80098e6 <USBD_LL_SetupStage+0x72>
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d822      	bhi.n	80098fa <USBD_LL_SetupStage+0x86>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <USBD_LL_SetupStage+0x4a>
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d00a      	beq.n	80098d2 <USBD_LL_SetupStage+0x5e>
 80098bc:	e01d      	b.n	80098fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f9ee 	bl	8009ca8 <USBD_StdDevReq>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
      break;
 80098d0:	e020      	b.n	8009914 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa52 	bl	8009d84 <USBD_StdItfReq>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
      break;
 80098e4:	e016      	b.n	8009914 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa91 	bl	8009e16 <USBD_StdEPReq>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]
      break;
 80098f8:	e00c      	b.n	8009914 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009904:	b2db      	uxtb	r3, r3
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 fbe9 	bl	800b0e0 <USBD_LL_StallEP>
 800990e:	4603      	mov	r3, r0
 8009910:	73fb      	strb	r3, [r7, #15]
      break;
 8009912:	bf00      	nop
  }

  return ret;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b086      	sub	sp, #24
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	460b      	mov	r3, r1
 8009928:	607a      	str	r2, [r7, #4]
 800992a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d138      	bne.n	80099a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009938:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009940:	2b03      	cmp	r3, #3
 8009942:	d14a      	bne.n	80099da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	429a      	cmp	r2, r3
 800994e:	d913      	bls.n	8009978 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	1ad2      	subs	r2, r2, r3
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	4293      	cmp	r3, r2
 8009968:	bf28      	it	cs
 800996a:	4613      	movcs	r3, r2
 800996c:	461a      	mov	r2, r3
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 ffc5 	bl	800a900 <USBD_CtlContinueRx>
 8009976:	e030      	b.n	80099da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b03      	cmp	r3, #3
 8009982:	d10b      	bne.n	800999c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d005      	beq.n	800999c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 ffc0 	bl	800a922 <USBD_CtlSendStatus>
 80099a2:	e01a      	b.n	80099da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d114      	bne.n	80099da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00e      	beq.n	80099da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	7afa      	ldrb	r2, [r7, #11]
 80099c6:	4611      	mov	r1, r2
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	4798      	blx	r3
 80099cc:	4603      	mov	r3, r0
 80099ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	e000      	b.n	80099dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	460b      	mov	r3, r1
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80099f2:	7afb      	ldrb	r3, [r7, #11]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d16b      	bne.n	8009ad0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3314      	adds	r3, #20
 80099fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d156      	bne.n	8009ab6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d914      	bls.n	8009a3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	1ad2      	subs	r2, r2, r3
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	461a      	mov	r2, r3
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 ff3a 	bl	800a8a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a30:	2300      	movs	r3, #0
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f001 fbfd 	bl	800b236 <USBD_LL_PrepareReceive>
 8009a3c:	e03b      	b.n	8009ab6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d11c      	bne.n	8009a84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d316      	bcc.n	8009a84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d20f      	bcs.n	8009a84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a64:	2200      	movs	r2, #0
 8009a66:	2100      	movs	r1, #0
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 ff1b 	bl	800a8a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a76:	2300      	movs	r3, #0
 8009a78:	2200      	movs	r2, #0
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f001 fbda 	bl	800b236 <USBD_LL_PrepareReceive>
 8009a82:	e018      	b.n	8009ab6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d10b      	bne.n	8009aa8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aa8:	2180      	movs	r1, #128	; 0x80
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f001 fb18 	bl	800b0e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 ff49 	bl	800a948 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d122      	bne.n	8009b06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff fe98 	bl	80097f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ace:	e01a      	b.n	8009b06 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d114      	bne.n	8009b06 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00e      	beq.n	8009b06 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	7afa      	ldrb	r2, [r7, #11]
 8009af2:	4611      	mov	r1, r2
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	4798      	blx	r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	e000      	b.n	8009b08 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d101      	bne.n	8009b44 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e02f      	b.n	8009ba4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00f      	beq.n	8009b6e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d009      	beq.n	8009b6e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	6852      	ldr	r2, [r2, #4]
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	4611      	mov	r1, r2
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b6e:	2340      	movs	r3, #64	; 0x40
 8009b70:	2200      	movs	r2, #0
 8009b72:	2100      	movs	r1, #0
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 fa6e 	bl	800b056 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2240      	movs	r2, #64	; 0x40
 8009b86:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b8a:	2340      	movs	r3, #64	; 0x40
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2180      	movs	r1, #128	; 0x80
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 fa60 	bl	800b056 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2240      	movs	r2, #64	; 0x40
 8009ba0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	78fa      	ldrb	r2, [r7, #3]
 8009bbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2204      	movs	r2, #4
 8009be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	d106      	bne.n	8009c1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e012      	b.n	8009c64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d10b      	bne.n	8009c62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d005      	beq.n	8009c62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	3301      	adds	r3, #1
 8009c82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c8a:	8a3b      	ldrh	r3, [r7, #16]
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	b21a      	sxth	r2, r3
 8009c90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	b21b      	sxth	r3, r3
 8009c98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cbe:	2b40      	cmp	r3, #64	; 0x40
 8009cc0:	d005      	beq.n	8009cce <USBD_StdDevReq+0x26>
 8009cc2:	2b40      	cmp	r3, #64	; 0x40
 8009cc4:	d853      	bhi.n	8009d6e <USBD_StdDevReq+0xc6>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <USBD_StdDevReq+0x3a>
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d14f      	bne.n	8009d6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	4798      	blx	r3
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]
      break;
 8009ce0:	e04a      	b.n	8009d78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	785b      	ldrb	r3, [r3, #1]
 8009ce6:	2b09      	cmp	r3, #9
 8009ce8:	d83b      	bhi.n	8009d62 <USBD_StdDevReq+0xba>
 8009cea:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <USBD_StdDevReq+0x48>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d45 	.word	0x08009d45
 8009cf4:	08009d59 	.word	0x08009d59
 8009cf8:	08009d63 	.word	0x08009d63
 8009cfc:	08009d4f 	.word	0x08009d4f
 8009d00:	08009d63 	.word	0x08009d63
 8009d04:	08009d23 	.word	0x08009d23
 8009d08:	08009d19 	.word	0x08009d19
 8009d0c:	08009d63 	.word	0x08009d63
 8009d10:	08009d3b 	.word	0x08009d3b
 8009d14:	08009d2d 	.word	0x08009d2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f9de 	bl	800a0dc <USBD_GetDescriptor>
          break;
 8009d20:	e024      	b.n	8009d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb6d 	bl	800a404 <USBD_SetAddress>
          break;
 8009d2a:	e01f      	b.n	8009d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fbac 	bl	800a48c <USBD_SetConfig>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
          break;
 8009d38:	e018      	b.n	8009d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fc4b 	bl	800a5d8 <USBD_GetConfig>
          break;
 8009d42:	e013      	b.n	8009d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fc7c 	bl	800a644 <USBD_GetStatus>
          break;
 8009d4c:	e00e      	b.n	8009d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fcab 	bl	800a6ac <USBD_SetFeature>
          break;
 8009d56:	e009      	b.n	8009d6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fcba 	bl	800a6d4 <USBD_ClrFeature>
          break;
 8009d60:	e004      	b.n	8009d6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fd11 	bl	800a78c <USBD_CtlError>
          break;
 8009d6a:	bf00      	nop
      }
      break;
 8009d6c:	e004      	b.n	8009d78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fd0b 	bl	800a78c <USBD_CtlError>
      break;
 8009d76:	bf00      	nop
  }

  return ret;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop

08009d84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d9a:	2b40      	cmp	r3, #64	; 0x40
 8009d9c:	d005      	beq.n	8009daa <USBD_StdItfReq+0x26>
 8009d9e:	2b40      	cmp	r3, #64	; 0x40
 8009da0:	d82f      	bhi.n	8009e02 <USBD_StdItfReq+0x7e>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <USBD_StdItfReq+0x26>
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d12b      	bne.n	8009e02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d81d      	bhi.n	8009df4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	889b      	ldrh	r3, [r3, #4]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d813      	bhi.n	8009dea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	4798      	blx	r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	88db      	ldrh	r3, [r3, #6]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d110      	bne.n	8009dfe <USBD_StdItfReq+0x7a>
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10d      	bne.n	8009dfe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fd9d 	bl	800a922 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009de8:	e009      	b.n	8009dfe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fccd 	bl	800a78c <USBD_CtlError>
          break;
 8009df2:	e004      	b.n	8009dfe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fcc8 	bl	800a78c <USBD_CtlError>
          break;
 8009dfc:	e000      	b.n	8009e00 <USBD_StdItfReq+0x7c>
          break;
 8009dfe:	bf00      	nop
      }
      break;
 8009e00:	e004      	b.n	8009e0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fcc1 	bl	800a78c <USBD_CtlError>
      break;
 8009e0a:	bf00      	nop
  }

  return ret;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	889b      	ldrh	r3, [r3, #4]
 8009e28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e32:	2b40      	cmp	r3, #64	; 0x40
 8009e34:	d007      	beq.n	8009e46 <USBD_StdEPReq+0x30>
 8009e36:	2b40      	cmp	r3, #64	; 0x40
 8009e38:	f200 8145 	bhi.w	800a0c6 <USBD_StdEPReq+0x2b0>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00c      	beq.n	8009e5a <USBD_StdEPReq+0x44>
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	f040 8140 	bne.w	800a0c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
      break;
 8009e58:	e13a      	b.n	800a0d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d007      	beq.n	8009e72 <USBD_StdEPReq+0x5c>
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	f300 8129 	bgt.w	800a0ba <USBD_StdEPReq+0x2a4>
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d07f      	beq.n	8009f6c <USBD_StdEPReq+0x156>
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d03c      	beq.n	8009eea <USBD_StdEPReq+0xd4>
 8009e70:	e123      	b.n	800a0ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d002      	beq.n	8009e84 <USBD_StdEPReq+0x6e>
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d016      	beq.n	8009eb0 <USBD_StdEPReq+0x9a>
 8009e82:	e02c      	b.n	8009ede <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00d      	beq.n	8009ea6 <USBD_StdEPReq+0x90>
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	2b80      	cmp	r3, #128	; 0x80
 8009e8e:	d00a      	beq.n	8009ea6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f923 	bl	800b0e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e9a:	2180      	movs	r1, #128	; 0x80
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f001 f91f 	bl	800b0e0 <USBD_LL_StallEP>
 8009ea2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ea4:	e020      	b.n	8009ee8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fc6f 	bl	800a78c <USBD_CtlError>
              break;
 8009eae:	e01b      	b.n	8009ee8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	885b      	ldrh	r3, [r3, #2]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10e      	bne.n	8009ed6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00b      	beq.n	8009ed6 <USBD_StdEPReq+0xc0>
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	d008      	beq.n	8009ed6 <USBD_StdEPReq+0xc0>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	88db      	ldrh	r3, [r3, #6]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d104      	bne.n	8009ed6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f905 	bl	800b0e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fd23 	bl	800a922 <USBD_CtlSendStatus>

              break;
 8009edc:	e004      	b.n	8009ee8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fc53 	bl	800a78c <USBD_CtlError>
              break;
 8009ee6:	bf00      	nop
          }
          break;
 8009ee8:	e0ec      	b.n	800a0c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d002      	beq.n	8009efc <USBD_StdEPReq+0xe6>
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d016      	beq.n	8009f28 <USBD_StdEPReq+0x112>
 8009efa:	e030      	b.n	8009f5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00d      	beq.n	8009f1e <USBD_StdEPReq+0x108>
 8009f02:	7bbb      	ldrb	r3, [r7, #14]
 8009f04:	2b80      	cmp	r3, #128	; 0x80
 8009f06:	d00a      	beq.n	8009f1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 f8e7 	bl	800b0e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f12:	2180      	movs	r1, #128	; 0x80
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 f8e3 	bl	800b0e0 <USBD_LL_StallEP>
 8009f1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f1c:	e025      	b.n	8009f6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fc33 	bl	800a78c <USBD_CtlError>
              break;
 8009f26:	e020      	b.n	8009f6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	885b      	ldrh	r3, [r3, #2]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d11b      	bne.n	8009f68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d004      	beq.n	8009f44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 f8ed 	bl	800b11e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fcec 	bl	800a922 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	4798      	blx	r3
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f5c:	e004      	b.n	8009f68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fc13 	bl	800a78c <USBD_CtlError>
              break;
 8009f66:	e000      	b.n	8009f6a <USBD_StdEPReq+0x154>
              break;
 8009f68:	bf00      	nop
          }
          break;
 8009f6a:	e0ab      	b.n	800a0c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d002      	beq.n	8009f7e <USBD_StdEPReq+0x168>
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d032      	beq.n	8009fe2 <USBD_StdEPReq+0x1cc>
 8009f7c:	e097      	b.n	800a0ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <USBD_StdEPReq+0x17e>
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
 8009f86:	2b80      	cmp	r3, #128	; 0x80
 8009f88:	d004      	beq.n	8009f94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fbfd 	bl	800a78c <USBD_CtlError>
                break;
 8009f92:	e091      	b.n	800a0b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	da0b      	bge.n	8009fb4 <USBD_StdEPReq+0x19e>
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	3310      	adds	r3, #16
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4413      	add	r3, r2
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	e00b      	b.n	8009fcc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fba:	4613      	mov	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	4413      	add	r3, r2
 8009fca:	3304      	adds	r3, #4
 8009fcc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fc47 	bl	800a86e <USBD_CtlSendData>
              break;
 8009fe0:	e06a      	b.n	800a0b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da11      	bge.n	800a00e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	f003 020f 	and.w	r2, r3, #15
 8009ff0:	6879      	ldr	r1, [r7, #4]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	440b      	add	r3, r1
 8009ffc:	3324      	adds	r3, #36	; 0x24
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d117      	bne.n	800a034 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fbc0 	bl	800a78c <USBD_CtlError>
                  break;
 800a00c:	e054      	b.n	800a0b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	f003 020f 	and.w	r2, r3, #15
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	440b      	add	r3, r1
 800a020:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fbad 	bl	800a78c <USBD_CtlError>
                  break;
 800a032:	e041      	b.n	800a0b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da0b      	bge.n	800a054 <USBD_StdEPReq+0x23e>
 800a03c:	7bbb      	ldrb	r3, [r7, #14]
 800a03e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a042:	4613      	mov	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	3310      	adds	r3, #16
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	4413      	add	r3, r2
 800a050:	3304      	adds	r3, #4
 800a052:	e00b      	b.n	800a06c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a054:	7bbb      	ldrb	r3, [r7, #14]
 800a056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4413      	add	r3, r2
 800a06a:	3304      	adds	r3, #4
 800a06c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <USBD_StdEPReq+0x264>
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	2b80      	cmp	r3, #128	; 0x80
 800a078:	d103      	bne.n	800a082 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	e00e      	b.n	800a0a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f001 f868 	bl	800b15c <USBD_LL_IsStallEP>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2201      	movs	r2, #1
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	e002      	b.n	800a0a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fbe1 	bl	800a86e <USBD_CtlSendData>
              break;
 800a0ac:	e004      	b.n	800a0b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fb6b 	bl	800a78c <USBD_CtlError>
              break;
 800a0b6:	bf00      	nop
          }
          break;
 800a0b8:	e004      	b.n	800a0c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fb65 	bl	800a78c <USBD_CtlError>
          break;
 800a0c2:	bf00      	nop
      }
      break;
 800a0c4:	e004      	b.n	800a0d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fb5f 	bl	800a78c <USBD_CtlError>
      break;
 800a0ce:	bf00      	nop
  }

  return ret;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	885b      	ldrh	r3, [r3, #2]
 800a0f6:	0a1b      	lsrs	r3, r3, #8
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	2b0e      	cmp	r3, #14
 800a0fe:	f200 8152 	bhi.w	800a3a6 <USBD_GetDescriptor+0x2ca>
 800a102:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <USBD_GetDescriptor+0x2c>)
 800a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a108:	0800a179 	.word	0x0800a179
 800a10c:	0800a191 	.word	0x0800a191
 800a110:	0800a1d1 	.word	0x0800a1d1
 800a114:	0800a3a7 	.word	0x0800a3a7
 800a118:	0800a3a7 	.word	0x0800a3a7
 800a11c:	0800a347 	.word	0x0800a347
 800a120:	0800a373 	.word	0x0800a373
 800a124:	0800a3a7 	.word	0x0800a3a7
 800a128:	0800a3a7 	.word	0x0800a3a7
 800a12c:	0800a3a7 	.word	0x0800a3a7
 800a130:	0800a3a7 	.word	0x0800a3a7
 800a134:	0800a3a7 	.word	0x0800a3a7
 800a138:	0800a3a7 	.word	0x0800a3a7
 800a13c:	0800a3a7 	.word	0x0800a3a7
 800a140:	0800a145 	.word	0x0800a145
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	7c12      	ldrb	r2, [r2, #16]
 800a15c:	f107 0108 	add.w	r1, r7, #8
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
 800a164:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a166:	e126      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fb0e 	bl	800a78c <USBD_CtlError>
        err++;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	3301      	adds	r3, #1
 800a174:	72fb      	strb	r3, [r7, #11]
      break;
 800a176:	e11e      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	7c12      	ldrb	r2, [r2, #16]
 800a184:	f107 0108 	add.w	r1, r7, #8
 800a188:	4610      	mov	r0, r2
 800a18a:	4798      	blx	r3
 800a18c:	60f8      	str	r0, [r7, #12]
      break;
 800a18e:	e112      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7c1b      	ldrb	r3, [r3, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10d      	bne.n	800a1b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a0:	f107 0208 	add.w	r2, r7, #8
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4798      	blx	r3
 800a1a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1b2:	e100      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	f107 0208 	add.w	r2, r7, #8
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
 800a1c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	701a      	strb	r2, [r3, #0]
      break;
 800a1ce:	e0f2      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	885b      	ldrh	r3, [r3, #2]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	f200 80ac 	bhi.w	800a334 <USBD_GetDescriptor+0x258>
 800a1dc:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <USBD_GetDescriptor+0x108>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800a1fd 	.word	0x0800a1fd
 800a1e8:	0800a231 	.word	0x0800a231
 800a1ec:	0800a265 	.word	0x0800a265
 800a1f0:	0800a299 	.word	0x0800a299
 800a1f4:	0800a2cd 	.word	0x0800a2cd
 800a1f8:	0800a301 	.word	0x0800a301
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7c12      	ldrb	r2, [r2, #16]
 800a214:	f107 0108 	add.w	r1, r7, #8
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21e:	e091      	b.n	800a344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fab2 	bl	800a78c <USBD_CtlError>
            err++;
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	3301      	adds	r3, #1
 800a22c:	72fb      	strb	r3, [r7, #11]
          break;
 800a22e:	e089      	b.n	800a344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	7c12      	ldrb	r2, [r2, #16]
 800a248:	f107 0108 	add.w	r1, r7, #8
 800a24c:	4610      	mov	r0, r2
 800a24e:	4798      	blx	r3
 800a250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a252:	e077      	b.n	800a344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa98 	bl	800a78c <USBD_CtlError>
            err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
          break;
 800a262:	e06f      	b.n	800a344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	7c12      	ldrb	r2, [r2, #16]
 800a27c:	f107 0108 	add.w	r1, r7, #8
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a286:	e05d      	b.n	800a344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa7e 	bl	800a78c <USBD_CtlError>
            err++;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	3301      	adds	r3, #1
 800a294:	72fb      	strb	r3, [r7, #11]
          break;
 800a296:	e055      	b.n	800a344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	7c12      	ldrb	r2, [r2, #16]
 800a2b0:	f107 0108 	add.w	r1, r7, #8
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ba:	e043      	b.n	800a344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa64 	bl	800a78c <USBD_CtlError>
            err++;
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ca:	e03b      	b.n	800a344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7c12      	ldrb	r2, [r2, #16]
 800a2e4:	f107 0108 	add.w	r1, r7, #8
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ee:	e029      	b.n	800a344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa4a 	bl	800a78c <USBD_CtlError>
            err++;
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2fe:	e021      	b.n	800a344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00b      	beq.n	800a324 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	7c12      	ldrb	r2, [r2, #16]
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a322:	e00f      	b.n	800a344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa30 	bl	800a78c <USBD_CtlError>
            err++;
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	3301      	adds	r3, #1
 800a330:	72fb      	strb	r3, [r7, #11]
          break;
 800a332:	e007      	b.n	800a344 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa28 	bl	800a78c <USBD_CtlError>
          err++;
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	3301      	adds	r3, #1
 800a340:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a342:	bf00      	nop
      }
      break;
 800a344:	e037      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	7c1b      	ldrb	r3, [r3, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d109      	bne.n	800a362 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a356:	f107 0208 	add.w	r2, r7, #8
 800a35a:	4610      	mov	r0, r2
 800a35c:	4798      	blx	r3
 800a35e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a360:	e029      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fa11 	bl	800a78c <USBD_CtlError>
        err++;
 800a36a:	7afb      	ldrb	r3, [r7, #11]
 800a36c:	3301      	adds	r3, #1
 800a36e:	72fb      	strb	r3, [r7, #11]
      break;
 800a370:	e021      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	7c1b      	ldrb	r3, [r3, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10d      	bne.n	800a396 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	f107 0208 	add.w	r2, r7, #8
 800a386:	4610      	mov	r0, r2
 800a388:	4798      	blx	r3
 800a38a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3301      	adds	r3, #1
 800a390:	2207      	movs	r2, #7
 800a392:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a394:	e00f      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f9f7 	bl	800a78c <USBD_CtlError>
        err++;
 800a39e:	7afb      	ldrb	r3, [r7, #11]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3a4:	e007      	b.n	800a3b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f9ef 	bl	800a78c <USBD_CtlError>
      err++;
 800a3ae:	7afb      	ldrb	r3, [r7, #11]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b4:	bf00      	nop
  }

  if (err != 0U)
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d11e      	bne.n	800a3fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	88db      	ldrh	r3, [r3, #6]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d016      	beq.n	800a3f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3c4:	893b      	ldrh	r3, [r7, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00e      	beq.n	800a3e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	88da      	ldrh	r2, [r3, #6]
 800a3ce:	893b      	ldrh	r3, [r7, #8]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bf28      	it	cs
 800a3d4:	4613      	movcs	r3, r2
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3da:	893b      	ldrh	r3, [r7, #8]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68f9      	ldr	r1, [r7, #12]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fa44 	bl	800a86e <USBD_CtlSendData>
 800a3e6:	e009      	b.n	800a3fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f9ce 	bl	800a78c <USBD_CtlError>
 800a3f0:	e004      	b.n	800a3fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fa95 	bl	800a922 <USBD_CtlSendStatus>
 800a3f8:	e000      	b.n	800a3fc <USBD_GetDescriptor+0x320>
    return;
 800a3fa:	bf00      	nop
  }
}
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop

0800a404 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	889b      	ldrh	r3, [r3, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d131      	bne.n	800a47a <USBD_SetAddress+0x76>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	88db      	ldrh	r3, [r3, #6]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d12d      	bne.n	800a47a <USBD_SetAddress+0x76>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	2b7f      	cmp	r3, #127	; 0x7f
 800a424:	d829      	bhi.n	800a47a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	885b      	ldrh	r3, [r3, #2]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a430:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d104      	bne.n	800a448 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f9a3 	bl	800a78c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a446:	e01d      	b.n	800a484 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	7bfa      	ldrb	r2, [r7, #15]
 800a44c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 feae 	bl	800b1b6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa61 	bl	800a922 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d004      	beq.n	800a470 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2202      	movs	r2, #2
 800a46a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46e:	e009      	b.n	800a484 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a478:	e004      	b.n	800a484 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a47a:	6839      	ldr	r1, [r7, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f985 	bl	800a78c <USBD_CtlError>
  }
}
 800a482:	bf00      	nop
 800a484:	bf00      	nop
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	885b      	ldrh	r3, [r3, #2]
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	4b4c      	ldr	r3, [pc, #304]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a4a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4a4:	4b4b      	ldr	r3, [pc, #300]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d905      	bls.n	800a4b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f96c 	bl	800a78c <USBD_CtlError>
    return USBD_FAIL;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e088      	b.n	800a5ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d002      	beq.n	800a4ca <USBD_SetConfig+0x3e>
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d025      	beq.n	800a514 <USBD_SetConfig+0x88>
 800a4c8:	e071      	b.n	800a5ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4ca:	4b42      	ldr	r3, [pc, #264]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d01c      	beq.n	800a50c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a4d2:	4b40      	ldr	r3, [pc, #256]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4dc:	4b3d      	ldr	r3, [pc, #244]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff f992 	bl	800980c <USBD_SetClassConfig>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d004      	beq.n	800a4fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f949 	bl	800a78c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4fa:	e065      	b.n	800a5c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fa10 	bl	800a922 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2203      	movs	r2, #3
 800a506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a50a:	e05d      	b.n	800a5c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fa08 	bl	800a922 <USBD_CtlSendStatus>
      break;
 800a512:	e059      	b.n	800a5c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a514:	4b2f      	ldr	r3, [pc, #188]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d112      	bne.n	800a542 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a524:	4b2b      	ldr	r3, [pc, #172]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a52e:	4b29      	ldr	r3, [pc, #164]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff f985 	bl	8009844 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f9f1 	bl	800a922 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a540:	e042      	b.n	800a5c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a542:	4b24      	ldr	r3, [pc, #144]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d02a      	beq.n	800a5a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff f973 	bl	8009844 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a55e:	4b1d      	ldr	r3, [pc, #116]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a568:	4b1a      	ldr	r3, [pc, #104]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff f94c 	bl	800980c <USBD_SetClassConfig>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00f      	beq.n	800a59e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f903 	bl	800a78c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7ff f958 	bl	8009844 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a59c:	e014      	b.n	800a5c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f9bf 	bl	800a922 <USBD_CtlSendStatus>
      break;
 800a5a4:	e010      	b.n	800a5c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f9bb 	bl	800a922 <USBD_CtlSendStatus>
      break;
 800a5ac:	e00c      	b.n	800a5c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f8eb 	bl	800a78c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5b6:	4b07      	ldr	r3, [pc, #28]	; (800a5d4 <USBD_SetConfig+0x148>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff f941 	bl	8009844 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c6:	bf00      	nop
  }

  return ret;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000228 	.word	0x20000228

0800a5d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	88db      	ldrh	r3, [r3, #6]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d004      	beq.n	800a5f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f8cd 	bl	800a78c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5f2:	e023      	b.n	800a63c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	dc02      	bgt.n	800a606 <USBD_GetConfig+0x2e>
 800a600:	2b00      	cmp	r3, #0
 800a602:	dc03      	bgt.n	800a60c <USBD_GetConfig+0x34>
 800a604:	e015      	b.n	800a632 <USBD_GetConfig+0x5a>
 800a606:	2b03      	cmp	r3, #3
 800a608:	d00b      	beq.n	800a622 <USBD_GetConfig+0x4a>
 800a60a:	e012      	b.n	800a632 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3308      	adds	r3, #8
 800a616:	2201      	movs	r2, #1
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f927 	bl	800a86e <USBD_CtlSendData>
        break;
 800a620:	e00c      	b.n	800a63c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3304      	adds	r3, #4
 800a626:	2201      	movs	r2, #1
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f91f 	bl	800a86e <USBD_CtlSendData>
        break;
 800a630:	e004      	b.n	800a63c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f8a9 	bl	800a78c <USBD_CtlError>
        break;
 800a63a:	bf00      	nop
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a654:	b2db      	uxtb	r3, r3
 800a656:	3b01      	subs	r3, #1
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d81e      	bhi.n	800a69a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	88db      	ldrh	r3, [r3, #6]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d004      	beq.n	800a66e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f890 	bl	800a78c <USBD_CtlError>
        break;
 800a66c:	e01a      	b.n	800a6a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f043 0202 	orr.w	r2, r3, #2
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	330c      	adds	r3, #12
 800a68e:	2202      	movs	r2, #2
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f8eb 	bl	800a86e <USBD_CtlSendData>
      break;
 800a698:	e004      	b.n	800a6a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f875 	bl	800a78c <USBD_CtlError>
      break;
 800a6a2:	bf00      	nop
  }
}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	885b      	ldrh	r3, [r3, #2]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d106      	bne.n	800a6cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f92b 	bl	800a922 <USBD_CtlSendStatus>
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d80b      	bhi.n	800a704 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	885b      	ldrh	r3, [r3, #2]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d10c      	bne.n	800a70e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f910 	bl	800a922 <USBD_CtlSendStatus>
      }
      break;
 800a702:	e004      	b.n	800a70e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f840 	bl	800a78c <USBD_CtlError>
      break;
 800a70c:	e000      	b.n	800a710 <USBD_ClrFeature+0x3c>
      break;
 800a70e:	bf00      	nop
  }
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	781a      	ldrb	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	3301      	adds	r3, #1
 800a732:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	781a      	ldrb	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3301      	adds	r3, #1
 800a740:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7ff fa92 	bl	8009c6c <SWAPBYTE>
 800a748:	4603      	mov	r3, r0
 800a74a:	461a      	mov	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	3301      	adds	r3, #1
 800a754:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7ff fa85 	bl	8009c6c <SWAPBYTE>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3301      	adds	r3, #1
 800a76e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3301      	adds	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff fa78 	bl	8009c6c <SWAPBYTE>
 800a77c:	4603      	mov	r3, r0
 800a77e:	461a      	mov	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	80da      	strh	r2, [r3, #6]
}
 800a784:	bf00      	nop
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a796:	2180      	movs	r1, #128	; 0x80
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fca1 	bl	800b0e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a79e:	2100      	movs	r1, #0
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fc9d 	bl	800b0e0 <USBD_LL_StallEP>
}
 800a7a6:	bf00      	nop
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d036      	beq.n	800a832 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7c8:	6938      	ldr	r0, [r7, #16]
 800a7ca:	f000 f836 	bl	800a83a <USBD_GetLen>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	7812      	ldrb	r2, [r2, #0]
 800a7e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7e8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7fe:	e013      	b.n	800a828 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	4413      	add	r3, r2
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	7812      	ldrb	r2, [r2, #0]
 800a80a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	3301      	adds	r3, #1
 800a810:	613b      	str	r3, [r7, #16]
    idx++;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	3301      	adds	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a818:	7dfb      	ldrb	r3, [r7, #23]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	4413      	add	r3, r2
 800a81e:	2200      	movs	r2, #0
 800a820:	701a      	strb	r2, [r3, #0]
    idx++;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	3301      	adds	r3, #1
 800a826:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e7      	bne.n	800a800 <USBD_GetString+0x52>
 800a830:	e000      	b.n	800a834 <USBD_GetString+0x86>
    return;
 800a832:	bf00      	nop
  }
}
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b085      	sub	sp, #20
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a84a:	e005      	b.n	800a858 <USBD_GetLen+0x1e>
  {
    len++;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	3301      	adds	r3, #1
 800a850:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	3301      	adds	r3, #1
 800a856:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f5      	bne.n	800a84c <USBD_GetLen+0x12>
  }

  return len;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	60b9      	str	r1, [r7, #8]
 800a878:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2202      	movs	r2, #2
 800a87e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	2100      	movs	r1, #0
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 fcad 	bl	800b1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 fc9c 	bl	800b1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2203      	movs	r2, #3
 800a8d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fca0 	bl	800b236 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	2100      	movs	r1, #0
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 fc8f 	bl	800b236 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b082      	sub	sp, #8
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2204      	movs	r2, #4
 800a92e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a932:	2300      	movs	r3, #0
 800a934:	2200      	movs	r2, #0
 800a936:	2100      	movs	r1, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fc5b 	bl	800b1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2205      	movs	r2, #5
 800a954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a958:	2300      	movs	r3, #0
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fc69 	bl	800b236 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a974:	2200      	movs	r2, #0
 800a976:	4912      	ldr	r1, [pc, #72]	; (800a9c0 <MX_USB_Device_Init+0x50>)
 800a978:	4812      	ldr	r0, [pc, #72]	; (800a9c4 <MX_USB_Device_Init+0x54>)
 800a97a:	f7fe fed9 	bl	8009730 <USBD_Init>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a984:	f7f7 f9ee 	bl	8001d64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a988:	490f      	ldr	r1, [pc, #60]	; (800a9c8 <MX_USB_Device_Init+0x58>)
 800a98a:	480e      	ldr	r0, [pc, #56]	; (800a9c4 <MX_USB_Device_Init+0x54>)
 800a98c:	f7fe ff00 	bl	8009790 <USBD_RegisterClass>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a996:	f7f7 f9e5 	bl	8001d64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a99a:	490c      	ldr	r1, [pc, #48]	; (800a9cc <MX_USB_Device_Init+0x5c>)
 800a99c:	4809      	ldr	r0, [pc, #36]	; (800a9c4 <MX_USB_Device_Init+0x54>)
 800a99e:	f7fe fe21 	bl	80095e4 <USBD_CDC_RegisterInterface>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a9a8:	f7f7 f9dc 	bl	8001d64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9ac:	4805      	ldr	r0, [pc, #20]	; (800a9c4 <MX_USB_Device_Init+0x54>)
 800a9ae:	f7fe ff16 	bl	80097de <USBD_Start>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a9b8:	f7f7 f9d4 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a9bc:	bf00      	nop
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	2000014c 	.word	0x2000014c
 800a9c4:	20000748 	.word	0x20000748
 800a9c8:	20000034 	.word	0x20000034
 800a9cc:	20000138 	.word	0x20000138

0800a9d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4905      	ldr	r1, [pc, #20]	; (800a9ec <CDC_Init_FS+0x1c>)
 800a9d8:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <CDC_Init_FS+0x20>)
 800a9da:	f7fe fe18 	bl	800960e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9de:	4905      	ldr	r1, [pc, #20]	; (800a9f4 <CDC_Init_FS+0x24>)
 800a9e0:	4803      	ldr	r0, [pc, #12]	; (800a9f0 <CDC_Init_FS+0x20>)
 800a9e2:	f7fe fe32 	bl	800964a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20000e00 	.word	0x20000e00
 800a9f0:	20000748 	.word	0x20000748
 800a9f4:	20000a18 	.word	0x20000a18

0800a9f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	6039      	str	r1, [r7, #0]
 800aa12:	71fb      	strb	r3, [r7, #7]
 800aa14:	4613      	mov	r3, r2
 800aa16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	2b23      	cmp	r3, #35	; 0x23
 800aa1c:	d84a      	bhi.n	800aab4 <CDC_Control_FS+0xac>
 800aa1e:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <CDC_Control_FS+0x1c>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aab5 	.word	0x0800aab5
 800aa28:	0800aab5 	.word	0x0800aab5
 800aa2c:	0800aab5 	.word	0x0800aab5
 800aa30:	0800aab5 	.word	0x0800aab5
 800aa34:	0800aab5 	.word	0x0800aab5
 800aa38:	0800aab5 	.word	0x0800aab5
 800aa3c:	0800aab5 	.word	0x0800aab5
 800aa40:	0800aab5 	.word	0x0800aab5
 800aa44:	0800aab5 	.word	0x0800aab5
 800aa48:	0800aab5 	.word	0x0800aab5
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aab5 	.word	0x0800aab5
 800aa54:	0800aab5 	.word	0x0800aab5
 800aa58:	0800aab5 	.word	0x0800aab5
 800aa5c:	0800aab5 	.word	0x0800aab5
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800aab5 	.word	0x0800aab5
 800aa6c:	0800aab5 	.word	0x0800aab5
 800aa70:	0800aab5 	.word	0x0800aab5
 800aa74:	0800aab5 	.word	0x0800aab5
 800aa78:	0800aab5 	.word	0x0800aab5
 800aa7c:	0800aab5 	.word	0x0800aab5
 800aa80:	0800aab5 	.word	0x0800aab5
 800aa84:	0800aab5 	.word	0x0800aab5
 800aa88:	0800aab5 	.word	0x0800aab5
 800aa8c:	0800aab5 	.word	0x0800aab5
 800aa90:	0800aab5 	.word	0x0800aab5
 800aa94:	0800aab5 	.word	0x0800aab5
 800aa98:	0800aab5 	.word	0x0800aab5
 800aa9c:	0800aab5 	.word	0x0800aab5
 800aaa0:	0800aab5 	.word	0x0800aab5
 800aaa4:	0800aab5 	.word	0x0800aab5
 800aaa8:	0800aab5 	.word	0x0800aab5
 800aaac:	0800aab5 	.word	0x0800aab5
 800aab0:	0800aab5 	.word	0x0800aab5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aab4:	bf00      	nop
  }

  return (USBD_OK);
 800aab6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7f6 f81f 	bl	8000b14 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <CDC_Receive_FS+0x2c>)
 800aada:	f7fe fdb6 	bl	800964a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aade:	4804      	ldr	r0, [pc, #16]	; (800aaf0 <CDC_Receive_FS+0x2c>)
 800aae0:	f7fe fdfc 	bl	80096dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aae4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20000748 	.word	0x20000748

0800aaf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab04:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <CDC_Transmit_FS+0x48>)
 800ab06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e00b      	b.n	800ab32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab1a:	887b      	ldrh	r3, [r7, #2]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	4806      	ldr	r0, [pc, #24]	; (800ab3c <CDC_Transmit_FS+0x48>)
 800ab22:	f7fe fd74 	bl	800960e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab26:	4805      	ldr	r0, [pc, #20]	; (800ab3c <CDC_Transmit_FS+0x48>)
 800ab28:	f7fe fda8 	bl	800967c <USBD_CDC_TransmitPacket>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000748 	.word	0x20000748

0800ab40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
	...

0800ab64 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2212      	movs	r2, #18
 800ab74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ab76:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	2000016c 	.word	0x2000016c

0800ab88 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2204      	movs	r2, #4
 800ab98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab9a:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	20000180 	.word	0x20000180

0800abac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d105      	bne.n	800abca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	4907      	ldr	r1, [pc, #28]	; (800abe0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abc2:	4808      	ldr	r0, [pc, #32]	; (800abe4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abc4:	f7ff fdf3 	bl	800a7ae <USBD_GetString>
 800abc8:	e004      	b.n	800abd4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4904      	ldr	r1, [pc, #16]	; (800abe0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abce:	4805      	ldr	r0, [pc, #20]	; (800abe4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abd0:	f7ff fded 	bl	800a7ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	200011e8 	.word	0x200011e8
 800abe4:	0800b42c 	.word	0x0800b42c

0800abe8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	4904      	ldr	r1, [pc, #16]	; (800ac08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800abf8:	4804      	ldr	r0, [pc, #16]	; (800ac0c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800abfa:	f7ff fdd8 	bl	800a7ae <USBD_GetString>
  return USBD_StrDesc;
 800abfe:	4b02      	ldr	r3, [pc, #8]	; (800ac08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	200011e8 	.word	0x200011e8
 800ac0c:	0800b444 	.word	0x0800b444

0800ac10 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	221a      	movs	r2, #26
 800ac20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac22:	f000 f843 	bl	800acac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac26:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20000184 	.word	0x20000184

0800ac34 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d105      	bne.n	800ac52 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	4907      	ldr	r1, [pc, #28]	; (800ac68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac4a:	4808      	ldr	r0, [pc, #32]	; (800ac6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac4c:	f7ff fdaf 	bl	800a7ae <USBD_GetString>
 800ac50:	e004      	b.n	800ac5c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	4904      	ldr	r1, [pc, #16]	; (800ac68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac56:	4805      	ldr	r0, [pc, #20]	; (800ac6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac58:	f7ff fda9 	bl	800a7ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac5c:	4b02      	ldr	r3, [pc, #8]	; (800ac68 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200011e8 	.word	0x200011e8
 800ac6c:	0800b458 	.word	0x0800b458

0800ac70 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	6039      	str	r1, [r7, #0]
 800ac7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d105      	bne.n	800ac8e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	4907      	ldr	r1, [pc, #28]	; (800aca4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac86:	4808      	ldr	r0, [pc, #32]	; (800aca8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac88:	f7ff fd91 	bl	800a7ae <USBD_GetString>
 800ac8c:	e004      	b.n	800ac98 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	4904      	ldr	r1, [pc, #16]	; (800aca4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac92:	4805      	ldr	r0, [pc, #20]	; (800aca8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac94:	f7ff fd8b 	bl	800a7ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac98:	4b02      	ldr	r3, [pc, #8]	; (800aca4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	200011e8 	.word	0x200011e8
 800aca8:	0800b464 	.word	0x0800b464

0800acac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acb2:	4b0f      	ldr	r3, [pc, #60]	; (800acf0 <Get_SerialNum+0x44>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acb8:	4b0e      	ldr	r3, [pc, #56]	; (800acf4 <Get_SerialNum+0x48>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acbe:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <Get_SerialNum+0x4c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4413      	add	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d009      	beq.n	800ace6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acd2:	2208      	movs	r2, #8
 800acd4:	4909      	ldr	r1, [pc, #36]	; (800acfc <Get_SerialNum+0x50>)
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f814 	bl	800ad04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acdc:	2204      	movs	r2, #4
 800acde:	4908      	ldr	r1, [pc, #32]	; (800ad00 <Get_SerialNum+0x54>)
 800ace0:	68b8      	ldr	r0, [r7, #8]
 800ace2:	f000 f80f 	bl	800ad04 <IntToUnicode>
  }
}
 800ace6:	bf00      	nop
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	1fff7590 	.word	0x1fff7590
 800acf4:	1fff7594 	.word	0x1fff7594
 800acf8:	1fff7598 	.word	0x1fff7598
 800acfc:	20000186 	.word	0x20000186
 800ad00:	20000196 	.word	0x20000196

0800ad04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad16:	2300      	movs	r3, #0
 800ad18:	75fb      	strb	r3, [r7, #23]
 800ad1a:	e027      	b.n	800ad6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	0f1b      	lsrs	r3, r3, #28
 800ad20:	2b09      	cmp	r3, #9
 800ad22:	d80b      	bhi.n	800ad3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	0f1b      	lsrs	r3, r3, #28
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	440b      	add	r3, r1
 800ad34:	3230      	adds	r2, #48	; 0x30
 800ad36:	b2d2      	uxtb	r2, r2
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	e00a      	b.n	800ad52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	0f1b      	lsrs	r3, r3, #28
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	4619      	mov	r1, r3
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	440b      	add	r3, r1
 800ad4c:	3237      	adds	r2, #55	; 0x37
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	011b      	lsls	r3, r3, #4
 800ad56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	4413      	add	r3, r2
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	75fb      	strb	r3, [r7, #23]
 800ad6c:	7dfa      	ldrb	r2, [r7, #23]
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d3d3      	bcc.n	800ad1c <IntToUnicode+0x18>
  }
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop
 800ad78:	371c      	adds	r7, #28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
	...

0800ad84 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b094      	sub	sp, #80	; 0x50
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ad8c:	f107 030c 	add.w	r3, r7, #12
 800ad90:	2244      	movs	r2, #68	; 0x44
 800ad92:	2100      	movs	r1, #0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 fb35 	bl	800b404 <memset>
  if(pcdHandle->Instance==USB)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a19      	ldr	r2, [pc, #100]	; (800ae04 <HAL_PCD_MspInit+0x80>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d12b      	bne.n	800adfc <HAL_PCD_MspInit+0x78>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ada4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ada8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800adaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800adb0:	f107 030c 	add.w	r3, r7, #12
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fa fa83 	bl	80052c0 <HAL_RCCEx_PeriphCLKConfig>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800adc0:	f7f6 ffd0 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800adc4:	4b10      	ldr	r3, [pc, #64]	; (800ae08 <HAL_PCD_MspInit+0x84>)
 800adc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc8:	4a0f      	ldr	r2, [pc, #60]	; (800ae08 <HAL_PCD_MspInit+0x84>)
 800adca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800adce:	6593      	str	r3, [r2, #88]	; 0x58
 800add0:	4b0d      	ldr	r3, [pc, #52]	; (800ae08 <HAL_PCD_MspInit+0x84>)
 800add2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800add8:	60bb      	str	r3, [r7, #8]
 800adda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800addc:	2200      	movs	r2, #0
 800adde:	2100      	movs	r1, #0
 800ade0:	2013      	movs	r0, #19
 800ade2:	f7f7 fc7c 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800ade6:	2013      	movs	r0, #19
 800ade8:	f7f7 fc93 	bl	8002712 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800adec:	2200      	movs	r2, #0
 800adee:	2100      	movs	r1, #0
 800adf0:	2014      	movs	r0, #20
 800adf2:	f7f7 fc74 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800adf6:	2014      	movs	r0, #20
 800adf8:	f7f7 fc8b 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800adfc:	bf00      	nop
 800adfe:	3750      	adds	r7, #80	; 0x50
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	40005c00 	.word	0x40005c00
 800ae08:	40021000 	.word	0x40021000

0800ae0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae20:	4619      	mov	r1, r3
 800ae22:	4610      	mov	r0, r2
 800ae24:	f7fe fd26 	bl	8009874 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae42:	78fa      	ldrb	r2, [r7, #3]
 800ae44:	6879      	ldr	r1, [r7, #4]
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	440b      	add	r3, r1
 800ae50:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	78fb      	ldrb	r3, [r7, #3]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f7fe fd60 	bl	800991e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae5e:	bf00      	nop
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae78:	78fa      	ldrb	r2, [r7, #3]
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	440b      	add	r3, r1
 800ae86:	333c      	adds	r3, #60	; 0x3c
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	78fb      	ldrb	r3, [r7, #3]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f7fe fda9 	bl	80099e4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ae92:	bf00      	nop
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe febd 	bl	8009c28 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aeae:	bf00      	nop
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aebe:	2301      	movs	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d001      	beq.n	800aece <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aeca:	f7f6 ff4b 	bl	8001d64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aed4:	7bfa      	ldrb	r2, [r7, #15]
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe fe67 	bl	8009bac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fe fe13 	bl	8009b10 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800aeea:	bf00      	nop
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af02:	4618      	mov	r0, r3
 800af04:	f7fe fe62 	bl	8009bcc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d005      	beq.n	800af1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af10:	4b04      	ldr	r3, [pc, #16]	; (800af24 <HAL_PCD_SuspendCallback+0x30>)
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	4a03      	ldr	r2, [pc, #12]	; (800af24 <HAL_PCD_SuspendCallback+0x30>)
 800af16:	f043 0306 	orr.w	r3, r3, #6
 800af1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	e000ed00 	.word	0xe000ed00

0800af28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d007      	beq.n	800af48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af38:	4b08      	ldr	r3, [pc, #32]	; (800af5c <HAL_PCD_ResumeCallback+0x34>)
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	4a07      	ldr	r2, [pc, #28]	; (800af5c <HAL_PCD_ResumeCallback+0x34>)
 800af3e:	f023 0306 	bic.w	r3, r3, #6
 800af42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af44:	f000 f9fa 	bl	800b33c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe fe52 	bl	8009bf8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	e000ed00 	.word	0xe000ed00

0800af60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800af68:	4a2b      	ldr	r2, [pc, #172]	; (800b018 <USBD_LL_Init+0xb8>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a29      	ldr	r2, [pc, #164]	; (800b018 <USBD_LL_Init+0xb8>)
 800af74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800af78:	4b27      	ldr	r3, [pc, #156]	; (800b018 <USBD_LL_Init+0xb8>)
 800af7a:	4a28      	ldr	r2, [pc, #160]	; (800b01c <USBD_LL_Init+0xbc>)
 800af7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af7e:	4b26      	ldr	r3, [pc, #152]	; (800b018 <USBD_LL_Init+0xb8>)
 800af80:	2208      	movs	r2, #8
 800af82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af84:	4b24      	ldr	r3, [pc, #144]	; (800b018 <USBD_LL_Init+0xb8>)
 800af86:	2202      	movs	r2, #2
 800af88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af8a:	4b23      	ldr	r3, [pc, #140]	; (800b018 <USBD_LL_Init+0xb8>)
 800af8c:	2202      	movs	r2, #2
 800af8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800af90:	4b21      	ldr	r3, [pc, #132]	; (800b018 <USBD_LL_Init+0xb8>)
 800af92:	2200      	movs	r2, #0
 800af94:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af96:	4b20      	ldr	r3, [pc, #128]	; (800b018 <USBD_LL_Init+0xb8>)
 800af98:	2200      	movs	r2, #0
 800af9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af9c:	4b1e      	ldr	r3, [pc, #120]	; (800b018 <USBD_LL_Init+0xb8>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afa2:	4b1d      	ldr	r3, [pc, #116]	; (800b018 <USBD_LL_Init+0xb8>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afa8:	481b      	ldr	r0, [pc, #108]	; (800b018 <USBD_LL_Init+0xb8>)
 800afaa:	f7f7 fea5 	bl	8002cf8 <HAL_PCD_Init>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800afb4:	f7f6 fed6 	bl	8001d64 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afbe:	2318      	movs	r3, #24
 800afc0:	2200      	movs	r2, #0
 800afc2:	2100      	movs	r1, #0
 800afc4:	f7f9 fb5e 	bl	8004684 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afce:	2358      	movs	r3, #88	; 0x58
 800afd0:	2200      	movs	r2, #0
 800afd2:	2180      	movs	r1, #128	; 0x80
 800afd4:	f7f9 fb56 	bl	8004684 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afde:	23c0      	movs	r3, #192	; 0xc0
 800afe0:	2200      	movs	r2, #0
 800afe2:	2181      	movs	r1, #129	; 0x81
 800afe4:	f7f9 fb4e 	bl	8004684 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aff2:	2200      	movs	r2, #0
 800aff4:	2101      	movs	r1, #1
 800aff6:	f7f9 fb45 	bl	8004684 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b000:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b004:	2200      	movs	r2, #0
 800b006:	2182      	movs	r1, #130	; 0x82
 800b008:	f7f9 fb3c 	bl	8004684 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	200013e8 	.word	0x200013e8
 800b01c:	40005c00 	.word	0x40005c00

0800b020 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b036:	4618      	mov	r0, r3
 800b038:	f7f7 ff43 	bl	8002ec2 <HAL_PCD_Start>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	4618      	mov	r0, r3
 800b044:	f000 f980 	bl	800b348 <USBD_Get_USB_Status>
 800b048:	4603      	mov	r3, r0
 800b04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	4608      	mov	r0, r1
 800b060:	4611      	mov	r1, r2
 800b062:	461a      	mov	r2, r3
 800b064:	4603      	mov	r3, r0
 800b066:	70fb      	strb	r3, [r7, #3]
 800b068:	460b      	mov	r3, r1
 800b06a:	70bb      	strb	r3, [r7, #2]
 800b06c:	4613      	mov	r3, r2
 800b06e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b07e:	78bb      	ldrb	r3, [r7, #2]
 800b080:	883a      	ldrh	r2, [r7, #0]
 800b082:	78f9      	ldrb	r1, [r7, #3]
 800b084:	f7f8 f88b 	bl	800319e <HAL_PCD_EP_Open>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f95a 	bl	800b348 <USBD_Get_USB_Status>
 800b094:	4603      	mov	r3, r0
 800b096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b098:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0bc:	78fa      	ldrb	r2, [r7, #3]
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7f8 f8d2 	bl	800326a <HAL_PCD_EP_Close>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 f93b 	bl	800b348 <USBD_Get_USB_Status>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0fa:	78fa      	ldrb	r2, [r7, #3]
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7f8 f993 	bl	800342a <HAL_PCD_EP_SetStall>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 f91c 	bl	800b348 <USBD_Get_USB_Status>
 800b110:	4603      	mov	r3, r0
 800b112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b114:	7bbb      	ldrb	r3, [r7, #14]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b138:	78fa      	ldrb	r2, [r7, #3]
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f8 f9c6 	bl	80034ce <HAL_PCD_EP_ClrStall>
 800b142:	4603      	mov	r3, r0
 800b144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f8fd 	bl	800b348 <USBD_Get_USB_Status>
 800b14e:	4603      	mov	r3, r0
 800b150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b152:	7bbb      	ldrb	r3, [r7, #14]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b16e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b174:	2b00      	cmp	r3, #0
 800b176:	da0c      	bge.n	800b192 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b178:	78fb      	ldrb	r3, [r7, #3]
 800b17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17e:	68f9      	ldr	r1, [r7, #12]
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	440b      	add	r3, r1
 800b18c:	3302      	adds	r3, #2
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	e00b      	b.n	800b1aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b192:	78fb      	ldrb	r3, [r7, #3]
 800b194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b198:	68f9      	ldr	r1, [r7, #12]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	00db      	lsls	r3, r3, #3
 800b1a2:	440b      	add	r3, r1
 800b1a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b1a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1d0:	78fa      	ldrb	r2, [r7, #3]
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7f7 ffbd 	bl	8003154 <HAL_PCD_SetAddress>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f8b1 	bl	800b348 <USBD_Get_USB_Status>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	607a      	str	r2, [r7, #4]
 800b1fe:	603b      	str	r3, [r7, #0]
 800b200:	460b      	mov	r3, r1
 800b202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b212:	7af9      	ldrb	r1, [r7, #11]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	f7f8 f8c4 	bl	80033a4 <HAL_PCD_EP_Transmit>
 800b21c:	4603      	mov	r3, r0
 800b21e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	4618      	mov	r0, r3
 800b224:	f000 f890 	bl	800b348 <USBD_Get_USB_Status>
 800b228:	4603      	mov	r3, r0
 800b22a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b22c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	460b      	mov	r3, r1
 800b244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b254:	7af9      	ldrb	r1, [r7, #11]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	f7f8 f84e 	bl	80032fa <HAL_PCD_EP_Receive>
 800b25e:	4603      	mov	r3, r0
 800b260:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 f86f 	bl	800b348 <USBD_Get_USB_Status>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b26e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b28a:	78fa      	ldrb	r2, [r7, #3]
 800b28c:	4611      	mov	r1, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f7f8 f870 	bl	8003374 <HAL_PCD_EP_GetRxCount>
 800b294:	4603      	mov	r3, r0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <HAL_PCDEx_LPM_Callback+0x18>
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d013      	beq.n	800b2de <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2b6:	e023      	b.n	800b300 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d007      	beq.n	800b2d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2c0:	f000 f83c 	bl	800b33c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2c4:	4b10      	ldr	r3, [pc, #64]	; (800b308 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	4a0f      	ldr	r2, [pc, #60]	; (800b308 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2ca:	f023 0306 	bic.w	r3, r3, #6
 800b2ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe fc8e 	bl	8009bf8 <USBD_LL_Resume>
    break;
 800b2dc:	e010      	b.n	800b300 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fc71 	bl	8009bcc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d005      	beq.n	800b2fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2f2:	4b05      	ldr	r3, [pc, #20]	; (800b308 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	4a04      	ldr	r2, [pc, #16]	; (800b308 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2f8:	f043 0306 	orr.w	r3, r3, #6
 800b2fc:	6113      	str	r3, [r2, #16]
    break;
 800b2fe:	bf00      	nop
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	e000ed00 	.word	0xe000ed00

0800b30c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b314:	4b03      	ldr	r3, [pc, #12]	; (800b324 <USBD_static_malloc+0x18>)
}
 800b316:	4618      	mov	r0, r3
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	2000022c 	.word	0x2000022c

0800b328 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]

}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b340:	f7f6 f836 	bl	80013b0 <SystemClock_Config>
}
 800b344:	bf00      	nop
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	2b03      	cmp	r3, #3
 800b35a:	d817      	bhi.n	800b38c <USBD_Get_USB_Status+0x44>
 800b35c:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <USBD_Get_USB_Status+0x1c>)
 800b35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b362:	bf00      	nop
 800b364:	0800b375 	.word	0x0800b375
 800b368:	0800b37b 	.word	0x0800b37b
 800b36c:	0800b381 	.word	0x0800b381
 800b370:	0800b387 	.word	0x0800b387
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
    break;
 800b378:	e00b      	b.n	800b392 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b37a:	2303      	movs	r3, #3
 800b37c:	73fb      	strb	r3, [r7, #15]
    break;
 800b37e:	e008      	b.n	800b392 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b380:	2301      	movs	r3, #1
 800b382:	73fb      	strb	r3, [r7, #15]
    break;
 800b384:	e005      	b.n	800b392 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b386:	2303      	movs	r3, #3
 800b388:	73fb      	strb	r3, [r7, #15]
    break;
 800b38a:	e002      	b.n	800b392 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b38c:	2303      	movs	r3, #3
 800b38e:	73fb      	strb	r3, [r7, #15]
    break;
 800b390:	bf00      	nop
  }
  return usb_status;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <__libc_init_array>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	4d0d      	ldr	r5, [pc, #52]	; (800b3d8 <__libc_init_array+0x38>)
 800b3a4:	4c0d      	ldr	r4, [pc, #52]	; (800b3dc <__libc_init_array+0x3c>)
 800b3a6:	1b64      	subs	r4, r4, r5
 800b3a8:	10a4      	asrs	r4, r4, #2
 800b3aa:	2600      	movs	r6, #0
 800b3ac:	42a6      	cmp	r6, r4
 800b3ae:	d109      	bne.n	800b3c4 <__libc_init_array+0x24>
 800b3b0:	4d0b      	ldr	r5, [pc, #44]	; (800b3e0 <__libc_init_array+0x40>)
 800b3b2:	4c0c      	ldr	r4, [pc, #48]	; (800b3e4 <__libc_init_array+0x44>)
 800b3b4:	f000 f82e 	bl	800b414 <_init>
 800b3b8:	1b64      	subs	r4, r4, r5
 800b3ba:	10a4      	asrs	r4, r4, #2
 800b3bc:	2600      	movs	r6, #0
 800b3be:	42a6      	cmp	r6, r4
 800b3c0:	d105      	bne.n	800b3ce <__libc_init_array+0x2e>
 800b3c2:	bd70      	pop	{r4, r5, r6, pc}
 800b3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c8:	4798      	blx	r3
 800b3ca:	3601      	adds	r6, #1
 800b3cc:	e7ee      	b.n	800b3ac <__libc_init_array+0xc>
 800b3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3d2:	4798      	blx	r3
 800b3d4:	3601      	adds	r6, #1
 800b3d6:	e7f2      	b.n	800b3be <__libc_init_array+0x1e>
 800b3d8:	0800b484 	.word	0x0800b484
 800b3dc:	0800b484 	.word	0x0800b484
 800b3e0:	0800b484 	.word	0x0800b484
 800b3e4:	0800b488 	.word	0x0800b488

0800b3e8 <memcpy>:
 800b3e8:	440a      	add	r2, r1
 800b3ea:	4291      	cmp	r1, r2
 800b3ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b3f0:	d100      	bne.n	800b3f4 <memcpy+0xc>
 800b3f2:	4770      	bx	lr
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3fe:	4291      	cmp	r1, r2
 800b400:	d1f9      	bne.n	800b3f6 <memcpy+0xe>
 800b402:	bd10      	pop	{r4, pc}

0800b404 <memset>:
 800b404:	4402      	add	r2, r0
 800b406:	4603      	mov	r3, r0
 800b408:	4293      	cmp	r3, r2
 800b40a:	d100      	bne.n	800b40e <memset+0xa>
 800b40c:	4770      	bx	lr
 800b40e:	f803 1b01 	strb.w	r1, [r3], #1
 800b412:	e7f9      	b.n	800b408 <memset+0x4>

0800b414 <_init>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	bf00      	nop
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr

0800b420 <_fini>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	bf00      	nop
 800b424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b426:	bc08      	pop	{r3}
 800b428:	469e      	mov	lr, r3
 800b42a:	4770      	bx	lr
